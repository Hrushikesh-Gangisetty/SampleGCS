{"snapshots":{"C:/Users/Hrushikesh/AndroidStudioProjects/aerogcsclone/app/src/main/AndroidManifest.xml":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/aerogcsclone/app/src/main/AndroidManifest.xml","baseContent":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\">\n\n    <application\n        android:allowBackup=\"true\"\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\n        android:fullBackupContent=\"@xml/backup_rules\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/Theme.Aerogcsclone\"\n        tools:targetApi=\"31\">\n        <activity\n            android:name=\".MainActivity\"\n            android:exported=\"true\"\n            android:label=\"@string/app_name\"\n            android:theme=\"@style/Theme.Aerogcsclone\"\n            android:screenOrientation=\"landscape\">\n\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n    </application>\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n\n</manifest>","baseTimestamp":1757064897211},"C:/Users/Hrushikesh/AndroidStudioProjects/aerogcsclone/app/build.gradle.kts":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/aerogcsclone/app/build.gradle.kts","baseContent":"plugins {\n    alias(libs.plugins.android.application)\n    alias(libs.plugins.kotlin.android)\n    alias(libs.plugins.kotlin.compose)\n}\n\nandroid {\n    namespace = \"com.example.aerogcsclone\"\n    compileSdk = 36\n\n    defaultConfig {\n        applicationId = \"com.example.aerogcsclone\"\n        minSdk = 26\n        targetSdk = 35\n        versionCode = 1\n        versionName = \"1.0\"\n\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\n    }\n\n    buildTypes {\n        release {\n            isMinifyEnabled = false\n            proguardFiles(\n                getDefaultProguardFile(\"proguard-android-optimize.txt\"),\n                \"proguard-rules.pro\"\n            )\n        }\n    }\n    compileOptions {\n        sourceCompatibility = JavaVersion.VERSION_11\n        targetCompatibility = JavaVersion.VERSION_11\n    }\n    kotlinOptions {\n        jvmTarget = \"11\"\n    }\n    buildFeatures {\n        compose = true\n    }\n}\ndependencies {\n    // Core + lifecycle\n    implementation(libs.androidx.core.ktx)\n    implementation(libs.androidx.lifecycle.runtime.ktx)\n    implementation(libs.androidx.activity.compose)\n\n    // Compose BOM (manages versions automatically)\n    implementation(platform(libs.androidx.compose.bom))\n\n    // Compose UI\n    implementation(libs.androidx.ui)\n    implementation(libs.androidx.ui.graphics)\n    implementation(libs.androidx.ui.tooling.preview)\n\n    // Material3 (only one source, from libs)\n    implementation(libs.androidx.material3)\n\n    // Navigation\n    implementation(\"androidx.navigation:navigation-compose:2.9.3\")\n\n    // Material Icons Extended (choose one approach â†’ using BOM-managed one)\n    implementation(\"androidx.compose.material:material-icons-extended\")\n\n    // Testing\n    testImplementation(libs.junit)\n    androidTestImplementation(libs.androidx.junit)\n    androidTestImplementation(libs.androidx.espresso.core)\n    androidTestImplementation(platform(libs.androidx.compose.bom))\n    androidTestImplementation(libs.androidx.ui.test.junit4)\n\n    debugImplementation(libs.androidx.ui.tooling)\n    debugImplementation(libs.androidx.ui.test.manifest)\n}\ndependencies {\n    // MAVLink message definitions (standard dialects like common.xml)\n    implementation(\"com.divpundir.mavlink:definitions:1.2.8\")\n\n\n    // TCP connection client\n    implementation(\"com.divpundir.mavlink:connection-tcp:1.2.8\")\n\n\n    // Coroutines adapter (recommended for Android)\n    implementation(\"com.divpundir.mavlink:adapter-coroutines:1.2.8\")\n}\n\n\n","baseTimestamp":1757064987165},"C:/Users/Hrushikesh/AndroidStudioProjects/aerogcsclone/app/src/main/java/com/example/aerogcsclone/Telemetry/TelemetryRepository.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/aerogcsclone/app/src/main/java/com/example/aerogcsclone/Telemetry/TelemetryRepository.kt","baseContent":"package com.example.aerogcsclone.Telemetry\n\nimport android.util.Log\nimport com.divpundir.mavlink.adapters.coroutines.asCoroutine\nimport com.divpundir.mavlink.adapters.coroutines.tryConnect\nimport com.divpundir.mavlink.adapters.coroutines.trySendUnsignedV2\nimport com.divpundir.mavlink.api.wrap\nimport com.divpundir.mavlink.connection.StreamState\nimport com.divpundir.mavlink.connection.tcp.TcpClientMavConnection\nimport com.divpundir.mavlink.definitions.common.*\nimport com.divpundir.mavlink.definitions.minimal.*\nimport com.example.kotlingcspractice.Telemetry.AppScope\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.flow.*\nimport kotlinx.coroutines.isActive\nimport kotlinx.coroutines.launch\n\nobject MavlinkTelemetryRepository {\n    private const val host: String = \"10.0.2.2\"\n    private const val port: Int = 5762\n    private val gcsSystemId: UByte = 200u\n    private val gcsComponentId: UByte = 1u\n    private val _state = MutableStateFlow(TelemetryState())\n    val state: StateFlow<TelemetryState> = _state.asStateFlow()\n\n    private var fcuSystemId: UByte = 0u\n    private var fcuComponentId: UByte = 0u\n\n    // Diagnostic info\n    private val _lastFailure = MutableStateFlow<Throwable?>(null)\n    val lastFailure: StateFlow<Throwable?> = _lastFailure.asStateFlow()\n\n    // Connection\n    private val connection = TcpClientMavConnection(host, port, CommonDialect).asCoroutine()\n\n    fun start() {\n        val scope = AppScope\n\n        suspend fun reconnect(scope: kotlinx.coroutines.CoroutineScope) {\n            while (scope.isActive) {\n                try {\n                    if (connection.tryConnect(scope)) {\n                        return // Exit on successful connection\n                    }\n                } catch (e: Exception) {\n                    Log.e(\"MavlinkRepo\", \"Connection attempt failed\", e)\n                    _lastFailure.value = e\n                }\n                delay(1000)\n            }\n        }\n\n        // Manage connection state + reconnects\n        scope.launch {\n            reconnect(this) // Initial connection attempt\n            connection.streamState.collect { st ->\n                when (st) {\n                    is StreamState.Active -> {\n                        if (!state.value.connected) {\n                            Log.i(\"MavlinkRepo\", \"Connection Active\")\n                            _state.update { it.copy(connected = true) }\n                        }\n                    }\n                    is StreamState.Inactive -> {\n                        if (state.value.connected) {\n                            Log.i(\"MavlinkRepo\", \"Connection Inactive, reconnecting...\")\n                            _state.update { it.copy(connected = false, fcuDetected = false) }\n                            reconnect(this)\n                        }\n                    }\n                }\n            }\n        }\n\n        // Send GCS heartbeat\n        scope.launch {\n            val heartbeat = Heartbeat(\n                type = MavType.GCS.wrap(),\n                autopilot = MavAutopilot.INVALID.wrap(),\n                baseMode = emptyList<MavModeFlag>().wrap(),\n                customMode = 0u,\n                mavlinkVersion = 3u\n            )\n            while (isActive) {\n                if (state.value.connected) {\n                    try {\n                        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, heartbeat)\n                    } catch (e: Exception) {\n                        Log.e(\"MavlinkRepo\", \"Failed to send heartbeat\", e)\n                        _lastFailure.value = e\n                    }\n                }\n                delay(1000)\n            }\n        }\n\n        // Shared message stream\n        val mavFrameStream = connection.mavFrame\n            .shareIn(scope, SharingStarted.Eagerly, replay = 0)\n\n        // Log raw messages\n        scope.launch {\n            mavFrameStream.collect {\n                Log.d(\"MavlinkRepo\", \"Frame: ${it.message.javaClass.simpleName} (sysId=${it.systemId}, compId=${it.componentId})\")\n            }\n        }\n\n        // Detect FCU\n        scope.launch {\n            mavFrameStream\n                .filter { it.message is Heartbeat && (it.message as Heartbeat).type != MavType.GCS.wrap() }\n                .collect {\n                    if (!state.value.fcuDetected) {\n                        fcuSystemId = it.systemId\n                        fcuComponentId = it.componentId\n                        Log.i(\"MavlinkRepo\", \"FCU detected sysId=$fcuSystemId compId=$fcuComponentId\")\n                        _state.update { it.copy(fcuDetected = true) }\n\n                        // Set message intervals\n                        launch {\n                            suspend fun setMessageRate(messageId: UInt, hz: Float) {\n                                val intervalUsec = if (hz <= 0f) 0f else (1_000_000f / hz)\n                                val cmd = CommandLong(\n                                    targetSystem = fcuSystemId,\n                                    targetComponent = fcuComponentId,\n                                    command = MavCmd.SET_MESSAGE_INTERVAL.wrap(),\n                                    confirmation = 0u,\n                                    param1 = messageId.toFloat(),\n                                    param2 = intervalUsec,\n                                    param3 = 0f,\n                                    param4 = 0f,\n                                    param5 = 0f,\n                                    param6 = 0f,\n                                    param7 = 0f\n                                )\n                                try {\n                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, cmd)\n                                } catch (e: Exception) {\n                                    Log.e(\"MavlinkRepo\", \"Failed to send SET_MESSAGE_INTERVAL\", e)\n                                    _lastFailure.value = e\n                                }\n                            }\n\n                            setMessageRate(1u, 1f)   // SYS_STATUS\n                            setMessageRate(24u, 1f)  // GPS_RAW_INT\n                            setMessageRate(33u, 5f)  // GLOBAL_POSITION_INT\n                            setMessageRate(74u, 5f)  // VFR_HUD\n                            setMessageRate(147u, 1f) // BATTERY_STATUS\n                        }\n                    }\n                }\n        }\n\n        // Collectors\n\n        // VFR_HUD\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .filterIsInstance<VfrHud>()\n                .collect { hud ->\n                    _state.update {\n                        it.copy(\n                            altitudeMsl = hud.alt,\n                            airspeed = hud.airspeed.takeIf { v -> v > 0f },\n                            groundspeed = hud.groundspeed.takeIf { v -> v > 0f }\n                        )\n                    }\n                }\n        }\n\n        // GLOBAL_POSITION_INT\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .filterIsInstance<GlobalPositionInt>()\n                .collect { gp ->\n                    val altAMSLm = gp.alt / 1000f\n                    val relAltM = gp.relativeAlt / 1000f\n                    val lat = gp.lat.takeIf { it != Int.MIN_VALUE }?.let { it / 10_000_000.0 }\n                    val lon = gp.lon.takeIf { it != Int.MIN_VALUE }?.let { it / 10_000_000.0 }\n                    _state.update {\n                        it.copy(\n                            altitudeMsl = altAMSLm,\n                            altitudeRelative = relAltM,\n                            latitude = lat,\n                            longitude = lon\n                        )\n                    }\n                }\n        }\n\n        // BATTERY_STATUS\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .filterIsInstance<BatteryStatus>()\n                .collect { b ->\n                    val currentA = if (b.currentBattery.toInt() == -1) null else b.currentBattery / 100f\n                    _state.update { it.copy(currentA = currentA) }\n                }\n        }\n\n        // SYS_STATUS\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .filterIsInstance<SysStatus>()\n                .collect { s ->\n                    val vBatt = if (s.voltageBattery.toUInt() == 0xFFFFu) null else s.voltageBattery.toFloat() / 1000f\n                    val pct = if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()\n                    _state.update { it.copy(voltage = vBatt, batteryPercent = pct) }\n                }\n        }\n\n        // GPS_RAW_INT\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .filterIsInstance<GpsRawInt>()\n                .collect { gps ->\n                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }\n                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f\n                    _state.update { it.copy(sats = sats, hdop = hdop) }\n                }\n        }\n    }\n}\n","baseTimestamp":1757065163389,"deltas":[{"timestamp":1757065182100,"changes":[{"type":"MODIFY","lineNumber":11,"content":"import com.example.aerogcsclone.Telemetry.AppScope","oldContent":"import com.example.kotlingcspractice.Telemetry.AppScope"}]},{"timestamp":1757065448203,"changes":[{"type":"MODIFY","lineNumber":53,"content":"        scope {","oldContent":"        scope.launch {"}]},{"timestamp":1757065460615,"changes":[{"type":"MODIFY","lineNumber":53,"content":"        scope.launch {","oldContent":"        scope {"}]},{"timestamp":1757065465809,"changes":[{"type":"DELETE","lineNumber":11,"oldContent":"import com.example.aerogcsclone.Telemetry.AppScope"}]},{"timestamp":1757065473687,"changes":[{"type":"INSERT","lineNumber":11,"content":"import com.example.aerogcsclone.Telemetry.AppScope"}]},{"timestamp":1757065479666,"changes":[{"type":"DELETE","lineNumber":11,"oldContent":"import com.example.aerogcsclone.Telemetry.AppScope"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/aerogcsclone/app/src/main/java/com/example/aerogcsclone/Telemetry/Data.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/aerogcsclone/app/src/main/java/com/example/aerogcsclone/Telemetry/Data.kt","baseContent":"package com.example.aerogcsclone.Telemetry\n\ndata class TelemetryState(\n\n    val connected : Boolean = false,\n    val fcuDetected : Boolean = false,\n    //Altitude\n    val altitudeMsl: Float? = null,\n    val altitudeRelative: Float? = null,\n    //Speeds\n    val airspeed: Float? = null,\n    val groundspeed: Float? = null,\n    //Battery\n    val voltage: Float? = null,\n    val batteryPercent: Int? = null,\n    val currentA : Float? = null,\n    //Sat count and HDOP\n    val sats : Int? = null,\n    val hdop : Float? = null,\n    //Latitude and Longitude\n    val latitude : Double? = null,\n    val longitude : Double? = null\n)","baseTimestamp":1757065204776},"C:/Users/Hrushikesh/AndroidStudioProjects/aerogcsclone/app/src/main/java/com/example/aerogcsclone/Telemetry/TelemetryViewModel.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/aerogcsclone/app/src/main/java/com/example/aerogcsclone/Telemetry/TelemetryViewModel.kt","baseContent":"package com.example.aerogcsclone.Telemetry\n\nimport androidx.lifecycle.ViewModel\nimport kotlinx.coroutines.flow.StateFlow\n\nclass TelemetryViewModel : ViewModel() {\n\n    private val repo = MavlinkTelemetryRepository\n\n    // Expose as a StateFlow for Compose to observe\n    val telemetry: StateFlow<TelemetryState> = repo.state\n\n\n    init {\n        // Start the MAVLink telemetry collection\n        repo.start()\n    }\n}\n","baseTimestamp":1757065283856},"C:/Users/Hrushikesh/AndroidStudioProjects/aerogcsclone/app/src/main/java/com/example/aerogcsclone/Telemetry/AppScope.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/aerogcsclone/app/src/main/java/com/example/aerogcsclone/Telemetry/AppScope.kt","baseContent":"package com.example.aerogcsclone.Telemetry\n\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.SupervisorJob\n\nobject AppScope : CoroutineScope by CoroutineScope(SupervisorJob() + Dispatchers.IO)\n","baseTimestamp":1757065582737},"C:/Users/Hrushikesh/AndroidStudioProjects/aerogcsclone/app/src/main/java/com/example/aerogcsclone/uimain/TopNavBar.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/aerogcsclone/app/src/main/java/com/example/aerogcsclone/uimain/TopNavBar.kt","baseContent":"package com.example.aerogcsclone.uimain\n\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.*\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.focus.focusModifier\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\n\n@Composable\nfun TopNavBar() {\n    Box(\n        modifier = Modifier\n            .fillMaxWidth()\n            .height(70.dp)\n            .background(\n                brush = Brush.horizontalGradient(\n                    colors = listOf(Color(0xFF87CEEB), Color(0xFF4A90E2))\n                )\n            )\n            .padding(horizontal = 12.dp),\n        contentAlignment = Alignment.CenterStart\n    ) {\n        Row(\n            modifier = Modifier.fillMaxWidth(),\n            verticalAlignment = Alignment.CenterVertically\n        ) {\n            // Left section\n            Icon(Icons.Default.Menu, contentDescription = \"Menu\", tint = Color.White)\n            Spacer(modifier = Modifier.width(12.dp))\n            Icon(Icons.Default.Home, contentDescription = \"Home\", tint = Color.White)\n            Spacer(modifier = Modifier.width(16.dp))\n\n            // Title block\n            Column(\n                verticalArrangement = Arrangement.Center,\n                horizontalAlignment = Alignment.Start\n            ) {\n                Spacer(modifier= Modifier.height(10.dp))\n                Text(\n                    text = \"Pavaman Aviation\",\n                    color = Color.White,\n                    fontWeight = FontWeight.Bold,\n                    fontSize = 25.sp\n                )\n                Spacer(modifier = Modifier.height(2.dp))\n                Text(\n                    text = \"Manual\",\n                    color = Color.White.copy(alpha = 0.7f),\n                    fontSize = 15.sp\n                )\n            }\n\n            Spacer(modifier = Modifier.weight(1f))\n\n            // Right section (info blocks)\n            Row(\n                verticalAlignment = Alignment.CenterVertically\n            ) {\n                InfoBlock(Icons.Default.Flight, )\n                DividerBlock()\n                InfoBlock(Icons.Default.BatteryFull, \"12.600 V\")\n                DividerBlock()\n                InfoBlock(Icons.Default.Gamepad, \"100%\")\n                DividerBlock()\n                InfoBlockGroup(Icons.Default.Bolt, listOf(\"561 mAh\", \"28.12 A\"))\n                DividerBlock()\n                InfoBlockGroup(Icons.Default.SatelliteAlt, listOf(\"10 sats\", \"1.2 hdop\"))\n                DividerBlock()\n                InfoBlockGroup(Icons.Default.Sync, listOf(\"Stabilize\", \"Arm\"))\n                DividerBlock()\n                Icon(Icons.Default.MoreVert, contentDescription = \"More\", tint = Color.White)\n            }\n        }\n    }\n}\n\n@Composable\nfun DividerBlock() {\n    Box(\n        modifier = Modifier\n            .padding(horizontal = 8.dp) // spacing between items\n            .width(1.dp)\n            .height(30.dp)\n            .background(Color.White.copy(alpha = 0.7f))\n    )\n}\n\n@Composable\nfun InfoBlock(icon: ImageVector, value: String) {\n    Column(\n        modifier = Modifier.padding(horizontal = 6.dp),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        Icon(icon, contentDescription = null, tint = Color.White, modifier = Modifier.size(18.dp))\n        Spacer(modifier = Modifier.height(2.dp))\n        Text(value, color = Color.White, fontSize = 12.sp)\n    }\n}\n\n@Composable\nfun InfoBlockGroup(icon: ImageVector, values: List<String>) {\n    Column(\n        modifier = Modifier.padding(horizontal = 6.dp),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        Icon(icon, contentDescription = null, tint = Color.White, modifier = Modifier.size(18.dp))\n        Spacer(modifier = Modifier.height(2.dp))\n        values.forEach { value ->\n            Text(value, color = Color.White, fontSize = 12.sp)\n        }\n    }\n}\n","baseTimestamp":1757065672139,"deltas":[{"timestamp":1757065703115,"changes":[{"type":"MODIFY","lineNumber":69,"content":"                InfoBlock(Icons.Default.Flight, state.altitudeMsl?.let { \"${fmt(it)} m\" } ?: \"â€”\")","oldContent":"                InfoBlock(Icons.Default.Flight, )"}]},{"timestamp":1757065707947,"changes":[{"type":"INSERT","lineNumber":18,"content":"import com.example.aerogcsclone.Telemetry.MavlinkTelemetryRepository.state"}]},{"timestamp":1757065747854,"changes":[{"type":"DELETE","lineNumber":18,"oldContent":"import com.example.aerogcsclone.Telemetry.MavlinkTelemetryRepository.state"},{"type":"MODIFY","lineNumber":69,"content":"                InfoBlock(Icons.Default.Flight, \"13%\")","oldContent":"                InfoBlock(Icons.Default.Flight, state.altitudeMsl?.let { \"${fmt(it)} m\" } ?: \"â€”\")"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/Telemetry/SharedViewModel.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/Telemetry/SharedViewModel.kt","baseContent":"package com.example.aerogcsclone.Telemetry\n\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.setValue\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.combine\nimport kotlinx.coroutines.launch\n\nclass SharedViewModel : ViewModel() {\n\n    var ipAddress by mutableStateOf(\"10.0.2.2\")\n    var port by mutableStateOf(\"5762\")\n\n    private var repo: MavlinkTelemetryRepository? = null\n\n    private val _telemetryState = mutableStateOf(TelemetryState())\n    val telemetryState: StateFlow<TelemetryState> = _telemetryState\n\n    val isConnected: Flow<ERROR> = telemetryState.combine(repo?.state) { state, repoState ->\n        state.connected || repoState?.connected == true\n    }\n\n\n    fun connect() {\n        viewModelScope.launch {\n            val portInt = port.toIntOrNull()\n            if (portInt != null) {\n                val newRepo = MavlinkTelemetryRepository(ipAddress, portInt)\n                repo = newRepo\n                newRepo.start()\n                newRepo.state.collect {\n                    _telemetryState.value = it\n                }\n            }\n        }\n    }\n}\n","baseTimestamp":1757400233339,"deltas":[{"timestamp":1757400239338,"changes":[{"type":"DELETE","lineNumber":7,"oldContent":"import kotlinx.coroutines.flow.Flow"},{"type":"MODIFY","lineNumber":21,"content":"    val isConnected: StateFlow<Boolean> = telemetryState.combine(repo?.state) { state, repoState ->","oldContent":"    val isConnected: Flow<ERROR> = telemetryState.combine(repo?.state) { state, repoState ->"}]},{"timestamp":1757400258744,"changes":[{"type":"INSERT","lineNumber":20,"content":""},{"type":"DELETE","lineNumber":21,"oldContent":"    val isConnected: Flow<ERROR> = telemetryState.combine(repo?.state) { state, repoState ->"},{"type":"MODIFY","lineNumber":23,"content":"    } as StateFlow<Boolean>","oldContent":"    }"}]},{"timestamp":1757400271889,"changes":[{"type":"MODIFY","lineNumber":19,"content":"    val telemetryState: StateFlow<TelemetryState> = _telemetryState as StateFlow<TelemetryState>","oldContent":"    val telemetryState: StateFlow<TelemetryState> = _telemetryState"}]},{"timestamp":1757400277822,"changes":[{"type":"INSERT","lineNumber":7,"content":"import kotlinx.coroutines.flow.Flow"},{"type":"MODIFY","lineNumber":22,"content":"    val isConnected: StateFlow<Boolean> = telemetryState.combine(repo?.state as Flow<T2>) { state, repoState ->","oldContent":"    val isConnected: StateFlow<Boolean> = telemetryState.combine(repo?.state) { state, repoState ->"}]},{"timestamp":1757400285451,"changes":[{"type":"DELETE","lineNumber":7,"oldContent":"import kotlinx.coroutines.flow.Flow"},{"type":"MODIFY","lineNumber":19,"content":"    val telemetryState: StateFlow<TelemetryState> = _telemetryState","oldContent":"    val telemetryState: StateFlow<TelemetryState> = _telemetryState as StateFlow<TelemetryState>"},{"type":"DELETE","lineNumber":23,"oldContent":"    val isConnected: StateFlow<Boolean> = telemetryState.combine(repo?.state as Flow<T2>) { state, repoState ->"},{"type":"INSERT","lineNumber":22,"content":"        state.connected || repoState?.connected == true"}]},{"timestamp":1757411797636,"changes":[{"type":"DELETE","lineNumber":7,"oldContent":"import kotlinx.coroutines.flow.StateFlow"},{"type":"MODIFY","lineNumber":7,"content":"import kotlinx.coroutines.flow.*","oldContent":"import kotlinx.coroutines.flow.combine"},{"type":"DELETE","lineNumber":18,"oldContent":"    val telemetryState: StateFlow<TelemetryState> = _telemetryState"},{"type":"DELETE","lineNumber":19,"oldContent":"    val telemetryState: StateFlow<TelemetryState> = _telemetryState as StateFlow<TelemetryState>"},{"type":"INSERT","lineNumber":17,"content":"    private val _telemetryState = MutableStateFlow(TelemetryState())"},{"type":"INSERT","lineNumber":18,"content":"    val telemetryState: StateFlow<TelemetryState> = _telemetryState.asStateFlow()"},{"type":"DELETE","lineNumber":21,"oldContent":"        state.connected || repoState?.connected == true"},{"type":"DELETE","lineNumber":22,"oldContent":"    val isConnected: StateFlow<Boolean> = telemetryState.combine(repo?.state) { state, repoState ->"},{"type":"DELETE","lineNumber":23,"oldContent":"    } as StateFlow<Boolean>"},{"type":"INSERT","lineNumber":20,"content":"    val isConnected: StateFlow<Boolean> = telemetryState"},{"type":"INSERT","lineNumber":21,"content":"        .map { it.connected }"},{"type":"INSERT","lineNumber":22,"content":"        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), false)"},{"type":"DELETE","lineNumber":25,"oldContent":""}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/Telemetry/Data.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/Telemetry/Data.kt","baseContent":"package com.example.aerogcsclone.Telemetry\n\ndata class TelemetryState(\n\n    val connected : Boolean = false,\n    val fcuDetected : Boolean = false,\n    //Altitude\n    val altitudeMsl: Float? = null,\n    val altitudeRelative: Float? = null,\n    //Speeds\n    val airspeed: Float? = null,\n    val groundspeed: Float? = null,\n    //Battery\n    val voltage: Float? = null,\n    val batteryPercent: Int? = null,\n    val currentA : Float? = null,\n    //Sat count and HDOP\n    val sats : Int? = null,\n    val hdop : Float? = null,\n    //Latitude and Longitude\n    val latitude : Double?= null,\n    val longitude : Double? = null\n)","baseTimestamp":1757650088603,"deltas":[{"timestamp":1757651110836,"changes":[{"type":"INSERT","lineNumber":22,"content":"    "},{"type":"INSERT","lineNumber":23,"content":"    val armed "}]},{"timestamp":1757651114524,"changes":[{"type":"INSERT","lineNumber":23,"content":"    val armed : Boolean = false,"},{"type":"INSERT","lineNumber":24,"content":"    val armable : Boolean = false,"},{"type":"DELETE","lineNumber":24,"oldContent":"    val armed "}]},{"timestamp":1757651120763,"changes":[{"type":"DELETE","lineNumber":24,"oldContent":")"},{"type":"INSERT","lineNumber":25,"content":"    val mode : String? = null"},{"type":"INSERT","lineNumber":26,"content":")"}]},{"timestamp":1757651721296,"changes":[{"type":"MODIFY","lineNumber":21,"content":"    val longitude : Double? = null,","oldContent":"    val longitude : Double? = null"},{"type":"MODIFY","lineNumber":25,"content":"    val mode : String? = null","oldContent":"    val mode : String? = null"}]},{"timestamp":1757651730424,"changes":[{"type":"MODIFY","lineNumber":22,"content":"","oldContent":"    "},{"type":"INSERT","lineNumber":24,"content":"    val armable : Boolean = false,"},{"type":"DELETE","lineNumber":25,"oldContent":"    val mode : String? = null"}]},{"timestamp":1757652495531,"changes":[{"type":"DELETE","lineNumber":21,"oldContent":"    val longitude : Double? = null,"},{"type":"DELETE","lineNumber":22,"oldContent":""},{"type":"DELETE","lineNumber":23,"oldContent":"    val armed : Boolean = false,"},{"type":"DELETE","lineNumber":24,"oldContent":"    val armable : Boolean = false,"},{"type":"DELETE","lineNumber":25,"oldContent":"    val mode : String? = null"},{"type":"INSERT","lineNumber":21,"content":"    val longitude : Double? = null"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uimain/TopNavBar.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uimain/TopNavBar.kt","baseContent":"package com.example.aerogcsclone.uimain\n\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.*\nimport androidx.compose.foundation.clickable\nimport androidx.compose.material3.DropdownMenu\nimport androidx.compose.material3.DropdownMenuItem\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.Text\nimport androidx.compose.ui.window.Popup\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.navigation.NavHostController\nimport com.example.aerogcsclone.Telemetry.TelemetryState\nimport com.example.aerogcsclone.authentication.AuthViewModel\nimport com.example.aerogcsclone.navigation.Screen\n\n@Composable\nfun TopNavBar(telemetryState: TelemetryState, authViewModel: AuthViewModel, navController: NavHostController) {\n    var menuExpanded by remember { mutableStateOf(false) }\n    var kebabMenuExpanded by remember { mutableStateOf(false) }\n    var selectedMode by remember { mutableStateOf(\"Manual\") }\n    Box(\n        modifier = Modifier\n            .fillMaxWidth()\n            .height(70.dp)\n            .background(\n                brush = Brush.horizontalGradient(\n                    colors = listOf(Color(0xFF87CEEB), Color(0xFF4A90E2))\n                )\n            )\n            .padding(horizontal = 12.dp),\n        contentAlignment = Alignment.CenterStart\n    ) {\n        Row(\n            modifier = Modifier.fillMaxWidth(),\n            verticalAlignment = Alignment.CenterVertically\n        ) {\n            Box {\n                Icon(\n                    Icons.Default.Menu,\n                    contentDescription = \"Menu\",\n                    tint = Color.White,\n                    modifier = Modifier.clickable { menuExpanded = true }\n                )\n                if (menuExpanded) {\n                    Popup(\n                        onDismissRequest = { menuExpanded = false }\n                    ) {\n                        Column(\n                            modifier = Modifier\n                                .background(Color.Black.copy(alpha = 0.5f))\n                                .width(180.dp) // Increased width\n                                .padding(vertical = 8.dp, horizontal = 16.dp)\n                        ) {\n                            Text(\n                                text = \"Automatic\",\n                                color = Color.White,\n                                fontSize = 22.sp, // Increased font size\n                                modifier = Modifier\n                                    .padding(16.dp) // Increased padding\n                                    .clickable {\n                                        selectedMode = \"Automatic\"\n                                        menuExpanded = false\n                                        navController.navigate(Screen.Plan.route)\n                                    }\n                            )\n                            Text(\n                                text = \"Manual\",\n                                color = Color.White,\n                                fontSize = 22.sp, // Increased font size\n                                modifier = Modifier\n                                    .padding(16.dp) // Increased padding\n                                    .clickable {\n                                        selectedMode = \"Manual\"\n                                        menuExpanded = false\n                                    }\n                            )\n                        }\n                    }\n                }\n            }\n            Spacer(modifier = Modifier.width(12.dp))\n            Icon(Icons.Default.Home, contentDescription = \"Home\", tint = Color.White, modifier = Modifier.clickable {\n                navController.navigate(Screen.Connection.route)\n            })\n            Spacer(modifier = Modifier.width(16.dp))\n\n            Column(\n                verticalArrangement = Arrangement.Center,\n                horizontalAlignment = Alignment.Start\n            ) {\n                Spacer(modifier = Modifier.height(10.dp))\n                Text(\n                    text = \"Pavaman Aviation\",\n                    color = Color.White,\n                    fontWeight = FontWeight.Bold,\n                    fontSize = 25.sp\n                )\n                Spacer(modifier = Modifier.height(2.dp))\n                Text(\n                    text = selectedMode,\n                    color = Color.White.copy(alpha = 0.7f),\n                    fontSize = 15.sp\n                )\n            }\n\n            Spacer(modifier = Modifier.weight(1f))\n\n            Row(\n                verticalAlignment = Alignment.CenterVertically\n            ) {\n                ConnectionStatusWidget(isConnected = telemetryState.connected)\n                DividerBlock()\n                InfoBlock(Icons.Default.Flight, \"13%\")\n                DividerBlock()\n                InfoBlock(Icons.Default.BatteryFull, \"${telemetryState.batteryPercent ?: \"N/A\"}%\")\n                DividerBlock()\n                InfoBlock(Icons.Default.Gamepad, \"100%\")\n                DividerBlock()\n                InfoBlockGroup(\n                    Icons.Default.Bolt,\n                    listOf(\n                        \"${telemetryState.voltage ?: \"N/A\"} V\",\n                        \"${telemetryState.currentA ?: \"N/A\"} A\"\n                    )\n                )\n                DividerBlock()\n                InfoBlockGroup(\n                    Icons.Default.SatelliteAlt,\n                    listOf(\n                        \"${telemetryState.sats ?: \"N/A\"} sats\",\n                        \"${telemetryState.hdop ?: \"N/A\"} hdop\"\n                    )\n                )\n                DividerBlock()\n                InfoBlockGroup(Icons.Default.Sync, listOf(\"Stabilize\", \"Arm\"))\n                DividerBlock()\n                Box {\n                    Icon(\n                        Icons.Default.MoreVert,\n                        contentDescription = \"More\",\n                        tint = Color.White,\n                        modifier = Modifier.clickable { kebabMenuExpanded = true }\n                    )\n                    DropdownMenu(\n                        expanded = kebabMenuExpanded,\n                        onDismissRequest = { kebabMenuExpanded = false }\n                    ) {\n                        DropdownMenuItem(\n                            text = { Text(\"Settings\") },\n                            onClick = { kebabMenuExpanded = false }\n                        )\n                        DropdownMenuItem(\n                            text = { Text(\"About App\") },\n                            onClick = { kebabMenuExpanded = false }\n                        )\n                        DropdownMenuItem(\n                            text = { Text(\"Logout\") },\n                            onClick = {\n                                kebabMenuExpanded = false\n                                authViewModel.signout()\n                                navController.navigate(Screen.Login.route) {\n                                    popUpTo(0)\n                                }\n                            }\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun ConnectionStatusWidget(isConnected: Boolean) {\n    val statusColor = if (isConnected) Color.Green else Color.Red\n    val statusText = if (isConnected) \"Connected\" else \"Disconnected\"\n\n    Row(verticalAlignment = Alignment.CenterVertically) {\n        Box(\n            modifier = Modifier\n                .size(10.dp)\n                .background(statusColor, shape = androidx.compose.foundation.shape.CircleShape)\n        )\n        Spacer(modifier = Modifier.width(4.dp))\n        Text(statusText, color = Color.White, fontSize = 12.sp)\n    }\n}\n\n@Composable\nfun DividerBlock() {\n    Box(\n        modifier = Modifier\n            .padding(horizontal = 8.dp) // spacing between items\n            .width(1.dp)\n            .height(30.dp)\n            .background(Color.White.copy(alpha = 0.7f))\n    )\n}\n\n@Composable\nfun InfoBlock(icon: ImageVector, value: String) {\n    Column(\n        modifier = Modifier.padding(horizontal = 6.dp),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        Icon(icon, contentDescription = null, tint = Color.White, modifier = Modifier.size(18.dp))\n        Spacer(modifier = Modifier.height(2.dp))\n        Text(value, color = Color.White, fontSize = 12.sp)\n    }\n}\n\n@Composable\nfun InfoBlockGroup(icon: ImageVector, values: List<String>) {\n    Column(\n        modifier = Modifier.padding(horizontal = 6.dp),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        Icon(icon, contentDescription = null, tint = Color.White, modifier = Modifier.size(18.dp))\n        Spacer(modifier = Modifier.height(2.dp))\n        values.forEach { value ->\n            Text(value, color = Color.White, fontSize = 12.sp)\n        }\n    }\n}\n","baseTimestamp":1757567481747,"deltas":[{"timestamp":1757650088634,"changes":[{"type":"INSERT","lineNumber":3,"content":"import androidx.compose.foundation.clickable"},{"type":"INSERT","lineNumber":5,"content":"import androidx.compose.foundation.shape.CircleShape"},{"type":"DELETE","lineNumber":6,"oldContent":"import androidx.compose.foundation.clickable"},{"type":"DELETE","lineNumber":11,"oldContent":"import androidx.compose.ui.window.Popup"},{"type":"INSERT","lineNumber":21,"content":"import androidx.compose.ui.window.Popup"},{"type":"DELETE","lineNumber":27,"oldContent":"fun TopNavBar(telemetryState: TelemetryState, authViewModel: AuthViewModel, navController: NavHostController) {"},{"type":"INSERT","lineNumber":28,"content":"fun TopNavBar("},{"type":"INSERT","lineNumber":29,"content":"    telemetryState: TelemetryState,"},{"type":"INSERT","lineNumber":30,"content":"    authViewModel: AuthViewModel,"},{"type":"INSERT","lineNumber":31,"content":"    navController: NavHostController"},{"type":"INSERT","lineNumber":32,"content":") {"},{"type":"INSERT","lineNumber":36,"content":""},{"type":"INSERT","lineNumber":53,"content":"            // Hamburger menu"},{"type":"DELETE","lineNumber":55,"oldContent":"                    Popup("},{"type":"DELETE","lineNumber":56,"oldContent":"                        onDismissRequest = { menuExpanded = false }"},{"type":"DELETE","lineNumber":57,"oldContent":"                    ) {"},{"type":"INSERT","lineNumber":62,"content":"                    Popup(onDismissRequest = { menuExpanded = false }) {"},{"type":"DELETE","lineNumber":61,"oldContent":"                                .width(180.dp) // Increased width"},{"type":"INSERT","lineNumber":66,"content":"                                .width(180.dp)"},{"type":"DELETE","lineNumber":67,"oldContent":"                                fontSize = 22.sp, // Increased font size"},{"type":"INSERT","lineNumber":72,"content":"                                fontSize = 22.sp,"},{"type":"DELETE","lineNumber":69,"oldContent":"                                    .padding(16.dp) // Increased padding"},{"type":"INSERT","lineNumber":74,"content":"                                    .padding(16.dp)"},{"type":"DELETE","lineNumber":79,"oldContent":"                                fontSize = 22.sp, // Increased font size"},{"type":"INSERT","lineNumber":84,"content":"                                fontSize = 22.sp,"},{"type":"DELETE","lineNumber":81,"oldContent":"                                    .padding(16.dp) // Increased padding"},{"type":"INSERT","lineNumber":86,"content":"                                    .padding(16.dp)"},{"type":"INSERT","lineNumber":96,"content":""},{"type":"DELETE","lineNumber":92,"oldContent":"            Icon(Icons.Default.Home, contentDescription = \"Home\", tint = Color.White, modifier = Modifier.clickable {"},{"type":"DELETE","lineNumber":93,"oldContent":"                navController.navigate(Screen.Connection.route)"},{"type":"DELETE","lineNumber":94,"oldContent":"            })"},{"type":"INSERT","lineNumber":98,"content":""},{"type":"INSERT","lineNumber":99,"content":"            // Home icon"},{"type":"INSERT","lineNumber":100,"content":"            Icon("},{"type":"INSERT","lineNumber":101,"content":"                Icons.Default.Home,"},{"type":"INSERT","lineNumber":102,"content":"                contentDescription = \"Home\","},{"type":"INSERT","lineNumber":103,"content":"                tint = Color.White,"},{"type":"INSERT","lineNumber":104,"content":"                modifier = Modifier.clickable {"},{"type":"INSERT","lineNumber":105,"content":"                    navController.navigate(Screen.Connection.route)"},{"type":"INSERT","lineNumber":106,"content":"                }"},{"type":"INSERT","lineNumber":107,"content":"            )"},{"type":"INSERT","lineNumber":108,"content":""},{"type":"INSERT","lineNumber":111,"content":"            // Title & Mode"},{"type":"DELETE","lineNumber":118,"oldContent":"            Row("},{"type":"DELETE","lineNumber":119,"oldContent":"                verticalAlignment = Alignment.CenterVertically"},{"type":"DELETE","lineNumber":120,"oldContent":"            ) {"},{"type":"INSERT","lineNumber":133,"content":"            // Status & telemetry"},{"type":"INSERT","lineNumber":134,"content":"            Row(verticalAlignment = Alignment.CenterVertically) {"},{"type":"INSERT","lineNumber":161,"content":""},{"type":"INSERT","lineNumber":162,"content":"                // Kebab menu"},{"type":"DELETE","lineNumber":192,"oldContent":"                .background(statusColor, shape = androidx.compose.foundation.shape.CircleShape)"},{"type":"INSERT","lineNumber":208,"content":"                .background(statusColor, shape = CircleShape)"},{"type":"DELETE","lineNumber":203,"oldContent":"            .padding(horizontal = 8.dp) // spacing between items"},{"type":"INSERT","lineNumber":219,"content":"            .padding(horizontal = 8.dp)"}]},{"timestamp":1757651781652,"changes":[{"type":"MODIFY","lineNumber":6,"content":"import androidx.compose.material.icons.Icons","oldContent":"import androidx.compose.material.icons.Icons"},{"type":"DELETE","lineNumber":29,"oldContent":"    var menuExpanded by remember { mutableStateOf(false) }"},{"type":"DELETE","lineNumber":31,"oldContent":"    var kebabMenuExpanded by remember { mutableStateOf(false) }"},{"type":"DELETE","lineNumber":33,"oldContent":"    var selectedMode by remember { mutableStateOf(\"Manual\") }"},{"type":"DELETE","lineNumber":35,"oldContent":"    Box("},{"type":"INSERT","lineNumber":33,"content":"    var menuExpanded by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":34,"content":"    var kebabMenuExpanded by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":35,"content":"    var selectedMode by remember { mutableStateOf(\"Manual\") }"},{"type":"INSERT","lineNumber":36,"content":""},{"type":"INSERT","lineNumber":37,"content":"    Box("},{"type":"DELETE","lineNumber":41,"oldContent":""},{"type":"INSERT","lineNumber":53,"content":"            // Hamburger menu"},{"type":"DELETE","lineNumber":59,"oldContent":"            // Hamburger menu"},{"type":"INSERT","lineNumber":62,"content":"                    Popup(onDismissRequest = { menuExpanded = false }) {"},{"type":"DELETE","lineNumber":65,"oldContent":"                    Popup(onDismissRequest = { menuExpanded = false }) {"},{"type":"INSERT","lineNumber":66,"content":"                                .width(180.dp)"},{"type":"DELETE","lineNumber":70,"oldContent":"                                .width(180.dp)"},{"type":"INSERT","lineNumber":72,"content":"                                fontSize = 22.sp,"},{"type":"INSERT","lineNumber":74,"content":"                                    .padding(16.dp)"},{"type":"DELETE","lineNumber":75,"oldContent":"                                fontSize = 22.sp,"},{"type":"DELETE","lineNumber":78,"oldContent":"                                    .padding(16.dp)"},{"type":"INSERT","lineNumber":84,"content":"                                fontSize = 22.sp,"},{"type":"INSERT","lineNumber":86,"content":"                                    .padding(16.dp)"},{"type":"DELETE","lineNumber":87,"oldContent":"                                fontSize = 22.sp,"},{"type":"DELETE","lineNumber":90,"oldContent":"                                    .padding(16.dp)"},{"type":"INSERT","lineNumber":96,"content":""},{"type":"DELETE","lineNumber":97,"oldContent":"            Spacer(modifier = Modifier.width(16.dp))"},{"type":"INSERT","lineNumber":99,"content":"            // Home icon"},{"type":"INSERT","lineNumber":100,"content":"            Icon("},{"type":"INSERT","lineNumber":101,"content":"                Icons.Default.Home,"},{"type":"INSERT","lineNumber":102,"content":"                contentDescription = \"Home\","},{"type":"INSERT","lineNumber":103,"content":"                tint = Color.White,"},{"type":"INSERT","lineNumber":104,"content":"                modifier = Modifier.clickable {"},{"type":"INSERT","lineNumber":105,"content":"                    navController.navigate(Screen.Connection.route)"},{"type":"INSERT","lineNumber":106,"content":"                }"},{"type":"INSERT","lineNumber":107,"content":"            )"},{"type":"DELETE","lineNumber":100,"oldContent":"            Column("},{"type":"INSERT","lineNumber":109,"content":"            Spacer(modifier = Modifier.width(16.dp))"},{"type":"INSERT","lineNumber":111,"content":"            // Title & Mode"},{"type":"INSERT","lineNumber":112,"content":"            Column("},{"type":"DELETE","lineNumber":103,"oldContent":"            // Home icon"},{"type":"DELETE","lineNumber":105,"oldContent":"            Icon("},{"type":"DELETE","lineNumber":107,"oldContent":"                Icons.Default.Home,"},{"type":"DELETE","lineNumber":109,"oldContent":"                contentDescription = \"Home\","},{"type":"DELETE","lineNumber":111,"oldContent":"                tint = Color.White,"},{"type":"DELETE","lineNumber":113,"oldContent":"                modifier = Modifier.clickable {"},{"type":"DELETE","lineNumber":115,"oldContent":"                    navController.navigate(Screen.Connection.route)"},{"type":"DELETE","lineNumber":117,"oldContent":"                }"},{"type":"DELETE","lineNumber":119,"oldContent":"            )"},{"type":"DELETE","lineNumber":121,"oldContent":""},{"type":"DELETE","lineNumber":125,"oldContent":"            // Title & Mode"},{"type":"INSERT","lineNumber":133,"content":"            // Status & telemetry"},{"type":"INSERT","lineNumber":134,"content":"            Row(verticalAlignment = Alignment.CenterVertically) {"},{"type":"DELETE","lineNumber":145,"oldContent":"            // Status & telemetry"},{"type":"DELETE","lineNumber":147,"oldContent":"            Row(verticalAlignment = Alignment.CenterVertically) {"},{"type":"MODIFY","lineNumber":159,"content":"                InfoBlockGroup(Icons.Default.Sync, listOf(TelemetryState., \"Arm\"))","oldContent":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"Stabilize\", \"Arm\"))"},{"type":"INSERT","lineNumber":161,"content":""},{"type":"INSERT","lineNumber":162,"content":"                // Kebab menu"},{"type":"DELETE","lineNumber":175,"oldContent":""},{"type":"DELETE","lineNumber":177,"oldContent":"                // Kebab menu"},{"type":"INSERT","lineNumber":208,"content":"                .background(statusColor, shape = CircleShape)"},{"type":"INSERT","lineNumber":219,"content":"            .padding(horizontal = 8.dp)"},{"type":"DELETE","lineNumber":222,"oldContent":"                .background(statusColor, shape = CircleShape)"},{"type":"DELETE","lineNumber":234,"oldContent":"            .padding(horizontal = 8.dp)"}]},{"timestamp":1757651788447,"changes":[{"type":"INSERT","lineNumber":5,"content":"import androidx.compose.foundation.shape.CircleShape"},{"type":"DELETE","lineNumber":6,"oldContent":"import androidx.compose.material.icons.Icons"},{"type":"INSERT","lineNumber":31,"content":"    navController: NavHostController"},{"type":"INSERT","lineNumber":32,"content":") {"},{"type":"DELETE","lineNumber":33,"oldContent":"    navController: NavHostController"},{"type":"DELETE","lineNumber":36,"oldContent":") {"},{"type":"MODIFY","lineNumber":75,"content":"                                    .clickable {","oldContent":"                                    .clickable {"},{"type":"MODIFY","lineNumber":87,"content":"                                    .clickable {","oldContent":"                                    .clickable {"},{"type":"DELETE","lineNumber":100,"oldContent":""},{"type":"DELETE","lineNumber":103,"oldContent":""},{"type":"DELETE","lineNumber":105,"oldContent":"                verticalArrangement = Arrangement.Center,"},{"type":"DELETE","lineNumber":108,"oldContent":"                horizontalAlignment = Alignment.Start"},{"type":"DELETE","lineNumber":111,"oldContent":"            ) {"},{"type":"DELETE","lineNumber":113,"oldContent":"                Spacer(modifier = Modifier.height(10.dp))"},{"type":"INSERT","lineNumber":108,"content":""},{"type":"DELETE","lineNumber":115,"oldContent":"                Text("},{"type":"INSERT","lineNumber":110,"content":""},{"type":"INSERT","lineNumber":113,"content":"                verticalArrangement = Arrangement.Center,"},{"type":"INSERT","lineNumber":114,"content":"                horizontalAlignment = Alignment.Start"},{"type":"INSERT","lineNumber":115,"content":"            ) {"},{"type":"INSERT","lineNumber":116,"content":"                Spacer(modifier = Modifier.height(10.dp))"},{"type":"INSERT","lineNumber":117,"content":"                Text("},{"type":"MODIFY","lineNumber":135,"content":"                ConnectionStatusWidget(isConnected = telemetryState.connected)","oldContent":"                ConnectionStatusWidget(isConnected = telemetryState.connected)"},{"type":"MODIFY","lineNumber":159,"content":"                InfoBlockGroup(Icons.Default.Sync, listOf(TelemetryState.mode, \"Arm\"))","oldContent":"                InfoBlockGroup(Icons.Default.Sync, listOf(TelemetryState., \"Arm\"))"},{"type":"MODIFY","lineNumber":163,"content":"                Box {","oldContent":"                Box {"},{"type":"MODIFY","lineNumber":220,"content":"            .width(1.dp)","oldContent":"            .width(1.dp)"}]},{"timestamp":1757651800958,"changes":[{"type":"MODIFY","lineNumber":33,"content":"    var menuExpanded by remember { mutableStateOf(false) }","oldContent":"    var menuExpanded by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":74,"content":"                                    .padding(16.dp)"},{"type":"DELETE","lineNumber":75,"oldContent":"                                    .clickable {"},{"type":"INSERT","lineNumber":86,"content":"                                    .padding(16.dp)"},{"type":"DELETE","lineNumber":87,"oldContent":"                                    .clickable {"},{"type":"DELETE","lineNumber":105,"oldContent":""},{"type":"MODIFY","lineNumber":108,"content":"","oldContent":""},{"type":"INSERT","lineNumber":109,"content":"            Spacer(modifier = Modifier.width(16.dp))"},{"type":"INSERT","lineNumber":110,"content":""},{"type":"INSERT","lineNumber":111,"content":"            // Title & Mode"},{"type":"INSERT","lineNumber":112,"content":"            Column("},{"type":"DELETE","lineNumber":112,"oldContent":"            Spacer(modifier = Modifier.width(16.dp))"},{"type":"DELETE","lineNumber":115,"oldContent":"            // Title & Mode"},{"type":"DELETE","lineNumber":117,"oldContent":"            Column("},{"type":"INSERT","lineNumber":134,"content":"            Row(verticalAlignment = Alignment.CenterVertically) {"},{"type":"DELETE","lineNumber":135,"oldContent":"                ConnectionStatusWidget(isConnected = telemetryState.connected)"},{"type":"MODIFY","lineNumber":159,"content":"                InfoBlockGroup(Icons.Default.Sync, listOf(telemeteryState, \"Arm\"))","oldContent":"                InfoBlockGroup(Icons.Default.Sync, listOf(TelemetryState.mode, \"Arm\"))"},{"type":"INSERT","lineNumber":162,"content":"                // Kebab menu"},{"type":"DELETE","lineNumber":163,"oldContent":"                Box {"},{"type":"INSERT","lineNumber":219,"content":"            .padding(horizontal = 8.dp)"},{"type":"DELETE","lineNumber":220,"oldContent":"            .width(1.dp)"}]},{"timestamp":1757651805947,"changes":[{"type":"INSERT","lineNumber":32,"content":") {"},{"type":"DELETE","lineNumber":33,"oldContent":"    var menuExpanded by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":106,"content":"                }"},{"type":"INSERT","lineNumber":107,"content":"            )"},{"type":"DELETE","lineNumber":107,"oldContent":""},{"type":"DELETE","lineNumber":109,"oldContent":"            )"},{"type":"DELETE","lineNumber":111,"oldContent":"                verticalArrangement = Arrangement.Center,"},{"type":"MODIFY","lineNumber":113,"content":"                verticalArrangement = Arrangement.Center,","oldContent":"                horizontalAlignment = Alignment.Start"},{"type":"INSERT","lineNumber":114,"content":"                horizontalAlignment = Alignment.Start"},{"type":"MODIFY","lineNumber":159,"content":"                InfoBlockGroup(Icons.Default.Sync, listOf, \"Arm\"))","oldContent":"                InfoBlockGroup(Icons.Default.Sync, listOf(telemeteryState, \"Arm\"))"}]},{"timestamp":1757651811683,"changes":[{"type":"MODIFY","lineNumber":108,"content":"","oldContent":""},{"type":"INSERT","lineNumber":112,"content":"            Column("},{"type":"DELETE","lineNumber":114,"oldContent":"            Column("},{"type":"MODIFY","lineNumber":159,"content":"                InfoBlockGroup(Icons.Default.Sync, listOf(, \"Arm\"))","oldContent":"                InfoBlockGroup(Icons.Default.Sync, listOf, \"Arm\"))"}]},{"timestamp":1757651814540,"changes":[{"type":"INSERT","lineNumber":107,"content":"            )"},{"type":"DELETE","lineNumber":108,"oldContent":""},{"type":"MODIFY","lineNumber":159,"content":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"\", \"Arm\"))","oldContent":"                InfoBlockGroup(Icons.Default.Sync, listOf(, \"Arm\"))"}]},{"timestamp":1757651816778,"changes":[{"type":"MODIFY","lineNumber":159,"content":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"$\", \"Arm\"))","oldContent":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"\", \"Arm\"))"}]},{"timestamp":1757651826039,"changes":[{"type":"MODIFY","lineNumber":159,"content":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"${telemetryState.mode}\", \"Arm\"))","oldContent":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"$\", \"Arm\"))"}]},{"timestamp":1757651829878,"changes":[{"type":"MODIFY","lineNumber":159,"content":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"${telemetryState.mode}\", ))","oldContent":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"${telemetryState.mode}\", \"Arm\"))"}]},{"timestamp":1757651834686,"changes":[{"type":"MODIFY","lineNumber":159,"content":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"${telemetryState.mode}\", ${}))","oldContent":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"${telemetryState.mode}\", ))"}]},{"timestamp":1757651839795,"changes":[{"type":"MODIFY","lineNumber":159,"content":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"${telemetryState.mode}\", \"\"))","oldContent":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"${telemetryState.mode}\", ${}))"}]},{"timestamp":1757651843648,"changes":[{"type":"MODIFY","lineNumber":159,"content":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"${telemetryState.mode}\", \"${if (telemetryState.armed) \"Armed\" else \"Disarmed\"}\"))","oldContent":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"${telemetryState.mode}\", \"\"))"}]},{"timestamp":1757651849246,"changes":[{"type":"MODIFY","lineNumber":159,"content":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"${telemetryState.mode}\",","oldContent":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"${telemetryState.mode}\", \"${if (telemetryState.armed) \"Armed\" else \"Disarmed\"}\"))"},{"type":"INSERT","lineNumber":160,"content":"                    if (telemetryState.armed) \"Armed\" else \"Disarmed\""},{"type":"INSERT","lineNumber":161,"content":"                ))"}]},{"timestamp":1757652495673,"changes":[{"type":"DELETE","lineNumber":159,"oldContent":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"${telemetryState.mode}\","},{"type":"DELETE","lineNumber":160,"oldContent":"                    if (telemetryState.armed) \"Armed\" else \"Disarmed\""},{"type":"INSERT","lineNumber":159,"content":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"Stabilize\", \"Arm\"))"},{"type":"DELETE","lineNumber":162,"oldContent":"                ))"}]}]}}}