{"snapshots":{"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uimain/GcsMap.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uimain/GcsMap.kt","baseContent":"package com.example.aerogcsclone.uimain\n\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Modifier\nimport com.example.aerogcsclone.Telemetry.TelemetryState\nimport com.google.android.gms.maps.CameraUpdateFactory\nimport com.google.android.gms.maps.model.LatLng\nimport com.google.maps.android.compose.*\n\n@Composable\nfun GcsMap(telemetryState: TelemetryState) {\n    var points by remember { mutableStateOf(listOf<LatLng>()) }\n    var polygonClosed by remember { mutableStateOf(false) }\n\n    val cameraPositionState = rememberCameraPositionState()\n\n    // Update camera when telemetry changes (live location)\n    LaunchedEffect(telemetryState.latitude, telemetryState.longitude) {\n        val lat = telemetryState.latitude\n        val lon = telemetryState.longitude\n        if (lat != null && lon != null) {\n            val newPosition = LatLng(lat, lon)\n            cameraPositionState.animate(\n                update = CameraUpdateFactory.newLatLngZoom(newPosition, 16f),\n                durationMs = 1000\n            )\n        }\n    }\n\n    GoogleMap(\n        modifier = Modifier.fillMaxSize(),\n        cameraPositionState = cameraPositionState,\n        onMapClick = { latLng ->\n            if (!polygonClosed) {\n                points = points + latLng\n            }\n        }\n    ) {\n        // Live drone marker\n        val lat = telemetryState.latitude\n        val lon = telemetryState.longitude\n        if (lat != null && lon != null) {\n            Marker(\n                state = MarkerState(position = LatLng(lat, lon)),\n                title = \"Drone Location\"\n            )\n        }\n\n        // User-drawn markers\n        points.forEachIndexed { index, point ->\n            Marker(\n                state = MarkerState(position = point),\n                title = \"Marker ${index + 1}\",\n                onClick = {\n                    if (points.size > 1 && !polygonClosed) {\n                        val last = points.last()\n\n                        if (point == points.first() && points.size > 2) {\n                            points = points + point\n                            polygonClosed = true\n                        } else if (point != last) {\n                            points = points + point\n                        }\n                    }\n                    true\n                }\n            )\n        }\n\n        // Draw polyline (open or closed)\n        if (points.size > 1) {\n            Polyline(\n                points = points,\n                width = 4f\n            )\n        }\n    }\n}\n","baseTimestamp":1757909204070,"deltas":[{"timestamp":1757914278117,"changes":[{"type":"DELETE","lineNumber":11,"oldContent":"fun GcsMap(telemetryState: TelemetryState) {"},{"type":"DELETE","lineNumber":12,"oldContent":"    var points by remember { mutableStateOf(listOf<LatLng>()) }"},{"type":"INSERT","lineNumber":11,"content":"fun GcsMap("},{"type":"INSERT","lineNumber":12,"content":"    telemetryState: TelemetryState,"},{"type":"INSERT","lineNumber":13,"content":"    points: List<LatLng> = emptyList(),"},{"type":"INSERT","lineNumber":14,"content":"    onMapClick: (LatLng) -> Unit = {}"},{"type":"INSERT","lineNumber":15,"content":") {"},{"type":"INSERT","lineNumber":16,"content":"    var internalPoints by remember { mutableStateOf(points) }"},{"type":"INSERT","lineNumber":34,"content":"    // Keep internalPoints in sync when parent points change"},{"type":"INSERT","lineNumber":35,"content":"    LaunchedEffect(points) {"},{"type":"INSERT","lineNumber":36,"content":"        internalPoints = points"},{"type":"INSERT","lineNumber":37,"content":"    }"},{"type":"INSERT","lineNumber":38,"content":""},{"type":"DELETE","lineNumber":35,"oldContent":"                points = points + latLng"},{"type":"INSERT","lineNumber":44,"content":"                // Notify parent"},{"type":"INSERT","lineNumber":45,"content":"                onMapClick(latLng)"},{"type":"INSERT","lineNumber":46,"content":"                // update internal copy for immediate UI feedback"},{"type":"INSERT","lineNumber":47,"content":"                internalPoints = internalPoints + latLng"},{"type":"DELETE","lineNumber":50,"oldContent":"        points.forEachIndexed { index, point ->"},{"type":"INSERT","lineNumber":62,"content":"        internalPoints.forEachIndexed { index, point ->"},{"type":"DELETE","lineNumber":54,"oldContent":"                onClick = {"},{"type":"DELETE","lineNumber":55,"oldContent":"                    if (points.size > 1 && !polygonClosed) {"},{"type":"DELETE","lineNumber":56,"oldContent":"                        val last = points.last()"},{"type":"DELETE","lineNumber":57,"oldContent":""},{"type":"DELETE","lineNumber":58,"oldContent":"                        if (point == points.first() && points.size > 2) {"},{"type":"DELETE","lineNumber":59,"oldContent":"                            points = points + point"},{"type":"DELETE","lineNumber":60,"oldContent":"                            polygonClosed = true"},{"type":"DELETE","lineNumber":61,"oldContent":"                        } else if (point != last) {"},{"type":"DELETE","lineNumber":62,"oldContent":"                            points = points + point"},{"type":"DELETE","lineNumber":63,"oldContent":"                        }"},{"type":"DELETE","lineNumber":64,"oldContent":"                    }"},{"type":"DELETE","lineNumber":65,"oldContent":"                    true"},{"type":"DELETE","lineNumber":66,"oldContent":"                }"},{"type":"MODIFY","lineNumber":70,"content":"        if (internalPoints.size > 1) {","oldContent":"        if (points.size > 1) {"},{"type":"MODIFY","lineNumber":72,"content":"                points = internalPoints,","oldContent":"                points = points,"}]},{"timestamp":1757915700671,"changes":[{"type":"DELETE","lineNumber":11,"oldContent":"fun GcsMap("},{"type":"DELETE","lineNumber":12,"oldContent":"    telemetryState: TelemetryState,"},{"type":"DELETE","lineNumber":13,"oldContent":"    points: List<LatLng> = emptyList(),"},{"type":"INSERT","lineNumber":11,"content":"fun GcsMap(telemetryState: TelemetryState) {"},{"type":"INSERT","lineNumber":12,"content":"    var points by remember { mutableStateOf(listOf<LatLng>()) }"},{"type":"DELETE","lineNumber":15,"oldContent":"    onMapClick: (LatLng) -> Unit = {}"},{"type":"DELETE","lineNumber":17,"oldContent":") {"},{"type":"DELETE","lineNumber":19,"oldContent":"    var internalPoints by remember { mutableStateOf(points) }"},{"type":"DELETE","lineNumber":38,"oldContent":"    // Keep internalPoints in sync when parent points change"},{"type":"DELETE","lineNumber":40,"oldContent":"    LaunchedEffect(points) {"},{"type":"DELETE","lineNumber":41,"oldContent":"        internalPoints = points"},{"type":"INSERT","lineNumber":35,"content":"                points = points + latLng"},{"type":"DELETE","lineNumber":43,"oldContent":"    }"},{"type":"DELETE","lineNumber":45,"oldContent":""},{"type":"DELETE","lineNumber":52,"oldContent":"                // Notify parent"},{"type":"DELETE","lineNumber":54,"oldContent":"                onMapClick(latLng)"},{"type":"DELETE","lineNumber":56,"oldContent":"                // update internal copy for immediate UI feedback"},{"type":"DELETE","lineNumber":58,"oldContent":"                internalPoints = internalPoints + latLng"},{"type":"INSERT","lineNumber":50,"content":"        points.forEachIndexed { index, point ->"},{"type":"DELETE","lineNumber":65,"oldContent":"        internalPoints.forEachIndexed { index, point ->"},{"type":"INSERT","lineNumber":54,"content":"                onClick = {"},{"type":"INSERT","lineNumber":55,"content":"                    if (points.size > 1 && !polygonClosed) {"},{"type":"INSERT","lineNumber":56,"content":"                        val last = points.last()"},{"type":"INSERT","lineNumber":57,"content":""},{"type":"INSERT","lineNumber":58,"content":"                        if (point == points.first() && points.size > 2) {"},{"type":"INSERT","lineNumber":59,"content":"                            points = points + point"},{"type":"INSERT","lineNumber":60,"content":"                            polygonClosed = true"},{"type":"INSERT","lineNumber":61,"content":"                        } else if (point != last) {"},{"type":"INSERT","lineNumber":62,"content":"                            points = points + point"},{"type":"INSERT","lineNumber":63,"content":"                        }"},{"type":"INSERT","lineNumber":64,"content":"                    }"},{"type":"INSERT","lineNumber":65,"content":"                    true"},{"type":"INSERT","lineNumber":66,"content":"                }"},{"type":"DELETE","lineNumber":69,"oldContent":"        if (internalPoints.size > 1) {"},{"type":"INSERT","lineNumber":70,"content":"        // Draw polyline (open or closed)"},{"type":"DELETE","lineNumber":71,"oldContent":"                points = internalPoints,"},{"type":"INSERT","lineNumber":72,"content":"            Polyline("}]},{"timestamp":1757915709340,"changes":[{"type":"MODIFY","lineNumber":11,"content":"fun GcsMap(","oldContent":"fun GcsMap(telemetryState: TelemetryState) {"},{"type":"INSERT","lineNumber":12,"content":"    telemetryState: TelemetryState,"},{"type":"INSERT","lineNumber":13,"content":"    mapType: MapType"},{"type":"INSERT","lineNumber":14,"content":") {"},{"type":"DELETE","lineNumber":31,"oldContent":"                points = points + latLng"},{"type":"INSERT","lineNumber":36,"content":"        properties = MapProperties(mapType = mapType), // âœ… Map type applied"},{"type":"INSERT","lineNumber":39,"content":"                points = points + latLng"},{"type":"DELETE","lineNumber":42,"oldContent":"        points.forEachIndexed { index, point ->"},{"type":"INSERT","lineNumber":49,"content":"                title = \"Drone Location\""},{"type":"INSERT","lineNumber":50,"content":"            )"},{"type":"INSERT","lineNumber":51,"content":"        }"},{"type":"INSERT","lineNumber":52,"content":""},{"type":"INSERT","lineNumber":53,"content":"        // User-drawn markers"},{"type":"INSERT","lineNumber":54,"content":"        points.forEachIndexed { index, point ->"},{"type":"INSERT","lineNumber":55,"content":"            Marker("},{"type":"INSERT","lineNumber":56,"content":"                state = MarkerState(position = point),"},{"type":"INSERT","lineNumber":57,"content":"                title = \"Marker ${index + 1}\","},{"type":"DELETE","lineNumber":48,"oldContent":"                title = \"Drone Location\""},{"type":"DELETE","lineNumber":51,"oldContent":"            )"},{"type":"DELETE","lineNumber":54,"oldContent":"        }"},{"type":"DELETE","lineNumber":56,"oldContent":""},{"type":"DELETE","lineNumber":58,"oldContent":"        // User-drawn markers"},{"type":"DELETE","lineNumber":60,"oldContent":"            Marker("},{"type":"DELETE","lineNumber":62,"oldContent":"                state = MarkerState(position = point),"},{"type":"DELETE","lineNumber":64,"oldContent":"                title = \"Marker ${index + 1}\","},{"type":"DELETE","lineNumber":79,"oldContent":""}]},{"timestamp":1757915781162,"changes":[{"type":"MODIFY","lineNumber":13,"content":"<<<<<<< Updated upstream","oldContent":"    var points by remember { mutableStateOf(listOf<LatLng>()) }"},{"type":"MODIFY","lineNumber":16,"content":"    var points by remember { mutableStateOf(listOf<LatLng>()) }","oldContent":"    var polygonClosed by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":17,"content":"======="},{"type":"INSERT","lineNumber":18,"content":"    points: List<LatLng> = emptyList(),"},{"type":"INSERT","lineNumber":19,"content":"    onMapClick: (LatLng) -> Unit = {}"},{"type":"INSERT","lineNumber":20,"content":") {"},{"type":"INSERT","lineNumber":21,"content":"    var internalPoints by remember { mutableStateOf(points) }"},{"type":"INSERT","lineNumber":22,"content":">>>>>>> Stashed changes"},{"type":"INSERT","lineNumber":23,"content":"    var polygonClosed by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":40,"content":"    // Keep internalPoints in sync when parent points change"},{"type":"INSERT","lineNumber":41,"content":"    LaunchedEffect(points) {"},{"type":"INSERT","lineNumber":42,"content":"        internalPoints = points"},{"type":"INSERT","lineNumber":43,"content":"    }"},{"type":"INSERT","lineNumber":44,"content":""},{"type":"INSERT","lineNumber":48,"content":"        properties = MapProperties(mapType = mapType), // âœ… Map type applied"},{"type":"DELETE","lineNumber":38,"oldContent":"        properties = MapProperties(mapType = mapType), // âœ… Map type applied"},{"type":"INSERT","lineNumber":51,"content":"                // Notify parent"},{"type":"INSERT","lineNumber":52,"content":"                onMapClick(latLng)"},{"type":"INSERT","lineNumber":53,"content":"                // update internal copy for immediate UI feedback"},{"type":"INSERT","lineNumber":54,"content":"                internalPoints = internalPoints + latLng"},{"type":"DELETE","lineNumber":42,"oldContent":"                points = points + latLng"},{"type":"DELETE","lineNumber":49,"oldContent":"                onClick = {"},{"type":"DELETE","lineNumber":50,"oldContent":"                    if (points.size > 1 && !polygonClosed) {"},{"type":"DELETE","lineNumber":52,"oldContent":"                        val last = points.last()"},{"type":"DELETE","lineNumber":54,"oldContent":""},{"type":"DELETE","lineNumber":57,"oldContent":"                        if (point == points.first() && points.size > 2) {"},{"type":"DELETE","lineNumber":59,"oldContent":"                            points = points + point"},{"type":"DELETE","lineNumber":60,"oldContent":"        points.forEachIndexed { index, point ->"},{"type":"INSERT","lineNumber":69,"content":"        internalPoints.forEachIndexed { index, point ->"},{"type":"DELETE","lineNumber":62,"oldContent":"                            polygonClosed = true"},{"type":"DELETE","lineNumber":65,"oldContent":"                        } else if (point != last) {"},{"type":"DELETE","lineNumber":66,"oldContent":"                            points = points + point"},{"type":"DELETE","lineNumber":67,"oldContent":"                        }"},{"type":"DELETE","lineNumber":68,"oldContent":"                    }"},{"type":"DELETE","lineNumber":69,"oldContent":"                    true"},{"type":"DELETE","lineNumber":70,"oldContent":"                }"},{"type":"DELETE","lineNumber":75,"oldContent":"        if (points.size > 1) {"},{"type":"INSERT","lineNumber":77,"content":"        if (internalPoints.size > 1) {"},{"type":"DELETE","lineNumber":77,"oldContent":"                points = points,"},{"type":"INSERT","lineNumber":79,"content":"                points = internalPoints,"}]},{"timestamp":1757915853667,"changes":[{"type":"DELETE","lineNumber":11,"oldContent":"fun GcsMap("},{"type":"DELETE","lineNumber":12,"oldContent":"    telemetryState: TelemetryState,"},{"type":"DELETE","lineNumber":13,"oldContent":"<<<<<<< Updated upstream"},{"type":"DELETE","lineNumber":14,"oldContent":"    mapType: MapType"},{"type":"DELETE","lineNumber":15,"oldContent":"    var polygonClosed by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":11,"content":"fun GcsMap(telemetryState: TelemetryState) {"},{"type":"DELETE","lineNumber":17,"oldContent":"======="},{"type":"INSERT","lineNumber":13,"content":"    var polygonClosed by remember { mutableStateOf(false) }"},{"type":"DELETE","lineNumber":19,"oldContent":"    points: List<LatLng> = emptyList(),"},{"type":"DELETE","lineNumber":21,"oldContent":"    onMapClick: (LatLng) -> Unit = {}"},{"type":"DELETE","lineNumber":23,"oldContent":") {"},{"type":"DELETE","lineNumber":25,"oldContent":"    var internalPoints by remember { mutableStateOf(points) }"},{"type":"DELETE","lineNumber":27,"oldContent":">>>>>>> Stashed changes"},{"type":"DELETE","lineNumber":29,"oldContent":"    var polygonClosed by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":35,"content":"                points = points + latLng"},{"type":"DELETE","lineNumber":46,"oldContent":"    // Keep internalPoints in sync when parent points change"},{"type":"DELETE","lineNumber":48,"oldContent":"    LaunchedEffect(points) {"},{"type":"DELETE","lineNumber":50,"oldContent":"        internalPoints = points"},{"type":"DELETE","lineNumber":51,"oldContent":"    }"},{"type":"DELETE","lineNumber":53,"oldContent":""},{"type":"DELETE","lineNumber":58,"oldContent":"        properties = MapProperties(mapType = mapType), // âœ… Map type applied"},{"type":"DELETE","lineNumber":60,"oldContent":"                // Notify parent"},{"type":"DELETE","lineNumber":62,"oldContent":"                onMapClick(latLng)"},{"type":"DELETE","lineNumber":63,"oldContent":"                // update internal copy for immediate UI feedback"},{"type":"DELETE","lineNumber":65,"oldContent":"                internalPoints = internalPoints + latLng"},{"type":"INSERT","lineNumber":50,"content":"        points.forEachIndexed { index, point ->"},{"type":"DELETE","lineNumber":72,"oldContent":"        internalPoints.forEachIndexed { index, point ->"},{"type":"INSERT","lineNumber":54,"content":"                onClick = {"},{"type":"INSERT","lineNumber":55,"content":"                    if (points.size > 1 && !polygonClosed) {"},{"type":"INSERT","lineNumber":56,"content":"                        val last = points.last()"},{"type":"INSERT","lineNumber":57,"content":""},{"type":"INSERT","lineNumber":58,"content":"                        if (point == points.first() && points.size > 2) {"},{"type":"INSERT","lineNumber":59,"content":"                            points = points + point"},{"type":"INSERT","lineNumber":60,"content":"                            polygonClosed = true"},{"type":"INSERT","lineNumber":61,"content":"                        } else if (point != last) {"},{"type":"INSERT","lineNumber":62,"content":"                            points = points + point"},{"type":"INSERT","lineNumber":63,"content":"                        }"},{"type":"INSERT","lineNumber":64,"content":"                    }"},{"type":"INSERT","lineNumber":65,"content":"                    true"},{"type":"INSERT","lineNumber":66,"content":"                }"},{"type":"INSERT","lineNumber":71,"content":"        if (points.size > 1) {"},{"type":"DELETE","lineNumber":78,"oldContent":"        if (internalPoints.size > 1) {"},{"type":"INSERT","lineNumber":73,"content":"                points = points,"},{"type":"DELETE","lineNumber":80,"oldContent":"                points = internalPoints,"},{"type":"INSERT","lineNumber":79,"content":""}]},{"timestamp":1758019569277,"changes":[{"type":"INSERT","lineNumber":2,"content":"import android.util.Log"},{"type":"INSERT","lineNumber":3,"content":"import androidx.compose.foundation.layout.Box"},{"type":"DELETE","lineNumber":3,"oldContent":"import androidx.compose.runtime.*"},{"type":"INSERT","lineNumber":5,"content":"import androidx.compose.material3.Text"},{"type":"INSERT","lineNumber":6,"content":"import androidx.compose.runtime.Composable"},{"type":"INSERT","lineNumber":7,"content":"import androidx.compose.ui.Alignment"},{"type":"INSERT","lineNumber":9,"content":"import androidx.compose.ui.graphics.Color"},{"type":"INSERT","lineNumber":10,"content":"import androidx.compose.ui.unit.sp"},{"type":"INSERT","lineNumber":15,"content":"import com.google.maps.android.compose.MapType"},{"type":"DELETE","lineNumber":11,"oldContent":"fun GcsMap(telemetryState: TelemetryState) {"},{"type":"DELETE","lineNumber":12,"oldContent":"    var polygonClosed by remember { mutableStateOf(false) }"},{"type":"DELETE","lineNumber":13,"oldContent":"    var points by remember { mutableStateOf(listOf<LatLng>()) }"},{"type":"INSERT","lineNumber":18,"content":"fun GcsMap("},{"type":"INSERT","lineNumber":19,"content":"    telemetryState: TelemetryState,"},{"type":"INSERT","lineNumber":20,"content":"    points: List<LatLng> = emptyList(),"},{"type":"INSERT","lineNumber":21,"content":"    onMapClick: (LatLng) -> Unit = {},"},{"type":"INSERT","lineNumber":22,"content":"    cameraPositionState: CameraPositionState? = null,"},{"type":"INSERT","lineNumber":23,"content":"    mapType: MapType = MapType.NORMAL,"},{"type":"INSERT","lineNumber":24,"content":"    autoCenter: Boolean = true // new flag to control automatic recentering"},{"type":"INSERT","lineNumber":25,"content":") {"},{"type":"INSERT","lineNumber":26,"content":"    val cameraState = cameraPositionState ?: rememberCameraPositionState()"},{"type":"DELETE","lineNumber":15,"oldContent":"    val cameraPositionState = rememberCameraPositionState()"},{"type":"INSERT","lineNumber":28,"content":"    // Defensive: Use default position if telemetry is missing"},{"type":"INSERT","lineNumber":29,"content":"    val lat = telemetryState.latitude"},{"type":"INSERT","lineNumber":30,"content":"    val lon = telemetryState.longitude"},{"type":"INSERT","lineNumber":31,"content":"    val hasTelemetry = lat != null && lon != null"},{"type":"INSERT","lineNumber":32,"content":"    val defaultLatLng = LatLng(19.0760, 72.8777) // Mumbai as fallback"},{"type":"DELETE","lineNumber":17,"oldContent":"    // Update camera when telemetry changes (live location)"},{"type":"DELETE","lineNumber":18,"oldContent":"    LaunchedEffect(telemetryState.latitude, telemetryState.longitude) {"},{"type":"DELETE","lineNumber":19,"oldContent":"        val lat = telemetryState.latitude"},{"type":"DELETE","lineNumber":20,"oldContent":"        val lon = telemetryState.longitude"},{"type":"DELETE","lineNumber":21,"oldContent":"        if (lat != null && lon != null) {"},{"type":"DELETE","lineNumber":22,"oldContent":"            val newPosition = LatLng(lat, lon)"},{"type":"DELETE","lineNumber":23,"oldContent":"            cameraPositionState.animate("},{"type":"DELETE","lineNumber":24,"oldContent":"                update = CameraUpdateFactory.newLatLngZoom(newPosition, 16f),"},{"type":"DELETE","lineNumber":25,"oldContent":"                points = points + latLng"},{"type":"DELETE","lineNumber":26,"oldContent":"                durationMs = 1000"},{"type":"DELETE","lineNumber":27,"oldContent":"            )"},{"type":"INSERT","lineNumber":34,"content":"    Log.d(\"GcsMap\", \"Rendering map: lat=$lat lon=$lon points=${points.size} connected=${telemetryState.connected}\")"},{"type":"INSERT","lineNumber":35,"content":""},{"type":"INSERT","lineNumber":36,"content":"    if (autoCenter) {"},{"type":"INSERT","lineNumber":37,"content":"        if (hasTelemetry) {"},{"type":"INSERT","lineNumber":38,"content":"            cameraState.move(CameraUpdateFactory.newLatLngZoom(LatLng(lat!!, lon!!), 16f))"},{"type":"INSERT","lineNumber":39,"content":"        } else {"},{"type":"INSERT","lineNumber":40,"content":"            cameraState.move(CameraUpdateFactory.newLatLngZoom(defaultLatLng, 10f))"},{"type":"DELETE","lineNumber":31,"oldContent":"    GoogleMap("},{"type":"DELETE","lineNumber":32,"oldContent":"        modifier = Modifier.fillMaxSize(),"},{"type":"DELETE","lineNumber":33,"oldContent":"        cameraPositionState = cameraPositionState,"},{"type":"DELETE","lineNumber":34,"oldContent":"        onMapClick = { latLng ->"},{"type":"DELETE","lineNumber":35,"oldContent":"            if (!polygonClosed) {"},{"type":"INSERT","lineNumber":44,"content":"    Box(modifier = Modifier.fillMaxSize()) {"},{"type":"INSERT","lineNumber":45,"content":"        GoogleMap("},{"type":"INSERT","lineNumber":46,"content":"            modifier = Modifier.fillMaxSize(),"},{"type":"INSERT","lineNumber":47,"content":"            cameraPositionState = cameraState,"},{"type":"INSERT","lineNumber":48,"content":"            properties = MapProperties(mapType = mapType),"},{"type":"INSERT","lineNumber":49,"content":"            onMapClick = { latLng -> onMapClick(latLng) }"},{"type":"INSERT","lineNumber":50,"content":"        ) {"},{"type":"INSERT","lineNumber":51,"content":"            // Live drone marker"},{"type":"INSERT","lineNumber":52,"content":"            if (hasTelemetry) {"},{"type":"INSERT","lineNumber":53,"content":"                Marker(state = MarkerState(position = LatLng(lat!!, lon!!)), title = \"Drone Location\")"},{"type":"DELETE","lineNumber":37,"oldContent":"        }"},{"type":"DELETE","lineNumber":38,"oldContent":"    ) {"},{"type":"DELETE","lineNumber":39,"oldContent":"        points.forEachIndexed { index, point ->"},{"type":"DELETE","lineNumber":40,"oldContent":"        // Live drone marker"},{"type":"DELETE","lineNumber":41,"oldContent":"                onClick = {"},{"type":"DELETE","lineNumber":42,"oldContent":"        val lat = telemetryState.latitude"},{"type":"DELETE","lineNumber":43,"oldContent":"                    if (points.size > 1 && !polygonClosed) {"},{"type":"DELETE","lineNumber":44,"oldContent":"        val lon = telemetryState.longitude"},{"type":"DELETE","lineNumber":45,"oldContent":"                        val last = points.last()"},{"type":"DELETE","lineNumber":46,"oldContent":"        if (lat != null && lon != null) {"},{"type":"DELETE","lineNumber":47,"oldContent":""},{"type":"DELETE","lineNumber":48,"oldContent":"            Marker("},{"type":"DELETE","lineNumber":49,"oldContent":"                        if (point == points.first() && points.size > 2) {"},{"type":"DELETE","lineNumber":50,"oldContent":"                            points = points + point"},{"type":"DELETE","lineNumber":51,"oldContent":"                state = MarkerState(position = LatLng(lat, lon)),"},{"type":"DELETE","lineNumber":52,"oldContent":"                            polygonClosed = true"},{"type":"DELETE","lineNumber":53,"oldContent":"                        } else if (point != last) {"},{"type":"DELETE","lineNumber":54,"oldContent":"                title = \"Drone Location\""},{"type":"DELETE","lineNumber":55,"oldContent":"                            points = points + point"},{"type":"DELETE","lineNumber":56,"oldContent":"                        }"},{"type":"DELETE","lineNumber":57,"oldContent":"                    }"},{"type":"DELETE","lineNumber":58,"oldContent":"            )"},{"type":"DELETE","lineNumber":59,"oldContent":"                    true"},{"type":"INSERT","lineNumber":55,"content":"            // User-drawn markers"},{"type":"INSERT","lineNumber":56,"content":"            points.forEachIndexed { index, point ->"},{"type":"INSERT","lineNumber":57,"content":"                Marker(state = MarkerState(position = point), title = \"WP ${index + 1}\")"},{"type":"INSERT","lineNumber":58,"content":"            }"},{"type":"INSERT","lineNumber":59,"content":"            // Draw polyline connecting waypoints"},{"type":"INSERT","lineNumber":60,"content":"            if (points.size > 1) {"},{"type":"INSERT","lineNumber":61,"content":"                Polyline(points = points, width = 4f)"},{"type":"INSERT","lineNumber":62,"content":"            }"},{"type":"INSERT","lineNumber":63,"content":"            // If 4 or more points, draw a simple grid over bounding box"},{"type":"INSERT","lineNumber":64,"content":"            if (points.size >= 4) {"},{"type":"INSERT","lineNumber":65,"content":"                val lats = points.map { it.latitude }"},{"type":"INSERT","lineNumber":66,"content":"                val lons = points.map { it.longitude }"},{"type":"INSERT","lineNumber":67,"content":"                val minLat = lats.minOrNull() ?: 0.0"},{"type":"INSERT","lineNumber":68,"content":"                val maxLat = lats.maxOrNull() ?: 0.0"},{"type":"INSERT","lineNumber":69,"content":"                val minLon = lons.minOrNull() ?: 0.0"},{"type":"INSERT","lineNumber":70,"content":"                val maxLon = lons.maxOrNull() ?: 0.0"},{"type":"INSERT","lineNumber":71,"content":"                val latSteps = listOf(minLat, (minLat + maxLat) / 2.0, maxLat)"},{"type":"INSERT","lineNumber":72,"content":"                val lonSteps = listOf(minLon, (minLon + maxLon) / 2.0, maxLon)"},{"type":"INSERT","lineNumber":73,"content":"                lonSteps.forEach { lonVal ->"},{"type":"INSERT","lineNumber":74,"content":"                    val line = listOf(LatLng(minLat, lonVal), LatLng(maxLat, lonVal))"},{"type":"INSERT","lineNumber":75,"content":"                    Polyline(points = line, width = 2f, color = Color.Gray)"},{"type":"INSERT","lineNumber":77,"content":"                latSteps.forEach { latVal ->"},{"type":"INSERT","lineNumber":78,"content":"                    val line = listOf(LatLng(latVal, minLon), LatLng(latVal, maxLon))"},{"type":"INSERT","lineNumber":79,"content":"                    Polyline(points = line, width = 2f, color = Color.Gray)"},{"type":"INSERT","lineNumber":80,"content":"                }"},{"type":"INSERT","lineNumber":81,"content":"            }"},{"type":"DELETE","lineNumber":62,"oldContent":""},{"type":"DELETE","lineNumber":63,"oldContent":"        // User-drawn markers"},{"type":"DELETE","lineNumber":64,"oldContent":"            Marker("},{"type":"DELETE","lineNumber":65,"oldContent":"                state = MarkerState(position = point),"},{"type":"DELETE","lineNumber":66,"oldContent":"        if (points.size > 1) {"},{"type":"DELETE","lineNumber":67,"oldContent":"                title = \"Marker ${index + 1}\","},{"type":"DELETE","lineNumber":68,"oldContent":"                points = points,"},{"type":"DELETE","lineNumber":69,"oldContent":"            )"},{"type":"INSERT","lineNumber":83,"content":"        if (!hasTelemetry) {"},{"type":"INSERT","lineNumber":84,"content":"            Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {"},{"type":"INSERT","lineNumber":85,"content":"                Text(\"No telemetry data. Waiting for drone position...\", fontSize = 18.sp, color = Color.Red)"},{"type":"INSERT","lineNumber":86,"content":"            }"},{"type":"DELETE","lineNumber":71,"oldContent":""},{"type":"DELETE","lineNumber":72,"oldContent":"        // Draw polyline (open or closed)"},{"type":"DELETE","lineNumber":73,"oldContent":"            Polyline("},{"type":"DELETE","lineNumber":74,"oldContent":""},{"type":"DELETE","lineNumber":75,"oldContent":"                width = 4f"},{"type":"DELETE","lineNumber":76,"oldContent":"            )"},{"type":"DELETE","lineNumber":77,"oldContent":"        }"}]},{"timestamp":1758086730253,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import android.util.Log"},{"type":"MODIFY","lineNumber":3,"content":"import androidx.compose.runtime.Composable","oldContent":"import androidx.compose.foundation.layout.Box"},{"type":"MODIFY","lineNumber":5,"content":"import androidx.compose.ui.graphics.Color","oldContent":"import androidx.compose.material3.Text"},{"type":"DELETE","lineNumber":8,"oldContent":"import androidx.compose.runtime.Composable"},{"type":"DELETE","lineNumber":10,"oldContent":"import androidx.compose.ui.Alignment"},{"type":"DELETE","lineNumber":13,"oldContent":"import androidx.compose.ui.graphics.Color"},{"type":"DELETE","lineNumber":14,"oldContent":""},{"type":"DELETE","lineNumber":15,"oldContent":"import androidx.compose.ui.unit.sp"},{"type":"DELETE","lineNumber":16,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":17,"oldContent":""},{"type":"INSERT","lineNumber":12,"content":"@Composable"},{"type":"DELETE","lineNumber":29,"oldContent":"    // Defensive: Use default position if telemetry is missing"},{"type":"DELETE","lineNumber":30,"oldContent":"        }"},{"type":"INSERT","lineNumber":22,"content":""},{"type":"INSERT","lineNumber":23,"content":"    // Update camera when telemetry changes (live location) only if autoCenter is true"},{"type":"DELETE","lineNumber":32,"oldContent":"    }"},{"type":"INSERT","lineNumber":26,"content":"    if (autoCenter && lat != null && lon != null) {"},{"type":"INSERT","lineNumber":27,"content":"        // animate only when autoCenter is requested"},{"type":"INSERT","lineNumber":28,"content":"        cameraState.move(CameraUpdateFactory.newLatLngZoom(LatLng(lat, lon), 16f))"},{"type":"INSERT","lineNumber":29,"content":"    }"},{"type":"DELETE","lineNumber":35,"oldContent":"    val hasTelemetry = lat != null && lon != null"},{"type":"DELETE","lineNumber":36,"oldContent":"    val defaultLatLng = LatLng(19.0760, 72.8777) // Mumbai as fallback"},{"type":"DELETE","lineNumber":37,"oldContent":"    Log.d(\"GcsMap\", \"Rendering map: lat=$lat lon=$lon points=${points.size} connected=${telemetryState.connected}\")"},{"type":"INSERT","lineNumber":31,"content":"    GoogleMap("},{"type":"INSERT","lineNumber":32,"content":"        modifier = Modifier.fillMaxSize(),"},{"type":"INSERT","lineNumber":33,"content":"        cameraPositionState = cameraState,"},{"type":"INSERT","lineNumber":34,"content":"        properties = MapProperties(mapType = mapType),"},{"type":"INSERT","lineNumber":35,"content":"        onMapClick = { latLng -> onMapClick(latLng) }"},{"type":"INSERT","lineNumber":36,"content":"    ) {"},{"type":"INSERT","lineNumber":37,"content":"        // Live drone marker"},{"type":"INSERT","lineNumber":38,"content":"        if (lat != null && lon != null) {"},{"type":"INSERT","lineNumber":39,"content":"            Marker(state = MarkerState(position = LatLng(lat, lon)), title = \"Drone Location\")"},{"type":"INSERT","lineNumber":40,"content":"        }"},{"type":"DELETE","lineNumber":39,"oldContent":"    if (autoCenter) {"},{"type":"INSERT","lineNumber":42,"content":"        // User-drawn markers"},{"type":"INSERT","lineNumber":43,"content":"        points.forEachIndexed { index, point ->"},{"type":"INSERT","lineNumber":44,"content":"            Marker(state = MarkerState(position = point), title = \"WP ${index + 1}\")"},{"type":"INSERT","lineNumber":45,"content":"        }"},{"type":"INSERT","lineNumber":46,"content":""},{"type":"INSERT","lineNumber":47,"content":"        // Draw polyline connecting waypoints"},{"type":"INSERT","lineNumber":48,"content":"        if (points.size > 1) {"},{"type":"INSERT","lineNumber":49,"content":"            Polyline(points = points, width = 4f)"},{"type":"INSERT","lineNumber":50,"content":"        }"},{"type":"INSERT","lineNumber":51,"content":""},{"type":"INSERT","lineNumber":52,"content":"        // If 4 or more points, draw a simple grid over bounding box"},{"type":"INSERT","lineNumber":53,"content":"        if (points.size >= 4) {"},{"type":"INSERT","lineNumber":54,"content":"            val lats = points.map { it.latitude }"},{"type":"INSERT","lineNumber":55,"content":"            val lons = points.map { it.longitude }"},{"type":"INSERT","lineNumber":56,"content":"            val minLat = lats.minOrNull() ?: 0.0"},{"type":"INSERT","lineNumber":57,"content":"            val maxLat = lats.maxOrNull() ?: 0.0"},{"type":"INSERT","lineNumber":58,"content":"            val minLon = lons.minOrNull() ?: 0.0"},{"type":"INSERT","lineNumber":59,"content":"            val maxLon = lons.maxOrNull() ?: 0.0"},{"type":"INSERT","lineNumber":60,"content":""},{"type":"INSERT","lineNumber":61,"content":"            // draw two vertical and two horizontal lines (3x3 grid)"},{"type":"INSERT","lineNumber":62,"content":"            val latSteps = listOf(minLat, (minLat + maxLat) / 2.0, maxLat)"},{"type":"INSERT","lineNumber":63,"content":"            val lonSteps = listOf(minLon, (minLon + maxLon) / 2.0, maxLon)"},{"type":"INSERT","lineNumber":64,"content":""},{"type":"INSERT","lineNumber":65,"content":"            // vertical lines"},{"type":"INSERT","lineNumber":66,"content":"            lonSteps.forEach { lonVal ->"},{"type":"INSERT","lineNumber":67,"content":"                val line = listOf(LatLng(minLat, lonVal), LatLng(maxLat, lonVal))"},{"type":"INSERT","lineNumber":68,"content":"                Polyline(points = line, width = 2f, color = Color.Gray)"},{"type":"DELETE","lineNumber":41,"oldContent":"        if (hasTelemetry) {"},{"type":"DELETE","lineNumber":42,"oldContent":"            cameraState.move(CameraUpdateFactory.newLatLngZoom(LatLng(lat!!, lon!!), 16f))"},{"type":"DELETE","lineNumber":43,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":44,"oldContent":"            cameraState.move(CameraUpdateFactory.newLatLngZoom(defaultLatLng, 10f))"},{"type":"DELETE","lineNumber":45,"oldContent":"    Box(modifier = Modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":46,"oldContent":"        GoogleMap("},{"type":"DELETE","lineNumber":47,"oldContent":"            modifier = Modifier.fillMaxSize(),"},{"type":"DELETE","lineNumber":48,"oldContent":"            cameraPositionState = cameraState,"},{"type":"DELETE","lineNumber":49,"oldContent":"            properties = MapProperties(mapType = mapType),"},{"type":"DELETE","lineNumber":50,"oldContent":"            onMapClick = { latLng -> onMapClick(latLng) }"},{"type":"DELETE","lineNumber":51,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":52,"oldContent":"            // Live drone marker"},{"type":"DELETE","lineNumber":53,"oldContent":"            if (hasTelemetry) {"},{"type":"DELETE","lineNumber":54,"oldContent":"                Marker(state = MarkerState(position = LatLng(lat!!, lon!!)), title = \"Drone Location\")"},{"type":"DELETE","lineNumber":55,"oldContent":"            // User-drawn markers"},{"type":"DELETE","lineNumber":56,"oldContent":"            points.forEachIndexed { index, point ->"},{"type":"DELETE","lineNumber":57,"oldContent":"                Marker(state = MarkerState(position = point), title = \"WP ${index + 1}\")"},{"type":"INSERT","lineNumber":70,"content":"            // horizontal lines"},{"type":"INSERT","lineNumber":71,"content":"            latSteps.forEach { latVal ->"},{"type":"INSERT","lineNumber":72,"content":"                val line = listOf(LatLng(latVal, minLon), LatLng(latVal, maxLon))"},{"type":"INSERT","lineNumber":73,"content":"                Polyline(points = line, width = 2f, color = Color.Gray)"},{"type":"DELETE","lineNumber":59,"oldContent":"            // Draw polyline connecting waypoints"},{"type":"DELETE","lineNumber":60,"oldContent":"            if (points.size > 1) {"},{"type":"DELETE","lineNumber":61,"oldContent":"                }"},{"type":"DELETE","lineNumber":62,"oldContent":"                Polyline(points = points, width = 4f)"},{"type":"DELETE","lineNumber":64,"oldContent":"            }"},{"type":"DELETE","lineNumber":65,"oldContent":"            // If 4 or more points, draw a simple grid over bounding box"},{"type":"DELETE","lineNumber":66,"oldContent":"            if (points.size >= 4) {"},{"type":"DELETE","lineNumber":67,"oldContent":"                val lats = points.map { it.latitude }"},{"type":"DELETE","lineNumber":68,"oldContent":"                val lons = points.map { it.longitude }"},{"type":"DELETE","lineNumber":69,"oldContent":"                val minLat = lats.minOrNull() ?: 0.0"},{"type":"DELETE","lineNumber":70,"oldContent":"                val maxLat = lats.maxOrNull() ?: 0.0"},{"type":"DELETE","lineNumber":71,"oldContent":"                val minLon = lons.minOrNull() ?: 0.0"},{"type":"DELETE","lineNumber":72,"oldContent":"                val maxLon = lons.maxOrNull() ?: 0.0"},{"type":"DELETE","lineNumber":73,"oldContent":"        }"},{"type":"DELETE","lineNumber":74,"oldContent":"                val latSteps = listOf(minLat, (minLat + maxLat) / 2.0, maxLat)"},{"type":"DELETE","lineNumber":75,"oldContent":"                val lonSteps = listOf(minLon, (minLon + maxLon) / 2.0, maxLon)"},{"type":"DELETE","lineNumber":76,"oldContent":"                lonSteps.forEach { lonVal ->"},{"type":"DELETE","lineNumber":77,"oldContent":"                    val line = listOf(LatLng(minLat, lonVal), LatLng(maxLat, lonVal))"},{"type":"DELETE","lineNumber":78,"oldContent":"                    Polyline(points = line, width = 2f, color = Color.Gray)"},{"type":"DELETE","lineNumber":79,"oldContent":"                latSteps.forEach { latVal ->"},{"type":"DELETE","lineNumber":80,"oldContent":"                    val line = listOf(LatLng(latVal, minLon), LatLng(latVal, maxLon))"},{"type":"DELETE","lineNumber":82,"oldContent":"                    Polyline(points = line, width = 2f, color = Color.Gray)"},{"type":"DELETE","lineNumber":84,"oldContent":"                }"},{"type":"DELETE","lineNumber":85,"oldContent":"            }"},{"type":"DELETE","lineNumber":86,"oldContent":"            }"},{"type":"DELETE","lineNumber":87,"oldContent":"                Text(\"No telemetry data. Waiting for drone position...\", fontSize = 18.sp, color = Color.Red)"},{"type":"DELETE","lineNumber":88,"oldContent":"            Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {"},{"type":"DELETE","lineNumber":89,"oldContent":"        if (!hasTelemetry) {"}]},{"timestamp":1758166955446,"changes":[{"type":"INSERT","lineNumber":0,"content":""},{"type":"DELETE","lineNumber":2,"oldContent":"import androidx.compose.runtime.Composable"},{"type":"MODIFY","lineNumber":3,"content":"import android.graphics.Bitmap","oldContent":"import androidx.compose.foundation.layout.Box"},{"type":"INSERT","lineNumber":4,"content":"import android.graphics.BitmapFactory"},{"type":"INSERT","lineNumber":5,"content":"import androidx.compose.foundation.layout.fillMaxSize"},{"type":"INSERT","lineNumber":6,"content":"import androidx.compose.runtime.*"},{"type":"INSERT","lineNumber":7,"content":"import androidx.compose.ui.Modifier"},{"type":"INSERT","lineNumber":8,"content":"import androidx.compose.ui.geometry.Offset"},{"type":"DELETE","lineNumber":5,"oldContent":"import androidx.compose.material3.Text"},{"type":"INSERT","lineNumber":10,"content":"import androidx.compose.ui.platform.LocalContext"},{"type":"INSERT","lineNumber":11,"content":"import com.example.aerogcsclone.R"},{"type":"DELETE","lineNumber":9,"oldContent":"@Composable"},{"type":"INSERT","lineNumber":15,"content":"import com.google.android.gms.maps.model.BitmapDescriptorFactory"},{"type":"DELETE","lineNumber":11,"oldContent":"import com.google.maps.android.compose.MapType"},{"type":"INSERT","lineNumber":18,"content":"@Composable"},{"type":"DELETE","lineNumber":15,"oldContent":""},{"type":"DELETE","lineNumber":17,"oldContent":"    // Update camera when telemetry changes (live location) only if autoCenter is true"},{"type":"DELETE","lineNumber":21,"oldContent":"    if (autoCenter && lat != null && lon != null) {"},{"type":"DELETE","lineNumber":22,"oldContent":"    autoCenter: Boolean = true // new flag to control automatic recentering"},{"type":"DELETE","lineNumber":23,"oldContent":"        // animate only when autoCenter is requested"},{"type":"INSERT","lineNumber":25,"content":"    autoCenter: Boolean = true"},{"type":"DELETE","lineNumber":25,"oldContent":"        cameraState.move(CameraUpdateFactory.newLatLngZoom(LatLng(lat, lon), 16f))"},{"type":"INSERT","lineNumber":27,"content":"    val context = LocalContext.current"},{"type":"INSERT","lineNumber":29,"content":""},{"type":"INSERT","lineNumber":30,"content":"    val visitedPositions = remember { mutableStateListOf<LatLng>() }"},{"type":"INSERT","lineNumber":31,"content":""},{"type":"INSERT","lineNumber":32,"content":"    // Load quadcopter drawable from res/drawable/ic_quadcopter.png and scale to dp-based size"},{"type":"INSERT","lineNumber":33,"content":"    val droneIcon = remember {"},{"type":"INSERT","lineNumber":34,"content":"        runCatching {"},{"type":"INSERT","lineNumber":35,"content":"            val bmp = BitmapFactory.decodeResource(context.resources, R.drawable.d_image_prev_ui)"},{"type":"INSERT","lineNumber":36,"content":"            val sizeDp = 64f"},{"type":"INSERT","lineNumber":37,"content":"            val sizePx = (sizeDp * context.resources.displayMetrics.density).toInt().coerceAtLeast(24)"},{"type":"INSERT","lineNumber":38,"content":"            val scaled = Bitmap.createScaledBitmap(bmp, sizePx, sizePx, true)"},{"type":"INSERT","lineNumber":39,"content":"            BitmapDescriptorFactory.fromBitmap(scaled)"},{"type":"INSERT","lineNumber":40,"content":"        }.getOrNull()"},{"type":"DELETE","lineNumber":28,"oldContent":"    GoogleMap("},{"type":"INSERT","lineNumber":42,"content":""},{"type":"INSERT","lineNumber":44,"content":"    val lon = telemetryState.longitude"},{"type":"INSERT","lineNumber":45,"content":"    if (autoCenter && lat != null && lon != null) {"},{"type":"INSERT","lineNumber":46,"content":"        cameraState.move(CameraUpdateFactory.newLatLngZoom(LatLng(lat, lon), 16f))"},{"type":"INSERT","lineNumber":47,"content":"    }"},{"type":"INSERT","lineNumber":48,"content":""},{"type":"INSERT","lineNumber":49,"content":"    LaunchedEffect(lat, lon) {"},{"type":"INSERT","lineNumber":50,"content":"        if (lat != null && lon != null) {"},{"type":"INSERT","lineNumber":51,"content":"            val pos = LatLng(lat, lon)"},{"type":"INSERT","lineNumber":52,"content":"            if (visitedPositions.isEmpty() || visitedPositions.last() != pos) {"},{"type":"INSERT","lineNumber":53,"content":"                visitedPositions.add(pos)"},{"type":"INSERT","lineNumber":54,"content":"                val maxLen = 2000"},{"type":"INSERT","lineNumber":55,"content":"                if (visitedPositions.size > maxLen) {"},{"type":"INSERT","lineNumber":56,"content":"                    val removeCount = visitedPositions.size - maxLen"},{"type":"INSERT","lineNumber":57,"content":"                    repeat(removeCount) { visitedPositions.removeAt(0) }"},{"type":"INSERT","lineNumber":58,"content":"                }"},{"type":"INSERT","lineNumber":59,"content":"            }"},{"type":"INSERT","lineNumber":60,"content":"        }"},{"type":"INSERT","lineNumber":61,"content":"    }"},{"type":"INSERT","lineNumber":62,"content":""},{"type":"INSERT","lineNumber":63,"content":"    GoogleMap("},{"type":"DELETE","lineNumber":32,"oldContent":"    val lon = telemetryState.longitude"},{"type":"DELETE","lineNumber":34,"oldContent":""},{"type":"DELETE","lineNumber":37,"oldContent":"        // Live drone marker"},{"type":"INSERT","lineNumber":69,"content":"        // Drone marker using quadcopter image; centered via anchor Offset(0.5f, 0.5f)"},{"type":"DELETE","lineNumber":39,"oldContent":""},{"type":"DELETE","lineNumber":40,"oldContent":"            Marker(state = MarkerState(position = LatLng(lat, lon)), title = \"Drone Location\")"},{"type":"INSERT","lineNumber":71,"content":"            Marker("},{"type":"INSERT","lineNumber":72,"content":"                state = MarkerState(position = LatLng(lat, lon)),"},{"type":"INSERT","lineNumber":73,"content":"                title = \"Drone\","},{"type":"INSERT","lineNumber":74,"content":"                icon = droneIcon ?: BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_AZURE),"},{"type":"INSERT","lineNumber":75,"content":"                anchor = Offset(0.5f, 0.5f)"},{"type":"INSERT","lineNumber":76,"content":"            )"},{"type":"DELETE","lineNumber":42,"oldContent":"            }"},{"type":"DELETE","lineNumber":43,"oldContent":"        // User-drawn markers"},{"type":"INSERT","lineNumber":78,"content":""},{"type":"INSERT","lineNumber":79,"content":"        // Waypoint markers and planned route (blue)"},{"type":"DELETE","lineNumber":47,"oldContent":""},{"type":"DELETE","lineNumber":48,"oldContent":"        // Draw polyline connecting waypoints"},{"type":"DELETE","lineNumber":50,"oldContent":"            Polyline(points = points, width = 4f)"},{"type":"INSERT","lineNumber":84,"content":"            Polyline(points = points, width = 4f, color = Color.Blue)"},{"type":"DELETE","lineNumber":53,"oldContent":"        // If 4 or more points, draw a simple grid over bounding box"},{"type":"INSERT","lineNumber":87,"content":"        // Red polyline showing the drone's traveled path"},{"type":"INSERT","lineNumber":88,"content":"        if (visitedPositions.size > 1) {"},{"type":"INSERT","lineNumber":89,"content":"            Polyline(points = visitedPositions.toList(), width = 6f, color = Color.Red)"},{"type":"INSERT","lineNumber":90,"content":"        }"},{"type":"INSERT","lineNumber":91,"content":""},{"type":"INSERT","lineNumber":92,"content":"        // Optional grid overlay"},{"type":"DELETE","lineNumber":60,"oldContent":"            }"},{"type":"DELETE","lineNumber":63,"oldContent":"            // draw two vertical and two horizontal lines (3x3 grid)"},{"type":"DELETE","lineNumber":66,"oldContent":"        }"},{"type":"DELETE","lineNumber":68,"oldContent":"            // vertical lines"},{"type":"DELETE","lineNumber":72,"oldContent":"            // horizontal lines"},{"type":"INSERT","lineNumber":107,"content":"            }"},{"type":"INSERT","lineNumber":111,"content":"            }"},{"type":"INSERT","lineNumber":112,"content":"        }"},{"type":"INSERT","lineNumber":115,"content":""}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/Telemetry/SharedViewModel.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/Telemetry/SharedViewModel.kt","baseContent":"package com.example.aerogcsclone.Telemetry\n\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.setValue\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.combine\nimport kotlinx.coroutines.launch\n\nclass SharedViewModel : ViewModel() {\n\n    var ipAddress by mutableStateOf(\"10.0.2.2\")\n    var port by mutableStateOf(\"5762\")\n\n    private var repo: MavlinkTelemetryRepository? = null\n\n    private val _telemetryState = mutableStateOf(TelemetryState())\n    val telemetryState: StateFlow<TelemetryState> = _telemetryState\n\n    val isConnected: Flow<ERROR> = telemetryState.combine(repo?.state) { state, repoState ->\n        state.connected || repoState?.connected == true\n    }\n\n\n    fun connect() {\n        viewModelScope.launch {\n            val portInt = port.toIntOrNull()\n            if (portInt != null) {\n                val newRepo = MavlinkTelemetryRepository(ipAddress, portInt)\n                repo = newRepo\n                newRepo.start()\n                newRepo.state.collect {\n                    _telemetryState.value = it\n                }\n            }\n        }\n    }\n}\n","baseTimestamp":1757400233339,"deltas":[{"timestamp":1758168941428,"changes":[{"type":"MODIFY","lineNumber":124,"content":"                // Step 1: Confirm mission upload and readback","oldContent":"                // Step 1: Check for acknowledgment of the mission"},{"type":"INSERT","lineNumber":131,"content":"                // Read back mission and confirm waypoints"},{"type":"INSERT","lineNumber":132,"content":"                try {"},{"type":"INSERT","lineNumber":133,"content":"                    repo?.requestMissionAndLog()"},{"type":"INSERT","lineNumber":134,"content":"                    delay(2000) // Wait for readback"},{"type":"INSERT","lineNumber":135,"content":"                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":136,"content":"                    Log.w(\"SharedVM\", \"Mission readback failed: ${e.message}\")"},{"type":"INSERT","lineNumber":137,"content":"                }"},{"type":"DELETE","lineNumber":132,"oldContent":"                // Check basic prerequisites"},{"type":"INSERT","lineNumber":139,"content":"                // Step 2: Check prerequisites"},{"type":"DELETE","lineNumber":138,"oldContent":""},{"type":"DELETE","lineNumber":146,"oldContent":"                // Step 2: See if the drone is either in Stabilize or Loiter to arm the drone"},{"type":"INSERT","lineNumber":152,"content":"                // Step 3: Switch to Stabilize/Loiter if needed"},{"type":"DELETE","lineNumber":150,"oldContent":""},{"type":"DELETE","lineNumber":154,"oldContent":""},{"type":"DELETE","lineNumber":155,"oldContent":"                    // Wait for mode change to Stabilize"},{"type":"DELETE","lineNumber":156,"oldContent":"                    val modeTimeout = 5000L"},{"type":"DELETE","lineNumber":157,"oldContent":"                    val modeStart = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":158,"oldContent":"                    while (System.currentTimeMillis() - modeStart < modeTimeout) {"},{"type":"DELETE","lineNumber":159,"oldContent":"                        val mode = _telemetryState.value.mode"},{"type":"DELETE","lineNumber":160,"oldContent":"                        if (mode?.equals(\"Stabilize\", ignoreCase = true) == true) {"},{"type":"DELETE","lineNumber":161,"oldContent":"                            Log.i(\"SharedVM\", \"âœ“ Successfully switched to Stabilize mode\")"},{"type":"DELETE","lineNumber":162,"oldContent":"                            break"},{"type":"DELETE","lineNumber":163,"oldContent":"                        }"},{"type":"DELETE","lineNumber":164,"oldContent":"                        delay(500)"},{"type":"DELETE","lineNumber":165,"oldContent":"                    }"},{"type":"DELETE","lineNumber":166,"oldContent":""},{"type":"DELETE","lineNumber":167,"oldContent":"                    if (!(_telemetryState.value.mode?.equals(\"Stabilize\", ignoreCase = true) == true)) {"},{"type":"DELETE","lineNumber":168,"oldContent":"                        Log.w(\"SharedVM\", \"Failed to switch to Stabilize mode within timeout\")"},{"type":"DELETE","lineNumber":169,"oldContent":"                        onResult(false, \"Failed to switch to suitable mode for arming. Current mode: ${_telemetryState.value.mode}\")"},{"type":"DELETE","lineNumber":170,"oldContent":"                        return@launch"},{"type":"DELETE","lineNumber":171,"oldContent":"                    }"},{"type":"DELETE","lineNumber":172,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":173,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Already in suitable mode for arming: $currentMode\")"},{"type":"INSERT","lineNumber":159,"content":"                    delay(2000)"},{"type":"INSERT","lineNumber":161,"content":"                // Confirm mode change"},{"type":"INSERT","lineNumber":162,"content":"                var modeRetries = 0"},{"type":"INSERT","lineNumber":163,"content":"                while (_telemetryState.value.mode?.equals(\"Stabilize\", ignoreCase = true) != true && modeRetries < 10) {"},{"type":"INSERT","lineNumber":164,"content":"                    delay(500)"},{"type":"INSERT","lineNumber":165,"content":"                    modeRetries++"},{"type":"INSERT","lineNumber":166,"content":"                }"},{"type":"INSERT","lineNumber":167,"content":"                if (_telemetryState.value.mode?.equals(\"Stabilize\", ignoreCase = true) != true) {"},{"type":"INSERT","lineNumber":168,"content":"                    Log.w(\"SharedVM\", \"Failed to switch to Stabilize mode within timeout\")"},{"type":"INSERT","lineNumber":169,"content":"                    onResult(false, \"Failed to switch to suitable mode for arming. Current mode: ${_telemetryState.value.mode}\")"},{"type":"INSERT","lineNumber":170,"content":"                    return@launch"},{"type":"INSERT","lineNumber":171,"content":"                }"},{"type":"INSERT","lineNumber":172,"content":"                Log.i(\"SharedVM\", \"âœ“ In suitable mode for arming: ${_telemetryState.value.mode}\")"},{"type":"DELETE","lineNumber":176,"oldContent":"                // Step 3: Arm the drone"},{"type":"INSERT","lineNumber":174,"content":"                // Step 4: Arm the drone"},{"type":"DELETE","lineNumber":180,"oldContent":""},{"type":"DELETE","lineNumber":181,"oldContent":"                    // Wait for arming with increased timeout"},{"type":"DELETE","lineNumber":182,"oldContent":"                    val armTimeout = 10000L"},{"type":"DELETE","lineNumber":183,"oldContent":"                    val armStart = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":184,"oldContent":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - armStart < armTimeout) {"},{"type":"DELETE","lineNumber":185,"oldContent":"                        delay(500)"},{"type":"DELETE","lineNumber":186,"oldContent":"                    }"},{"type":"DELETE","lineNumber":187,"oldContent":""},{"type":"DELETE","lineNumber":188,"oldContent":"                    if (!_telemetryState.value.armed) {"},{"type":"DELETE","lineNumber":189,"oldContent":"                        Log.w(\"SharedVM\", \"Vehicle did not arm within timeout\")"},{"type":"DELETE","lineNumber":190,"oldContent":"                        onResult(false, \"Vehicle failed to arm. Check pre-arm conditions.\")"},{"type":"DELETE","lineNumber":191,"oldContent":"                        return@launch"},{"type":"DELETE","lineNumber":192,"oldContent":"                    }"},{"type":"DELETE","lineNumber":193,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle armed successfully\")"},{"type":"DELETE","lineNumber":194,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":195,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle already armed\")"},{"type":"INSERT","lineNumber":178,"content":"                    delay(2000)"},{"type":"INSERT","lineNumber":180,"content":"                // Confirm arming"},{"type":"INSERT","lineNumber":181,"content":"                var armRetries = 0"},{"type":"INSERT","lineNumber":182,"content":"                while (!_telemetryState.value.armed && armRetries < 20) {"},{"type":"INSERT","lineNumber":183,"content":"                    delay(500)"},{"type":"INSERT","lineNumber":184,"content":"                    armRetries++"},{"type":"INSERT","lineNumber":185,"content":"                }"},{"type":"INSERT","lineNumber":186,"content":"                if (!_telemetryState.value.armed) {"},{"type":"INSERT","lineNumber":187,"content":"                    Log.w(\"SharedVM\", \"Vehicle did not arm within timeout\")"},{"type":"INSERT","lineNumber":188,"content":"                    onResult(false, \"Vehicle failed to arm. Check pre-arm conditions.\")"},{"type":"INSERT","lineNumber":189,"content":"                    return@launch"},{"type":"INSERT","lineNumber":190,"content":"                }"},{"type":"INSERT","lineNumber":191,"content":"                Log.i(\"SharedVM\", \"âœ“ Vehicle armed successfully\")"},{"type":"DELETE","lineNumber":198,"oldContent":"                // Step 4: Change mode to Auto"},{"type":"INSERT","lineNumber":193,"content":"                // Step 5: Switch to AUTO mode"},{"type":"DELETE","lineNumber":202,"oldContent":""},{"type":"DELETE","lineNumber":203,"oldContent":"                    // Wait for mode change to AUTO with increased timeout"},{"type":"DELETE","lineNumber":204,"oldContent":"                    val autoModeTimeout = 8000L"},{"type":"DELETE","lineNumber":205,"oldContent":"                    val autoModeStart = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":206,"oldContent":"                    while (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true &&"},{"type":"DELETE","lineNumber":207,"oldContent":"                        System.currentTimeMillis() - autoModeStart < autoModeTimeout) {"},{"type":"DELETE","lineNumber":208,"oldContent":"                        delay(500)"},{"type":"DELETE","lineNumber":209,"oldContent":"                    }"},{"type":"DELETE","lineNumber":210,"oldContent":""},{"type":"DELETE","lineNumber":211,"oldContent":"                    if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"DELETE","lineNumber":212,"oldContent":"                        Log.w(\"SharedVM\", \"Vehicle did not switch to AUTO mode within timeout\")"},{"type":"DELETE","lineNumber":213,"oldContent":"                        onResult(false, \"Failed to switch to AUTO mode. Current mode: ${_telemetryState.value.mode}\")"},{"type":"DELETE","lineNumber":214,"oldContent":"                        return@launch"},{"type":"DELETE","lineNumber":215,"oldContent":"                    }"},{"type":"DELETE","lineNumber":216,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle mode is now AUTO\")"},{"type":"DELETE","lineNumber":217,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":218,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle already in AUTO mode\")"},{"type":"INSERT","lineNumber":197,"content":"                    delay(2000)"},{"type":"INSERT","lineNumber":199,"content":"                // Confirm AUTO mode"},{"type":"INSERT","lineNumber":200,"content":"                var autoRetries = 0"},{"type":"INSERT","lineNumber":201,"content":"                while (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true && autoRetries < 20) {"},{"type":"INSERT","lineNumber":202,"content":"                    delay(500)"},{"type":"INSERT","lineNumber":203,"content":"                    autoRetries++"},{"type":"INSERT","lineNumber":204,"content":"                }"},{"type":"INSERT","lineNumber":205,"content":"                if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"INSERT","lineNumber":206,"content":"                    Log.w(\"SharedVM\", \"Vehicle did not switch to AUTO mode within timeout\")"},{"type":"INSERT","lineNumber":207,"content":"                    onResult(false, \"Failed to switch to AUTO mode. Current mode: ${_telemetryState.value.mode}\")"},{"type":"INSERT","lineNumber":208,"content":"                    return@launch"},{"type":"INSERT","lineNumber":209,"content":"                }"},{"type":"INSERT","lineNumber":210,"content":"                Log.i(\"SharedVM\", \"âœ“ Vehicle mode is now AUTO\")"},{"type":"DELETE","lineNumber":221,"oldContent":"                // Give a small delay to ensure all mode changes are processed"},{"type":"DELETE","lineNumber":222,"oldContent":"                delay(1000)"},{"type":"DELETE","lineNumber":223,"oldContent":""},{"type":"DELETE","lineNumber":224,"oldContent":"                // Step 5: Optionally set current mission item to seq=0 (first waypoint)"},{"type":"DELETE","lineNumber":225,"oldContent":"                // PX4/ArduPilot do not require MISSION_START; missions begin automatically in AUTO mode when armed."},{"type":"DELETE","lineNumber":226,"oldContent":"                // Setting MISSION_SET_CURRENT to 0 ensures the mission starts from the first waypoint."},{"type":"INSERT","lineNumber":212,"content":"                // Step 6: Set current mission item to seq=0"},{"type":"INSERT","lineNumber":216,"content":"                    delay(1000)"},{"type":"DELETE","lineNumber":232,"oldContent":"                // Mission will start automatically in AUTO mode when armed."},{"type":"DELETE","lineNumber":233,"oldContent":"                Log.i(\"SharedVM\", \"Mission start sequence complete. Vehicle is armed and in AUTO mode. Mission will begin.\")"},{"type":"DELETE","lineNumber":235,"oldContent":"                onResult(true, null)"},{"type":"INSERT","lineNumber":221,"content":"                // Step 7: Confirm mission start (MissionCurrent)"},{"type":"INSERT","lineNumber":222,"content":"                var missionStarted = false"},{"type":"INSERT","lineNumber":223,"content":"                var missionRetries = 0"},{"type":"INSERT","lineNumber":224,"content":"                while (!missionStarted && missionRetries < 20) {"},{"type":"INSERT","lineNumber":225,"content":"                    // Check if mode is AUTO and vehicle is armed"},{"type":"INSERT","lineNumber":226,"content":"                    if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) == true && _telemetryState.value.armed) {"},{"type":"INSERT","lineNumber":227,"content":"                        // Optionally, check for MissionCurrent or movement"},{"type":"INSERT","lineNumber":228,"content":"                        missionStarted = true"},{"type":"INSERT","lineNumber":229,"content":"                        break"},{"type":"INSERT","lineNumber":230,"content":"                    }"},{"type":"INSERT","lineNumber":231,"content":"                    delay(1000)"},{"type":"INSERT","lineNumber":232,"content":"                    missionRetries++"},{"type":"INSERT","lineNumber":233,"content":"                }"},{"type":"INSERT","lineNumber":234,"content":"                if (!missionStarted) {"},{"type":"INSERT","lineNumber":235,"content":"                    Log.w(\"SharedVM\", \"Mission did not start within timeout. Check FCU logs and mission plan.\")"},{"type":"INSERT","lineNumber":236,"content":"                    onResult(false, \"Mission did not start. Check FCU logs and mission plan.\")"},{"type":"INSERT","lineNumber":237,"content":"                    return@launch"},{"type":"INSERT","lineNumber":238,"content":"                }"},{"type":"INSERT","lineNumber":239,"content":"                Log.i(\"SharedVM\", \"Mission start sequence complete. Vehicle is armed and in AUTO mode. Mission should begin.\")"},{"type":"INSERT","lineNumber":240,"content":"                onResult(true, null)"},{"type":"DELETE","lineNumber":246,"oldContent":"            if (repo == null) {"},{"type":"INSERT","lineNumber":251,"content":"            if (repo == null) {"}]},{"timestamp":1758170115183,"changes":[{"type":"MODIFY","lineNumber":8,"content":"import com.divpundir.mavlink.definitions.common.MissionItemInt","oldContent":"import kotlinx.coroutines.flow.Flow"},{"type":"MODIFY","lineNumber":10,"content":"//import com.example.aerogcsclone.Telemetry.MissionItemInt","oldContent":"import kotlinx.coroutines.flow.combine"},{"type":"MODIFY","lineNumber":99,"content":"                lastUploadedCount = 0","oldContent":"                repo?.requestMissionAndLog()"},{"type":"INSERT","lineNumber":101,"content":"                Log.e(\"SharedVM\", \"Exception during mission upload\", e)"},{"type":"INSERT","lineNumber":102,"content":"                onResult(false, e.message)"},{"type":"DELETE","lineNumber":102,"oldContent":"                Log.w(\"SharedVM\", \"No repo available, cannot request mission readback\")"},{"type":"DELETE","lineNumber":103,"oldContent":"        viewModelScope.launch {"},{"type":"MODIFY","lineNumber":104,"content":"        }","oldContent":"    // New helper to request mission from FCU and log its items for debugging"},{"type":"DELETE","lineNumber":132,"oldContent":""},{"type":"DELETE","lineNumber":135,"oldContent":"                if (!_telemetryState.value.armable) {"},{"type":"DELETE","lineNumber":137,"oldContent":"                    Log.w(\"SharedVM\", \"Vehicle not armable, cannot start mission\")"},{"type":"DELETE","lineNumber":139,"oldContent":"                    onResult(false, \"Vehicle not armable. Check sensors and GPS.\")"},{"type":"INSERT","lineNumber":137,"content":"                }"},{"type":"INSERT","lineNumber":138,"content":""},{"type":"INSERT","lineNumber":139,"content":"                // Step 2: Strict prearm checks"},{"type":"INSERT","lineNumber":140,"content":"                if (!_telemetryState.value.armable) {"},{"type":"INSERT","lineNumber":141,"content":"                    Log.w(\"SharedVM\", \"Vehicle not armable, cannot start mission\")"},{"type":"INSERT","lineNumber":142,"content":"                    onResult(false, \"Vehicle not armable. Check sensors, battery, and GPS.\")"},{"type":"DELETE","lineNumber":143,"oldContent":"                }"},{"type":"DELETE","lineNumber":144,"oldContent":"                // Step 2: Check prerequisites"},{"type":"INSERT","lineNumber":151,"content":"                val voltage = _telemetryState.value.voltage ?: 0f"},{"type":"INSERT","lineNumber":152,"content":"                if (voltage < 10.5f) { // Example threshold for 3S battery"},{"type":"INSERT","lineNumber":153,"content":"                    Log.w(\"SharedVM\", \"Battery voltage too low ($voltage V)\")"},{"type":"INSERT","lineNumber":154,"content":"                    onResult(false, \"Battery voltage too low ($voltage V). Charge battery.\")"},{"type":"INSERT","lineNumber":155,"content":"                    return@launch"},{"type":"INSERT","lineNumber":156,"content":"                }"},{"type":"INSERT","lineNumber":157,"content":"                val hdop = _telemetryState.value.hdop ?: 99f"},{"type":"INSERT","lineNumber":158,"content":"                if (hdop > 2.0f) {"},{"type":"INSERT","lineNumber":159,"content":"                    Log.w(\"SharedVM\", \"HDOP too high ($hdop), GPS accuracy insufficient\")"},{"type":"INSERT","lineNumber":160,"content":"                    onResult(false, \"GPS accuracy insufficient (HDOP $hdop). Wait for better signal.\")"},{"type":"INSERT","lineNumber":161,"content":"                    return@launch"},{"type":"INSERT","lineNumber":162,"content":"                }"},{"type":"INSERT","lineNumber":164,"content":"                // Step 3: Switch to Stabilize/Loiter if needed"},{"type":"DELETE","lineNumber":156,"oldContent":"                // Step 3: Switch to Stabilize/Loiter if needed"},{"type":"INSERT","lineNumber":172,"content":"                }"},{"type":"DELETE","lineNumber":172,"oldContent":"                // Step 4: Arm the drone"},{"type":"DELETE","lineNumber":173,"oldContent":"                }"},{"type":"INSERT","lineNumber":186,"content":"                // Step 4: Arm the drone"},{"type":"DELETE","lineNumber":176,"oldContent":"                    delay(2000)"},{"type":"INSERT","lineNumber":190,"content":"                    delay(2000)"},{"type":"INSERT","lineNumber":191,"content":"                }"},{"type":"INSERT","lineNumber":204,"content":""},{"type":"DELETE","lineNumber":192,"oldContent":"                }"},{"type":"INSERT","lineNumber":206,"content":"                if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"INSERT","lineNumber":207,"content":"                    Log.i(\"SharedVM\", \"Switching vehicle mode to AUTO\")"},{"type":"INSERT","lineNumber":208,"content":"                    repo?.changeMode(MavMode.AUTO)"},{"type":"DELETE","lineNumber":194,"oldContent":""},{"type":"INSERT","lineNumber":210,"content":"                }"},{"type":"DELETE","lineNumber":196,"oldContent":"                if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"DELETE","lineNumber":198,"oldContent":"                    Log.i(\"SharedVM\", \"Switching vehicle mode to AUTO\")"},{"type":"DELETE","lineNumber":200,"oldContent":"                    repo?.changeMode(MavMode.AUTO)"},{"type":"INSERT","lineNumber":223,"content":""},{"type":"INSERT","lineNumber":225,"content":"                try {"},{"type":"INSERT","lineNumber":226,"content":"                    repo?.setCurrentMissionItem(0)"},{"type":"INSERT","lineNumber":227,"content":"                    Log.i(\"SharedVM\", \"Set current mission item to seq=0 (first waypoint)\")"},{"type":"INSERT","lineNumber":229,"content":"                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":230,"content":"                    Log.w(\"SharedVM\", \"Failed to set current mission item, proceeding anyway: ${e.message}\")"},{"type":"DELETE","lineNumber":221,"oldContent":"                try {"},{"type":"DELETE","lineNumber":223,"oldContent":"                    repo?.setCurrentMissionItem(0)"},{"type":"DELETE","lineNumber":225,"oldContent":"                    Log.i(\"SharedVM\", \"Set current mission item to seq=0 (first waypoint)\")"},{"type":"DELETE","lineNumber":227,"oldContent":"                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":229,"oldContent":"                    Log.w(\"SharedVM\", \"Failed to set current mission item, proceeding anyway: ${e.message}\")"},{"type":"DELETE","lineNumber":233,"oldContent":"                }"},{"type":"DELETE","lineNumber":236,"oldContent":""},{"type":"DELETE","lineNumber":238,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":240,"oldContent":"                Log.e(\"SharedVM\", \"Failed to start mission\", e)"},{"type":"DELETE","lineNumber":242,"oldContent":"                onResult(false, e.message)"},{"type":"INSERT","lineNumber":253,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":254,"content":"                Log.e(\"SharedVM\", \"Failed to start mission\", e)"},{"type":"INSERT","lineNumber":255,"content":"                onResult(false, e.message)"},{"type":"INSERT","lineNumber":263,"content":"            if (repo == null) {"},{"type":"DELETE","lineNumber":254,"oldContent":"            if (repo == null) {"},{"type":"DELETE","lineNumber":255,"oldContent":"                    Log.e(\"SharedVM\", \"Mission start failed or not acknowledged\")"},{"type":"DELETE","lineNumber":256,"oldContent":"                    Log.i(\"SharedVM\", \"Mission start acknowledged by FCU\")"},{"type":"DELETE","lineNumber":257,"oldContent":"                if (result) {"},{"type":"DELETE","lineNumber":258,"oldContent":"                    onResult(false, \"Mission start failed. Check vehicle status and try again.\")"},{"type":"DELETE","lineNumber":259,"oldContent":"                    Log.i(\"SharedVM\", \"=== Mission Start Sequence Completed Successfully ===\")"},{"type":"INSERT","lineNumber":267,"content":"            try {"},{"type":"INSERT","lineNumber":268,"content":"                repo?.requestMissionAndLog()"},{"type":"INSERT","lineNumber":269,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":270,"content":"                Log.e(\"SharedVM\", \"Exception during mission readback\", e)"},{"type":"INSERT","lineNumber":271,"content":"            }"}]},{"timestamp":1758170283053,"changes":[{"type":"INSERT","lineNumber":2,"content":"import android.util.Log"},{"type":"DELETE","lineNumber":7,"oldContent":"import kotlinx.coroutines.flow.Flow"},{"type":"INSERT","lineNumber":11,"content":"import kotlinx.coroutines.flow.*"},{"type":"DELETE","lineNumber":12,"oldContent":"import kotlinx.coroutines.launch"},{"type":"DELETE","lineNumber":29,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":30,"oldContent":"            if (portInt != null) {"},{"type":"INSERT","lineNumber":29,"content":"    var missionUploaded by mutableStateOf(false)"},{"type":"INSERT","lineNumber":30,"content":"    var lastUploadedCount by mutableStateOf(0)"},{"type":"DELETE","lineNumber":61,"oldContent":"                return@launch"},{"type":"DELETE","lineNumber":62,"oldContent":"            if (repo == null) {"},{"type":"DELETE","lineNumber":63,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":64,"oldContent":"    // New helper to request mission from FCU and log its items for debugging"},{"type":"DELETE","lineNumber":65,"oldContent":""},{"type":"DELETE","lineNumber":66,"oldContent":"        }"},{"type":"DELETE","lineNumber":67,"oldContent":"            }"},{"type":"DELETE","lineNumber":68,"oldContent":"                Log.e(\"SharedVM\", \"Failed to start mission\", e)"},{"type":"DELETE","lineNumber":69,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":70,"oldContent":"                repo?.startMission(0, last)"},{"type":"DELETE","lineNumber":71,"oldContent":"                Log.i(\"SharedVM\", \"Sending start mission with first=0 last=$last\")"},{"type":"INSERT","lineNumber":61,"content":"                if (repo == null) {"},{"type":"INSERT","lineNumber":62,"content":"                    Log.w(\"SharedVM\", \"No repo available, cannot upload mission\")"},{"type":"INSERT","lineNumber":63,"content":"                    missionUploaded = false"},{"type":"INSERT","lineNumber":64,"content":"                    lastUploadedCount = 0"},{"type":"INSERT","lineNumber":65,"content":"                    onResult(false, \"Not connected to vehicle\")"},{"type":"INSERT","lineNumber":66,"content":"                    return@launch"},{"type":"INSERT","lineNumber":68,"content":""},{"type":"INSERT","lineNumber":69,"content":"                if (!_telemetryState.value.fcuDetected) {"},{"type":"INSERT","lineNumber":70,"content":"                    Log.w(\"SharedVM\", \"FCU not detected, aborting mission upload\")"},{"type":"INSERT","lineNumber":71,"content":"                    missionUploaded = false"},{"type":"INSERT","lineNumber":72,"content":"                    lastUploadedCount = 0"},{"type":"INSERT","lineNumber":73,"content":"                    onResult(false, \"FCU not detected, please connect to vehicle first\")"},{"type":"DELETE","lineNumber":74,"oldContent":"                    Log.w(\"SharedVM\", \"FCU not detected, cannot start mission\")"},{"type":"DELETE","lineNumber":102,"oldContent":"                    onResult(true, null)"},{"type":"INSERT","lineNumber":103,"content":"            }"},{"type":"INSERT","lineNumber":105,"content":"    }"},{"type":"DELETE","lineNumber":106,"oldContent":"                if (!_telemetryState.value.fcuDetected) {"},{"type":"MODIFY","lineNumber":116,"content":"                }","oldContent":"    }"},{"type":"MODIFY","lineNumber":124,"content":"                // Step 1: Check for acknowledgment of the mission","oldContent":"                // Step 1: Confirm mission upload and readback"},{"type":"DELETE","lineNumber":131,"oldContent":"                // Read back mission and confirm waypoints"},{"type":"DELETE","lineNumber":132,"oldContent":"                try {"},{"type":"DELETE","lineNumber":133,"oldContent":"                    repo?.requestMissionAndLog()"},{"type":"DELETE","lineNumber":134,"oldContent":"                    delay(2000) // Wait for readback"},{"type":"DELETE","lineNumber":135,"oldContent":"                }"},{"type":"DELETE","lineNumber":137,"oldContent":"                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":138,"oldContent":"                // Step 2: Strict prearm checks"},{"type":"INSERT","lineNumber":132,"content":"                // Check basic prerequisites"},{"type":"DELETE","lineNumber":140,"oldContent":"                    Log.w(\"SharedVM\", \"Mission readback failed: ${e.message}\")"},{"type":"INSERT","lineNumber":135,"content":"                    onResult(false, \"Vehicle not armable. Check sensors and GPS.\")"},{"type":"DELETE","lineNumber":143,"oldContent":"                    onResult(false, \"Vehicle not armable. Check sensors, battery, and GPS.\")"},{"type":"INSERT","lineNumber":138,"content":""},{"type":"DELETE","lineNumber":151,"oldContent":"                val voltage = _telemetryState.value.voltage ?: 0f"},{"type":"DELETE","lineNumber":153,"oldContent":"                if (voltage < 10.5f) { // Example threshold for 3S battery"},{"type":"INSERT","lineNumber":146,"content":"                // Step 2: See if the drone is either in Stabilize or Loiter to arm the drone"},{"type":"DELETE","lineNumber":155,"oldContent":"                    Log.w(\"SharedVM\", \"Battery voltage too low ($voltage V)\")"},{"type":"DELETE","lineNumber":157,"oldContent":"                    onResult(false, \"Battery voltage too low ($voltage V). Charge battery.\")"},{"type":"DELETE","lineNumber":159,"oldContent":"                    return@launch"},{"type":"INSERT","lineNumber":150,"content":""},{"type":"DELETE","lineNumber":161,"oldContent":"                }"},{"type":"DELETE","lineNumber":162,"oldContent":"                val hdop = _telemetryState.value.hdop ?: 99f"},{"type":"DELETE","lineNumber":164,"oldContent":"                if (hdop > 2.0f) {"},{"type":"DELETE","lineNumber":166,"oldContent":"                    Log.w(\"SharedVM\", \"HDOP too high ($hdop), GPS accuracy insufficient\")"},{"type":"DELETE","lineNumber":167,"oldContent":"                    delay(2000)"},{"type":"DELETE","lineNumber":168,"oldContent":"                    onResult(false, \"GPS accuracy insufficient (HDOP $hdop). Wait for better signal.\")"},{"type":"DELETE","lineNumber":169,"oldContent":"                // Confirm mode change"},{"type":"DELETE","lineNumber":170,"oldContent":"                    return@launch"},{"type":"DELETE","lineNumber":171,"oldContent":"                var modeRetries = 0"},{"type":"INSERT","lineNumber":154,"content":""},{"type":"INSERT","lineNumber":155,"content":"                    // Wait for mode change to Stabilize"},{"type":"INSERT","lineNumber":156,"content":"                    val modeTimeout = 5000L"},{"type":"INSERT","lineNumber":157,"content":"                    val modeStart = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":158,"content":"                    while (System.currentTimeMillis() - modeStart < modeTimeout) {"},{"type":"INSERT","lineNumber":159,"content":"                        val mode = _telemetryState.value.mode"},{"type":"INSERT","lineNumber":160,"content":"                        if (mode?.equals(\"Stabilize\", ignoreCase = true) == true) {"},{"type":"INSERT","lineNumber":161,"content":"                            Log.i(\"SharedVM\", \"âœ“ Successfully switched to Stabilize mode\")"},{"type":"INSERT","lineNumber":162,"content":"                            break"},{"type":"INSERT","lineNumber":163,"content":"                        }"},{"type":"INSERT","lineNumber":164,"content":"                        delay(500)"},{"type":"INSERT","lineNumber":165,"content":"                    }"},{"type":"INSERT","lineNumber":166,"content":""},{"type":"INSERT","lineNumber":167,"content":"                    if (!(_telemetryState.value.mode?.equals(\"Stabilize\", ignoreCase = true) == true)) {"},{"type":"INSERT","lineNumber":168,"content":"                        Log.w(\"SharedVM\", \"Failed to switch to Stabilize mode within timeout\")"},{"type":"INSERT","lineNumber":169,"content":"                        onResult(false, \"Failed to switch to suitable mode for arming. Current mode: ${_telemetryState.value.mode}\")"},{"type":"INSERT","lineNumber":170,"content":"                        return@launch"},{"type":"INSERT","lineNumber":171,"content":"                    }"},{"type":"INSERT","lineNumber":172,"content":"                } else {"},{"type":"INSERT","lineNumber":173,"content":"                    Log.i(\"SharedVM\", \"âœ“ Already in suitable mode for arming: $currentMode\")"},{"type":"DELETE","lineNumber":173,"oldContent":"                while (_telemetryState.value.mode?.equals(\"Stabilize\", ignoreCase = true) != true && modeRetries < 10) {"},{"type":"DELETE","lineNumber":174,"oldContent":"                    delay(500)"},{"type":"DELETE","lineNumber":175,"oldContent":"                // Step 3: Switch to Stabilize/Loiter if needed"},{"type":"DELETE","lineNumber":176,"oldContent":"                    modeRetries++"},{"type":"DELETE","lineNumber":177,"oldContent":"                }"},{"type":"DELETE","lineNumber":178,"oldContent":"                if (_telemetryState.value.mode?.equals(\"Stabilize\", ignoreCase = true) != true) {"},{"type":"DELETE","lineNumber":179,"oldContent":"                    Log.w(\"SharedVM\", \"Failed to switch to Stabilize mode within timeout\")"},{"type":"DELETE","lineNumber":180,"oldContent":"                    onResult(false, \"Failed to switch to suitable mode for arming. Current mode: ${_telemetryState.value.mode}\")"},{"type":"DELETE","lineNumber":181,"oldContent":"                    return@launch"},{"type":"DELETE","lineNumber":182,"oldContent":"                }"},{"type":"DELETE","lineNumber":183,"oldContent":"                Log.i(\"SharedVM\", \"âœ“ In suitable mode for arming: ${_telemetryState.value.mode}\")"},{"type":"DELETE","lineNumber":184,"oldContent":"                }"},{"type":"INSERT","lineNumber":176,"content":"                // Step 3: Arm the drone"},{"type":"DELETE","lineNumber":189,"oldContent":"                // Confirm arming"},{"type":"DELETE","lineNumber":190,"oldContent":"                var armRetries = 0"},{"type":"DELETE","lineNumber":191,"oldContent":"                while (!_telemetryState.value.armed && armRetries < 20) {"},{"type":"DELETE","lineNumber":192,"oldContent":"                    delay(500)"},{"type":"DELETE","lineNumber":193,"oldContent":"                    armRetries++"},{"type":"INSERT","lineNumber":180,"content":""},{"type":"INSERT","lineNumber":181,"content":"                    // Wait for arming with increased timeout"},{"type":"INSERT","lineNumber":182,"content":"                    val armTimeout = 10000L"},{"type":"INSERT","lineNumber":183,"content":"                    val armStart = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":184,"content":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - armStart < armTimeout) {"},{"type":"INSERT","lineNumber":185,"content":"                        delay(500)"},{"type":"INSERT","lineNumber":186,"content":"                    }"},{"type":"INSERT","lineNumber":187,"content":""},{"type":"INSERT","lineNumber":188,"content":"                    if (!_telemetryState.value.armed) {"},{"type":"INSERT","lineNumber":189,"content":"                        Log.w(\"SharedVM\", \"Vehicle did not arm within timeout\")"},{"type":"INSERT","lineNumber":190,"content":"                        onResult(false, \"Vehicle failed to arm. Check pre-arm conditions.\")"},{"type":"INSERT","lineNumber":191,"content":"                        return@launch"},{"type":"INSERT","lineNumber":192,"content":"                    }"},{"type":"INSERT","lineNumber":193,"content":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle armed successfully\")"},{"type":"INSERT","lineNumber":194,"content":"                } else {"},{"type":"INSERT","lineNumber":195,"content":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle already armed\")"},{"type":"DELETE","lineNumber":195,"oldContent":"                if (!_telemetryState.value.armed) {"},{"type":"DELETE","lineNumber":196,"oldContent":"                // Step 4: Arm the drone"},{"type":"DELETE","lineNumber":197,"oldContent":"                    Log.w(\"SharedVM\", \"Vehicle did not arm within timeout\")"},{"type":"DELETE","lineNumber":198,"oldContent":"                    onResult(false, \"Vehicle failed to arm. Check pre-arm conditions.\")"},{"type":"DELETE","lineNumber":199,"oldContent":"                    return@launch"},{"type":"DELETE","lineNumber":200,"oldContent":"                }"},{"type":"DELETE","lineNumber":201,"oldContent":"                    delay(2000)"},{"type":"DELETE","lineNumber":202,"oldContent":"                Log.i(\"SharedVM\", \"âœ“ Vehicle armed successfully\")"},{"type":"DELETE","lineNumber":203,"oldContent":"                }"},{"type":"DELETE","lineNumber":204,"oldContent":"                // Step 5: Switch to AUTO mode"},{"type":"DELETE","lineNumber":205,"oldContent":"                    delay(2000)"},{"type":"DELETE","lineNumber":206,"oldContent":"                // Confirm AUTO mode"},{"type":"DELETE","lineNumber":207,"oldContent":"                var autoRetries = 0"},{"type":"DELETE","lineNumber":208,"oldContent":"                while (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true && autoRetries < 20) {"},{"type":"DELETE","lineNumber":209,"oldContent":"                    delay(500)"},{"type":"DELETE","lineNumber":210,"oldContent":"                    autoRetries++"},{"type":"DELETE","lineNumber":211,"oldContent":"                }"},{"type":"INSERT","lineNumber":198,"content":"                // Step 4: Change mode to Auto"},{"type":"DELETE","lineNumber":214,"oldContent":"                    Log.w(\"SharedVM\", \"Vehicle did not switch to AUTO mode within timeout\")"},{"type":"DELETE","lineNumber":215,"oldContent":"                if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"DELETE","lineNumber":216,"oldContent":"                    onResult(false, \"Failed to switch to AUTO mode. Current mode: ${_telemetryState.value.mode}\")"},{"type":"DELETE","lineNumber":218,"oldContent":"                    return@launch"},{"type":"DELETE","lineNumber":220,"oldContent":"                }"},{"type":"DELETE","lineNumber":221,"oldContent":"                Log.i(\"SharedVM\", \"âœ“ Vehicle mode is now AUTO\")"},{"type":"DELETE","lineNumber":222,"oldContent":"                }"},{"type":"DELETE","lineNumber":223,"oldContent":"                // Step 6: Set current mission item to seq=0"},{"type":"DELETE","lineNumber":224,"oldContent":"                    delay(1000)"},{"type":"DELETE","lineNumber":225,"oldContent":"                }"},{"type":"DELETE","lineNumber":227,"oldContent":"                // Step 7: Confirm mission start (MissionCurrent)"},{"type":"DELETE","lineNumber":228,"oldContent":"                var missionStarted = false"},{"type":"DELETE","lineNumber":229,"oldContent":"                var missionRetries = 0"},{"type":"DELETE","lineNumber":230,"oldContent":"                while (!missionStarted && missionRetries < 20) {"},{"type":"DELETE","lineNumber":231,"oldContent":"                    // Check if mode is AUTO and vehicle is armed"},{"type":"DELETE","lineNumber":232,"oldContent":"                    if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) == true && _telemetryState.value.armed) {"},{"type":"DELETE","lineNumber":233,"oldContent":"                        // Optionally, check for MissionCurrent or movement"},{"type":"DELETE","lineNumber":234,"oldContent":"                        missionStarted = true"},{"type":"INSERT","lineNumber":203,"content":"                    // Wait for mode change to AUTO with increased timeout"},{"type":"INSERT","lineNumber":204,"content":"                    val autoModeTimeout = 8000L"},{"type":"INSERT","lineNumber":205,"content":"                    val autoModeStart = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":206,"content":"                    while (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true &&"},{"type":"INSERT","lineNumber":207,"content":"                        System.currentTimeMillis() - autoModeStart < autoModeTimeout) {"},{"type":"INSERT","lineNumber":208,"content":"                        delay(500)"},{"type":"INSERT","lineNumber":209,"content":"                    }"},{"type":"DELETE","lineNumber":236,"oldContent":"                        break"},{"type":"DELETE","lineNumber":237,"oldContent":"                try {"},{"type":"DELETE","lineNumber":238,"oldContent":"                    repo?.setCurrentMissionItem(0)"},{"type":"INSERT","lineNumber":211,"content":"                    if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"INSERT","lineNumber":212,"content":"                        Log.w(\"SharedVM\", \"Vehicle did not switch to AUTO mode within timeout\")"},{"type":"INSERT","lineNumber":213,"content":"                        onResult(false, \"Failed to switch to AUTO mode. Current mode: ${_telemetryState.value.mode}\")"},{"type":"INSERT","lineNumber":214,"content":"                        return@launch"},{"type":"DELETE","lineNumber":240,"oldContent":"                    Log.i(\"SharedVM\", \"Set current mission item to seq=0 (first waypoint)\")"},{"type":"DELETE","lineNumber":241,"oldContent":"                    delay(1000)"},{"type":"DELETE","lineNumber":242,"oldContent":"                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":243,"oldContent":"                    Log.w(\"SharedVM\", \"Failed to set current mission item, proceeding anyway: ${e.message}\")"},{"type":"DELETE","lineNumber":244,"oldContent":"                    missionRetries++"},{"type":"INSERT","lineNumber":216,"content":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle mode is now AUTO\")"},{"type":"INSERT","lineNumber":217,"content":"                } else {"},{"type":"INSERT","lineNumber":218,"content":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle already in AUTO mode\")"},{"type":"DELETE","lineNumber":246,"oldContent":"                if (!missionStarted) {"},{"type":"DELETE","lineNumber":247,"oldContent":"                    Log.w(\"SharedVM\", \"Mission did not start within timeout. Check FCU logs and mission plan.\")"},{"type":"DELETE","lineNumber":248,"oldContent":"                    onResult(false, \"Mission did not start. Check FCU logs and mission plan.\")"},{"type":"DELETE","lineNumber":249,"oldContent":"                    return@launch"},{"type":"INSERT","lineNumber":220,"content":""},{"type":"INSERT","lineNumber":221,"content":"                // Give a small delay to ensure all mode changes are processed"},{"type":"INSERT","lineNumber":222,"content":"                delay(1000)"},{"type":"INSERT","lineNumber":223,"content":""},{"type":"INSERT","lineNumber":224,"content":"                // Step 5: Start the mission"},{"type":"INSERT","lineNumber":225,"content":"                val last = if (lastUploadedCount > 0) lastUploadedCount - 1 else 0"},{"type":"INSERT","lineNumber":226,"content":"                Log.i(\"SharedVM\", \"Sending start mission command with first=0 last=$last\")"},{"type":"INSERT","lineNumber":227,"content":"                val result = repo?.startMission(0, last) ?: false"},{"type":"INSERT","lineNumber":228,"content":""},{"type":"INSERT","lineNumber":229,"content":"                if (result) {"},{"type":"INSERT","lineNumber":230,"content":"                    Log.i(\"SharedVM\", \"âœ“ Mission start acknowledged by FCU\")"},{"type":"INSERT","lineNumber":231,"content":"                    onResult(true, null)"},{"type":"INSERT","lineNumber":232,"content":"                } else {"},{"type":"INSERT","lineNumber":233,"content":"                    Log.e(\"SharedVM\", \"Mission start failed or not acknowledged\")"},{"type":"INSERT","lineNumber":234,"content":"                    onResult(false, \"Mission start failed. Check vehicle status and try again.\")"},{"type":"DELETE","lineNumber":251,"oldContent":"                Log.i(\"SharedVM\", \"Mission start sequence complete. Vehicle is armed and in AUTO mode. Mission should begin.\")"},{"type":"DELETE","lineNumber":252,"oldContent":"                onResult(true, null)"},{"type":"INSERT","lineNumber":236,"content":""},{"type":"INSERT","lineNumber":237,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":238,"content":"                Log.e(\"SharedVM\", \"Failed to start mission\", e)"},{"type":"INSERT","lineNumber":239,"content":"                onResult(false, e.message)"},{"type":"INSERT","lineNumber":247,"content":"            if (repo == null) {"},{"type":"INSERT","lineNumber":250,"content":"            }"},{"type":"INSERT","lineNumber":251,"content":"            try {"},{"type":"INSERT","lineNumber":252,"content":"                repo?.requestMissionAndLog()"},{"type":"INSERT","lineNumber":254,"content":"                Log.e(\"SharedVM\", \"Exception during mission readback\", e)"},{"type":"DELETE","lineNumber":264,"oldContent":"                Log.e(\"SharedVM\", \"Failed to start mission\", e)"},{"type":"DELETE","lineNumber":265,"oldContent":"                onResult(false, e.message)"},{"type":"DELETE","lineNumber":269,"oldContent":"            if (repo == null) {"},{"type":"DELETE","lineNumber":270,"oldContent":"            }"},{"type":"DELETE","lineNumber":271,"oldContent":"                Log.e(\"SharedVM\", \"Exception during mission readback\", e)"},{"type":"DELETE","lineNumber":272,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":273,"oldContent":"                repo?.requestMissionAndLog()"},{"type":"DELETE","lineNumber":274,"oldContent":"            try {"}]},{"timestamp":1758173357846,"changes":[{"type":"DELETE","lineNumber":56,"oldContent":"                    Log.e(\"SharedVM\", \"Mission start failed or not acknowledged\")"},{"type":"DELETE","lineNumber":57,"oldContent":"                    onResult(true, null)"},{"type":"INSERT","lineNumber":56,"content":"    fun uploadMission(missionItems: List<MissionItemInt>, onResult: (Boolean, String?) -> Unit = { _, _ -> }) {"},{"type":"INSERT","lineNumber":57,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":67,"content":"                }"},{"type":"DELETE","lineNumber":72,"oldContent":"                missionUploaded = success"},{"type":"MODIFY","lineNumber":74,"content":"                    return@launch","oldContent":"                val success = repo?.uploadMissionWithAck(missionItems) ?: false"},{"type":"DELETE","lineNumber":77,"oldContent":"                repo?.requestMissionAndLog()"},{"type":"DELETE","lineNumber":78,"oldContent":"    }"},{"type":"DELETE","lineNumber":79,"oldContent":"            }"},{"type":"INSERT","lineNumber":77,"content":"                Log.i(\"SharedVM\", \"Starting mission upload to FCU...\")"},{"type":"INSERT","lineNumber":78,"content":"                val success = repo?.uploadMissionWithAck(missionItems) ?: false"},{"type":"INSERT","lineNumber":79,"content":"                missionUploaded = success"},{"type":"MODIFY","lineNumber":81,"content":"                    lastUploadedCount = missionItems.size","oldContent":"                onResult(false, e.message)"},{"type":"MODIFY","lineNumber":103,"content":"            }","oldContent":"            }"},{"type":"DELETE","lineNumber":106,"oldContent":"                    val modeTimeout = 4000L"},{"type":"DELETE","lineNumber":107,"oldContent":"                    repo?.changeMode(MavMode.AUTO)"},{"type":"DELETE","lineNumber":108,"oldContent":"                    Log.i(\"SharedVM\", \"Switching vehicle mode to AUTO\")"},{"type":"DELETE","lineNumber":109,"oldContent":"                val desiredModeLabel = \"Auto\""},{"type":"INSERT","lineNumber":106,"content":""},{"type":"INSERT","lineNumber":107,"content":"    fun startMission(onResult: (Boolean, String?) -> Unit = { _, _ -> }) {"},{"type":"INSERT","lineNumber":108,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":109,"content":"            try {"},{"type":"MODIFY","lineNumber":112,"content":"                if (repo == null) {","oldContent":"                // Ensure vehicle mode is AUTO (some FCs require AUTO mode to execute mission)"},{"type":"DELETE","lineNumber":131,"oldContent":"                // Check basic prerequisites"},{"type":"DELETE","lineNumber":132,"oldContent":"                    onResult(false, \"Vehicle not armable. Check sensors and GPS.\")"},{"type":"DELETE","lineNumber":134,"oldContent":""},{"type":"INSERT","lineNumber":132,"content":"                // Check basic prerequisites"},{"type":"INSERT","lineNumber":135,"content":"                    onResult(false, \"Vehicle not armable. Check sensors and GPS.\")"},{"type":"INSERT","lineNumber":138,"content":""},{"type":"DELETE","lineNumber":140,"oldContent":"                // Step 2: See if the drone is either in Stabilize or Loiter to arm the drone"},{"type":"DELETE","lineNumber":145,"oldContent":""},{"type":"DELETE","lineNumber":148,"oldContent":""},{"type":"INSERT","lineNumber":146,"content":"                // Step 2: See if the drone is either in Stabilize or Loiter to arm the drone"},{"type":"INSERT","lineNumber":148,"content":"                val isInArmableMode = currentMode?.equals(\"Stabilize\", ignoreCase = true) == true ||"},{"type":"INSERT","lineNumber":149,"content":"                        currentMode?.equals(\"Loiter\", ignoreCase = true) == true"},{"type":"INSERT","lineNumber":150,"content":""},{"type":"INSERT","lineNumber":151,"content":"                if (!isInArmableMode) {"},{"type":"INSERT","lineNumber":152,"content":"                    Log.i(\"SharedVM\", \"Current mode '$currentMode' not suitable for arming, switching to Stabilize\")"},{"type":"INSERT","lineNumber":153,"content":"                    repo?.changeMode(MavMode.STABILIZE)"},{"type":"INSERT","lineNumber":154,"content":""},{"type":"DELETE","lineNumber":152,"oldContent":"                val isInArmableMode = currentMode?.equals(\"Stabilize\", ignoreCase = true) == true ||"},{"type":"DELETE","lineNumber":155,"oldContent":"                        currentMode?.equals(\"Loiter\", ignoreCase = true) == true"},{"type":"DELETE","lineNumber":158,"oldContent":"                if (!isInArmableMode) {"},{"type":"DELETE","lineNumber":162,"oldContent":"                    Log.i(\"SharedVM\", \"Current mode '$currentMode' not suitable for arming, switching to Stabilize\")"},{"type":"DELETE","lineNumber":165,"oldContent":"                    repo?.changeMode(MavMode.STABILIZE)"},{"type":"MODIFY","lineNumber":174,"content":"                }","oldContent":"                }"},{"type":"INSERT","lineNumber":175,"content":""},{"type":"INSERT","lineNumber":177,"content":"                if (!_telemetryState.value.armed) {"},{"type":"INSERT","lineNumber":178,"content":"                    Log.i(\"SharedVM\", \"Vehicle not armed - attempting to arm\")"},{"type":"INSERT","lineNumber":179,"content":"                    repo?.arm()"},{"type":"DELETE","lineNumber":182,"oldContent":""},{"type":"DELETE","lineNumber":184,"oldContent":"                if (!_telemetryState.value.armed) {"},{"type":"DELETE","lineNumber":186,"oldContent":"                    Log.i(\"SharedVM\", \"Vehicle not armed - attempting to arm\")"},{"type":"DELETE","lineNumber":188,"oldContent":"                    repo?.arm()"},{"type":"MODIFY","lineNumber":196,"content":"                }","oldContent":"                }"},{"type":"INSERT","lineNumber":197,"content":""},{"type":"INSERT","lineNumber":199,"content":"                if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"INSERT","lineNumber":200,"content":"                    Log.i(\"SharedVM\", \"Switching vehicle mode to AUTO\")"},{"type":"INSERT","lineNumber":201,"content":"                    repo?.changeMode(MavMode.AUTO)"},{"type":"INSERT","lineNumber":202,"content":""},{"type":"INSERT","lineNumber":210,"content":""},{"type":"DELETE","lineNumber":207,"oldContent":""},{"type":"DELETE","lineNumber":209,"oldContent":"                if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"INSERT","lineNumber":215,"content":"                    }"},{"type":"DELETE","lineNumber":213,"oldContent":"                    Log.i(\"SharedVM\", \"Switching vehicle mode to AUTO\")"},{"type":"DELETE","lineNumber":215,"oldContent":"                    repo?.changeMode(MavMode.AUTO)"},{"type":"INSERT","lineNumber":219,"content":"                }"},{"type":"DELETE","lineNumber":221,"oldContent":"                val last = if (lastUploadedCount > 0) lastUploadedCount - 1 else 0"},{"type":"DELETE","lineNumber":222,"oldContent":"                Log.i(\"SharedVM\", \"Sending start mission command with first=0 last=$last\")"},{"type":"INSERT","lineNumber":225,"content":"                Log.i(\"SharedVM\", \"Sending start mission command\")"},{"type":"INSERT","lineNumber":226,"content":"                val result = repo?.startMission() ?: false"},{"type":"DELETE","lineNumber":224,"oldContent":"                val result = repo?.startMission(0, last) ?: false"},{"type":"DELETE","lineNumber":225,"oldContent":""},{"type":"INSERT","lineNumber":234,"content":"                }"},{"type":"DELETE","lineNumber":233,"oldContent":""},{"type":"DELETE","lineNumber":237,"oldContent":"                    }"},{"type":"DELETE","lineNumber":238,"oldContent":"                }"},{"type":"DELETE","lineNumber":239,"oldContent":"            if (repo == null) {"},{"type":"DELETE","lineNumber":241,"oldContent":"                }"},{"type":"DELETE","lineNumber":242,"oldContent":"            try {"},{"type":"DELETE","lineNumber":243,"oldContent":"                repo?.requestMissionAndLog()"},{"type":"DELETE","lineNumber":244,"oldContent":"            }"},{"type":"DELETE","lineNumber":245,"oldContent":"                Log.e(\"SharedVM\", \"Exception during mission readback\", e)"},{"type":"INSERT","lineNumber":246,"content":"            if (repo == null) {"},{"type":"INSERT","lineNumber":249,"content":"            }"},{"type":"INSERT","lineNumber":250,"content":"            try {"},{"type":"INSERT","lineNumber":251,"content":"                repo?.requestMissionAndLog()"},{"type":"INSERT","lineNumber":253,"content":"                Log.e(\"SharedVM\", \"Exception during mission readback\", e)"}]},{"timestamp":1758177136864,"changes":[{"type":"INSERT","lineNumber":36,"content":"    // Mission timer state"},{"type":"INSERT","lineNumber":37,"content":"    private val _missionElapsedTime = MutableStateFlow<Long>(0)"},{"type":"INSERT","lineNumber":38,"content":"    val missionElapsedTime: StateFlow<Long> = _missionElapsedTime.asStateFlow()"},{"type":"INSERT","lineNumber":39,"content":"    private val _isMissionActive = MutableStateFlow<Boolean>(false)"},{"type":"INSERT","lineNumber":40,"content":"    val isMissionActive: StateFlow<Boolean> = _isMissionActive.asStateFlow()"},{"type":"INSERT","lineNumber":41,"content":"    private var timerJob: kotlinx.coroutines.Job? = null"},{"type":"INSERT","lineNumber":42,"content":""},{"type":"DELETE","lineNumber":60,"oldContent":"                }"},{"type":"INSERT","lineNumber":67,"content":""},{"type":"INSERT","lineNumber":109,"content":"                onResult(false, e.message)"},{"type":"DELETE","lineNumber":103,"oldContent":"            }"},{"type":"DELETE","lineNumber":117,"oldContent":"    // New helper to request mission from FCU and log its items for debugging"},{"type":"INSERT","lineNumber":124,"content":""},{"type":"DELETE","lineNumber":131,"oldContent":"                // Check basic prerequisites"},{"type":"DELETE","lineNumber":133,"oldContent":"                    onResult(false, \"Vehicle not armable. Check sensors and GPS.\")"},{"type":"INSERT","lineNumber":139,"content":"                // Check basic prerequisites"},{"type":"INSERT","lineNumber":142,"content":"                    onResult(false, \"Vehicle not armable. Check sensors and GPS.\")"},{"type":"DELETE","lineNumber":137,"oldContent":""},{"type":"INSERT","lineNumber":145,"content":""},{"type":"DELETE","lineNumber":144,"oldContent":"                // Step 2: See if the drone is either in Stabilize or Loiter to arm the drone"},{"type":"INSERT","lineNumber":153,"content":"                // Step 2: See if the drone is either in Stabilize or Loiter to arm the drone"},{"type":"INSERT","lineNumber":154,"content":"                val currentMode = _telemetryState.value.mode"},{"type":"DELETE","lineNumber":149,"oldContent":"                val currentMode = _telemetryState.value.mode"},{"type":"DELETE","lineNumber":151,"oldContent":"                    // Wait for mode change to Stabilize"},{"type":"DELETE","lineNumber":153,"oldContent":"                    val modeTimeout = 5000L"},{"type":"DELETE","lineNumber":156,"oldContent":"                    val modeStart = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":162,"content":"                    // Wait for mode change to Stabilize"},{"type":"INSERT","lineNumber":163,"content":"                    val modeTimeout = 5000L"},{"type":"INSERT","lineNumber":164,"content":"                    val modeStart = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":180,"content":"                    Log.i(\"SharedVM\", \"âœ“ Already in suitable mode for arming: $currentMode\")"},{"type":"DELETE","lineNumber":174,"oldContent":"                }"},{"type":"DELETE","lineNumber":177,"oldContent":""},{"type":"DELETE","lineNumber":179,"oldContent":"                    // Wait for arming with increased timeout"},{"type":"DELETE","lineNumber":181,"oldContent":"                    val armTimeout = 10000L"},{"type":"INSERT","lineNumber":187,"content":""},{"type":"INSERT","lineNumber":188,"content":"                    // Wait for arming with increased timeout"},{"type":"INSERT","lineNumber":189,"content":"                    val armTimeout = 10000L"},{"type":"INSERT","lineNumber":202,"content":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle already armed\")"},{"type":"DELETE","lineNumber":196,"oldContent":"                }"},{"type":"DELETE","lineNumber":199,"oldContent":"                    // Wait for mode change to AUTO with increased timeout"},{"type":"DELETE","lineNumber":201,"oldContent":"                    val autoModeTimeout = 8000L"},{"type":"DELETE","lineNumber":203,"oldContent":"                    val autoModeStart = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":205,"oldContent":"                    while (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true &&"},{"type":"INSERT","lineNumber":210,"content":"                    // Wait for mode change to AUTO with increased timeout"},{"type":"INSERT","lineNumber":211,"content":"                    val autoModeTimeout = 8000L"},{"type":"INSERT","lineNumber":212,"content":"                    val autoModeStart = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":213,"content":"                    while (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true &&"},{"type":"INSERT","lineNumber":217,"content":""},{"type":"DELETE","lineNumber":213,"oldContent":""},{"type":"INSERT","lineNumber":222,"content":"                    }"},{"type":"DELETE","lineNumber":218,"oldContent":"                    }"},{"type":"INSERT","lineNumber":226,"content":"                }"},{"type":"DELETE","lineNumber":222,"oldContent":"                }"},{"type":"DELETE","lineNumber":225,"oldContent":""},{"type":"INSERT","lineNumber":234,"content":""},{"type":"INSERT","lineNumber":238,"content":"                    // Start timer"},{"type":"INSERT","lineNumber":239,"content":"                    _isMissionActive.value = true"},{"type":"INSERT","lineNumber":240,"content":"                    _missionElapsedTime.value = 0"},{"type":"INSERT","lineNumber":241,"content":"                    timerJob?.cancel()"},{"type":"INSERT","lineNumber":242,"content":"                    timerJob = viewModelScope.launch {"},{"type":"INSERT","lineNumber":243,"content":"                        while (_isMissionActive.value) {"},{"type":"INSERT","lineNumber":244,"content":"                            delay(1000)"},{"type":"INSERT","lineNumber":245,"content":"                            _missionElapsedTime.value += 1"},{"type":"INSERT","lineNumber":246,"content":"                        }"},{"type":"INSERT","lineNumber":247,"content":"                    }"},{"type":"DELETE","lineNumber":234,"oldContent":""},{"type":"INSERT","lineNumber":252,"content":""},{"type":"DELETE","lineNumber":240,"oldContent":"            if (repo == null) {"},{"type":"DELETE","lineNumber":244,"oldContent":"            }"},{"type":"INSERT","lineNumber":260,"content":"    // Call this to stop the timer when mission ends"},{"type":"INSERT","lineNumber":261,"content":"    fun stopMissionTimer() {"},{"type":"INSERT","lineNumber":262,"content":"        _isMissionActive.value = false"},{"type":"INSERT","lineNumber":263,"content":"        timerJob?.cancel()"},{"type":"INSERT","lineNumber":264,"content":"        timerJob = null"},{"type":"INSERT","lineNumber":265,"content":"    }"},{"type":"INSERT","lineNumber":266,"content":""},{"type":"DELETE","lineNumber":246,"oldContent":"            try {"},{"type":"DELETE","lineNumber":248,"oldContent":"                repo?.requestMissionAndLog()"},{"type":"INSERT","lineNumber":270,"content":"            if (repo == null) {"},{"type":"DELETE","lineNumber":251,"oldContent":"                Log.e(\"SharedVM\", \"Exception during mission readback\", e)"},{"type":"INSERT","lineNumber":273,"content":"            }"},{"type":"INSERT","lineNumber":274,"content":"            try {"},{"type":"INSERT","lineNumber":275,"content":"                repo?.requestMissionAndLog()"},{"type":"INSERT","lineNumber":277,"content":"                Log.e(\"SharedVM\", \"Exception during mission readback\", e)"}]},{"timestamp":1758177188665,"changes":[{"type":"MODIFY","lineNumber":31,"content":"","oldContent":"                val newRepo = MavlinkTelemetryRepository(ipAddress, portInt)"},{"type":"DELETE","lineNumber":36,"oldContent":"    // Mission timer state"},{"type":"DELETE","lineNumber":38,"oldContent":"    private val _missionElapsedTime = MutableStateFlow<Long>(0)"},{"type":"DELETE","lineNumber":40,"oldContent":"    val missionElapsedTime: StateFlow<Long> = _missionElapsedTime.asStateFlow()"},{"type":"DELETE","lineNumber":42,"oldContent":"    private val _isMissionActive = MutableStateFlow<Boolean>(false)"},{"type":"DELETE","lineNumber":44,"oldContent":"    val isMissionActive: StateFlow<Boolean> = _isMissionActive.asStateFlow()"},{"type":"DELETE","lineNumber":46,"oldContent":"    private var timerJob: kotlinx.coroutines.Job? = null"},{"type":"DELETE","lineNumber":48,"oldContent":""},{"type":"INSERT","lineNumber":50,"content":"                // Collect telemetry state"},{"type":"INSERT","lineNumber":56,"content":"        // Subscribe to mission end events and stop timer"},{"type":"INSERT","lineNumber":57,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":58,"content":"            repo?.missionEndedEvents?.collect {"},{"type":"INSERT","lineNumber":59,"content":"                stopMissionTimer()"},{"type":"INSERT","lineNumber":60,"content":"            }"},{"type":"INSERT","lineNumber":61,"content":"        }"},{"type":"MODIFY","lineNumber":65,"content":"            try {","oldContent":"    fun readMissionFromFcu() {"},{"type":"INSERT","lineNumber":67,"content":""},{"type":"DELETE","lineNumber":73,"oldContent":""},{"type":"MODIFY","lineNumber":82,"content":"                }","oldContent":"                delay(1000)"},{"type":"MODIFY","lineNumber":87,"content":"                if (success) {","oldContent":"                        onResult(false, \"Failed to switch to AUTO mode. Current mode: ${_telemetryState.value.mode}\")"},{"type":"INSERT","lineNumber":109,"content":"                onResult(false, e.message)"},{"type":"DELETE","lineNumber":115,"oldContent":"                onResult(false, e.message)"},{"type":"INSERT","lineNumber":124,"content":""},{"type":"DELETE","lineNumber":130,"oldContent":""},{"type":"MODIFY","lineNumber":132,"content":"                if (!missionUploaded || lastUploadedCount == 0) {","oldContent":"            if (repo == null) {"},{"type":"MODIFY","lineNumber":136,"content":"                }","oldContent":"        }"},{"type":"INSERT","lineNumber":139,"content":"                // Check basic prerequisites"},{"type":"DELETE","lineNumber":141,"oldContent":"                    if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"INSERT","lineNumber":142,"content":"                    onResult(false, \"Vehicle not armable. Check sensors and GPS.\")"},{"type":"INSERT","lineNumber":143,"content":"                    return@launch"},{"type":"DELETE","lineNumber":143,"oldContent":"                // Check basic prerequisites"},{"type":"INSERT","lineNumber":145,"content":""},{"type":"DELETE","lineNumber":147,"oldContent":"                    onResult(false, \"Vehicle not armable. Check sensors and GPS.\")"},{"type":"DELETE","lineNumber":150,"oldContent":""},{"type":"INSERT","lineNumber":153,"content":"                // Step 2: See if the drone is either in Stabilize or Loiter to arm the drone"},{"type":"INSERT","lineNumber":154,"content":"                val currentMode = _telemetryState.value.mode"},{"type":"DELETE","lineNumber":157,"oldContent":"                // Step 2: See if the drone is either in Stabilize or Loiter to arm the drone"},{"type":"DELETE","lineNumber":158,"oldContent":"                val currentMode = _telemetryState.value.mode"},{"type":"INSERT","lineNumber":162,"content":"                    // Wait for mode change to Stabilize"},{"type":"INSERT","lineNumber":163,"content":"                    val modeTimeout = 5000L"},{"type":"INSERT","lineNumber":164,"content":"                    val modeStart = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":166,"oldContent":"                    // Wait for mode change to Stabilize"},{"type":"DELETE","lineNumber":168,"oldContent":"                    val modeTimeout = 5000L"},{"type":"DELETE","lineNumber":170,"oldContent":"                    val modeStart = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":180,"content":"                    Log.i(\"SharedVM\", \"âœ“ Already in suitable mode for arming: $currentMode\")"},{"type":"DELETE","lineNumber":184,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Already in suitable mode for arming: $currentMode\")"},{"type":"INSERT","lineNumber":187,"content":""},{"type":"INSERT","lineNumber":188,"content":"                    // Wait for arming with increased timeout"},{"type":"INSERT","lineNumber":189,"content":"                    val armTimeout = 10000L"},{"type":"DELETE","lineNumber":192,"oldContent":""},{"type":"DELETE","lineNumber":193,"oldContent":"                    // Wait for arming with increased timeout"},{"type":"DELETE","lineNumber":195,"oldContent":"                    val armTimeout = 10000L"},{"type":"INSERT","lineNumber":202,"content":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle already armed\")"},{"type":"DELETE","lineNumber":206,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle already armed\")"},{"type":"INSERT","lineNumber":210,"content":"                    // Wait for mode change to AUTO with increased timeout"},{"type":"INSERT","lineNumber":211,"content":"                    val autoModeTimeout = 8000L"},{"type":"INSERT","lineNumber":212,"content":"                    val autoModeStart = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":213,"content":"                    while (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true &&"},{"type":"DELETE","lineNumber":213,"oldContent":"                    // Wait for mode change to AUTO with increased timeout"},{"type":"INSERT","lineNumber":217,"content":""},{"type":"DELETE","lineNumber":215,"oldContent":"                    val autoModeTimeout = 8000L"},{"type":"DELETE","lineNumber":217,"oldContent":"                    val autoModeStart = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":219,"oldContent":"                    while (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true &&"},{"type":"INSERT","lineNumber":222,"content":"                    }"},{"type":"DELETE","lineNumber":223,"oldContent":""},{"type":"INSERT","lineNumber":226,"content":"                }"},{"type":"DELETE","lineNumber":228,"oldContent":"                    }"},{"type":"DELETE","lineNumber":231,"oldContent":"                }"},{"type":"INSERT","lineNumber":234,"content":""},{"type":"DELETE","lineNumber":240,"oldContent":""},{"type":"INSERT","lineNumber":242,"content":""},{"type":"DELETE","lineNumber":244,"oldContent":"                    // Start timer"},{"type":"DELETE","lineNumber":246,"oldContent":"                    _isMissionActive.value = true"},{"type":"DELETE","lineNumber":248,"oldContent":"                    _missionElapsedTime.value = 0"},{"type":"DELETE","lineNumber":249,"oldContent":"                    timerJob?.cancel()"},{"type":"DELETE","lineNumber":251,"oldContent":"                    timerJob = viewModelScope.launch {"},{"type":"DELETE","lineNumber":253,"oldContent":"                        while (_isMissionActive.value) {"},{"type":"DELETE","lineNumber":255,"oldContent":"                            delay(1000)"},{"type":"DELETE","lineNumber":256,"oldContent":"                            _missionElapsedTime.value += 1"},{"type":"DELETE","lineNumber":258,"oldContent":"                        }"},{"type":"DELETE","lineNumber":259,"oldContent":"                    }"},{"type":"INSERT","lineNumber":253,"content":"            if (repo == null) {"},{"type":"DELETE","lineNumber":263,"oldContent":""},{"type":"INSERT","lineNumber":256,"content":"            }"},{"type":"INSERT","lineNumber":257,"content":"            try {"},{"type":"INSERT","lineNumber":258,"content":"                repo?.requestMissionAndLog()"},{"type":"INSERT","lineNumber":260,"content":"                Log.e(\"SharedVM\", \"Exception during mission readback\", e)"},{"type":"DELETE","lineNumber":270,"oldContent":"                Log.e(\"SharedVM\", \"Exception during mission readback\", e)"},{"type":"DELETE","lineNumber":271,"oldContent":"                repo?.requestMissionAndLog()"},{"type":"DELETE","lineNumber":272,"oldContent":"    // Call this to stop the timer when mission ends"},{"type":"DELETE","lineNumber":273,"oldContent":"            try {"},{"type":"DELETE","lineNumber":274,"oldContent":"    fun stopMissionTimer() {"},{"type":"DELETE","lineNumber":275,"oldContent":"            }"},{"type":"DELETE","lineNumber":276,"oldContent":"        _isMissionActive.value = false"},{"type":"DELETE","lineNumber":277,"oldContent":"            if (repo == null) {"},{"type":"DELETE","lineNumber":278,"oldContent":"        timerJob?.cancel()"},{"type":"DELETE","lineNumber":279,"oldContent":""},{"type":"DELETE","lineNumber":280,"oldContent":"        timerJob = null"},{"type":"DELETE","lineNumber":281,"oldContent":"    }"}]},{"timestamp":1758177206060,"changes":[{"type":"MODIFY","lineNumber":9,"content":"import com.google.android.gms.maps.model.LatLng","oldContent":"import kotlinx.coroutines.flow.combine"},{"type":"MODIFY","lineNumber":12,"content":"import kotlinx.coroutines.launch","oldContent":""},{"type":"MODIFY","lineNumber":32,"content":"    // Store uploaded waypoints for display on main screen","oldContent":"                newRepo.start()"},{"type":"DELETE","lineNumber":43,"oldContent":"                // Collect telemetry state"},{"type":"DELETE","lineNumber":50,"oldContent":"        // Subscribe to mission end events and stop timer"},{"type":"DELETE","lineNumber":52,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":54,"oldContent":"            repo?.missionEndedEvents?.collect {"},{"type":"DELETE","lineNumber":56,"oldContent":"                stopMissionTimer()"},{"type":"DELETE","lineNumber":58,"oldContent":"            }"},{"type":"DELETE","lineNumber":60,"oldContent":"        }"},{"type":"DELETE","lineNumber":130,"oldContent":"                val autoOk = repo!!.changeModeAutoWithVerify(timeoutMs = 7000)"},{"type":"INSERT","lineNumber":123,"content":""},{"type":"DELETE","lineNumber":143,"oldContent":"                }"},{"type":"DELETE","lineNumber":145,"oldContent":"                val sats = _telemetryState.value.sats ?: 0"},{"type":"INSERT","lineNumber":137,"content":"                }"},{"type":"INSERT","lineNumber":139,"content":"                val sats = _telemetryState.value.sats ?: 0"},{"type":"DELETE","lineNumber":154,"oldContent":"                val isInArmableMode = currentMode?.equals(\"Stabilize\", ignoreCase = true) == true ||"},{"type":"INSERT","lineNumber":148,"content":"                val isInArmableMode = currentMode?.equals(\"Stabilize\", ignoreCase = true) == true ||"},{"type":"DELETE","lineNumber":163,"oldContent":"                    while (System.currentTimeMillis() - modeStart < modeTimeout) {"},{"type":"DELETE","lineNumber":165,"oldContent":"                        val mode = _telemetryState.value.mode"},{"type":"INSERT","lineNumber":158,"content":"                    while (System.currentTimeMillis() - modeStart < modeTimeout) {"},{"type":"INSERT","lineNumber":159,"content":"                        val mode = _telemetryState.value.mode"},{"type":"DELETE","lineNumber":188,"oldContent":"                    val armStart = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":190,"oldContent":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - armStart < armTimeout) {"},{"type":"INSERT","lineNumber":183,"content":"                    val armStart = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":184,"content":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - armStart < armTimeout) {"},{"type":"DELETE","lineNumber":211,"oldContent":"                        System.currentTimeMillis() - autoModeStart < autoModeTimeout) {"},{"type":"DELETE","lineNumber":213,"oldContent":"                        delay(500)"},{"type":"DELETE","lineNumber":215,"oldContent":"                    }"},{"type":"INSERT","lineNumber":207,"content":"                        System.currentTimeMillis() - autoModeStart < autoModeTimeout) {"},{"type":"INSERT","lineNumber":208,"content":"                        delay(500)"},{"type":"INSERT","lineNumber":209,"content":"                    }"},{"type":"INSERT","lineNumber":210,"content":""},{"type":"DELETE","lineNumber":219,"oldContent":""},{"type":"DELETE","lineNumber":222,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle mode is now AUTO\")"},{"type":"INSERT","lineNumber":216,"content":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle mode is now AUTO\")"},{"type":"DELETE","lineNumber":226,"oldContent":""},{"type":"INSERT","lineNumber":220,"content":""},{"type":"DELETE","lineNumber":249,"oldContent":"            if (repo == null) {"},{"type":"DELETE","lineNumber":251,"oldContent":"            }"},{"type":"DELETE","lineNumber":252,"oldContent":"            try {"},{"type":"DELETE","lineNumber":254,"oldContent":"                repo?.requestMissionAndLog()"},{"type":"DELETE","lineNumber":255,"oldContent":"                Log.e(\"SharedVM\", \"Exception during mission readback\", e)"},{"type":"INSERT","lineNumber":246,"content":"            if (repo == null) {"},{"type":"INSERT","lineNumber":249,"content":"            }"},{"type":"INSERT","lineNumber":250,"content":"            try {"},{"type":"INSERT","lineNumber":251,"content":"                repo?.requestMissionAndLog()"},{"type":"INSERT","lineNumber":253,"content":"                Log.e(\"SharedVM\", \"Exception during mission readback\", e)"}]},{"timestamp":1758177263360,"changes":[{"type":"MODIFY","lineNumber":13,"content":"import kotlinx.coroutines.delay","oldContent":"class SharedViewModel : ViewModel() {"},{"type":"MODIFY","lineNumber":20,"content":"    private var repo: MavlinkTelemetryRepository? = null","oldContent":"    private val _telemetryState = mutableStateOf(TelemetryState())"},{"type":"DELETE","lineNumber":36,"oldContent":"                    _telemetryState.value = it"},{"type":"DELETE","lineNumber":37,"oldContent":"                }"},{"type":"INSERT","lineNumber":36,"content":"    // Mission timer state"},{"type":"INSERT","lineNumber":37,"content":"    private var missionTimerJob: kotlinx.coroutines.Job? = null"},{"type":"INSERT","lineNumber":38,"content":"    private val _missionElapsedSeconds = MutableStateFlow(0)"},{"type":"INSERT","lineNumber":39,"content":"    val missionElapsedSeconds: StateFlow<Int> = _missionElapsedSeconds.asStateFlow()"},{"type":"INSERT","lineNumber":40,"content":"    val missionElapsedFormatted: StateFlow<String> = missionElapsedSeconds.map { secs ->"},{"type":"INSERT","lineNumber":41,"content":"        val h = secs / 3600"},{"type":"INSERT","lineNumber":42,"content":"        val m = (secs % 3600) / 60"},{"type":"INSERT","lineNumber":43,"content":"        val s = secs % 60"},{"type":"INSERT","lineNumber":44,"content":"        if (h > 0) \"%d:%02d:%02d\".format(h, m, s) else \"%02d:%02d\".format(m, s)"},{"type":"INSERT","lineNumber":45,"content":"    }.stateIn(viewModelScope, SharingStarted.Eagerly, \"00:00\")"},{"type":"INSERT","lineNumber":46,"content":""},{"type":"INSERT","lineNumber":47,"content":"    fun connect() {"},{"type":"INSERT","lineNumber":48,"content":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":48,"oldContent":"                    Log.e(tag, \"MISSION_START rejected or timed out\")"},{"type":"INSERT","lineNumber":59,"content":"    }"},{"type":"DELETE","lineNumber":59,"oldContent":"                    val armTimeout = 8000L"},{"type":"INSERT","lineNumber":70,"content":"                Log.i(\"SharedVM\", \"Request to upload mission with ${missionItems.size} items\")"},{"type":"DELETE","lineNumber":76,"oldContent":"                    Log.e(tag, \"No mission ACK present. Upload a mission first.\")"},{"type":"INSERT","lineNumber":87,"content":""},{"type":"DELETE","lineNumber":82,"oldContent":"                    _uploadedWaypoints.value = emptyList()"},{"type":"DELETE","lineNumber":83,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":84,"oldContent":"                    Log.i(\"SharedVM\", \"Mission upload succeeded (${missionItems.size}). ACK received.\")"},{"type":"DELETE","lineNumber":85,"oldContent":"                Log.e(\"SharedVM\", \"Failed to start mission\", e)"},{"type":"INSERT","lineNumber":93,"content":""},{"type":"INSERT","lineNumber":94,"content":"                    // Convert MissionItemInt to LatLng for display"},{"type":"INSERT","lineNumber":95,"content":"                    val waypoints = missionItems.map { item ->"},{"type":"INSERT","lineNumber":96,"content":"                        LatLng(item.x / 1E7, item.y / 1E7)"},{"type":"DELETE","lineNumber":92,"oldContent":"                Log.i(\"SharedVM\", \"Sending start mission with first=0 last=$last\")"},{"type":"DELETE","lineNumber":93,"oldContent":"                val last = if (lastUploadedCount > 0) lastUploadedCount - 1 else 0"},{"type":"INSERT","lineNumber":103,"content":"                    lastUploadedCount = 0"},{"type":"INSERT","lineNumber":104,"content":"                    _uploadedWaypoints.value = emptyList()"},{"type":"DELETE","lineNumber":100,"oldContent":"                    } else {"},{"type":"INSERT","lineNumber":111,"content":"                _uploadedWaypoints.value = emptyList()"},{"type":"DELETE","lineNumber":116,"oldContent":""},{"type":"DELETE","lineNumber":123,"oldContent":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - start < armTimeout) {"},{"type":"INSERT","lineNumber":133,"content":"                }"},{"type":"INSERT","lineNumber":134,"content":""},{"type":"DELETE","lineNumber":130,"oldContent":"                }"},{"type":"DELETE","lineNumber":133,"oldContent":"                val sats = _telemetryState.value.sats ?: 0"},{"type":"INSERT","lineNumber":148,"content":"                }"},{"type":"DELETE","lineNumber":140,"oldContent":"                    Log.i(\"SharedVM\", \"=== Mission Start Sequence Completed Successfully ===\")"},{"type":"DELETE","lineNumber":141,"oldContent":"                val isInArmableMode = currentMode?.equals(\"Stabilize\", ignoreCase = true) == true ||"},{"type":"DELETE","lineNumber":142,"oldContent":"                if (result) {"},{"type":"DELETE","lineNumber":143,"oldContent":"                val result = repo?.startMission(0, last) ?: false"},{"type":"DELETE","lineNumber":144,"oldContent":"                Log.i(\"SharedVM\", \"Sending mission start command with first=0 last=$last\")"},{"type":"DELETE","lineNumber":145,"oldContent":"                val last = if (lastUploadedCount > 0) lastUploadedCount - 1 else 0"},{"type":"DELETE","lineNumber":146,"oldContent":"                Log.i(\"SharedVM\", \"Step 4: Starting mission execution\")"},{"type":"INSERT","lineNumber":150,"content":"                val sats = _telemetryState.value.sats ?: 0"},{"type":"INSERT","lineNumber":151,"content":"                if (sats < 6) {"},{"type":"INSERT","lineNumber":152,"content":"                    Log.w(\"SharedVM\", \"Insufficient GPS satellites ($sats), minimum 6 required\")"},{"type":"INSERT","lineNumber":153,"content":"                    onResult(false, \"Insufficient GPS satellites ($sats). Need at least 6 for mission.\")"},{"type":"INSERT","lineNumber":154,"content":"                    return@launch"},{"type":"INSERT","lineNumber":155,"content":"                }"},{"type":"INSERT","lineNumber":156,"content":""},{"type":"INSERT","lineNumber":159,"content":"                val isInArmableMode = currentMode?.equals(\"Stabilize\", ignoreCase = true) == true ||"},{"type":"DELETE","lineNumber":151,"oldContent":"                    while (System.currentTimeMillis() - modeStart < modeTimeout) {"},{"type":"DELETE","lineNumber":153,"oldContent":"                        val mode = _telemetryState.value.mode"},{"type":"INSERT","lineNumber":169,"content":"                    while (System.currentTimeMillis() - modeStart < modeTimeout) {"},{"type":"INSERT","lineNumber":170,"content":"                        val mode = _telemetryState.value.mode"},{"type":"DELETE","lineNumber":176,"oldContent":"                    val armStart = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":178,"oldContent":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - armStart < armTimeout) {"},{"type":"INSERT","lineNumber":194,"content":"                    val armStart = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":195,"content":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - armStart < armTimeout) {"},{"type":"DELETE","lineNumber":200,"oldContent":"                        System.currentTimeMillis() - autoModeStart < autoModeTimeout) {"},{"type":"DELETE","lineNumber":202,"oldContent":"                        delay(500)"},{"type":"DELETE","lineNumber":204,"oldContent":"                    }"},{"type":"DELETE","lineNumber":206,"oldContent":""},{"type":"DELETE","lineNumber":210,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle mode is now AUTO\")"},{"type":"INSERT","lineNumber":218,"content":"                        System.currentTimeMillis() - autoModeStart < autoModeTimeout) {"},{"type":"INSERT","lineNumber":219,"content":"                        delay(500)"},{"type":"INSERT","lineNumber":220,"content":"                    }"},{"type":"INSERT","lineNumber":221,"content":""},{"type":"DELETE","lineNumber":214,"oldContent":""},{"type":"INSERT","lineNumber":227,"content":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle mode is now AUTO\")"},{"type":"INSERT","lineNumber":231,"content":""},{"type":"INSERT","lineNumber":241,"content":"                    // Start timer"},{"type":"INSERT","lineNumber":242,"content":"                    startMissionTimer()"},{"type":"INSERT","lineNumber":246,"content":"                    stopMissionTimer()"},{"type":"INSERT","lineNumber":252,"content":"                stopMissionTimer()"},{"type":"DELETE","lineNumber":239,"oldContent":"            if (repo == null) {"},{"type":"DELETE","lineNumber":243,"oldContent":"            }"},{"type":"DELETE","lineNumber":244,"oldContent":"            try {"},{"type":"DELETE","lineNumber":246,"oldContent":"                repo?.requestMissionAndLog()"},{"type":"DELETE","lineNumber":247,"oldContent":"                Log.e(\"SharedVM\", \"Exception during mission readback\", e)"},{"type":"INSERT","lineNumber":261,"content":"            if (repo == null) {"},{"type":"INSERT","lineNumber":264,"content":"            }"},{"type":"INSERT","lineNumber":265,"content":"            try {"},{"type":"INSERT","lineNumber":266,"content":"                repo?.requestMissionAndLog()"},{"type":"INSERT","lineNumber":268,"content":"                Log.e(\"SharedVM\", \"Exception during mission readback\", e)"},{"type":"INSERT","lineNumber":271,"content":"    }"},{"type":"INSERT","lineNumber":272,"content":""},{"type":"INSERT","lineNumber":273,"content":"    private fun startMissionTimer() {"},{"type":"INSERT","lineNumber":274,"content":"        missionTimerJob?.cancel()"},{"type":"INSERT","lineNumber":275,"content":"        _missionElapsedSeconds.value = 0"},{"type":"INSERT","lineNumber":276,"content":"        missionTimerJob = viewModelScope.launch {"},{"type":"INSERT","lineNumber":277,"content":"            while (true) {"},{"type":"INSERT","lineNumber":278,"content":"                delay(1000)"},{"type":"INSERT","lineNumber":279,"content":"                _missionElapsedSeconds.value += 1"},{"type":"DELETE","lineNumber":257,"oldContent":"                Log.e(\"SharedVM\", \"Exception during mission readback\", e)"},{"type":"INSERT","lineNumber":281,"content":"        }"},{"type":"INSERT","lineNumber":282,"content":"        // Monitor for mission end (mode change or disarm)"},{"type":"INSERT","lineNumber":283,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":284,"content":"            telemetryState.collect { state ->"},{"type":"INSERT","lineNumber":285,"content":"                // Stop timer if vehicle is disarmed or mode is RTL/Land/Unknown"},{"type":"INSERT","lineNumber":286,"content":"                if (!state.armed || (state.mode?.let { m ->"},{"type":"INSERT","lineNumber":287,"content":"                    m.contains(\"RTL\", true) || m.contains(\"Land\", true) || m.contains(\"Unknown\", true)"},{"type":"INSERT","lineNumber":288,"content":"                } == true)) {"},{"type":"INSERT","lineNumber":289,"content":"                    stopMissionTimer()"},{"type":"INSERT","lineNumber":290,"content":"                }"},{"type":"INSERT","lineNumber":291,"content":"            }"},{"type":"INSERT","lineNumber":292,"content":"        }"},{"type":"INSERT","lineNumber":293,"content":"    }"},{"type":"INSERT","lineNumber":294,"content":""},{"type":"INSERT","lineNumber":295,"content":"    private fun stopMissionTimer() {"},{"type":"INSERT","lineNumber":296,"content":"        missionTimerJob?.cancel()"},{"type":"INSERT","lineNumber":297,"content":"        missionTimerJob = null"},{"type":"INSERT","lineNumber":298,"content":"    }"},{"type":"INSERT","lineNumber":299,"content":"}"}]},{"timestamp":1758177862114,"changes":[{"type":"DELETE","lineNumber":34,"oldContent":"                newRepo.start()"},{"type":"DELETE","lineNumber":35,"oldContent":"                    _telemetryState.value = it"},{"type":"DELETE","lineNumber":36,"oldContent":"    // Mission timer state"},{"type":"DELETE","lineNumber":37,"oldContent":"    private var missionTimerJob: kotlinx.coroutines.Job? = null"},{"type":"DELETE","lineNumber":38,"oldContent":"    private val _missionElapsedSeconds = MutableStateFlow(0)"},{"type":"INSERT","lineNumber":34,"content":"    val uploadedWaypoints: StateFlow<List<LatLng>> = _uploadedWaypoints.asStateFlow()"},{"type":"INSERT","lineNumber":35,"content":""},{"type":"INSERT","lineNumber":36,"content":"    fun connect() {"},{"type":"INSERT","lineNumber":37,"content":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":40,"oldContent":"    val missionElapsedSeconds: StateFlow<Int> = _missionElapsedSeconds.asStateFlow()"},{"type":"DELETE","lineNumber":42,"oldContent":"    val missionElapsedFormatted: StateFlow<String> = missionElapsedSeconds.map { secs ->"},{"type":"DELETE","lineNumber":44,"oldContent":"        val h = secs / 3600"},{"type":"DELETE","lineNumber":46,"oldContent":"        val m = (secs % 3600) / 60"},{"type":"DELETE","lineNumber":48,"oldContent":"        val s = secs % 60"},{"type":"DELETE","lineNumber":50,"oldContent":"        if (h > 0) \"%d:%02d:%02d\".format(h, m, s) else \"%02d:%02d\".format(m, s)"},{"type":"DELETE","lineNumber":52,"oldContent":"    }.stateIn(viewModelScope, SharingStarted.Eagerly, \"00:00\")"},{"type":"DELETE","lineNumber":54,"oldContent":""},{"type":"DELETE","lineNumber":56,"oldContent":"    fun connect() {"},{"type":"DELETE","lineNumber":58,"oldContent":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":48,"content":"    }"},{"type":"DELETE","lineNumber":69,"oldContent":"    }"},{"type":"INSERT","lineNumber":59,"content":"                Log.i(\"SharedVM\", \"Request to upload mission with ${missionItems.size} items\")"},{"type":"DELETE","lineNumber":80,"oldContent":"                Log.i(\"SharedVM\", \"Request to upload mission with ${missionItems.size} items\")"},{"type":"INSERT","lineNumber":76,"content":""},{"type":"DELETE","lineNumber":92,"oldContent":"                    }"},{"type":"INSERT","lineNumber":83,"content":"                    // Convert MissionItemInt to LatLng for display"},{"type":"INSERT","lineNumber":84,"content":"                    val waypoints = missionItems.map { item ->"},{"type":"INSERT","lineNumber":85,"content":"                        LatLng(item.x / 1E7, item.y / 1E7)"},{"type":"INSERT","lineNumber":86,"content":"                    }"},{"type":"DELETE","lineNumber":99,"oldContent":""},{"type":"DELETE","lineNumber":100,"oldContent":"                    // Convert MissionItemInt to LatLng for display"},{"type":"INSERT","lineNumber":92,"content":"                    lastUploadedCount = 0"},{"type":"INSERT","lineNumber":93,"content":"                    _uploadedWaypoints.value = emptyList()"},{"type":"DELETE","lineNumber":102,"oldContent":"                    val waypoints = missionItems.map { item ->"},{"type":"DELETE","lineNumber":104,"oldContent":"                        LatLng(item.x / 1E7, item.y / 1E7)"},{"type":"INSERT","lineNumber":100,"content":"                _uploadedWaypoints.value = emptyList()"},{"type":"DELETE","lineNumber":111,"oldContent":"                    lastUploadedCount = 0"},{"type":"DELETE","lineNumber":113,"oldContent":"                    _uploadedWaypoints.value = emptyList()"},{"type":"DELETE","lineNumber":121,"oldContent":"                _uploadedWaypoints.value = emptyList()"},{"type":"INSERT","lineNumber":122,"content":"                }"},{"type":"INSERT","lineNumber":123,"content":""},{"type":"DELETE","lineNumber":141,"oldContent":"                }"},{"type":"DELETE","lineNumber":142,"oldContent":""},{"type":"DELETE","lineNumber":148,"oldContent":""},{"type":"DELETE","lineNumber":149,"oldContent":"                // Step 2: See if the drone is either in Stabilize or Loiter to arm the drone"},{"type":"DELETE","lineNumber":151,"oldContent":"                val currentMode = _telemetryState.value.mode"},{"type":"DELETE","lineNumber":152,"oldContent":"                        currentMode?.equals(\"Loiter\", ignoreCase = true) == true"},{"type":"DELETE","lineNumber":153,"oldContent":"                val sats = _telemetryState.value.sats ?: 0"},{"type":"INSERT","lineNumber":139,"content":"                val sats = _telemetryState.value.sats ?: 0"},{"type":"DELETE","lineNumber":157,"oldContent":"                if (!isInArmableMode) {"},{"type":"DELETE","lineNumber":160,"oldContent":"                    Log.i(\"SharedVM\", \"Current mode '$currentMode' not suitable for arming, switching to Stabilize\")"},{"type":"DELETE","lineNumber":162,"oldContent":"                    repo?.changeMode(MavMode.STABILIZE)"},{"type":"INSERT","lineNumber":146,"content":"                // Step 2: See if the drone is either in Stabilize or Loiter to arm the drone"},{"type":"INSERT","lineNumber":147,"content":"                val currentMode = _telemetryState.value.mode"},{"type":"INSERT","lineNumber":148,"content":"                val isInArmableMode = currentMode?.equals(\"Stabilize\", ignoreCase = true) == true ||"},{"type":"INSERT","lineNumber":149,"content":"                        currentMode?.equals(\"Loiter\", ignoreCase = true) == true"},{"type":"INSERT","lineNumber":151,"content":"                if (!isInArmableMode) {"},{"type":"INSERT","lineNumber":152,"content":"                    Log.i(\"SharedVM\", \"Current mode '$currentMode' not suitable for arming, switching to Stabilize\")"},{"type":"INSERT","lineNumber":153,"content":"                    repo?.changeMode(MavMode.STABILIZE)"},{"type":"INSERT","lineNumber":154,"content":""},{"type":"DELETE","lineNumber":167,"oldContent":"                val isInArmableMode = currentMode?.equals(\"Stabilize\", ignoreCase = true) == true ||"},{"type":"INSERT","lineNumber":158,"content":"                    while (System.currentTimeMillis() - modeStart < modeTimeout) {"},{"type":"INSERT","lineNumber":159,"content":"                        val mode = _telemetryState.value.mode"},{"type":"DELETE","lineNumber":178,"oldContent":"                    while (System.currentTimeMillis() - modeStart < modeTimeout) {"},{"type":"DELETE","lineNumber":180,"oldContent":"                        val mode = _telemetryState.value.mode"},{"type":"INSERT","lineNumber":183,"content":"                    val armStart = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":184,"content":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - armStart < armTimeout) {"},{"type":"DELETE","lineNumber":203,"oldContent":"                    val armStart = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":205,"oldContent":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - armStart < armTimeout) {"},{"type":"INSERT","lineNumber":207,"content":"                        System.currentTimeMillis() - autoModeStart < autoModeTimeout) {"},{"type":"INSERT","lineNumber":208,"content":"                        delay(500)"},{"type":"INSERT","lineNumber":209,"content":"                    }"},{"type":"INSERT","lineNumber":210,"content":""},{"type":"DELETE","lineNumber":223,"oldContent":"                        System.currentTimeMillis() - autoModeStart < autoModeTimeout) {"},{"type":"INSERT","lineNumber":216,"content":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle mode is now AUTO\")"},{"type":"DELETE","lineNumber":225,"oldContent":"                        delay(500)"},{"type":"DELETE","lineNumber":227,"oldContent":"                    }"},{"type":"DELETE","lineNumber":236,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle mode is now AUTO\")"},{"type":"DELETE","lineNumber":241,"oldContent":""},{"type":"DELETE","lineNumber":251,"oldContent":"                    // Start timer"},{"type":"DELETE","lineNumber":253,"oldContent":"                    startMissionTimer()"},{"type":"DELETE","lineNumber":256,"oldContent":"                    stopMissionTimer()"},{"type":"INSERT","lineNumber":246,"content":"            if (repo == null) {"},{"type":"DELETE","lineNumber":261,"oldContent":"                stopMissionTimer()"},{"type":"DELETE","lineNumber":263,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":265,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":266,"oldContent":"                repo?.requestMissionAndLog()"},{"type":"DELETE","lineNumber":267,"oldContent":"}"},{"type":"DELETE","lineNumber":268,"oldContent":"    }"},{"type":"DELETE","lineNumber":269,"oldContent":"        missionTimerJob = null"},{"type":"DELETE","lineNumber":270,"oldContent":"            if (repo == null) {"},{"type":"DELETE","lineNumber":271,"oldContent":"        missionTimerJob?.cancel()"},{"type":"DELETE","lineNumber":272,"oldContent":"    private fun stopMissionTimer() {"},{"type":"DELETE","lineNumber":273,"oldContent":""},{"type":"DELETE","lineNumber":274,"oldContent":"            }"},{"type":"DELETE","lineNumber":275,"oldContent":"    }"},{"type":"DELETE","lineNumber":277,"oldContent":"        }"},{"type":"DELETE","lineNumber":279,"oldContent":"            }"},{"type":"DELETE","lineNumber":280,"oldContent":"                }"},{"type":"INSERT","lineNumber":252,"content":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":282,"oldContent":"                    stopMissionTimer()"},{"type":"DELETE","lineNumber":283,"oldContent":"                } == true)) {"},{"type":"DELETE","lineNumber":284,"oldContent":"                    m.contains(\"RTL\", true) || m.contains(\"Land\", true) || m.contains(\"Unknown\", true)"},{"type":"DELETE","lineNumber":285,"oldContent":"    }"},{"type":"DELETE","lineNumber":286,"oldContent":"                if (!state.armed || (state.mode?.let { m ->"},{"type":"DELETE","lineNumber":287,"oldContent":""},{"type":"DELETE","lineNumber":288,"oldContent":"                // Stop timer if vehicle is disarmed or mode is RTL/Land/Unknown"},{"type":"DELETE","lineNumber":289,"oldContent":"    private fun startMissionTimer() {"},{"type":"DELETE","lineNumber":290,"oldContent":"            telemetryState.collect { state ->"},{"type":"DELETE","lineNumber":291,"oldContent":"        missionTimerJob?.cancel()"},{"type":"DELETE","lineNumber":292,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":293,"oldContent":"        _missionElapsedSeconds.value = 0"},{"type":"DELETE","lineNumber":294,"oldContent":"        // Monitor for mission end (mode change or disarm)"},{"type":"DELETE","lineNumber":295,"oldContent":"        missionTimerJob = viewModelScope.launch {"},{"type":"INSERT","lineNumber":254,"content":"            }"},{"type":"DELETE","lineNumber":297,"oldContent":"            while (true) {"},{"type":"DELETE","lineNumber":298,"oldContent":"                _missionElapsedSeconds.value += 1"},{"type":"DELETE","lineNumber":299,"oldContent":"                delay(1000)"},{"type":"INSERT","lineNumber":256,"content":"    }"},{"type":"INSERT","lineNumber":257,"content":"}"}]},{"timestamp":1758185840192,"changes":[{"type":"DELETE","lineNumber":43,"oldContent":"    }"},{"type":"DELETE","lineNumber":49,"oldContent":"                Log.i(\"SharedVM\", \"Request to upload mission with ${missionItems.size} items\")"},{"type":"INSERT","lineNumber":48,"content":"    }"},{"type":"INSERT","lineNumber":59,"content":"                Log.i(\"SharedVM\", \"Request to upload mission with ${missionItems.size} items\")"},{"type":"INSERT","lineNumber":66,"content":"                    return@launch"},{"type":"INSERT","lineNumber":67,"content":"                }"},{"type":"INSERT","lineNumber":69,"content":"                if (_telemetryState.value.missionCompleted) {"},{"type":"INSERT","lineNumber":70,"content":"                    Log.w(\"SharedVM\", \"Mission already completed, cannot upload new mission until reset\")"},{"type":"INSERT","lineNumber":71,"content":"                    missionUploaded = false"},{"type":"INSERT","lineNumber":72,"content":"                    lastUploadedCount = 0"},{"type":"INSERT","lineNumber":73,"content":"                    onResult(false, \"Mission already completed. Please reset or reconnect before uploading a new mission.\")"},{"type":"DELETE","lineNumber":73,"oldContent":"                    // Convert MissionItemInt to LatLng for display"},{"type":"DELETE","lineNumber":75,"oldContent":"                    val waypoints = missionItems.map { item ->"},{"type":"DELETE","lineNumber":77,"oldContent":"                        LatLng(item.x / 1E7, item.y / 1E7)"},{"type":"DELETE","lineNumber":79,"oldContent":"                    }"},{"type":"INSERT","lineNumber":84,"content":""},{"type":"DELETE","lineNumber":86,"oldContent":"                    lastUploadedCount = 0"},{"type":"DELETE","lineNumber":87,"oldContent":"                    _uploadedWaypoints.value = emptyList()"},{"type":"INSERT","lineNumber":91,"content":"                    // Convert MissionItemInt to LatLng for display"},{"type":"INSERT","lineNumber":92,"content":"                    val waypoints = missionItems.map { item ->"},{"type":"INSERT","lineNumber":93,"content":"                        LatLng(item.x / 1E7, item.y / 1E7)"},{"type":"INSERT","lineNumber":94,"content":"                    }"},{"type":"DELETE","lineNumber":91,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle already in AUTO mode\")"},{"type":"INSERT","lineNumber":97,"content":"                    Log.i(\"SharedVM\", \"Mission upload succeeded (${missionItems.size})\")"},{"type":"INSERT","lineNumber":98,"content":"                    onResult(true, null)"},{"type":"DELETE","lineNumber":93,"oldContent":"                        return@launch"},{"type":"DELETE","lineNumber":94,"oldContent":"                _uploadedWaypoints.value = emptyList()"},{"type":"DELETE","lineNumber":95,"oldContent":"                        val finalMode = _telemetryState.value.mode"},{"type":"INSERT","lineNumber":100,"content":"                    lastUploadedCount = 0"},{"type":"INSERT","lineNumber":101,"content":"                    _uploadedWaypoints.value = emptyList()"},{"type":"INSERT","lineNumber":102,"content":"                    Log.e(\"SharedVM\", \"Mission upload failed or timed out\")"},{"type":"DELETE","lineNumber":97,"oldContent":"                    if (!modeChangeSuccess) {"},{"type":"INSERT","lineNumber":104,"content":"                }"},{"type":"INSERT","lineNumber":108,"content":"                _uploadedWaypoints.value = emptyList()"},{"type":"DELETE","lineNumber":111,"oldContent":"                }"},{"type":"DELETE","lineNumber":113,"oldContent":""},{"type":"INSERT","lineNumber":130,"content":"                }"},{"type":"INSERT","lineNumber":131,"content":""},{"type":"DELETE","lineNumber":130,"oldContent":"                val sats = _telemetryState.value.sats ?: 0"},{"type":"DELETE","lineNumber":136,"oldContent":"                // Step 2: See if the drone is either in Stabilize or Loiter to arm the drone"},{"type":"DELETE","lineNumber":138,"oldContent":"                val currentMode = _telemetryState.value.mode"},{"type":"DELETE","lineNumber":140,"oldContent":"                val isInArmableMode = currentMode?.equals(\"Stabilize\", ignoreCase = true) == true ||"},{"type":"DELETE","lineNumber":141,"oldContent":"                        currentMode?.equals(\"Loiter\", ignoreCase = true) == true"},{"type":"DELETE","lineNumber":143,"oldContent":"                if (!isInArmableMode) {"},{"type":"DELETE","lineNumber":144,"oldContent":"                    Log.i(\"SharedVM\", \"Current mode '$currentMode' not suitable for arming, switching to Stabilize\")"},{"type":"DELETE","lineNumber":145,"oldContent":"                    repo?.changeMode(MavMode.STABILIZE)"},{"type":"MODIFY","lineNumber":147,"content":"                val sats = _telemetryState.value.sats ?: 0","oldContent":""},{"type":"DELETE","lineNumber":150,"oldContent":"                    while (System.currentTimeMillis() - modeStart < modeTimeout) {"},{"type":"DELETE","lineNumber":152,"oldContent":"                        val mode = _telemetryState.value.mode"},{"type":"INSERT","lineNumber":154,"content":"                // Step 2: See if the drone is either in Stabilize or Loiter to arm the drone"},{"type":"INSERT","lineNumber":155,"content":"                val currentMode = _telemetryState.value.mode"},{"type":"INSERT","lineNumber":156,"content":"                val isInArmableMode = currentMode?.equals(\"Stabilize\", ignoreCase = true) == true ||"},{"type":"INSERT","lineNumber":157,"content":"                        currentMode?.equals(\"Loiter\", ignoreCase = true) == true"},{"type":"INSERT","lineNumber":159,"content":"                if (!isInArmableMode) {"},{"type":"INSERT","lineNumber":160,"content":"                    Log.i(\"SharedVM\", \"Current mode '$currentMode' not suitable for arming, switching to Stabilize\")"},{"type":"INSERT","lineNumber":161,"content":"                    repo?.changeMode(MavMode.STABILIZE)"},{"type":"INSERT","lineNumber":162,"content":""},{"type":"INSERT","lineNumber":166,"content":"                    while (System.currentTimeMillis() - modeStart < modeTimeout) {"},{"type":"INSERT","lineNumber":167,"content":"                        val mode = _telemetryState.value.mode"},{"type":"DELETE","lineNumber":172,"oldContent":"                    val armStart = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":174,"oldContent":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - armStart < armTimeout) {"},{"type":"INSERT","lineNumber":191,"content":"                    val armStart = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":192,"content":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - armStart < armTimeout) {"},{"type":"DELETE","lineNumber":196,"oldContent":"                        System.currentTimeMillis() - autoModeStart < autoModeTimeout) {"},{"type":"DELETE","lineNumber":198,"oldContent":"                        delay(500)"},{"type":"DELETE","lineNumber":200,"oldContent":"                    }"},{"type":"DELETE","lineNumber":202,"oldContent":""},{"type":"DELETE","lineNumber":209,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle mode is now AUTO\")"},{"type":"INSERT","lineNumber":215,"content":"                        System.currentTimeMillis() - autoModeStart < autoModeTimeout) {"},{"type":"INSERT","lineNumber":216,"content":"                        delay(500)"},{"type":"INSERT","lineNumber":217,"content":"                    }"},{"type":"INSERT","lineNumber":218,"content":""},{"type":"INSERT","lineNumber":224,"content":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle mode is now AUTO\")"},{"type":"DELETE","lineNumber":235,"oldContent":"            if (repo == null) {"},{"type":"DELETE","lineNumber":241,"oldContent":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":248,"content":"        }"},{"type":"INSERT","lineNumber":249,"content":"    }"},{"type":"INSERT","lineNumber":250,"content":""},{"type":"INSERT","lineNumber":251,"content":"    // New helper to request mission from FCU and log its items for debugging"},{"type":"INSERT","lineNumber":252,"content":"    fun readMissionFromFcu() {"},{"type":"DELETE","lineNumber":243,"oldContent":"            }"},{"type":"DELETE","lineNumber":244,"oldContent":"                return@launch"},{"type":"INSERT","lineNumber":254,"content":"            if (repo == null) {"},{"type":"DELETE","lineNumber":246,"oldContent":"    }"},{"type":"DELETE","lineNumber":247,"oldContent":"}"},{"type":"DELETE","lineNumber":249,"oldContent":"}"},{"type":"DELETE","lineNumber":250,"oldContent":"    }"},{"type":"DELETE","lineNumber":251,"oldContent":"        }"},{"type":"DELETE","lineNumber":252,"oldContent":"            if (repo == null) {"},{"type":"INSERT","lineNumber":260,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":262,"content":"            }"},{"type":"INSERT","lineNumber":264,"content":"    }"},{"type":"INSERT","lineNumber":265,"content":"}"}]},{"timestamp":1758187312046,"changes":[{"type":"MODIFY","lineNumber":14,"content":"","oldContent":"    var ipAddress by mutableStateOf(\"10.0.2.2\")"},{"type":"INSERT","lineNumber":15,"content":"import androidx.compose.runtime.State"},{"type":"INSERT","lineNumber":16,"content":""},{"type":"DELETE","lineNumber":17,"oldContent":"    var ipAddress by mutableStateOf(\"10.0.2.2\")"},{"type":"MODIFY","lineNumber":19,"content":"    private val _ipAddress = mutableStateOf(\"10.0.2.2\")","oldContent":"    var port by mutableStateOf(\"5762\")"},{"type":"INSERT","lineNumber":20,"content":"    val ipAddress: State<String> = _ipAddress"},{"type":"INSERT","lineNumber":22,"content":"    private val _port = mutableStateOf(\"5762\")"},{"type":"INSERT","lineNumber":23,"content":"    val port: State<String> = _port"},{"type":"INSERT","lineNumber":24,"content":""},{"type":"INSERT","lineNumber":25,"content":"    fun onIpAddressChange(newValue: String) {"},{"type":"INSERT","lineNumber":26,"content":"        _ipAddress.value = newValue"},{"type":"INSERT","lineNumber":27,"content":"    }"},{"type":"INSERT","lineNumber":28,"content":""},{"type":"INSERT","lineNumber":29,"content":"    fun onPortChange(newValue: String) {"},{"type":"INSERT","lineNumber":30,"content":"        _port.value = newValue"},{"type":"INSERT","lineNumber":31,"content":"    }"},{"type":"INSERT","lineNumber":32,"content":""},{"type":"DELETE","lineNumber":33,"oldContent":"                newRepo.start()"},{"type":"INSERT","lineNumber":46,"content":"    private val _uploadedWaypoints = MutableStateFlow<List<LatLng>>(emptyList())"},{"type":"DELETE","lineNumber":38,"oldContent":"        }"},{"type":"INSERT","lineNumber":51,"content":"            val portInt = port.value.toIntOrNull()"},{"type":"DELETE","lineNumber":40,"oldContent":"                val newRepo = MavlinkTelemetryRepository(ipAddress, portInt)"},{"type":"INSERT","lineNumber":53,"content":"                val newRepo = MavlinkTelemetryRepository(ipAddress.value, portInt)"},{"type":"DELETE","lineNumber":47,"oldContent":"    }"},{"type":"INSERT","lineNumber":61,"content":"    }"},{"type":"DELETE","lineNumber":58,"oldContent":"                Log.i(\"SharedVM\", \"Request to upload mission with ${missionItems.size} items\")"},{"type":"INSERT","lineNumber":72,"content":"                Log.i(\"SharedVM\", \"Request to upload mission with ${missionItems.size} items\")"},{"type":"DELETE","lineNumber":67,"oldContent":""},{"type":"INSERT","lineNumber":81,"content":""},{"type":"INSERT","lineNumber":82,"content":"                if (_telemetryState.value.missionCompleted) {"},{"type":"INSERT","lineNumber":83,"content":"                    Log.w(\"SharedVM\", \"Mission already completed, cannot upload new mission until reset\")"},{"type":"INSERT","lineNumber":84,"content":"                    missionUploaded = false"},{"type":"INSERT","lineNumber":85,"content":"                    lastUploadedCount = 0"},{"type":"INSERT","lineNumber":86,"content":"                    onResult(false, \"Mission already completed. Please reset or reconnect before uploading a new mission.\")"},{"type":"DELETE","lineNumber":71,"oldContent":"                if (_telemetryState.value.missionCompleted) {"},{"type":"DELETE","lineNumber":73,"oldContent":"                    Log.w(\"SharedVM\", \"Mission already completed, cannot upload new mission until reset\")"},{"type":"DELETE","lineNumber":75,"oldContent":"                    missionUploaded = false"},{"type":"DELETE","lineNumber":77,"oldContent":"                    lastUploadedCount = 0"},{"type":"DELETE","lineNumber":79,"oldContent":"                    onResult(false, \"Mission already completed. Please reset or reconnect before uploading a new mission.\")"},{"type":"INSERT","lineNumber":97,"content":""},{"type":"DELETE","lineNumber":87,"oldContent":""},{"type":"DELETE","lineNumber":91,"oldContent":"                // Check if vehicle is armable"},{"type":"DELETE","lineNumber":92,"oldContent":"                    return@launch"},{"type":"DELETE","lineNumber":95,"oldContent":"                // Check if mission is uploaded"},{"type":"DELETE","lineNumber":98,"oldContent":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":108,"content":"                    _uploadedWaypoints.value = waypoints"},{"type":"INSERT","lineNumber":109,"content":""},{"type":"INSERT","lineNumber":112,"content":"                } else {"},{"type":"INSERT","lineNumber":113,"content":"                    lastUploadedCount = 0"},{"type":"INSERT","lineNumber":114,"content":"                    _uploadedWaypoints.value = emptyList()"},{"type":"INSERT","lineNumber":115,"content":"                    Log.e(\"SharedVM\", \"Mission upload failed or timed out\")"},{"type":"INSERT","lineNumber":116,"content":"                    onResult(false, \"Mission upload failed or timed out\")"},{"type":"INSERT","lineNumber":117,"content":"                }"},{"type":"DELETE","lineNumber":103,"oldContent":"                    lastUploadedCount = 0"},{"type":"DELETE","lineNumber":105,"oldContent":"                    _uploadedWaypoints.value = emptyList()"},{"type":"INSERT","lineNumber":121,"content":"                _uploadedWaypoints.value = emptyList()"},{"type":"DELETE","lineNumber":107,"oldContent":"                    Log.e(\"SharedVM\", \"Mission upload failed or timed out\")"},{"type":"DELETE","lineNumber":110,"oldContent":"                }"},{"type":"DELETE","lineNumber":115,"oldContent":"                _uploadedWaypoints.value = emptyList()"},{"type":"DELETE","lineNumber":122,"oldContent":"                    "},{"type":"INSERT","lineNumber":135,"content":"                    onResult(false, \"Not connected to vehicle\")"},{"type":"DELETE","lineNumber":126,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle already armed\")"},{"type":"INSERT","lineNumber":139,"content":"                if (!_telemetryState.value.fcuDetected) {"},{"type":"DELETE","lineNumber":128,"oldContent":"                    }"},{"type":"INSERT","lineNumber":141,"content":"                    onResult(false, \"FCU not detected\")"},{"type":"INSERT","lineNumber":143,"content":"                }"},{"type":"INSERT","lineNumber":144,"content":""},{"type":"DELETE","lineNumber":136,"oldContent":"                }"},{"type":"DELETE","lineNumber":137,"oldContent":""},{"type":"DELETE","lineNumber":152,"oldContent":"                // Step 2: See if the drone is either in Stabilize or Loiter to arm the drone"},{"type":"DELETE","lineNumber":154,"oldContent":"                val currentMode = _telemetryState.value.mode"},{"type":"INSERT","lineNumber":167,"content":"                // Step 2: See if the drone is either in Stabilize or Loiter to arm the drone"},{"type":"INSERT","lineNumber":168,"content":"                val currentMode = _telemetryState.value.mode"},{"type":"DELETE","lineNumber":157,"oldContent":""},{"type":"INSERT","lineNumber":171,"content":""},{"type":"INSERT","lineNumber":172,"content":"                if (!isInArmableMode) {"},{"type":"INSERT","lineNumber":173,"content":"                    Log.i(\"SharedVM\", \"Current mode '$currentMode' not suitable for arming, switching to Stabilize\")"},{"type":"INSERT","lineNumber":174,"content":"                    repo?.changeMode(MavMode.STABILIZE)"},{"type":"INSERT","lineNumber":175,"content":""},{"type":"DELETE","lineNumber":161,"oldContent":"                if (!isInArmableMode) {"},{"type":"DELETE","lineNumber":163,"oldContent":"                    Log.i(\"SharedVM\", \"Current mode '$currentMode' not suitable for arming, switching to Stabilize\")"},{"type":"INSERT","lineNumber":179,"content":"                    while (System.currentTimeMillis() - modeStart < modeTimeout) {"},{"type":"INSERT","lineNumber":180,"content":"                        val mode = _telemetryState.value.mode"},{"type":"DELETE","lineNumber":165,"oldContent":"                    repo?.changeMode(MavMode.STABILIZE)"},{"type":"DELETE","lineNumber":167,"oldContent":""},{"type":"DELETE","lineNumber":172,"oldContent":"                    while (System.currentTimeMillis() - modeStart < modeTimeout) {"},{"type":"DELETE","lineNumber":174,"oldContent":"                        val mode = _telemetryState.value.mode"},{"type":"INSERT","lineNumber":204,"content":"                    val armStart = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":205,"content":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - armStart < armTimeout) {"},{"type":"DELETE","lineNumber":197,"oldContent":"                    val armStart = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":199,"oldContent":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - armStart < armTimeout) {"},{"type":"INSERT","lineNumber":228,"content":"                        System.currentTimeMillis() - autoModeStart < autoModeTimeout) {"},{"type":"INSERT","lineNumber":229,"content":"                        delay(500)"},{"type":"INSERT","lineNumber":230,"content":"                    }"},{"type":"INSERT","lineNumber":231,"content":""},{"type":"DELETE","lineNumber":218,"oldContent":"                        System.currentTimeMillis() - autoModeStart < autoModeTimeout) {"},{"type":"DELETE","lineNumber":220,"oldContent":"                        delay(500)"},{"type":"DELETE","lineNumber":222,"oldContent":"                    }"},{"type":"INSERT","lineNumber":237,"content":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle mode is now AUTO\")"},{"type":"DELETE","lineNumber":224,"oldContent":""},{"type":"DELETE","lineNumber":231,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle mode is now AUTO\")"},{"type":"DELETE","lineNumber":248,"oldContent":"            try {"},{"type":"DELETE","lineNumber":249,"oldContent":"                onResult(false, e.message)"},{"type":"DELETE","lineNumber":251,"oldContent":"                Log.e(\"SharedVM\", \"Failed to start mission\", e)"},{"type":"INSERT","lineNumber":266,"content":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":257,"oldContent":"            if (repo == null) {"},{"type":"INSERT","lineNumber":268,"content":"                Log.w(\"SharedVM\", \"No repo available, cannot request mission readback\")"},{"type":"INSERT","lineNumber":269,"content":"                return@launch"},{"type":"INSERT","lineNumber":270,"content":"            }"},{"type":"INSERT","lineNumber":273,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":275,"content":"            }"},{"type":"DELETE","lineNumber":262,"oldContent":"}"},{"type":"DELETE","lineNumber":264,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":265,"oldContent":"            }"},{"type":"INSERT","lineNumber":278,"content":"}"}]},{"timestamp":1758259104342,"changes":[{"type":"INSERT","lineNumber":16,"content":""},{"type":"DELETE","lineNumber":18,"oldContent":""},{"type":"DELETE","lineNumber":19,"oldContent":"    var port by mutableStateOf(\"5762\")"},{"type":"DELETE","lineNumber":22,"oldContent":"    private var repo: MavlinkTelemetryRepository? = null"},{"type":"DELETE","lineNumber":25,"oldContent":"    private val _telemetryState = MutableStateFlow(TelemetryState())"},{"type":"DELETE","lineNumber":27,"oldContent":"    val telemetryState: StateFlow<TelemetryState> = _telemetryState.asStateFlow()"},{"type":"DELETE","lineNumber":29,"oldContent":""},{"type":"DELETE","lineNumber":31,"oldContent":"    val isConnected: StateFlow<Boolean> = telemetryState"},{"type":"DELETE","lineNumber":33,"oldContent":"        .map { it.connected }"},{"type":"DELETE","lineNumber":35,"oldContent":"        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), false)"},{"type":"DELETE","lineNumber":37,"oldContent":""},{"type":"DELETE","lineNumber":39,"oldContent":"    var missionUploaded by mutableStateOf(false)"},{"type":"DELETE","lineNumber":41,"oldContent":"    var lastUploadedCount by mutableStateOf(0)"},{"type":"INSERT","lineNumber":33,"content":"    private var repo: MavlinkTelemetryRepository? = null"},{"type":"INSERT","lineNumber":35,"content":"    private val _telemetryState = MutableStateFlow(TelemetryState())"},{"type":"INSERT","lineNumber":36,"content":"    val telemetryState: StateFlow<TelemetryState> = _telemetryState.asStateFlow()"},{"type":"INSERT","lineNumber":37,"content":""},{"type":"INSERT","lineNumber":38,"content":"    val isConnected: StateFlow<Boolean> = telemetryState"},{"type":"INSERT","lineNumber":39,"content":"        .map { it.connected }"},{"type":"INSERT","lineNumber":40,"content":"        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), false)"},{"type":"INSERT","lineNumber":41,"content":""},{"type":"INSERT","lineNumber":42,"content":"    var missionUploaded by mutableStateOf(false)"},{"type":"INSERT","lineNumber":43,"content":"    var lastUploadedCount by mutableStateOf(0)"},{"type":"INSERT","lineNumber":44,"content":""},{"type":"INSERT","lineNumber":46,"content":"    private val _uploadedWaypoints = MutableStateFlow<List<LatLng>>(emptyList())"},{"type":"INSERT","lineNumber":51,"content":"            val portInt = port.value.toIntOrNull()"},{"type":"INSERT","lineNumber":53,"content":"                val newRepo = MavlinkTelemetryRepository(ipAddress.value, portInt)"},{"type":"DELETE","lineNumber":56,"oldContent":"    private val _uploadedWaypoints = MutableStateFlow<List<LatLng>>(emptyList())"},{"type":"DELETE","lineNumber":58,"oldContent":"                "},{"type":"INSERT","lineNumber":60,"content":"        }"},{"type":"INSERT","lineNumber":61,"content":"    }"},{"type":"DELETE","lineNumber":61,"oldContent":"            val portInt = port.value.toIntOrNull()"},{"type":"DELETE","lineNumber":64,"oldContent":"                val newRepo = MavlinkTelemetryRepository(ipAddress.value, portInt)"},{"type":"INSERT","lineNumber":72,"content":"                Log.i(\"SharedVM\", \"Request to upload mission with ${missionItems.size} items\")"},{"type":"DELETE","lineNumber":72,"oldContent":"    }"},{"type":"INSERT","lineNumber":74,"content":"                // Reset mission state before attempting new upload"},{"type":"INSERT","lineNumber":75,"content":"                missionUploaded = false"},{"type":"INSERT","lineNumber":76,"content":"                lastUploadedCount = 0"},{"type":"INSERT","lineNumber":77,"content":"                _uploadedWaypoints.value = emptyList()"},{"type":"INSERT","lineNumber":78,"content":"                if (_telemetryState.value.missionCompleted) {"},{"type":"INSERT","lineNumber":79,"content":"                    Log.i(\"SharedVM\", \"Resetting missionCompleted flag for new upload\")"},{"type":"INSERT","lineNumber":80,"content":"                    _telemetryState.value = _telemetryState.value.copy(missionCompleted = false, missionElapsedSec = null)"},{"type":"INSERT","lineNumber":81,"content":"                }"},{"type":"INSERT","lineNumber":82,"content":""},{"type":"DELETE","lineNumber":80,"oldContent":"                    return@launch"},{"type":"DELETE","lineNumber":81,"oldContent":"                }"},{"type":"DELETE","lineNumber":82,"oldContent":"                Log.i(\"SharedVM\", \"Request to upload mission with ${missionItems.size} items\")"},{"type":"DELETE","lineNumber":88,"oldContent":""},{"type":"DELETE","lineNumber":90,"oldContent":"                if (_telemetryState.value.missionCompleted) {"},{"type":"DELETE","lineNumber":92,"oldContent":"                    Log.w(\"SharedVM\", \"Mission already completed, cannot upload new mission until reset\")"},{"type":"DELETE","lineNumber":94,"oldContent":"                    missionUploaded = false"},{"type":"INSERT","lineNumber":98,"content":""},{"type":"DELETE","lineNumber":96,"oldContent":"                    lastUploadedCount = 0"},{"type":"DELETE","lineNumber":98,"oldContent":"                    onResult(false, \"Mission already completed. Please reset or reconnect before uploading a new mission.\")"},{"type":"DELETE","lineNumber":106,"oldContent":""},{"type":"INSERT","lineNumber":109,"content":"                    _uploadedWaypoints.value = waypoints"},{"type":"INSERT","lineNumber":110,"content":""},{"type":"INSERT","lineNumber":113,"content":"                } else {"},{"type":"INSERT","lineNumber":114,"content":"                    lastUploadedCount = 0"},{"type":"INSERT","lineNumber":115,"content":"                    _uploadedWaypoints.value = emptyList()"},{"type":"INSERT","lineNumber":116,"content":"                    Log.e(\"SharedVM\", \"Mission upload failed or timed out\")"},{"type":"INSERT","lineNumber":117,"content":"                    onResult(false, \"Mission upload failed or timed out\")"},{"type":"INSERT","lineNumber":118,"content":"                }"},{"type":"INSERT","lineNumber":122,"content":"                _uploadedWaypoints.value = emptyList()"},{"type":"DELETE","lineNumber":114,"oldContent":"                    _uploadedWaypoints.value = waypoints"},{"type":"DELETE","lineNumber":116,"oldContent":""},{"type":"DELETE","lineNumber":119,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":121,"oldContent":"                    lastUploadedCount = 0"},{"type":"DELETE","lineNumber":123,"oldContent":"                    _uploadedWaypoints.value = emptyList()"},{"type":"DELETE","lineNumber":125,"oldContent":"                    Log.e(\"SharedVM\", \"Mission upload failed or timed out\")"},{"type":"DELETE","lineNumber":126,"oldContent":"                    onResult(false, \"Mission upload failed or timed out\")"},{"type":"DELETE","lineNumber":128,"oldContent":"                }"},{"type":"DELETE","lineNumber":133,"oldContent":"                _uploadedWaypoints.value = emptyList()"},{"type":"INSERT","lineNumber":136,"content":"                    onResult(false, \"Not connected to vehicle\")"},{"type":"DELETE","lineNumber":138,"oldContent":"        }"},{"type":"DELETE","lineNumber":139,"oldContent":"                onResult(false, e.message)"},{"type":"INSERT","lineNumber":140,"content":"                if (!_telemetryState.value.fcuDetected) {"},{"type":"INSERT","lineNumber":141,"content":"                    Log.w(\"SharedVM\", \"FCU not detected, cannot start mission\")"},{"type":"INSERT","lineNumber":142,"content":"                    onResult(false, \"FCU not detected\")"},{"type":"INSERT","lineNumber":143,"content":"                    return@launch"},{"type":"INSERT","lineNumber":144,"content":"                }"},{"type":"INSERT","lineNumber":145,"content":""},{"type":"DELETE","lineNumber":142,"oldContent":"                Log.i(\"SharedVM\", \"Sending start mission command with first=0 last=$last\")"},{"type":"INSERT","lineNumber":148,"content":"                    Log.w(\"SharedVM\", \"No mission uploaded or acknowledged, cannot start\")"},{"type":"DELETE","lineNumber":144,"oldContent":"                // Step 5: Start the mission"},{"type":"DELETE","lineNumber":145,"oldContent":"                    onResult(false, \"Not connected to vehicle\")"},{"type":"INSERT","lineNumber":150,"content":"                    return@launch"},{"type":"DELETE","lineNumber":147,"oldContent":"                }"},{"type":"DELETE","lineNumber":148,"oldContent":"                if (!_telemetryState.value.fcuDetected) {"},{"type":"INSERT","lineNumber":152,"content":"                Log.i(\"SharedVM\", \"âœ“ Mission upload acknowledged (${lastUploadedCount} items)\")"},{"type":"DELETE","lineNumber":151,"oldContent":"                    onResult(false, \"FCU not detected\")"},{"type":"DELETE","lineNumber":154,"oldContent":"                }"},{"type":"DELETE","lineNumber":156,"oldContent":""},{"type":"INSERT","lineNumber":168,"content":"                // Step 2: See if the drone is either in Stabilize or Loiter to arm the drone"},{"type":"INSERT","lineNumber":169,"content":"                val currentMode = _telemetryState.value.mode"},{"type":"INSERT","lineNumber":172,"content":""},{"type":"INSERT","lineNumber":173,"content":"                if (!isInArmableMode) {"},{"type":"INSERT","lineNumber":174,"content":"                    Log.i(\"SharedVM\", \"Current mode '$currentMode' not suitable for arming, switching to Stabilize\")"},{"type":"INSERT","lineNumber":175,"content":"                    repo?.changeMode(MavMode.STABILIZE)"},{"type":"INSERT","lineNumber":176,"content":""},{"type":"INSERT","lineNumber":180,"content":"                    while (System.currentTimeMillis() - modeStart < modeTimeout) {"},{"type":"INSERT","lineNumber":181,"content":"                        val mode = _telemetryState.value.mode"},{"type":"DELETE","lineNumber":174,"oldContent":"                // Step 2: See if the drone is either in Stabilize or Loiter to arm the drone"},{"type":"DELETE","lineNumber":175,"oldContent":"                val currentMode = _telemetryState.value.mode"},{"type":"DELETE","lineNumber":179,"oldContent":""},{"type":"DELETE","lineNumber":181,"oldContent":"                if (!isInArmableMode) {"},{"type":"DELETE","lineNumber":182,"oldContent":"                    Log.i(\"SharedVM\", \"Current mode '$currentMode' not suitable for arming, switching to Stabilize\")"},{"type":"DELETE","lineNumber":184,"oldContent":"                    repo?.changeMode(MavMode.STABILIZE)"},{"type":"DELETE","lineNumber":185,"oldContent":""},{"type":"DELETE","lineNumber":190,"oldContent":"                    while (System.currentTimeMillis() - modeStart < modeTimeout) {"},{"type":"DELETE","lineNumber":192,"oldContent":"                        val mode = _telemetryState.value.mode"},{"type":"INSERT","lineNumber":205,"content":"                    val armStart = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":206,"content":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - armStart < armTimeout) {"},{"type":"DELETE","lineNumber":215,"oldContent":"                    val armStart = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":217,"oldContent":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - armStart < armTimeout) {"},{"type":"INSERT","lineNumber":229,"content":"                        System.currentTimeMillis() - autoModeStart < autoModeTimeout) {"},{"type":"INSERT","lineNumber":230,"content":"                        delay(500)"},{"type":"INSERT","lineNumber":231,"content":"                    }"},{"type":"INSERT","lineNumber":232,"content":""},{"type":"INSERT","lineNumber":238,"content":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle mode is now AUTO\")"},{"type":"DELETE","lineNumber":237,"oldContent":"                        System.currentTimeMillis() - autoModeStart < autoModeTimeout) {"},{"type":"DELETE","lineNumber":239,"oldContent":"                        delay(500)"},{"type":"DELETE","lineNumber":241,"oldContent":"                    }"},{"type":"DELETE","lineNumber":243,"oldContent":""},{"type":"DELETE","lineNumber":249,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle mode is now AUTO\")"},{"type":"DELETE","lineNumber":266,"oldContent":"        timerJob?.cancel()"},{"type":"INSERT","lineNumber":267,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":268,"content":"            if (repo == null) {"},{"type":"INSERT","lineNumber":269,"content":"                Log.w(\"SharedVM\", \"No repo available, cannot request mission readback\")"},{"type":"INSERT","lineNumber":270,"content":"                return@launch"},{"type":"INSERT","lineNumber":271,"content":"            }"},{"type":"INSERT","lineNumber":274,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":276,"content":"            }"},{"type":"DELETE","lineNumber":272,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":274,"oldContent":"            }"},{"type":"DELETE","lineNumber":275,"oldContent":"                Log.w(\"SharedVM\", \"No repo available, cannot request mission readback\")"},{"type":"DELETE","lineNumber":276,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":277,"oldContent":"                return@launch"},{"type":"DELETE","lineNumber":278,"oldContent":"            }"}]},{"timestamp":1758259499795,"changes":[{"type":"DELETE","lineNumber":27,"oldContent":"    private var repo: MavlinkTelemetryRepository? = null"},{"type":"INSERT","lineNumber":28,"content":""},{"type":"INSERT","lineNumber":29,"content":"    fun onPortChange(newValue: String) {"},{"type":"INSERT","lineNumber":30,"content":"        _port.value = newValue"},{"type":"INSERT","lineNumber":31,"content":"    }"},{"type":"INSERT","lineNumber":32,"content":""},{"type":"INSERT","lineNumber":33,"content":"    private var repo: MavlinkTelemetryRepository? = null"},{"type":"INSERT","lineNumber":34,"content":""},{"type":"DELETE","lineNumber":32,"oldContent":""},{"type":"DELETE","lineNumber":34,"oldContent":"    fun onPortChange(newValue: String) {"},{"type":"DELETE","lineNumber":37,"oldContent":"        _port.value = newValue"},{"type":"DELETE","lineNumber":40,"oldContent":"    }"},{"type":"DELETE","lineNumber":43,"oldContent":""},{"type":"DELETE","lineNumber":44,"oldContent":""},{"type":"MODIFY","lineNumber":52,"content":"            if (portInt != null) {","oldContent":"            if (portInt != null) {"},{"type":"INSERT","lineNumber":53,"content":"                val newRepo = MavlinkTelemetryRepository(ipAddress.value, portInt)"},{"type":"DELETE","lineNumber":55,"oldContent":"                val newRepo = MavlinkTelemetryRepository(ipAddress.value, portInt)"},{"type":"INSERT","lineNumber":58,"content":"                }"},{"type":"DELETE","lineNumber":59,"oldContent":"                onResult(false, e.message)"},{"type":"DELETE","lineNumber":60,"oldContent":""},{"type":"MODIFY","lineNumber":62,"content":"","oldContent":"    fun arm() {"},{"type":"INSERT","lineNumber":63,"content":"    fun arm() {"},{"type":"DELETE","lineNumber":72,"oldContent":""},{"type":"DELETE","lineNumber":74,"oldContent":"                if (repo == null) {"},{"type":"INSERT","lineNumber":73,"content":""},{"type":"DELETE","lineNumber":76,"oldContent":"                    Log.w(\"SharedVM\", \"No repo available, cannot upload mission\")"},{"type":"DELETE","lineNumber":78,"oldContent":"                    missionUploaded = false"},{"type":"DELETE","lineNumber":80,"oldContent":"                    lastUploadedCount = 0"},{"type":"DELETE","lineNumber":82,"oldContent":"                    onResult(false, \"Not connected to vehicle\")"},{"type":"DELETE","lineNumber":84,"oldContent":"                    return@launch"},{"type":"DELETE","lineNumber":86,"oldContent":"                }"},{"type":"INSERT","lineNumber":83,"content":"                if (repo == null) {"},{"type":"INSERT","lineNumber":84,"content":"                    Log.w(\"SharedVM\", \"No repo available, cannot upload mission\")"},{"type":"INSERT","lineNumber":85,"content":"                    missionUploaded = false"},{"type":"INSERT","lineNumber":86,"content":"                    lastUploadedCount = 0"},{"type":"INSERT","lineNumber":87,"content":"                    onResult(false, \"Not connected to vehicle\")"},{"type":"INSERT","lineNumber":88,"content":"                    return@launch"},{"type":"INSERT","lineNumber":89,"content":"                }"},{"type":"INSERT","lineNumber":98,"content":""},{"type":"DELETE","lineNumber":100,"oldContent":""},{"type":"DELETE","lineNumber":109,"oldContent":"                    Log.i(\"SharedVM\", \"Mission upload succeeded (${missionItems.size})\")"},{"type":"DELETE","lineNumber":111,"oldContent":"                    onResult(true, null)"},{"type":"DELETE","lineNumber":113,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":114,"oldContent":"                missionUploaded = false"},{"type":"DELETE","lineNumber":115,"oldContent":"                lastUploadedCount = 0"},{"type":"INSERT","lineNumber":111,"content":"                    Log.i(\"SharedVM\", \"Mission upload succeeded (${missionItems.size})\")"},{"type":"INSERT","lineNumber":112,"content":"                    onResult(true, null)"},{"type":"DELETE","lineNumber":117,"oldContent":"                Log.e(\"SharedVM\", \"Exception during mission upload\", e)"},{"type":"DELETE","lineNumber":120,"oldContent":"                onResult(false, e.message)"},{"type":"DELETE","lineNumber":123,"oldContent":"            }"},{"type":"INSERT","lineNumber":119,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":120,"content":"                missionUploaded = false"},{"type":"INSERT","lineNumber":121,"content":"                lastUploadedCount = 0"},{"type":"INSERT","lineNumber":122,"content":"                _uploadedWaypoints.value = emptyList()"},{"type":"INSERT","lineNumber":123,"content":"                Log.e(\"SharedVM\", \"Exception during mission upload\", e)"},{"type":"INSERT","lineNumber":124,"content":"                onResult(false, e.message)"},{"type":"INSERT","lineNumber":125,"content":"            }"},{"type":"DELETE","lineNumber":127,"oldContent":"                _uploadedWaypoints.value = emptyList()"},{"type":"DELETE","lineNumber":132,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":133,"oldContent":"                    onResult(true, null)"},{"type":"INSERT","lineNumber":132,"content":"                Log.i(\"SharedVM\", \"Starting mission start sequence...\")"},{"type":"INSERT","lineNumber":133,"content":""},{"type":"DELETE","lineNumber":135,"oldContent":"                val result = repo?.startMission(0, last) ?: false"},{"type":"DELETE","lineNumber":136,"oldContent":"                    return@launch"},{"type":"INSERT","lineNumber":135,"content":"                    Log.w(\"SharedVM\", \"No repo available, cannot start mission\")"},{"type":"INSERT","lineNumber":137,"content":"                    return@launch"},{"type":"DELETE","lineNumber":141,"oldContent":"                // Step 1: Check for acknowledgment of the mission"},{"type":"DELETE","lineNumber":143,"oldContent":"                if (!missionUploaded || lastUploadedCount == 0) {"},{"type":"DELETE","lineNumber":146,"oldContent":"                    onResult(false, \"No mission uploaded. Please upload a mission first.\")"},{"type":"DELETE","lineNumber":149,"oldContent":"                }"},{"type":"INSERT","lineNumber":146,"content":"                // Step 1: Check for acknowledgment of the mission"},{"type":"INSERT","lineNumber":147,"content":"                if (!missionUploaded || lastUploadedCount == 0) {"},{"type":"DELETE","lineNumber":151,"oldContent":""},{"type":"INSERT","lineNumber":149,"content":"                    onResult(false, \"No mission uploaded. Please upload a mission first.\")"},{"type":"DELETE","lineNumber":153,"oldContent":"                // Check basic prerequisites"},{"type":"INSERT","lineNumber":151,"content":"                }"},{"type":"INSERT","lineNumber":153,"content":""},{"type":"INSERT","lineNumber":154,"content":"                // Check basic prerequisites"},{"type":"DELETE","lineNumber":168,"oldContent":"                val isInArmableMode = currentMode?.equals(\"Stabilize\", ignoreCase = true) == true ||"},{"type":"DELETE","lineNumber":170,"oldContent":"                        currentMode?.equals(\"Loiter\", ignoreCase = true) == true"},{"type":"DELETE","lineNumber":172,"oldContent":"                    // Wait for mode change to Stabilize"},{"type":"DELETE","lineNumber":173,"oldContent":"                    val modeTimeout = 5000L"},{"type":"DELETE","lineNumber":174,"oldContent":"                    val modeStart = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":170,"content":"                val isInArmableMode = currentMode?.equals(\"Stabilize\", ignoreCase = true) == true ||"},{"type":"INSERT","lineNumber":171,"content":"                        currentMode?.equals(\"Loiter\", ignoreCase = true) == true"},{"type":"DELETE","lineNumber":176,"oldContent":"                        if (mode?.equals(\"Stabilize\", ignoreCase = true) == true) {"},{"type":"DELETE","lineNumber":178,"oldContent":"                            Log.i(\"SharedVM\", \"âœ“ Successfully switched to Stabilize mode\")"},{"type":"INSERT","lineNumber":177,"content":"                    // Wait for mode change to Stabilize"},{"type":"INSERT","lineNumber":178,"content":"                    val modeTimeout = 5000L"},{"type":"INSERT","lineNumber":179,"content":"                    val modeStart = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":180,"content":"                    while (System.currentTimeMillis() - modeStart < modeTimeout) {"},{"type":"INSERT","lineNumber":181,"content":"                        val mode = _telemetryState.value.mode"},{"type":"INSERT","lineNumber":182,"content":"                        if (mode?.equals(\"Stabilize\", ignoreCase = true) == true) {"},{"type":"INSERT","lineNumber":183,"content":"                            Log.i(\"SharedVM\", \"âœ“ Successfully switched to Stabilize mode\")"},{"type":"DELETE","lineNumber":185,"oldContent":"                    while (System.currentTimeMillis() - modeStart < modeTimeout) {"},{"type":"DELETE","lineNumber":187,"oldContent":"                        val mode = _telemetryState.value.mode"},{"type":"DELETE","lineNumber":205,"oldContent":"                        delay(500)"},{"type":"MODIFY","lineNumber":207,"content":"                        delay(500)","oldContent":"                    }"},{"type":"INSERT","lineNumber":208,"content":"                    }"},{"type":"INSERT","lineNumber":220,"content":"                // Log current mode and armed state before switching to AUTO"},{"type":"INSERT","lineNumber":221,"content":"                Log.i(\"SharedVM\", \"Preparing to switch to AUTO. Current mode: ${_telemetryState.value.mode}, armed: ${_telemetryState.value.armed}\")"},{"type":"INSERT","lineNumber":222,"content":""},{"type":"DELETE","lineNumber":223,"oldContent":"                    repo?.changeMode(MavMode.AUTO)"},{"type":"INSERT","lineNumber":226,"content":"                    val modeChanged = repo?.changeMode(MavMode.AUTO) ?: false"},{"type":"INSERT","lineNumber":227,"content":"                    Log.i(\"SharedVM\", \"Result of changeMode to AUTO: $modeChanged\")"},{"type":"DELETE","lineNumber":229,"oldContent":"                    if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"DELETE","lineNumber":231,"oldContent":"                        Log.w(\"SharedVM\", \"Vehicle did not switch to AUTO mode within timeout\")"},{"type":"DELETE","lineNumber":233,"oldContent":"                        onResult(false, \"Failed to switch to AUTO mode. Current mode: ${_telemetryState.value.mode}\")"},{"type":"DELETE","lineNumber":235,"oldContent":"                        return@launch"},{"type":"INSERT","lineNumber":237,"content":"                    if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"INSERT","lineNumber":238,"content":"                        Log.w(\"SharedVM\", \"Vehicle did not switch to AUTO mode within timeout\")"},{"type":"INSERT","lineNumber":239,"content":"                        onResult(false, \"Failed to switch to AUTO mode. Current mode: ${_telemetryState.value.mode}\")"},{"type":"INSERT","lineNumber":240,"content":"                        return@launch"},{"type":"INSERT","lineNumber":242,"content":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle mode is now AUTO\")"},{"type":"DELETE","lineNumber":242,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle mode is now AUTO\")"},{"type":"DELETE","lineNumber":261,"oldContent":"            try {"},{"type":"INSERT","lineNumber":265,"content":"            }"},{"type":"DELETE","lineNumber":268,"oldContent":"            try {"},{"type":"DELETE","lineNumber":270,"oldContent":"                repo?.requestMissionAndLog()"},{"type":"DELETE","lineNumber":272,"oldContent":"                Log.e(\"SharedVM\", \"Exception during mission readback\", e)"},{"type":"DELETE","lineNumber":274,"oldContent":"}"},{"type":"DELETE","lineNumber":276,"oldContent":"            }"},{"type":"DELETE","lineNumber":277,"oldContent":"            }"},{"type":"INSERT","lineNumber":276,"content":"            try {"},{"type":"INSERT","lineNumber":277,"content":"                repo?.requestMissionAndLog()"},{"type":"INSERT","lineNumber":279,"content":"                Log.e(\"SharedVM\", \"Exception during mission readback\", e)"},{"type":"INSERT","lineNumber":281,"content":"        }"},{"type":"INSERT","lineNumber":282,"content":"    }"},{"type":"INSERT","lineNumber":283,"content":"}"}]},{"timestamp":1758259924725,"changes":[{"type":"MODIFY","lineNumber":28,"content":"","oldContent":""},{"type":"DELETE","lineNumber":30,"oldContent":"    private val _telemetryState = MutableStateFlow(TelemetryState())"},{"type":"DELETE","lineNumber":32,"oldContent":"    val telemetryState: StateFlow<TelemetryState> = _telemetryState.asStateFlow()"},{"type":"DELETE","lineNumber":35,"oldContent":""},{"type":"DELETE","lineNumber":37,"oldContent":"    val isConnected: StateFlow<Boolean> = telemetryState"},{"type":"INSERT","lineNumber":35,"content":"    private val _telemetryState = MutableStateFlow(TelemetryState())"},{"type":"INSERT","lineNumber":36,"content":"    val telemetryState: StateFlow<TelemetryState> = _telemetryState.asStateFlow()"},{"type":"INSERT","lineNumber":37,"content":""},{"type":"INSERT","lineNumber":38,"content":"    val isConnected: StateFlow<Boolean> = telemetryState"},{"type":"INSERT","lineNumber":51,"content":"            val portInt = port.value.toIntOrNull()"},{"type":"DELETE","lineNumber":52,"oldContent":"            if (portInt != null) {"},{"type":"MODIFY","lineNumber":56,"content":"                newRepo.state.collect {","oldContent":"        viewModelScope.launch {"},{"type":"MODIFY","lineNumber":59,"content":"            }","oldContent":"    fun readMissionFromFcu() {"},{"type":"INSERT","lineNumber":61,"content":"    }"},{"type":"DELETE","lineNumber":63,"oldContent":"    }"},{"type":"INSERT","lineNumber":69,"content":"    // Helper: Wait for FCU to be ready for new mission (not in AUTO, not running mission)"},{"type":"INSERT","lineNumber":70,"content":"    private suspend fun waitForFcuReadyForNewMission(timeoutMs: Long = 5000L): Boolean {"},{"type":"INSERT","lineNumber":71,"content":"        val start = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":72,"content":"        while (System.currentTimeMillis() - start < timeoutMs) {"},{"type":"INSERT","lineNumber":73,"content":"            val mode = _telemetryState.value.mode"},{"type":"INSERT","lineNumber":74,"content":"            val armed = _telemetryState.value.armed"},{"type":"INSERT","lineNumber":75,"content":"            val completed = _telemetryState.value.missionCompleted"},{"type":"INSERT","lineNumber":76,"content":"            // FCU is ready if not in AUTO, not armed, and missionCompleted is true"},{"type":"INSERT","lineNumber":77,"content":"            if ((mode?.contains(\"Auto\", ignoreCase = true) != true) && !armed && completed) {"},{"type":"INSERT","lineNumber":78,"content":"                return true"},{"type":"INSERT","lineNumber":79,"content":"            }"},{"type":"INSERT","lineNumber":80,"content":"            delay(500)"},{"type":"INSERT","lineNumber":81,"content":"        }"},{"type":"INSERT","lineNumber":82,"content":"        return false"},{"type":"INSERT","lineNumber":83,"content":"    }"},{"type":"INSERT","lineNumber":84,"content":""},{"type":"DELETE","lineNumber":72,"oldContent":""},{"type":"INSERT","lineNumber":89,"content":""},{"type":"INSERT","lineNumber":90,"content":"                // Wait for FCU to be ready for new mission"},{"type":"INSERT","lineNumber":91,"content":"                val ready = waitForFcuReadyForNewMission()"},{"type":"INSERT","lineNumber":92,"content":"                if (!ready) {"},{"type":"INSERT","lineNumber":93,"content":"                    Log.w(\"SharedVM\", \"FCU not ready for new mission upload (still in AUTO or armed)\")"},{"type":"INSERT","lineNumber":94,"content":"                    onResult(false, \"FCU not ready for new mission. Please wait for mission completion and disarm.\")"},{"type":"INSERT","lineNumber":95,"content":"                    return@launch"},{"type":"INSERT","lineNumber":96,"content":"                }"},{"type":"INSERT","lineNumber":97,"content":""},{"type":"DELETE","lineNumber":78,"oldContent":"                if (repo == null) {"},{"type":"INSERT","lineNumber":103,"content":"                    Log.i(\"SharedVM\", \"Resetting missionCompleted flag for new upload\")"},{"type":"INSERT","lineNumber":104,"content":"                    _telemetryState.value = _telemetryState.value.copy(missionCompleted = false, missionElapsedSec = null)"},{"type":"INSERT","lineNumber":105,"content":"                }"},{"type":"INSERT","lineNumber":106,"content":""},{"type":"INSERT","lineNumber":107,"content":"                if (repo == null) {"},{"type":"DELETE","lineNumber":82,"oldContent":"                    Log.i(\"SharedVM\", \"Resetting missionCompleted flag for new upload\")"},{"type":"DELETE","lineNumber":85,"oldContent":"                    _telemetryState.value = _telemetryState.value.copy(missionCompleted = false, missionElapsedSec = null)"},{"type":"DELETE","lineNumber":88,"oldContent":"                }"},{"type":"DELETE","lineNumber":90,"oldContent":""},{"type":"INSERT","lineNumber":134,"content":""},{"type":"DELETE","lineNumber":112,"oldContent":""},{"type":"DELETE","lineNumber":115,"oldContent":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":140,"content":"                    Log.e(\"SharedVM\", \"Mission upload failed or timed out\")"},{"type":"INSERT","lineNumber":141,"content":"                    onResult(false, \"Mission upload failed or timed out\")"},{"type":"INSERT","lineNumber":142,"content":"                }"},{"type":"INSERT","lineNumber":143,"content":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":119,"oldContent":"                    Log.e(\"SharedVM\", \"Mission upload failed or timed out\")"},{"type":"DELETE","lineNumber":121,"oldContent":"                    onResult(false, \"Mission upload failed or timed out\")"},{"type":"DELETE","lineNumber":124,"oldContent":"                }"},{"type":"INSERT","lineNumber":153,"content":"    // Helper: Robustly switch to AUTO mode with retries and checks"},{"type":"INSERT","lineNumber":154,"content":"    private suspend fun robustSwitchToAutoMode(maxRetries: Int = 3): Boolean {"},{"type":"INSERT","lineNumber":155,"content":"        for (attempt in 1..maxRetries) {"},{"type":"INSERT","lineNumber":156,"content":"            Log.i(\"SharedVM\", \"Attempt $attempt to switch to AUTO mode...\")"},{"type":"INSERT","lineNumber":157,"content":"            val modeChanged = repo?.changeMode(MavMode.AUTO) ?: false"},{"type":"INSERT","lineNumber":158,"content":"            Log.i(\"SharedVM\", \"Result of changeMode to AUTO: $modeChanged\")"},{"type":"INSERT","lineNumber":159,"content":"            if (modeChanged) return true"},{"type":"INSERT","lineNumber":160,"content":"            delay(1000)"},{"type":"INSERT","lineNumber":161,"content":"        }"},{"type":"INSERT","lineNumber":162,"content":"        return false"},{"type":"INSERT","lineNumber":163,"content":"    }"},{"type":"INSERT","lineNumber":164,"content":""},{"type":"DELETE","lineNumber":136,"oldContent":"                    return@launch"},{"type":"INSERT","lineNumber":173,"content":"                    return@launch"},{"type":"DELETE","lineNumber":144,"oldContent":"                // Step 1: Check for acknowledgment of the mission"},{"type":"DELETE","lineNumber":145,"oldContent":"                if (!missionUploaded || lastUploadedCount == 0) {"},{"type":"DELETE","lineNumber":148,"oldContent":"                    onResult(false, \"No mission uploaded. Please upload a mission first.\")"},{"type":"INSERT","lineNumber":182,"content":"                // Step 1: Check for acknowledgment of the mission"},{"type":"INSERT","lineNumber":183,"content":"                if (!missionUploaded || lastUploadedCount == 0) {"},{"type":"DELETE","lineNumber":150,"oldContent":"                }"},{"type":"INSERT","lineNumber":185,"content":"                    onResult(false, \"No mission uploaded. Please upload a mission first.\")"},{"type":"INSERT","lineNumber":187,"content":"                }"},{"type":"INSERT","lineNumber":188,"content":"                Log.i(\"SharedVM\", \"âœ“ Mission upload acknowledged (${lastUploadedCount} items)\")"},{"type":"DELETE","lineNumber":154,"oldContent":"                Log.i(\"SharedVM\", \"âœ“ Mission upload acknowledged (${lastUploadedCount} items)\")"},{"type":"INSERT","lineNumber":205,"content":"                val currentMode = _telemetryState.value.mode"},{"type":"DELETE","lineNumber":171,"oldContent":"                val currentMode = _telemetryState.value.mode"},{"type":"DELETE","lineNumber":173,"oldContent":"                    // Wait for mode change to Stabilize"},{"type":"INSERT","lineNumber":210,"content":"                    Log.i(\"SharedVM\", \"Current mode '$currentMode' not suitable for arming, switching to Stabilize\")"},{"type":"INSERT","lineNumber":211,"content":"                    repo?.changeMode(MavMode.STABILIZE)"},{"type":"INSERT","lineNumber":212,"content":""},{"type":"INSERT","lineNumber":213,"content":"                    // Wait for mode change to Stabilize"},{"type":"DELETE","lineNumber":177,"oldContent":"                    Log.i(\"SharedVM\", \"Current mode '$currentMode' not suitable for arming, switching to Stabilize\")"},{"type":"DELETE","lineNumber":179,"oldContent":"                    repo?.changeMode(MavMode.STABILIZE)"},{"type":"DELETE","lineNumber":181,"oldContent":""},{"type":"DELETE","lineNumber":183,"oldContent":"                            break"},{"type":"INSERT","lineNumber":220,"content":"                            break"},{"type":"INSERT","lineNumber":242,"content":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - armStart < armTimeout) {"},{"type":"DELETE","lineNumber":208,"oldContent":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - armStart < armTimeout) {"},{"type":"DELETE","lineNumber":221,"oldContent":"                // Step 4: Change mode to Auto"},{"type":"DELETE","lineNumber":223,"oldContent":"                if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"DELETE","lineNumber":225,"oldContent":"                    Log.i(\"SharedVM\", \"Switching vehicle mode to AUTO\")"},{"type":"DELETE","lineNumber":226,"oldContent":""},{"type":"DELETE","lineNumber":227,"oldContent":"                    // Wait for mode change to AUTO with increased timeout"},{"type":"DELETE","lineNumber":228,"oldContent":"                    val modeChanged = repo?.changeMode(MavMode.AUTO) ?: false"},{"type":"DELETE","lineNumber":229,"oldContent":"                    val autoModeTimeout = 8000L"},{"type":"DELETE","lineNumber":230,"oldContent":"                    Log.i(\"SharedVM\", \"Result of changeMode to AUTO: $modeChanged\")"},{"type":"DELETE","lineNumber":231,"oldContent":"                    val autoModeStart = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":232,"oldContent":"                    while (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true &&"},{"type":"DELETE","lineNumber":233,"oldContent":"                        System.currentTimeMillis() - autoModeStart < autoModeTimeout) {"},{"type":"DELETE","lineNumber":234,"oldContent":"                        delay(500)"},{"type":"INSERT","lineNumber":259,"content":"                // Step 4: Change mode to Auto (robust)"},{"type":"INSERT","lineNumber":260,"content":"                if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"INSERT","lineNumber":261,"content":"                    val autoModeSuccess = robustSwitchToAutoMode()"},{"type":"INSERT","lineNumber":262,"content":"                    if (!autoModeSuccess) {"},{"type":"INSERT","lineNumber":263,"content":"                        Log.w(\"SharedVM\", \"Vehicle did not switch to AUTO mode after retries\")"},{"type":"INSERT","lineNumber":264,"content":"                        onResult(false, \"Failed to switch to AUTO mode. Current mode: ${_telemetryState.value.mode}\")"},{"type":"INSERT","lineNumber":265,"content":"                        return@launch"},{"type":"DELETE","lineNumber":236,"oldContent":""},{"type":"DELETE","lineNumber":237,"oldContent":"                    if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"DELETE","lineNumber":238,"oldContent":"                    }"},{"type":"DELETE","lineNumber":239,"oldContent":"                        Log.w(\"SharedVM\", \"Vehicle did not switch to AUTO mode within timeout\")"},{"type":"INSERT","lineNumber":267,"content":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle mode is now AUTO\")"},{"type":"DELETE","lineNumber":241,"oldContent":"                        onResult(false, \"Failed to switch to AUTO mode. Current mode: ${_telemetryState.value.mode}\")"},{"type":"DELETE","lineNumber":243,"oldContent":"                        return@launch"},{"type":"DELETE","lineNumber":246,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle mode is now AUTO\")"},{"type":"DELETE","lineNumber":256,"oldContent":"                Log.e(\"SharedVM\", \"Exception during mission readback\", e)"},{"type":"DELETE","lineNumber":257,"oldContent":"                repo?.requestMissionAndLog()"},{"type":"DELETE","lineNumber":258,"oldContent":"            try {"},{"type":"DELETE","lineNumber":259,"oldContent":"            }"},{"type":"DELETE","lineNumber":260,"oldContent":"                Log.e(\"SharedVM\", \"Exception during mission readback\", e)"},{"type":"INSERT","lineNumber":281,"content":"                    onResult(true, null)"},{"type":"INSERT","lineNumber":282,"content":"                } else {"},{"type":"INSERT","lineNumber":283,"content":"                    Log.e(\"SharedVM\", \"Mission start failed or not acknowledged\")"},{"type":"INSERT","lineNumber":284,"content":"                    onResult(false, \"Mission start failed. Check vehicle status and try again.\")"},{"type":"INSERT","lineNumber":285,"content":"                }"},{"type":"DELETE","lineNumber":262,"oldContent":"                repo?.requestMissionAndLog()"},{"type":"DELETE","lineNumber":263,"oldContent":"            try {"},{"type":"INSERT","lineNumber":287,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":288,"content":"                Log.e(\"SharedVM\", \"Failed to start mission\", e)"},{"type":"INSERT","lineNumber":289,"content":"                onResult(false, e.message)"},{"type":"DELETE","lineNumber":268,"oldContent":"            }"},{"type":"DELETE","lineNumber":281,"oldContent":"}"},{"type":"INSERT","lineNumber":308,"content":"}"}]},{"timestamp":1758260134471,"changes":[{"type":"MODIFY","lineNumber":17,"content":"class SharedViewModel : ViewModel() {","oldContent":"    var port by mutableStateOf(\"5762\")"},{"type":"INSERT","lineNumber":27,"content":"    }"},{"type":"DELETE","lineNumber":28,"oldContent":""},{"type":"INSERT","lineNumber":33,"content":"    private var repo: MavlinkTelemetryRepository? = null"},{"type":"INSERT","lineNumber":34,"content":""},{"type":"DELETE","lineNumber":35,"oldContent":"    private var repo: MavlinkTelemetryRepository? = null"},{"type":"DELETE","lineNumber":38,"oldContent":""},{"type":"MODIFY","lineNumber":52,"content":"            if (portInt != null) {","oldContent":"    }"},{"type":"DELETE","lineNumber":54,"oldContent":""},{"type":"DELETE","lineNumber":55,"oldContent":"            }"},{"type":"INSERT","lineNumber":54,"content":"                repo = newRepo"},{"type":"INSERT","lineNumber":55,"content":"                newRepo.start()"},{"type":"DELETE","lineNumber":68,"oldContent":"                        onResult(false, \"Vehicle failed to arm. Check pre-arm conditions.\")"},{"type":"DELETE","lineNumber":69,"oldContent":"    // Helper: Wait for FCU to be ready for new mission (not in AUTO, not running mission)"},{"type":"DELETE","lineNumber":70,"oldContent":"    fun uploadMission(missionItems: List<MissionItemInt>, onResult: (Boolean, String?) -> Unit = { _, _ -> }) {"},{"type":"INSERT","lineNumber":68,"content":""},{"type":"INSERT","lineNumber":69,"content":"    // Helper: Wait for FCU to be ready for new mission (not in AUTO, not armed)"},{"type":"DELETE","lineNumber":72,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":74,"oldContent":"            try {"},{"type":"DELETE","lineNumber":77,"oldContent":"                Log.i(\"SharedVM\", \"Request to upload mission with ${missionItems.size} items\")"},{"type":"INSERT","lineNumber":75,"content":"            // FCU is ready if not in AUTO and not armed"},{"type":"INSERT","lineNumber":76,"content":"            if ((mode?.contains(\"Auto\", ignoreCase = true) != true) && !armed) {"},{"type":"INSERT","lineNumber":77,"content":"                return true"},{"type":"INSERT","lineNumber":78,"content":"            }"},{"type":"INSERT","lineNumber":79,"content":"            delay(500)"},{"type":"INSERT","lineNumber":80,"content":"        }"},{"type":"INSERT","lineNumber":81,"content":"        return false"},{"type":"INSERT","lineNumber":82,"content":"    }"},{"type":"INSERT","lineNumber":83,"content":""},{"type":"INSERT","lineNumber":84,"content":"    fun uploadMission(missionItems: List<MissionItemInt>, onResult: (Boolean, String?) -> Unit = { _, _ -> }) {"},{"type":"INSERT","lineNumber":85,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":86,"content":"            try {"},{"type":"INSERT","lineNumber":87,"content":"                Log.i(\"SharedVM\", \"Request to upload mission with ${missionItems.size} items\")"},{"type":"INSERT","lineNumber":88,"content":""},{"type":"INSERT","lineNumber":89,"content":"                // Wait for FCU to be ready for new mission"},{"type":"INSERT","lineNumber":90,"content":"                val ready = waitForFcuReadyForNewMission()"},{"type":"INSERT","lineNumber":91,"content":"                if (!ready) {"},{"type":"INSERT","lineNumber":92,"content":"                    Log.w(\"SharedVM\", \"FCU not ready for new mission upload (still in AUTO or armed)\")"},{"type":"INSERT","lineNumber":93,"content":"                    onResult(false, \"FCU not ready for new mission. Please wait for mission completion and disarm.\")"},{"type":"INSERT","lineNumber":94,"content":"                    return@launch"},{"type":"INSERT","lineNumber":95,"content":"                }"},{"type":"INSERT","lineNumber":96,"content":""},{"type":"DELETE","lineNumber":80,"oldContent":"            val completed = _telemetryState.value.missionCompleted"},{"type":"DELETE","lineNumber":82,"oldContent":"            // FCU is ready if not in AUTO, not armed, and missionCompleted is true"},{"type":"DELETE","lineNumber":84,"oldContent":"            if ((mode?.contains(\"Auto\", ignoreCase = true) != true) && !armed && completed) {"},{"type":"DELETE","lineNumber":86,"oldContent":"                return true"},{"type":"DELETE","lineNumber":87,"oldContent":"            }"},{"type":"DELETE","lineNumber":89,"oldContent":"            delay(500)"},{"type":"INSERT","lineNumber":102,"content":"                    Log.i(\"SharedVM\", \"Resetting missionCompleted flag for new upload\")"},{"type":"INSERT","lineNumber":103,"content":"                    _telemetryState.value = _telemetryState.value.copy(missionCompleted = false, missionElapsedSec = null)"},{"type":"INSERT","lineNumber":104,"content":"                }"},{"type":"INSERT","lineNumber":105,"content":""},{"type":"INSERT","lineNumber":106,"content":"                if (repo == null) {"},{"type":"DELETE","lineNumber":91,"oldContent":"        }"},{"type":"DELETE","lineNumber":93,"oldContent":"        return false"},{"type":"DELETE","lineNumber":94,"oldContent":"    }"},{"type":"DELETE","lineNumber":96,"oldContent":""},{"type":"DELETE","lineNumber":101,"oldContent":""},{"type":"DELETE","lineNumber":102,"oldContent":"                // Wait for FCU to be ready for new mission"},{"type":"DELETE","lineNumber":103,"oldContent":"                val ready = waitForFcuReadyForNewMission()"},{"type":"DELETE","lineNumber":105,"oldContent":"                if (!ready) {"},{"type":"DELETE","lineNumber":107,"oldContent":"                    Log.w(\"SharedVM\", \"FCU not ready for new mission upload (still in AUTO or armed)\")"},{"type":"DELETE","lineNumber":109,"oldContent":"                    onResult(false, \"FCU not ready for new mission. Please wait for mission completion and disarm.\")"},{"type":"DELETE","lineNumber":111,"oldContent":"                    return@launch"},{"type":"DELETE","lineNumber":113,"oldContent":"                }"},{"type":"DELETE","lineNumber":115,"oldContent":""},{"type":"DELETE","lineNumber":122,"oldContent":"                    Log.i(\"SharedVM\", \"Resetting missionCompleted flag for new upload\")"},{"type":"DELETE","lineNumber":124,"oldContent":"                    _telemetryState.value = _telemetryState.value.copy(missionCompleted = false, missionElapsedSec = null)"},{"type":"DELETE","lineNumber":126,"oldContent":"                }"},{"type":"DELETE","lineNumber":128,"oldContent":""},{"type":"DELETE","lineNumber":130,"oldContent":"                if (repo == null) {"},{"type":"INSERT","lineNumber":133,"content":""},{"type":"INSERT","lineNumber":139,"content":"                    Log.e(\"SharedVM\", \"Mission upload failed or timed out\")"},{"type":"INSERT","lineNumber":140,"content":"                    onResult(false, \"Mission upload failed or timed out\")"},{"type":"INSERT","lineNumber":141,"content":"                }"},{"type":"INSERT","lineNumber":142,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":152,"content":"    // Helper: Robustly switch to AUTO mode with retries and checks"},{"type":"INSERT","lineNumber":153,"content":"    private suspend fun robustSwitchToAutoMode(maxRetries: Int = 3): Boolean {"},{"type":"INSERT","lineNumber":154,"content":"        for (attempt in 1..maxRetries) {"},{"type":"INSERT","lineNumber":155,"content":"            Log.i(\"SharedVM\", \"Attempt $attempt to switch to AUTO mode...\")"},{"type":"INSERT","lineNumber":156,"content":"            val modeChanged = repo?.changeMode(MavMode.AUTO) ?: false"},{"type":"INSERT","lineNumber":157,"content":"            Log.i(\"SharedVM\", \"Result of changeMode to AUTO: $modeChanged\")"},{"type":"INSERT","lineNumber":158,"content":"            if (modeChanged) return true"},{"type":"INSERT","lineNumber":159,"content":"            delay(1000)"},{"type":"INSERT","lineNumber":160,"content":"        }"},{"type":"INSERT","lineNumber":161,"content":"        return false"},{"type":"INSERT","lineNumber":162,"content":"    }"},{"type":"INSERT","lineNumber":163,"content":""},{"type":"DELETE","lineNumber":153,"oldContent":""},{"type":"INSERT","lineNumber":172,"content":"                    return@launch"},{"type":"DELETE","lineNumber":159,"oldContent":"                    Log.e(\"SharedVM\", \"Mission upload failed or timed out\")"},{"type":"DELETE","lineNumber":161,"oldContent":"                    onResult(false, \"Mission upload failed or timed out\")"},{"type":"DELETE","lineNumber":163,"oldContent":"                }"},{"type":"DELETE","lineNumber":165,"oldContent":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":181,"content":"                // Step 1: Check for acknowledgment of the mission"},{"type":"INSERT","lineNumber":182,"content":"                if (!missionUploaded || lastUploadedCount == 0) {"},{"type":"INSERT","lineNumber":184,"content":"                    onResult(false, \"No mission uploaded. Please upload a mission first.\")"},{"type":"INSERT","lineNumber":186,"content":"                }"},{"type":"INSERT","lineNumber":187,"content":"                Log.i(\"SharedVM\", \"âœ“ Mission upload acknowledged (${lastUploadedCount} items)\")"},{"type":"DELETE","lineNumber":172,"oldContent":"    // Helper: Robustly switch to AUTO mode with retries and checks"},{"type":"DELETE","lineNumber":174,"oldContent":"    private suspend fun robustSwitchToAutoMode(maxRetries: Int = 3): Boolean {"},{"type":"DELETE","lineNumber":175,"oldContent":"        for (attempt in 1..maxRetries) {"},{"type":"DELETE","lineNumber":177,"oldContent":"            Log.i(\"SharedVM\", \"Attempt $attempt to switch to AUTO mode...\")"},{"type":"DELETE","lineNumber":179,"oldContent":"            val modeChanged = repo?.changeMode(MavMode.AUTO) ?: false"},{"type":"DELETE","lineNumber":181,"oldContent":"            Log.i(\"SharedVM\", \"Result of changeMode to AUTO: $modeChanged\")"},{"type":"DELETE","lineNumber":183,"oldContent":"            if (modeChanged) return true"},{"type":"DELETE","lineNumber":185,"oldContent":"            delay(1000)"},{"type":"DELETE","lineNumber":187,"oldContent":"        }"},{"type":"DELETE","lineNumber":189,"oldContent":"        return false"},{"type":"DELETE","lineNumber":191,"oldContent":"    }"},{"type":"DELETE","lineNumber":193,"oldContent":""},{"type":"INSERT","lineNumber":204,"content":"                val currentMode = _telemetryState.value.mode"},{"type":"DELETE","lineNumber":202,"oldContent":"                    return@launch"},{"type":"INSERT","lineNumber":209,"content":"                    Log.i(\"SharedVM\", \"Current mode '$currentMode' not suitable for arming, switching to Stabilize\")"},{"type":"INSERT","lineNumber":210,"content":"                    repo?.changeMode(MavMode.STABILIZE)"},{"type":"INSERT","lineNumber":211,"content":""},{"type":"INSERT","lineNumber":212,"content":"                    // Wait for mode change to Stabilize"},{"type":"DELETE","lineNumber":208,"oldContent":"                // Step 1: Check for acknowledgment of the mission"},{"type":"DELETE","lineNumber":210,"oldContent":"                if (!missionUploaded || lastUploadedCount == 0) {"},{"type":"DELETE","lineNumber":212,"oldContent":"                    onResult(false, \"No mission uploaded. Please upload a mission first.\")"},{"type":"INSERT","lineNumber":219,"content":"                            break"},{"type":"DELETE","lineNumber":215,"oldContent":"                }"},{"type":"DELETE","lineNumber":217,"oldContent":"                Log.i(\"SharedVM\", \"âœ“ Mission upload acknowledged (${lastUploadedCount} items)\")"},{"type":"DELETE","lineNumber":235,"oldContent":"                val currentMode = _telemetryState.value.mode"},{"type":"INSERT","lineNumber":241,"content":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - armStart < armTimeout) {"},{"type":"DELETE","lineNumber":240,"oldContent":"                    Log.i(\"SharedVM\", \"Current mode '$currentMode' not suitable for arming, switching to Stabilize\")"},{"type":"DELETE","lineNumber":242,"oldContent":"                    repo?.changeMode(MavMode.STABILIZE)"},{"type":"DELETE","lineNumber":244,"oldContent":""},{"type":"DELETE","lineNumber":246,"oldContent":"                    // Wait for mode change to Stabilize"},{"type":"DELETE","lineNumber":252,"oldContent":"                    repo?.changeMode(MavMode.AUTO)"},{"type":"INSERT","lineNumber":253,"content":"                }"},{"type":"DELETE","lineNumber":254,"oldContent":"                            break"},{"type":"INSERT","lineNumber":258,"content":"                // Step 4: Change mode to Auto (robust)"},{"type":"INSERT","lineNumber":259,"content":"                if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"INSERT","lineNumber":260,"content":"                    val autoModeSuccess = robustSwitchToAutoMode()"},{"type":"INSERT","lineNumber":261,"content":"                    if (!autoModeSuccess) {"},{"type":"INSERT","lineNumber":262,"content":"                        Log.w(\"SharedVM\", \"Vehicle did not switch to AUTO mode after retries\")"},{"type":"INSERT","lineNumber":263,"content":"                        onResult(false, \"Failed to switch to AUTO mode. Current mode: ${_telemetryState.value.mode}\")"},{"type":"INSERT","lineNumber":264,"content":"                        return@launch"},{"type":"INSERT","lineNumber":266,"content":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle mode is now AUTO\")"},{"type":"DELETE","lineNumber":260,"oldContent":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - armStart < armTimeout) {"},{"type":"DELETE","lineNumber":266,"oldContent":"                Log.e(\"SharedVM\", \"Exception during mission readback\", e)"},{"type":"DELETE","lineNumber":267,"oldContent":"                repo?.requestMissionAndLog()"},{"type":"INSERT","lineNumber":273,"content":""},{"type":"INSERT","lineNumber":274,"content":"                // Step 5: Start the mission"},{"type":"DELETE","lineNumber":269,"oldContent":"                Log.e(\"SharedVM\", \"Exception during mission readback\", e)"},{"type":"INSERT","lineNumber":276,"content":"                val result = repo?.startMission() ?: false"},{"type":"DELETE","lineNumber":271,"oldContent":"                repo?.requestMissionAndLog()"},{"type":"DELETE","lineNumber":272,"oldContent":"            try {"},{"type":"DELETE","lineNumber":273,"oldContent":"                // Step 4: Change mode to Auto (robust)"},{"type":"DELETE","lineNumber":274,"oldContent":"                if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"DELETE","lineNumber":275,"oldContent":"                    val autoModeSuccess = robustSwitchToAutoMode()"},{"type":"INSERT","lineNumber":278,"content":"                if (result) {"},{"type":"INSERT","lineNumber":279,"content":"                    Log.i(\"SharedVM\", \"âœ“ Mission start acknowledged by FCU\")"},{"type":"INSERT","lineNumber":280,"content":"                    onResult(true, null)"},{"type":"INSERT","lineNumber":281,"content":"                } else {"},{"type":"INSERT","lineNumber":282,"content":"                    Log.e(\"SharedVM\", \"Mission start failed or not acknowledged\")"},{"type":"INSERT","lineNumber":283,"content":"                    onResult(false, \"Mission start failed. Check vehicle status and try again.\")"},{"type":"INSERT","lineNumber":284,"content":"                }"},{"type":"DELETE","lineNumber":277,"oldContent":"                    if (!autoModeSuccess) {"},{"type":"DELETE","lineNumber":278,"oldContent":"                        Log.w(\"SharedVM\", \"Vehicle did not switch to AUTO mode after retries\")"},{"type":"DELETE","lineNumber":279,"oldContent":"                        onResult(false, \"Failed to switch to AUTO mode. Current mode: ${_telemetryState.value.mode}\")"},{"type":"DELETE","lineNumber":280,"oldContent":"    // Call this to stop the timer when mission ends"},{"type":"DELETE","lineNumber":281,"oldContent":"                        return@launch"},{"type":"INSERT","lineNumber":286,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":287,"content":"                Log.e(\"SharedVM\", \"Failed to start mission\", e)"},{"type":"INSERT","lineNumber":288,"content":"                onResult(false, e.message)"},{"type":"INSERT","lineNumber":289,"content":"            }"},{"type":"DELETE","lineNumber":284,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle mode is now AUTO\")"},{"type":"DELETE","lineNumber":298,"oldContent":"                    onResult(true, null)"},{"type":"DELETE","lineNumber":299,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":301,"oldContent":"                    Log.e(\"SharedVM\", \"Mission start failed or not acknowledged\")"},{"type":"DELETE","lineNumber":303,"oldContent":"                    onResult(false, \"Mission start failed. Check vehicle status and try again.\")"},{"type":"DELETE","lineNumber":305,"oldContent":"                }"},{"type":"DELETE","lineNumber":306,"oldContent":"                onResult(false, e.message)"},{"type":"DELETE","lineNumber":307,"oldContent":"                Log.e(\"SharedVM\", \"Failed to start mission\", e)"},{"type":"DELETE","lineNumber":308,"oldContent":"            } catch (e: Exception) {"}]},{"timestamp":1758261332434,"changes":[{"type":"MODIFY","lineNumber":35,"content":"    private val _telemetryState = MutableStateFlow(TelemetryState())","oldContent":"    private val _telemetryState = MutableStateFlow(TelemetryState())"},{"type":"MODIFY","lineNumber":57,"content":"                    _telemetryState.value = it","oldContent":"                    onResult(false, \"Mission start failed. Check vehicle status and try again.\")"},{"type":"DELETE","lineNumber":69,"oldContent":"    // Helper: Wait for FCU to be ready for new mission (not in AUTO, not armed)"},{"type":"DELETE","lineNumber":70,"oldContent":"    private suspend fun waitForFcuReadyForNewMission(timeoutMs: Long = 5000L): Boolean {"},{"type":"DELETE","lineNumber":71,"oldContent":"        val start = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":72,"oldContent":"            // FCU is ready if not in AUTO and not armed"},{"type":"DELETE","lineNumber":73,"oldContent":"        while (System.currentTimeMillis() - start < timeoutMs) {"},{"type":"DELETE","lineNumber":74,"oldContent":"            if ((mode?.contains(\"Auto\", ignoreCase = true) != true) && !armed) {"},{"type":"DELETE","lineNumber":75,"oldContent":"            val mode = _telemetryState.value.mode"},{"type":"DELETE","lineNumber":76,"oldContent":"                return true"},{"type":"DELETE","lineNumber":77,"oldContent":"            }"},{"type":"DELETE","lineNumber":78,"oldContent":"            val armed = _telemetryState.value.armed"},{"type":"DELETE","lineNumber":79,"oldContent":"            delay(500)"},{"type":"DELETE","lineNumber":80,"oldContent":"                // Reset mission state before attempting new upload"},{"type":"DELETE","lineNumber":81,"oldContent":"        }"},{"type":"DELETE","lineNumber":82,"oldContent":"        return false"},{"type":"DELETE","lineNumber":83,"oldContent":"                missionUploaded = false"},{"type":"DELETE","lineNumber":84,"oldContent":"    }"},{"type":"DELETE","lineNumber":85,"oldContent":""},{"type":"DELETE","lineNumber":86,"oldContent":"                lastUploadedCount = 0"},{"type":"DELETE","lineNumber":89,"oldContent":"                _uploadedWaypoints.value = emptyList()"},{"type":"DELETE","lineNumber":93,"oldContent":"                if (_telemetryState.value.missionCompleted) {"},{"type":"DELETE","lineNumber":94,"oldContent":"                // Wait for FCU to be ready for new mission"},{"type":"DELETE","lineNumber":95,"oldContent":"                val ready = waitForFcuReadyForNewMission()"},{"type":"INSERT","lineNumber":74,"content":"                if (repo == null) {"},{"type":"DELETE","lineNumber":97,"oldContent":"                if (!ready) {"},{"type":"DELETE","lineNumber":98,"oldContent":"                    Log.w(\"SharedVM\", \"FCU not ready for new mission upload (still in AUTO or armed)\")"},{"type":"DELETE","lineNumber":100,"oldContent":"                    onResult(false, \"FCU not ready for new mission. Please wait for mission completion and disarm.\")"},{"type":"DELETE","lineNumber":101,"oldContent":"                    return@launch"},{"type":"DELETE","lineNumber":102,"oldContent":"                }"},{"type":"DELETE","lineNumber":104,"oldContent":""},{"type":"DELETE","lineNumber":109,"oldContent":"                    Log.i(\"SharedVM\", \"Resetting missionCompleted flag for new upload\")"},{"type":"DELETE","lineNumber":110,"oldContent":"                    _telemetryState.value = _telemetryState.value.copy(missionCompleted = false, missionElapsedSec = null)"},{"type":"INSERT","lineNumber":82,"content":"                if (_telemetryState.value.missionCompleted) {"},{"type":"INSERT","lineNumber":83,"content":"                    Log.w(\"SharedVM\", \"Mission already completed, cannot upload new mission until reset\")"},{"type":"INSERT","lineNumber":84,"content":"                    missionUploaded = false"},{"type":"INSERT","lineNumber":85,"content":"                    lastUploadedCount = 0"},{"type":"INSERT","lineNumber":86,"content":"                    onResult(false, \"Mission already completed. Please reset or reconnect before uploading a new mission.\")"},{"type":"INSERT","lineNumber":87,"content":"                    return@launch"},{"type":"DELETE","lineNumber":112,"oldContent":"                if (!_telemetryState.value.fcuDetected) {"},{"type":"DELETE","lineNumber":114,"oldContent":"                if (repo == null) {"},{"type":"INSERT","lineNumber":90,"content":"                if (!_telemetryState.value.fcuDetected) {"},{"type":"DELETE","lineNumber":132,"oldContent":""},{"type":"INSERT","lineNumber":109,"content":""},{"type":"DELETE","lineNumber":140,"oldContent":"                missionUploaded = false"},{"type":"DELETE","lineNumber":142,"oldContent":"                lastUploadedCount = 0"},{"type":"DELETE","lineNumber":144,"oldContent":"                _uploadedWaypoints.value = emptyList()"},{"type":"INSERT","lineNumber":119,"content":"                missionUploaded = false"},{"type":"INSERT","lineNumber":120,"content":"                lastUploadedCount = 0"},{"type":"INSERT","lineNumber":121,"content":"                _uploadedWaypoints.value = emptyList()"},{"type":"DELETE","lineNumber":156,"oldContent":"    // Helper: Robustly switch to AUTO mode with retries and checks"},{"type":"DELETE","lineNumber":158,"oldContent":"    private suspend fun robustSwitchToAutoMode(maxRetries: Int = 3): Boolean {"},{"type":"DELETE","lineNumber":159,"oldContent":"        for (attempt in 1..maxRetries) {"},{"type":"DELETE","lineNumber":161,"oldContent":"            Log.i(\"SharedVM\", \"Attempt $attempt to switch to AUTO mode...\")"},{"type":"DELETE","lineNumber":163,"oldContent":"            val modeChanged = repo?.changeMode(MavMode.AUTO) ?: false"},{"type":"DELETE","lineNumber":165,"oldContent":"            Log.i(\"SharedVM\", \"Result of changeMode to AUTO: $modeChanged\")"},{"type":"INSERT","lineNumber":136,"content":"                    return@launch"},{"type":"DELETE","lineNumber":167,"oldContent":"            if (modeChanged) return true"},{"type":"DELETE","lineNumber":169,"oldContent":"            delay(1000)"},{"type":"DELETE","lineNumber":170,"oldContent":"        }"},{"type":"DELETE","lineNumber":172,"oldContent":"        return false"},{"type":"DELETE","lineNumber":173,"oldContent":"    }"},{"type":"DELETE","lineNumber":175,"oldContent":""},{"type":"INSERT","lineNumber":145,"content":"                // Step 1: Check for acknowledgment of the mission"},{"type":"INSERT","lineNumber":146,"content":"                if (!missionUploaded || lastUploadedCount == 0) {"},{"type":"INSERT","lineNumber":148,"content":"                    onResult(false, \"No mission uploaded. Please upload a mission first.\")"},{"type":"INSERT","lineNumber":150,"content":"                }"},{"type":"INSERT","lineNumber":151,"content":"                Log.i(\"SharedVM\", \"âœ“ Mission upload acknowledged (${lastUploadedCount} items)\")"},{"type":"DELETE","lineNumber":183,"oldContent":"                    return@launch"},{"type":"DELETE","lineNumber":188,"oldContent":"                // Step 1: Check for acknowledgment of the mission"},{"type":"DELETE","lineNumber":189,"oldContent":"                if (!missionUploaded || lastUploadedCount == 0) {"},{"type":"DELETE","lineNumber":191,"oldContent":"                    onResult(false, \"No mission uploaded. Please upload a mission first.\")"},{"type":"DELETE","lineNumber":193,"oldContent":"                }"},{"type":"DELETE","lineNumber":195,"oldContent":"                Log.i(\"SharedVM\", \"âœ“ Mission upload acknowledged (${lastUploadedCount} items)\")"},{"type":"INSERT","lineNumber":168,"content":"                val currentMode = _telemetryState.value.mode"},{"type":"DELETE","lineNumber":208,"oldContent":"                val currentMode = _telemetryState.value.mode"},{"type":"INSERT","lineNumber":173,"content":"                    Log.i(\"SharedVM\", \"Current mode '$currentMode' not suitable for arming, switching to Stabilize\")"},{"type":"INSERT","lineNumber":174,"content":"                    repo?.changeMode(MavMode.STABILIZE)"},{"type":"INSERT","lineNumber":175,"content":""},{"type":"INSERT","lineNumber":176,"content":"                    // Wait for mode change to Stabilize"},{"type":"DELETE","lineNumber":213,"oldContent":"                    Log.i(\"SharedVM\", \"Current mode '$currentMode' not suitable for arming, switching to Stabilize\")"},{"type":"DELETE","lineNumber":215,"oldContent":"                    repo?.changeMode(MavMode.STABILIZE)"},{"type":"DELETE","lineNumber":216,"oldContent":""},{"type":"DELETE","lineNumber":218,"oldContent":"                    // Wait for mode change to Stabilize"},{"type":"INSERT","lineNumber":183,"content":"                            break"},{"type":"DELETE","lineNumber":223,"oldContent":"                            break"},{"type":"INSERT","lineNumber":205,"content":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - armStart < armTimeout) {"},{"type":"DELETE","lineNumber":244,"oldContent":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - armStart < armTimeout) {"},{"type":"DELETE","lineNumber":255,"oldContent":"                // Log current mode and armed state before switching to AUTO"},{"type":"DELETE","lineNumber":256,"oldContent":"                Log.i(\"SharedVM\", \"Preparing to switch to AUTO. Current mode: ${_telemetryState.value.mode}, armed: ${_telemetryState.value.armed}\")"},{"type":"INSERT","lineNumber":219,"content":"                // Step 4: Change mode to Auto"},{"type":"INSERT","lineNumber":220,"content":"                if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"INSERT","lineNumber":221,"content":"                    Log.i(\"SharedVM\", \"Switching vehicle mode to AUTO\")"},{"type":"INSERT","lineNumber":222,"content":"                    repo?.changeMode(MavMode.AUTO)"},{"type":"DELETE","lineNumber":258,"oldContent":"                // Step 4: Change mode to Auto (robust)"},{"type":"INSERT","lineNumber":224,"content":"                    // Wait for mode change to AUTO with increased timeout"},{"type":"INSERT","lineNumber":225,"content":"                    val autoModeTimeout = 8000L"},{"type":"INSERT","lineNumber":226,"content":"                    val autoModeStart = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":227,"content":"                    while (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true &&"},{"type":"INSERT","lineNumber":228,"content":"                        System.currentTimeMillis() - autoModeStart < autoModeTimeout) {"},{"type":"INSERT","lineNumber":229,"content":"                        delay(500)"},{"type":"DELETE","lineNumber":260,"oldContent":"                if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"DELETE","lineNumber":261,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":262,"oldContent":"                    val autoModeSuccess = robustSwitchToAutoMode()"},{"type":"DELETE","lineNumber":263,"oldContent":"                    if (!autoModeSuccess) {"},{"type":"DELETE","lineNumber":264,"oldContent":"                repo?.requestMissionAndLog()"},{"type":"DELETE","lineNumber":265,"oldContent":"                        Log.w(\"SharedVM\", \"Vehicle did not switch to AUTO mode after retries\")"},{"type":"DELETE","lineNumber":266,"oldContent":"                }"},{"type":"DELETE","lineNumber":267,"oldContent":"                        onResult(false, \"Failed to switch to AUTO mode. Current mode: ${_telemetryState.value.mode}\")"},{"type":"INSERT","lineNumber":232,"content":"                    if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"INSERT","lineNumber":233,"content":"                        Log.w(\"SharedVM\", \"Vehicle did not switch to AUTO mode within timeout\")"},{"type":"INSERT","lineNumber":234,"content":"                        onResult(false, \"Failed to switch to AUTO mode. Current mode: ${_telemetryState.value.mode}\")"},{"type":"DELETE","lineNumber":270,"oldContent":"            if (repo == null) {"},{"type":"DELETE","lineNumber":271,"oldContent":"                }"},{"type":"INSERT","lineNumber":236,"content":"                    }"},{"type":"DELETE","lineNumber":273,"oldContent":"                repo?.requestMissionAndLog()"},{"type":"INSERT","lineNumber":238,"content":"                } else {"},{"type":"INSERT","lineNumber":239,"content":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle already in AUTO mode\")"},{"type":"INSERT","lineNumber":240,"content":"                }"},{"type":"INSERT","lineNumber":242,"content":"                // Give a small delay to ensure all mode changes are processed"},{"type":"INSERT","lineNumber":243,"content":"                delay(1000)"},{"type":"INSERT","lineNumber":246,"content":"                Log.i(\"SharedVM\", \"Sending start mission command\")"},{"type":"DELETE","lineNumber":284,"oldContent":"        }"},{"type":"DELETE","lineNumber":286,"oldContent":"    }"},{"type":"DELETE","lineNumber":290,"oldContent":"    // New helper to request mission from FCU and log its items for debugging"},{"type":"DELETE","lineNumber":292,"oldContent":"    fun readMissionFromFcu() {"},{"type":"DELETE","lineNumber":294,"oldContent":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":261,"content":"        }"},{"type":"INSERT","lineNumber":262,"content":"    }"},{"type":"INSERT","lineNumber":263,"content":""},{"type":"INSERT","lineNumber":264,"content":"    // New helper to request mission from FCU and log its items for debugging"},{"type":"INSERT","lineNumber":265,"content":"    fun readMissionFromFcu() {"},{"type":"INSERT","lineNumber":266,"content":"        viewModelScope.launch {"}]},{"timestamp":1758274051638,"changes":[{"type":"INSERT","lineNumber":34,"content":""},{"type":"DELETE","lineNumber":35,"oldContent":"    private val _telemetryState = MutableStateFlow(TelemetryState())"},{"type":"DELETE","lineNumber":65,"oldContent":"                // Give a small delay to ensure all mode changes are processed"},{"type":"DELETE","lineNumber":66,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle already in AUTO mode\")"},{"type":"DELETE","lineNumber":67,"oldContent":"                        delay(500)"},{"type":"INSERT","lineNumber":65,"content":"            repo?.arm()"},{"type":"INSERT","lineNumber":66,"content":"        }"},{"type":"INSERT","lineNumber":67,"content":"    }"},{"type":"DELETE","lineNumber":69,"oldContent":"                if (repo == null) {"},{"type":"DELETE","lineNumber":70,"oldContent":"                if (_telemetryState.value.missionCompleted) {"},{"type":"DELETE","lineNumber":71,"oldContent":"                    Log.w(\"SharedVM\", \"Mission already completed, cannot upload new mission until reset\")"},{"type":"DELETE","lineNumber":72,"oldContent":"                    missionUploaded = false"},{"type":"DELETE","lineNumber":73,"oldContent":"                    lastUploadedCount = 0"},{"type":"DELETE","lineNumber":74,"oldContent":"                    onResult(false, \"Mission already completed. Please reset or reconnect before uploading a new mission.\")"},{"type":"DELETE","lineNumber":75,"oldContent":"                    return@launch"},{"type":"DELETE","lineNumber":78,"oldContent":"                if (!_telemetryState.value.fcuDetected) {"},{"type":"INSERT","lineNumber":74,"content":"                if (repo == null) {"},{"type":"DELETE","lineNumber":89,"oldContent":""},{"type":"DELETE","lineNumber":90,"oldContent":"                }"},{"type":"DELETE","lineNumber":91,"oldContent":""},{"type":"INSERT","lineNumber":82,"content":"                if (!_telemetryState.value.fcuDetected) {"},{"type":"DELETE","lineNumber":96,"oldContent":"                missionUploaded = false"},{"type":"DELETE","lineNumber":98,"oldContent":"                lastUploadedCount = 0"},{"type":"DELETE","lineNumber":100,"oldContent":"                _uploadedWaypoints.value = emptyList()"},{"type":"INSERT","lineNumber":90,"content":"                // Always clear previous mission in FCU before uploading new one (handled in repo)"},{"type":"INSERT","lineNumber":102,"content":""},{"type":"DELETE","lineNumber":115,"oldContent":"                    return@launch"},{"type":"DELETE","lineNumber":122,"oldContent":"                // Step 1: Check for acknowledgment of the mission"},{"type":"DELETE","lineNumber":124,"oldContent":"                if (!missionUploaded || lastUploadedCount == 0) {"},{"type":"INSERT","lineNumber":112,"content":"                missionUploaded = false"},{"type":"INSERT","lineNumber":113,"content":"                lastUploadedCount = 0"},{"type":"INSERT","lineNumber":114,"content":"                _uploadedWaypoints.value = emptyList()"},{"type":"DELETE","lineNumber":127,"oldContent":"                    onResult(false, \"No mission uploaded. Please upload a mission first.\")"},{"type":"DELETE","lineNumber":130,"oldContent":"                }"},{"type":"DELETE","lineNumber":132,"oldContent":"                Log.i(\"SharedVM\", \"âœ“ Mission upload acknowledged (${lastUploadedCount} items)\")"},{"type":"INSERT","lineNumber":129,"content":"                    return@launch"},{"type":"DELETE","lineNumber":143,"oldContent":"                val currentMode = _telemetryState.value.mode"},{"type":"DELETE","lineNumber":146,"oldContent":"                    Log.i(\"SharedVM\", \"Current mode '$currentMode' not suitable for arming, switching to Stabilize\")"},{"type":"DELETE","lineNumber":147,"oldContent":"                    repo?.changeMode(MavMode.STABILIZE)"},{"type":"DELETE","lineNumber":149,"oldContent":""},{"type":"DELETE","lineNumber":150,"oldContent":"                    // Wait for mode change to Stabilize"},{"type":"INSERT","lineNumber":138,"content":"                // Step 1: Check for acknowledgment of the mission"},{"type":"INSERT","lineNumber":139,"content":"                if (!missionUploaded || lastUploadedCount == 0) {"},{"type":"INSERT","lineNumber":141,"content":"                    onResult(false, \"No mission uploaded. Please upload a mission first.\")"},{"type":"INSERT","lineNumber":143,"content":"                }"},{"type":"INSERT","lineNumber":144,"content":"                Log.i(\"SharedVM\", \"âœ“ Mission upload acknowledged (${lastUploadedCount} items)\")"},{"type":"DELETE","lineNumber":158,"oldContent":"                            break"},{"type":"INSERT","lineNumber":161,"content":"                val currentMode = _telemetryState.value.mode"},{"type":"DELETE","lineNumber":175,"oldContent":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - armStart < armTimeout) {"},{"type":"INSERT","lineNumber":166,"content":"                    Log.i(\"SharedVM\", \"Current mode '$currentMode' not suitable for arming, switching to Stabilize\")"},{"type":"INSERT","lineNumber":167,"content":"                    repo?.changeMode(MavMode.STABILIZE)"},{"type":"INSERT","lineNumber":168,"content":""},{"type":"INSERT","lineNumber":169,"content":"                    // Wait for mode change to Stabilize"},{"type":"DELETE","lineNumber":185,"oldContent":"                // Step 4: Change mode to Auto"},{"type":"INSERT","lineNumber":176,"content":"                            break"},{"type":"DELETE","lineNumber":187,"oldContent":"                if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"DELETE","lineNumber":189,"oldContent":"                    Log.i(\"SharedVM\", \"Switching vehicle mode to AUTO\")"},{"type":"DELETE","lineNumber":191,"oldContent":"                    repo?.changeMode(MavMode.AUTO)"},{"type":"DELETE","lineNumber":193,"oldContent":"                    // Wait for mode change to AUTO with increased timeout"},{"type":"DELETE","lineNumber":195,"oldContent":"                    val autoModeTimeout = 8000L"},{"type":"DELETE","lineNumber":197,"oldContent":"                    val autoModeStart = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":199,"oldContent":"                    while (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true &&"},{"type":"DELETE","lineNumber":201,"oldContent":"                        System.currentTimeMillis() - autoModeStart < autoModeTimeout) {"},{"type":"DELETE","lineNumber":203,"oldContent":"                        delay(500)"},{"type":"DELETE","lineNumber":207,"oldContent":"                    if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"DELETE","lineNumber":209,"oldContent":"                        Log.w(\"SharedVM\", \"Vehicle did not switch to AUTO mode within timeout\")"},{"type":"DELETE","lineNumber":211,"oldContent":"                        onResult(false, \"Failed to switch to AUTO mode. Current mode: ${_telemetryState.value.mode}\")"},{"type":"DELETE","lineNumber":214,"oldContent":"                    }"},{"type":"DELETE","lineNumber":217,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":219,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle already in AUTO mode\")"},{"type":"DELETE","lineNumber":221,"oldContent":"                }"},{"type":"INSERT","lineNumber":198,"content":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - armStart < armTimeout) {"},{"type":"DELETE","lineNumber":224,"oldContent":"                // Give a small delay to ensure all mode changes are processed"},{"type":"DELETE","lineNumber":226,"oldContent":"                delay(1000)"},{"type":"DELETE","lineNumber":229,"oldContent":"                Log.i(\"SharedVM\", \"Sending start mission command\")"},{"type":"INSERT","lineNumber":212,"content":"                // Step 4: Change mode to Auto"},{"type":"INSERT","lineNumber":213,"content":"                if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"INSERT","lineNumber":214,"content":"                    Log.i(\"SharedVM\", \"Switching vehicle mode to AUTO\")"},{"type":"INSERT","lineNumber":215,"content":"                    repo?.changeMode(MavMode.AUTO)"},{"type":"INSERT","lineNumber":217,"content":"                    // Wait for mode change to AUTO with increased timeout"},{"type":"INSERT","lineNumber":218,"content":"                    val autoModeTimeout = 8000L"},{"type":"INSERT","lineNumber":219,"content":"                    val autoModeStart = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":220,"content":"                    while (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true &&"},{"type":"INSERT","lineNumber":221,"content":"                        System.currentTimeMillis() - autoModeStart < autoModeTimeout) {"},{"type":"INSERT","lineNumber":222,"content":"                        delay(500)"},{"type":"DELETE","lineNumber":241,"oldContent":"        }"},{"type":"DELETE","lineNumber":242,"oldContent":"    }"},{"type":"DELETE","lineNumber":244,"oldContent":"    // New helper to request mission from FCU and log its items for debugging"},{"type":"DELETE","lineNumber":245,"oldContent":"    fun readMissionFromFcu() {"},{"type":"DELETE","lineNumber":246,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":247,"oldContent":""},{"type":"INSERT","lineNumber":225,"content":"                    if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"INSERT","lineNumber":226,"content":"                        Log.w(\"SharedVM\", \"Vehicle did not switch to AUTO mode within timeout\")"},{"type":"INSERT","lineNumber":227,"content":"                        onResult(false, \"Failed to switch to AUTO mode. Current mode: ${_telemetryState.value.mode}\")"},{"type":"INSERT","lineNumber":229,"content":"                    }"},{"type":"INSERT","lineNumber":231,"content":"                } else {"},{"type":"INSERT","lineNumber":232,"content":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle already in AUTO mode\")"},{"type":"INSERT","lineNumber":233,"content":"                }"},{"type":"INSERT","lineNumber":235,"content":"                // Give a small delay to ensure all mode changes are processed"},{"type":"INSERT","lineNumber":236,"content":"                delay(1000)"},{"type":"INSERT","lineNumber":239,"content":"                Log.i(\"SharedVM\", \"Sending start mission command\")"},{"type":"INSERT","lineNumber":254,"content":"        }"},{"type":"INSERT","lineNumber":255,"content":"    }"},{"type":"INSERT","lineNumber":256,"content":""},{"type":"INSERT","lineNumber":257,"content":"    // New helper to request mission from FCU and log its items for debugging"},{"type":"INSERT","lineNumber":258,"content":"    fun readMissionFromFcu() {"},{"type":"INSERT","lineNumber":259,"content":"        viewModelScope.launch {"}]},{"timestamp":1758276942866,"changes":[{"type":"MODIFY","lineNumber":64,"content":"        viewModelScope.launch {","oldContent":"                val result = repo?.startMission(0, last) ?: false"},{"type":"DELETE","lineNumber":69,"oldContent":"                if (repo == null) {"},{"type":"DELETE","lineNumber":75,"oldContent":"                if (!_telemetryState.value.fcuDetected) {"},{"type":"INSERT","lineNumber":74,"content":"                if (repo == null) {"},{"type":"DELETE","lineNumber":83,"oldContent":"                // Always clear previous mission in FCU before uploading new one (handled in repo)"},{"type":"INSERT","lineNumber":82,"content":"                if (!_telemetryState.value.fcuDetected) {"},{"type":"DELETE","lineNumber":91,"oldContent":""},{"type":"INSERT","lineNumber":90,"content":"                // Always clear previous mission in FCU before uploading new one (handled in repo)"},{"type":"DELETE","lineNumber":102,"oldContent":"                missionUploaded = false"},{"type":"DELETE","lineNumber":104,"oldContent":"                lastUploadedCount = 0"},{"type":"INSERT","lineNumber":102,"content":""},{"type":"DELETE","lineNumber":106,"oldContent":"                _uploadedWaypoints.value = emptyList()"},{"type":"INSERT","lineNumber":112,"content":"                missionUploaded = false"},{"type":"INSERT","lineNumber":113,"content":"                lastUploadedCount = 0"},{"type":"INSERT","lineNumber":114,"content":"                _uploadedWaypoints.value = emptyList()"},{"type":"DELETE","lineNumber":118,"oldContent":"                    return@launch"},{"type":"DELETE","lineNumber":126,"oldContent":"                // Step 1: Check for acknowledgment of the mission"},{"type":"DELETE","lineNumber":128,"oldContent":"                if (!missionUploaded || lastUploadedCount == 0) {"},{"type":"DELETE","lineNumber":131,"oldContent":"                    onResult(false, \"No mission uploaded. Please upload a mission first.\")"},{"type":"INSERT","lineNumber":129,"content":"                    return@launch"},{"type":"DELETE","lineNumber":134,"oldContent":"                }"},{"type":"DELETE","lineNumber":135,"oldContent":"                Log.i(\"SharedVM\", \"âœ“ Mission upload acknowledged (${lastUploadedCount} items)\")"},{"type":"INSERT","lineNumber":138,"content":"                // Step 1: Check for acknowledgment of the mission"},{"type":"INSERT","lineNumber":139,"content":"                if (!missionUploaded || lastUploadedCount == 0) {"},{"type":"INSERT","lineNumber":141,"content":"                    onResult(false, \"No mission uploaded. Please upload a mission first.\")"},{"type":"INSERT","lineNumber":143,"content":"                }"},{"type":"INSERT","lineNumber":144,"content":"                Log.i(\"SharedVM\", \"âœ“ Mission upload acknowledged (${lastUploadedCount} items)\")"},{"type":"DELETE","lineNumber":148,"oldContent":"                val currentMode = _telemetryState.value.mode"},{"type":"DELETE","lineNumber":154,"oldContent":"                    Log.i(\"SharedVM\", \"Current mode '$currentMode' not suitable for arming, switching to Stabilize\")"},{"type":"DELETE","lineNumber":156,"oldContent":"                    repo?.changeMode(MavMode.STABILIZE)"},{"type":"DELETE","lineNumber":158,"oldContent":""},{"type":"DELETE","lineNumber":160,"oldContent":"                    // Wait for mode change to Stabilize"},{"type":"INSERT","lineNumber":161,"content":"                val currentMode = _telemetryState.value.mode"},{"type":"DELETE","lineNumber":167,"oldContent":"                            break"},{"type":"INSERT","lineNumber":166,"content":"                    Log.i(\"SharedVM\", \"Current mode '$currentMode' not suitable for arming, switching to Stabilize\")"},{"type":"INSERT","lineNumber":167,"content":"                    repo?.changeMode(MavMode.STABILIZE)"},{"type":"INSERT","lineNumber":168,"content":""},{"type":"INSERT","lineNumber":169,"content":"                    // Wait for mode change to Stabilize"},{"type":"INSERT","lineNumber":176,"content":"                            break"},{"type":"DELETE","lineNumber":183,"oldContent":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - armStart < armTimeout) {"},{"type":"DELETE","lineNumber":192,"oldContent":"                // Step 4: Change mode to Auto"},{"type":"DELETE","lineNumber":194,"oldContent":"                if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"DELETE","lineNumber":196,"oldContent":"                    Log.i(\"SharedVM\", \"Switching vehicle mode to AUTO\")"},{"type":"DELETE","lineNumber":197,"oldContent":"                    repo?.changeMode(MavMode.AUTO)"},{"type":"DELETE","lineNumber":200,"oldContent":"                    // Wait for mode change to AUTO with increased timeout"},{"type":"DELETE","lineNumber":201,"oldContent":"                    val autoModeTimeout = 8000L"},{"type":"DELETE","lineNumber":203,"oldContent":"                    val autoModeStart = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":204,"oldContent":"                    while (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true &&"},{"type":"DELETE","lineNumber":206,"oldContent":"                        System.currentTimeMillis() - autoModeStart < autoModeTimeout) {"},{"type":"DELETE","lineNumber":207,"oldContent":"                        delay(500)"},{"type":"INSERT","lineNumber":198,"content":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - armStart < armTimeout) {"},{"type":"DELETE","lineNumber":210,"oldContent":"                    if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"DELETE","lineNumber":212,"oldContent":"                        Log.w(\"SharedVM\", \"Vehicle did not switch to AUTO mode within timeout\")"},{"type":"DELETE","lineNumber":213,"oldContent":"                        onResult(false, \"Failed to switch to AUTO mode. Current mode: ${_telemetryState.value.mode}\")"},{"type":"DELETE","lineNumber":216,"oldContent":"                    }"},{"type":"DELETE","lineNumber":218,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":220,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle already in AUTO mode\")"},{"type":"DELETE","lineNumber":222,"oldContent":"                }"},{"type":"DELETE","lineNumber":225,"oldContent":"                // Give a small delay to ensure all mode changes are processed"},{"type":"DELETE","lineNumber":227,"oldContent":"                delay(1000)"},{"type":"DELETE","lineNumber":231,"oldContent":"                Log.i(\"SharedVM\", \"Sending start mission command\")"},{"type":"INSERT","lineNumber":212,"content":"                // Step 4: Change mode to Auto"},{"type":"INSERT","lineNumber":213,"content":"                if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"INSERT","lineNumber":214,"content":"                    Log.i(\"SharedVM\", \"Switching vehicle mode to AUTO\")"},{"type":"INSERT","lineNumber":215,"content":"                    repo?.changeMode(MavMode.AUTO)"},{"type":"INSERT","lineNumber":217,"content":"                    // Wait for mode change to AUTO with increased timeout"},{"type":"INSERT","lineNumber":218,"content":"                    val autoModeTimeout = 8000L"},{"type":"INSERT","lineNumber":219,"content":"                    val autoModeStart = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":220,"content":"                    while (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true &&"},{"type":"INSERT","lineNumber":221,"content":"                        System.currentTimeMillis() - autoModeStart < autoModeTimeout) {"},{"type":"INSERT","lineNumber":222,"content":"                        delay(500)"},{"type":"INSERT","lineNumber":225,"content":"                    if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"INSERT","lineNumber":226,"content":"                        Log.w(\"SharedVM\", \"Vehicle did not switch to AUTO mode within timeout\")"},{"type":"INSERT","lineNumber":227,"content":"                        onResult(false, \"Failed to switch to AUTO mode. Current mode: ${_telemetryState.value.mode}\")"},{"type":"INSERT","lineNumber":229,"content":"                    }"},{"type":"INSERT","lineNumber":231,"content":"                } else {"},{"type":"INSERT","lineNumber":232,"content":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle already in AUTO mode\")"},{"type":"INSERT","lineNumber":233,"content":"                }"},{"type":"INSERT","lineNumber":235,"content":"                // Give a small delay to ensure all mode changes are processed"},{"type":"INSERT","lineNumber":236,"content":"                delay(1000)"},{"type":"INSERT","lineNumber":239,"content":"                Log.i(\"SharedVM\", \"Sending start mission command\")"},{"type":"DELETE","lineNumber":241,"oldContent":"        }"},{"type":"DELETE","lineNumber":243,"oldContent":"    }"},{"type":"DELETE","lineNumber":245,"oldContent":""},{"type":"DELETE","lineNumber":247,"oldContent":"    // New helper to request mission from FCU and log its items for debugging"},{"type":"DELETE","lineNumber":249,"oldContent":"    fun readMissionFromFcu() {"},{"type":"DELETE","lineNumber":251,"oldContent":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":254,"content":"        }"},{"type":"INSERT","lineNumber":255,"content":"    }"},{"type":"INSERT","lineNumber":256,"content":""},{"type":"INSERT","lineNumber":257,"content":"    // New helper to request mission from FCU and log its items for debugging"},{"type":"INSERT","lineNumber":258,"content":"    fun readMissionFromFcu() {"},{"type":"INSERT","lineNumber":259,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":271,"content":""},{"type":"INSERT","lineNumber":272,"content":"    fun cancelConnection() {"},{"type":"INSERT","lineNumber":273,"content":"        // Cancel any ongoing connection coroutine (handled by ConnectionPage)"},{"type":"INSERT","lineNumber":274,"content":"        // Attempt to close/flush the repo's socket/connection if possible"},{"type":"INSERT","lineNumber":275,"content":"        repo?.let {"},{"type":"INSERT","lineNumber":276,"content":"            try {"},{"type":"INSERT","lineNumber":277,"content":"                // If your repo has a close/disconnect method, call it here"},{"type":"INSERT","lineNumber":278,"content":"                if (it is MavlinkTelemetryRepository) {"},{"type":"INSERT","lineNumber":279,"content":"                    it.closeConnection()"},{"type":"INSERT","lineNumber":280,"content":"                }"},{"type":"INSERT","lineNumber":281,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":282,"content":"                Log.e(\"SharedVM\", \"Error closing connection\", e)"},{"type":"INSERT","lineNumber":283,"content":"            }"},{"type":"INSERT","lineNumber":284,"content":"        }"},{"type":"INSERT","lineNumber":285,"content":"        repo = null"},{"type":"INSERT","lineNumber":286,"content":"        _telemetryState.value = TelemetryState() // Reset state"},{"type":"INSERT","lineNumber":287,"content":"    }"}]},{"timestamp":1758277005484,"changes":[{"type":"MODIFY","lineNumber":74,"content":"                if (repo == null) {","oldContent":"                if (repo == null) {"},{"type":"MODIFY","lineNumber":82,"content":"                if (!_telemetryState.value.fcuDetected) {","oldContent":"                if (!_telemetryState.value.fcuDetected) {"},{"type":"MODIFY","lineNumber":90,"content":"                // Always clear previous mission in FCU before uploading new one (handled in repo)","oldContent":"                // Always clear previous mission in FCU before uploading new one (handled in repo)"},{"type":"MODIFY","lineNumber":102,"content":"","oldContent":""},{"type":"DELETE","lineNumber":109,"oldContent":"                missionUploaded = false"},{"type":"DELETE","lineNumber":111,"oldContent":"                lastUploadedCount = 0"},{"type":"DELETE","lineNumber":113,"oldContent":"                _uploadedWaypoints.value = emptyList()"},{"type":"INSERT","lineNumber":112,"content":"                missionUploaded = false"},{"type":"INSERT","lineNumber":113,"content":"                lastUploadedCount = 0"},{"type":"INSERT","lineNumber":114,"content":"                _uploadedWaypoints.value = emptyList()"},{"type":"DELETE","lineNumber":126,"oldContent":"                    return@launch"},{"type":"INSERT","lineNumber":129,"content":"                    return@launch"},{"type":"DELETE","lineNumber":133,"oldContent":"                // Step 1: Check for acknowledgment of the mission"},{"type":"DELETE","lineNumber":135,"oldContent":"                if (!missionUploaded || lastUploadedCount == 0) {"},{"type":"DELETE","lineNumber":138,"oldContent":"                    onResult(false, \"No mission uploaded. Please upload a mission first.\")"},{"type":"DELETE","lineNumber":141,"oldContent":"                }"},{"type":"INSERT","lineNumber":138,"content":"                // Step 1: Check for acknowledgment of the mission"},{"type":"INSERT","lineNumber":139,"content":"                if (!missionUploaded || lastUploadedCount == 0) {"},{"type":"DELETE","lineNumber":143,"oldContent":"                Log.i(\"SharedVM\", \"âœ“ Mission upload acknowledged (${lastUploadedCount} items)\")"},{"type":"INSERT","lineNumber":141,"content":"                    onResult(false, \"No mission uploaded. Please upload a mission first.\")"},{"type":"INSERT","lineNumber":143,"content":"                }"},{"type":"INSERT","lineNumber":144,"content":"                Log.i(\"SharedVM\", \"âœ“ Mission upload acknowledged (${lastUploadedCount} items)\")"},{"type":"DELETE","lineNumber":156,"oldContent":"                val currentMode = _telemetryState.value.mode"},{"type":"DELETE","lineNumber":162,"oldContent":"                    Log.i(\"SharedVM\", \"Current mode '$currentMode' not suitable for arming, switching to Stabilize\")"},{"type":"INSERT","lineNumber":161,"content":"                val currentMode = _telemetryState.value.mode"},{"type":"DELETE","lineNumber":164,"oldContent":"                    repo?.changeMode(MavMode.STABILIZE)"},{"type":"DELETE","lineNumber":165,"oldContent":""},{"type":"DELETE","lineNumber":167,"oldContent":"                    // Wait for mode change to Stabilize"},{"type":"INSERT","lineNumber":166,"content":"                    Log.i(\"SharedVM\", \"Current mode '$currentMode' not suitable for arming, switching to Stabilize\")"},{"type":"INSERT","lineNumber":167,"content":"                    repo?.changeMode(MavMode.STABILIZE)"},{"type":"INSERT","lineNumber":168,"content":""},{"type":"INSERT","lineNumber":169,"content":"                    // Wait for mode change to Stabilize"},{"type":"MODIFY","lineNumber":176,"content":"                            break","oldContent":"                            break"},{"type":"MODIFY","lineNumber":188,"content":"                }","oldContent":"            }"},{"type":"DELETE","lineNumber":193,"oldContent":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - armStart < armTimeout) {"},{"type":"INSERT","lineNumber":198,"content":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - armStart < armTimeout) {"},{"type":"INSERT","lineNumber":201,"content":""},{"type":"INSERT","lineNumber":202,"content":"                    if (!_telemetryState.value.armed) {"},{"type":"INSERT","lineNumber":203,"content":"                        Log.w(\"SharedVM\", \"Vehicle did not arm within timeout\")"},{"type":"INSERT","lineNumber":204,"content":"                        onResult(false, \"Vehicle failed to arm. Check pre-arm conditions.\")"},{"type":"INSERT","lineNumber":205,"content":"                        return@launch"},{"type":"INSERT","lineNumber":206,"content":"                    }"},{"type":"INSERT","lineNumber":207,"content":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle armed successfully\")"},{"type":"INSERT","lineNumber":208,"content":"                } else {"},{"type":"INSERT","lineNumber":209,"content":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle already armed\")"},{"type":"INSERT","lineNumber":210,"content":"                }"},{"type":"INSERT","lineNumber":211,"content":""},{"type":"DELETE","lineNumber":204,"oldContent":""},{"type":"DELETE","lineNumber":206,"oldContent":"                    if (!_telemetryState.value.armed) {"},{"type":"INSERT","lineNumber":216,"content":""},{"type":"DELETE","lineNumber":208,"oldContent":"                        Log.w(\"SharedVM\", \"Vehicle did not arm within timeout\")"},{"type":"DELETE","lineNumber":211,"oldContent":"                        onResult(false, \"Vehicle failed to arm. Check pre-arm conditions.\")"},{"type":"DELETE","lineNumber":214,"oldContent":"                        return@launch"},{"type":"DELETE","lineNumber":217,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle armed successfully\")"},{"type":"INSERT","lineNumber":224,"content":""},{"type":"DELETE","lineNumber":220,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":222,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle already armed\")"},{"type":"INSERT","lineNumber":228,"content":"                        return@launch"},{"type":"DELETE","lineNumber":224,"oldContent":"                }"},{"type":"DELETE","lineNumber":225,"oldContent":""},{"type":"INSERT","lineNumber":230,"content":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle mode is now AUTO\")"},{"type":"DELETE","lineNumber":228,"oldContent":""},{"type":"DELETE","lineNumber":230,"oldContent":"                    }"},{"type":"DELETE","lineNumber":233,"oldContent":"                        return@launch"},{"type":"DELETE","lineNumber":235,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle mode is now AUTO\")"},{"type":"DELETE","lineNumber":237,"oldContent":""},{"type":"MODIFY","lineNumber":239,"content":"                Log.i(\"SharedVM\", \"Sending start mission command\")","oldContent":"                Log.i(\"SharedVM\", \"Sending start mission command\")"},{"type":"DELETE","lineNumber":248,"oldContent":"        }"},{"type":"DELETE","lineNumber":250,"oldContent":"    }"},{"type":"DELETE","lineNumber":252,"oldContent":""},{"type":"DELETE","lineNumber":254,"oldContent":"    // New helper to request mission from FCU and log its items for debugging"},{"type":"DELETE","lineNumber":256,"oldContent":"    fun readMissionFromFcu() {"},{"type":"DELETE","lineNumber":258,"oldContent":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":254,"content":"        }"},{"type":"INSERT","lineNumber":255,"content":"    }"},{"type":"INSERT","lineNumber":256,"content":""},{"type":"INSERT","lineNumber":257,"content":"    // New helper to request mission from FCU and log its items for debugging"},{"type":"INSERT","lineNumber":258,"content":"    fun readMissionFromFcu() {"},{"type":"INSERT","lineNumber":259,"content":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":272,"oldContent":"}"},{"type":"DELETE","lineNumber":273,"oldContent":"    fun cancelConnection() {"},{"type":"DELETE","lineNumber":274,"oldContent":"    }"},{"type":"INSERT","lineNumber":272,"content":"    suspend fun cancelConnection() {"},{"type":"DELETE","lineNumber":276,"oldContent":"        _telemetryState.value = TelemetryState() // Reset state"},{"type":"DELETE","lineNumber":278,"oldContent":"        repo = null"},{"type":"DELETE","lineNumber":280,"oldContent":"        }"},{"type":"DELETE","lineNumber":282,"oldContent":"            }"},{"type":"DELETE","lineNumber":284,"oldContent":"                Log.e(\"SharedVM\", \"Error closing connection\", e)"},{"type":"DELETE","lineNumber":286,"oldContent":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":281,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":282,"content":"                Log.e(\"SharedVM\", \"Error closing connection\", e)"},{"type":"INSERT","lineNumber":283,"content":"            }"},{"type":"INSERT","lineNumber":284,"content":"        }"},{"type":"INSERT","lineNumber":285,"content":"        repo = null"},{"type":"INSERT","lineNumber":286,"content":"        _telemetryState.value = TelemetryState() // Reset state"},{"type":"INSERT","lineNumber":287,"content":"    }"},{"type":"INSERT","lineNumber":288,"content":"}"}]},{"timestamp":1758277061791,"changes":[{"type":"INSERT","lineNumber":73,"content":""},{"type":"DELETE","lineNumber":74,"oldContent":"                if (repo == null) {"},{"type":"INSERT","lineNumber":81,"content":""},{"type":"DELETE","lineNumber":82,"oldContent":"                if (!_telemetryState.value.fcuDetected) {"},{"type":"INSERT","lineNumber":89,"content":""},{"type":"DELETE","lineNumber":90,"oldContent":"                // Always clear previous mission in FCU before uploading new one (handled in repo)"},{"type":"INSERT","lineNumber":101,"content":"                    _uploadedWaypoints.value = waypoints"},{"type":"DELETE","lineNumber":102,"oldContent":""},{"type":"DELETE","lineNumber":110,"oldContent":"                missionUploaded = false"},{"type":"INSERT","lineNumber":111,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":112,"content":"                missionUploaded = false"},{"type":"DELETE","lineNumber":114,"oldContent":"            } catch (e: Exception) {"},{"type":"MODIFY","lineNumber":129,"content":"                    return@launch","oldContent":"                    return@launch"},{"type":"DELETE","lineNumber":136,"oldContent":"                // Step 1: Check for acknowledgment of the mission"},{"type":"DELETE","lineNumber":137,"oldContent":"                if (!missionUploaded || lastUploadedCount == 0) {"},{"type":"DELETE","lineNumber":140,"oldContent":"                    onResult(false, \"No mission uploaded. Please upload a mission first.\")"},{"type":"INSERT","lineNumber":138,"content":"                // Step 1: Check for acknowledgment of the mission"},{"type":"INSERT","lineNumber":139,"content":"                if (!missionUploaded || lastUploadedCount == 0) {"},{"type":"INSERT","lineNumber":141,"content":"                    onResult(false, \"No mission uploaded. Please upload a mission first.\")"},{"type":"INSERT","lineNumber":142,"content":"                    return@launch"},{"type":"DELETE","lineNumber":144,"oldContent":"                    return@launch"},{"type":"MODIFY","lineNumber":161,"content":"                val currentMode = _telemetryState.value.mode","oldContent":"                val currentMode = _telemetryState.value.mode"},{"type":"DELETE","lineNumber":163,"oldContent":"                    Log.i(\"SharedVM\", \"Current mode '$currentMode' not suitable for arming, switching to Stabilize\")"},{"type":"INSERT","lineNumber":164,"content":""},{"type":"INSERT","lineNumber":165,"content":"                if (!isInArmableMode) {"},{"type":"INSERT","lineNumber":166,"content":"                    Log.i(\"SharedVM\", \"Current mode '$currentMode' not suitable for arming, switching to Stabilize\")"},{"type":"DELETE","lineNumber":167,"oldContent":""},{"type":"DELETE","lineNumber":169,"oldContent":"                if (!isInArmableMode) {"},{"type":"INSERT","lineNumber":175,"content":"                            Log.i(\"SharedVM\", \"âœ“ Successfully switched to Stabilize mode\")"},{"type":"DELETE","lineNumber":176,"oldContent":"                            break"},{"type":"MODIFY","lineNumber":198,"content":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - armStart < armTimeout) {","oldContent":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - armStart < armTimeout) {"},{"type":"DELETE","lineNumber":202,"oldContent":"                // Step 4: Change mode to Auto"},{"type":"DELETE","lineNumber":204,"oldContent":"                if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"DELETE","lineNumber":206,"oldContent":"                    Log.i(\"SharedVM\", \"Switching vehicle mode to AUTO\")"},{"type":"DELETE","lineNumber":209,"oldContent":"                    repo?.changeMode(MavMode.AUTO)"},{"type":"DELETE","lineNumber":212,"oldContent":"                    // Wait for mode change to AUTO with increased timeout"},{"type":"DELETE","lineNumber":215,"oldContent":"                    val autoModeTimeout = 8000L"},{"type":"DELETE","lineNumber":217,"oldContent":"                    val autoModeStart = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":212,"content":"                // Step 4: Change mode to Auto"},{"type":"INSERT","lineNumber":213,"content":"                if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"INSERT","lineNumber":214,"content":"                    Log.i(\"SharedVM\", \"Switching vehicle mode to AUTO\")"},{"type":"INSERT","lineNumber":215,"content":"                    repo?.changeMode(MavMode.AUTO)"},{"type":"INSERT","lineNumber":216,"content":""},{"type":"INSERT","lineNumber":217,"content":"                    // Wait for mode change to AUTO with increased timeout"},{"type":"INSERT","lineNumber":218,"content":"                    val autoModeTimeout = 8000L"},{"type":"INSERT","lineNumber":219,"content":"                    val autoModeStart = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":222,"oldContent":""},{"type":"INSERT","lineNumber":224,"content":""},{"type":"INSERT","lineNumber":228,"content":"                        return@launch"},{"type":"DELETE","lineNumber":228,"oldContent":""},{"type":"INSERT","lineNumber":230,"content":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle mode is now AUTO\")"},{"type":"DELETE","lineNumber":231,"oldContent":"                        return@launch"},{"type":"DELETE","lineNumber":233,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle mode is now AUTO\")"},{"type":"INSERT","lineNumber":238,"content":"                // Step 5: Start the mission"},{"type":"DELETE","lineNumber":239,"oldContent":"                Log.i(\"SharedVM\", \"Sending start mission command\")"},{"type":"INSERT","lineNumber":251,"content":"                Log.e(\"SharedVM\", \"Failed to start mission\", e)"},{"type":"INSERT","lineNumber":252,"content":"                onResult(false, e.message)"},{"type":"INSERT","lineNumber":253,"content":"            }"},{"type":"DELETE","lineNumber":253,"oldContent":"                Log.e(\"SharedVM\", \"Failed to start mission\", e)"},{"type":"DELETE","lineNumber":256,"oldContent":"                onResult(false, e.message)"},{"type":"DELETE","lineNumber":259,"oldContent":"            }"},{"type":"DELETE","lineNumber":276,"oldContent":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":277,"content":"                it.closeConnection()"},{"type":"INSERT","lineNumber":278,"content":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":280,"oldContent":"                // If your repo has a close/disconnect method, call it here"},{"type":"DELETE","lineNumber":283,"oldContent":"                if (it is MavlinkTelemetryRepository) {"},{"type":"DELETE","lineNumber":286,"oldContent":"                    it.closeConnection()"},{"type":"DELETE","lineNumber":288,"oldContent":"                }"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uimain/MainPage.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uimain/MainPage.kt","baseContent":"package com.example.aerogcsclone.uimain\n\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.*\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.dp\nimport androidx.navigation.NavHostController\nimport com.example.aerogcsclone.Telemetry.SharedViewModel\nimport com.example.aerogcsclone.Telemetry.TelemetryState\nimport com.example.aerogcsclone.authentication.AuthViewModel\n\n@Composable\nfun MainPage(\n    telemetryViewModel: SharedViewModel,\n    authViewModel: AuthViewModel,\n    navController: NavHostController\n) {\n    val telemetryState by telemetryViewModel.telemetryState.collectAsState()\n\n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .background(MaterialTheme.colorScheme.background)\n    ) {\n        // âœ… Corrected TopNavBar call\n        TopNavBar(\n            telemetryState = telemetryState,\n            authViewModel = authViewModel,\n            navController = navController\n        )\n\n        Box(\n            modifier = Modifier\n                .weight(1f)\n                .fillMaxWidth()\n        ) {\n            // âœ… Pass telemetryState to GcsMap\n//\n            GcsMap(telemetryState = telemetryState)\n\n\n\n            StatusPanel(\n                modifier = Modifier\n                    .align(Alignment.BottomStart)\n                    .padding(12.dp),\n                telemetryState = telemetryState\n            )\n\n            FloatingButtons(\n                modifier = Modifier\n                    .align(Alignment.CenterEnd)\n                    .padding(12.dp)\n            )\n        }\n    }\n}\n\n@Composable\nfun StatusPanel(\n    modifier: Modifier = Modifier,\n    telemetryState: TelemetryState\n) {\n    Surface(\n        modifier = modifier\n            .width(500.dp)\n            .height(120.dp),\n        color = Color.Black.copy(alpha = 0.6f),\n        shape = RoundedCornerShape(8.dp)\n    ) {\n        Column(\n            modifier = Modifier.padding(10.dp),\n            verticalArrangement = Arrangement.spacedBy(8.dp)\n        ) {\n            Row(\n                horizontalArrangement = Arrangement.SpaceBetween,\n                modifier = Modifier.fillMaxWidth()\n            ) {\n                Text(\"Alt: ${telemetryState.altitudeRelative ?: \"N/A\"}\", color = Color.White)\n                Text(\"Speed: ${telemetryState.groundspeed ?: \"N/A\"}\", color = Color.White)\n                Text(\"Area: N/A\", color = Color.White)\n                Text(\"Flow: N/A\", color = Color.White)\n            }\n            Spacer(modifier = Modifier.height(8.dp))\n            Row(\n                horizontalArrangement = Arrangement.SpaceBetween,\n                modifier = Modifier.fillMaxWidth()\n            ) {\n                Text(\"Obs Alt: N/A\", color = Color.White)\n                Text(\"Time: N/A\", color = Color.White)\n                Text(\"Distance: N/A\", color = Color.White)\n                Text(\"Consumed: N/A\", color = Color.White)\n            }\n        }\n    }\n}\n\n@Composable\nfun FloatingButtons(modifier: Modifier = Modifier) {\n    Column(\n        modifier = modifier,\n        verticalArrangement = Arrangement.spacedBy(12.dp),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        FloatingActionButton(onClick = { }, containerColor = Color.Black.copy(alpha = 0.7f)) {\n            Icon(Icons.Default.PlayArrow, contentDescription = \"Start\", tint = Color.White)\n        }\n        FloatingActionButton(onClick = { }, containerColor = Color.Black.copy(alpha = 0.7f)) {\n            Icon(Icons.Default.Settings, contentDescription = \"Settings\", tint = Color.White)\n        }\n        FloatingActionButton(onClick = { }, containerColor = Color.Black.copy(alpha = 0.7f)) {\n            Icon(Icons.Default.Refresh, contentDescription = \"Refresh\", tint = Color.White)\n        }\n        FloatingActionButton(onClick = { }, containerColor = Color.Black.copy(alpha = 0.7f)) {\n            Icon(Icons.Default.Map, contentDescription = \"Map Options\", tint = Color.White)\n        }\n    }\n}","baseTimestamp":1757909204070,"deltas":[{"timestamp":1757915781162,"changes":[{"type":"INSERT","lineNumber":2,"content":"import android.widget.Toast"},{"type":"INSERT","lineNumber":13,"content":"import androidx.compose.ui.platform.LocalContext"},{"type":"DELETE","lineNumber":15,"oldContent":"import com.google.maps.android.compose.MapType"},{"type":"INSERT","lineNumber":19,"content":"import com.google.maps.android.compose.MapType"},{"type":"DELETE","lineNumber":26,"oldContent":"    // ðŸ”‘ Map type state"},{"type":"INSERT","lineNumber":28,"content":"    val context = LocalContext.current"},{"type":"INSERT","lineNumber":29,"content":"    val missionUploaded = telemetryViewModel.missionUploaded"},{"type":"INSERT","lineNumber":31,"content":"    // ðŸ”‘ Map type state"},{"type":"DELETE","lineNumber":29,"oldContent":"    Column("},{"type":"INSERT","lineNumber":34,"content":"    Column("},{"type":"INSERT","lineNumber":50,"content":"<<<<<<< Updated upstream"},{"type":"DELETE","lineNumber":47,"oldContent":""},{"type":"INSERT","lineNumber":56,"content":""},{"type":"INSERT","lineNumber":57,"content":"======="},{"type":"INSERT","lineNumber":58,"content":"            // âœ… Pass telemetryState to GcsMap"},{"type":"INSERT","lineNumber":59,"content":"//"},{"type":"INSERT","lineNumber":60,"content":"            GcsMap(telemetryState = telemetryState)"},{"type":"INSERT","lineNumber":61,"content":">>>>>>> Stashed changes"},{"type":"DELETE","lineNumber":62,"oldContent":"                    .padding(12.dp)"},{"type":"DELETE","lineNumber":65,"oldContent":"        }"},{"type":"DELETE","lineNumber":67,"oldContent":"    }"},{"type":"INSERT","lineNumber":76,"content":"            )"},{"type":"INSERT","lineNumber":77,"content":""},{"type":"INSERT","lineNumber":78,"content":"            // Start Mission button"},{"type":"INSERT","lineNumber":79,"content":"            Button("},{"type":"INSERT","lineNumber":80,"content":"                onClick = {"},{"type":"INSERT","lineNumber":81,"content":"                    telemetryViewModel.startMission { success, error ->"},{"type":"INSERT","lineNumber":82,"content":"                        if (success) {"},{"type":"INSERT","lineNumber":83,"content":"                            Toast.makeText(context, \"Mission started\", Toast.LENGTH_SHORT).show()"},{"type":"INSERT","lineNumber":84,"content":"                        } else {"},{"type":"INSERT","lineNumber":85,"content":"                            Toast.makeText(context, error ?: \"Mission start failed\", Toast.LENGTH_SHORT).show()"},{"type":"INSERT","lineNumber":86,"content":"                        }"},{"type":"INSERT","lineNumber":87,"content":"                    }"},{"type":"INSERT","lineNumber":88,"content":"                },"},{"type":"INSERT","lineNumber":89,"content":"                enabled = missionUploaded,"},{"type":"INSERT","lineNumber":90,"content":"                modifier = Modifier"},{"type":"INSERT","lineNumber":91,"content":"                    .align(Alignment.BottomEnd)"},{"type":"INSERT","lineNumber":92,"content":"                    .padding(24.dp)"},{"type":"INSERT","lineNumber":93,"content":"            ) {"},{"type":"INSERT","lineNumber":94,"content":"                Text(\"Start Mission\")"},{"type":"INSERT","lineNumber":95,"content":"            }"},{"type":"INSERT","lineNumber":96,"content":"        }"},{"type":"INSERT","lineNumber":97,"content":"    }"},{"type":"INSERT","lineNumber":140,"content":"fun FloatingButtons("},{"type":"INSERT","lineNumber":141,"content":"    modifier: Modifier = Modifier,"},{"type":"INSERT","lineNumber":142,"content":"    onToggleMapType: () -> Unit"},{"type":"INSERT","lineNumber":143,"content":") {"},{"type":"DELETE","lineNumber":114,"oldContent":"fun FloatingButtons("},{"type":"DELETE","lineNumber":116,"oldContent":"    modifier: Modifier = Modifier,"},{"type":"DELETE","lineNumber":118,"oldContent":"    onToggleMapType: () -> Unit"},{"type":"DELETE","lineNumber":120,"oldContent":") {"},{"type":"INSERT","lineNumber":158,"content":"        FloatingActionButton("},{"type":"INSERT","lineNumber":159,"content":"            onClick = { onToggleMapType() },"},{"type":"INSERT","lineNumber":160,"content":"            containerColor = Color.Black.copy(alpha = 0.7f)"},{"type":"INSERT","lineNumber":161,"content":"        ) {"},{"type":"DELETE","lineNumber":133,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":134,"oldContent":"            containerColor = Color.Black.copy(alpha = 0.7f)"},{"type":"DELETE","lineNumber":135,"oldContent":"        FloatingActionButton("},{"type":"DELETE","lineNumber":136,"oldContent":"            onClick = { onToggleMapType() },"}]},{"timestamp":1757915821259,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import android.widget.Toast"},{"type":"MODIFY","lineNumber":8,"content":"import androidx.compose.runtime.Composable","oldContent":"import androidx.compose.runtime.*"},{"type":"INSERT","lineNumber":9,"content":"import androidx.compose.runtime.collectAsState"},{"type":"INSERT","lineNumber":10,"content":"import androidx.compose.runtime.getValue"},{"type":"DELETE","lineNumber":14,"oldContent":"import androidx.compose.ui.platform.LocalContext"},{"type":"DELETE","lineNumber":20,"oldContent":"import com.google.maps.android.compose.MapType"},{"type":"DELETE","lineNumber":29,"oldContent":"    val context = LocalContext.current"},{"type":"DELETE","lineNumber":30,"oldContent":"    var mapType by remember { mutableStateOf(MapType.NORMAL) }"},{"type":"DELETE","lineNumber":31,"oldContent":"    val missionUploaded = telemetryViewModel.missionUploaded"},{"type":"DELETE","lineNumber":32,"oldContent":""},{"type":"DELETE","lineNumber":33,"oldContent":"    // ðŸ”‘ Map type state"},{"type":"INSERT","lineNumber":28,"content":"    Column("},{"type":"DELETE","lineNumber":37,"oldContent":"    Column("},{"type":"INSERT","lineNumber":33,"content":"        // âœ… Corrected TopNavBar call"},{"type":"DELETE","lineNumber":50,"oldContent":"            // âœ… Pass telemetryState and mapType to GcsMap"},{"type":"DELETE","lineNumber":51,"oldContent":"            GcsMap("},{"type":"DELETE","lineNumber":52,"oldContent":"                telemetryState = telemetryState,"},{"type":"DELETE","lineNumber":53,"oldContent":"<<<<<<< Updated upstream"},{"type":"DELETE","lineNumber":54,"oldContent":"                mapType = mapType"},{"type":"DELETE","lineNumber":55,"oldContent":"            )"},{"type":"INSERT","lineNumber":45,"content":"            // âœ… Pass telemetryState to GcsMap"},{"type":"INSERT","lineNumber":46,"content":"//"},{"type":"INSERT","lineNumber":47,"content":"            GcsMap(telemetryState = telemetryState)"},{"type":"INSERT","lineNumber":48,"content":""},{"type":"INSERT","lineNumber":49,"content":""},{"type":"INSERT","lineNumber":50,"content":""},{"type":"DELETE","lineNumber":60,"oldContent":""},{"type":"DELETE","lineNumber":62,"oldContent":"======="},{"type":"DELETE","lineNumber":64,"oldContent":"            // âœ… Pass telemetryState to GcsMap"},{"type":"DELETE","lineNumber":66,"oldContent":"//"},{"type":"DELETE","lineNumber":68,"oldContent":"            GcsMap(telemetryState = telemetryState)"},{"type":"DELETE","lineNumber":70,"oldContent":">>>>>>> Stashed changes"},{"type":"DELETE","lineNumber":72,"oldContent":"                    .padding(12.dp),"},{"type":"DELETE","lineNumber":73,"oldContent":"                onToggleMapType = {"},{"type":"DELETE","lineNumber":74,"oldContent":"                    mapType = if (mapType == MapType.NORMAL) MapType.SATELLITE else MapType.NORMAL"},{"type":"DELETE","lineNumber":75,"oldContent":"                }"},{"type":"INSERT","lineNumber":61,"content":"                    .padding(12.dp)"},{"type":"INSERT","lineNumber":62,"content":"            )"},{"type":"INSERT","lineNumber":63,"content":"        }"},{"type":"INSERT","lineNumber":64,"content":"    }"},{"type":"DELETE","lineNumber":83,"oldContent":"            )"},{"type":"DELETE","lineNumber":85,"oldContent":""},{"type":"DELETE","lineNumber":87,"oldContent":"            // Start Mission button"},{"type":"DELETE","lineNumber":89,"oldContent":"            Button("},{"type":"DELETE","lineNumber":91,"oldContent":"                onClick = {"},{"type":"DELETE","lineNumber":93,"oldContent":"                    telemetryViewModel.startMission { success, error ->"},{"type":"DELETE","lineNumber":95,"oldContent":"                        if (success) {"},{"type":"DELETE","lineNumber":97,"oldContent":"                            Toast.makeText(context, \"Mission started\", Toast.LENGTH_SHORT).show()"},{"type":"DELETE","lineNumber":99,"oldContent":"                        } else {"},{"type":"DELETE","lineNumber":101,"oldContent":"                            Toast.makeText(context, error ?: \"Mission start failed\", Toast.LENGTH_SHORT).show()"},{"type":"DELETE","lineNumber":103,"oldContent":"                        }"},{"type":"DELETE","lineNumber":105,"oldContent":"                    }"},{"type":"DELETE","lineNumber":107,"oldContent":"                },"},{"type":"DELETE","lineNumber":109,"oldContent":"                enabled = missionUploaded,"},{"type":"DELETE","lineNumber":111,"oldContent":"                modifier = Modifier"},{"type":"DELETE","lineNumber":113,"oldContent":"                    .align(Alignment.BottomEnd)"},{"type":"DELETE","lineNumber":115,"oldContent":"                    .padding(24.dp)"},{"type":"DELETE","lineNumber":117,"oldContent":"            ) {"},{"type":"DELETE","lineNumber":119,"oldContent":"                Text(\"Start Mission\")"},{"type":"DELETE","lineNumber":122,"oldContent":"            }"},{"type":"DELETE","lineNumber":123,"oldContent":"        }"},{"type":"DELETE","lineNumber":125,"oldContent":"    }"},{"type":"INSERT","lineNumber":107,"content":"fun FloatingButtons(modifier: Modifier = Modifier) {"},{"type":"INSERT","lineNumber":122,"content":"        FloatingActionButton(onClick = { }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"DELETE","lineNumber":158,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":159,"oldContent":"            containerColor = Color.Black.copy(alpha = 0.7f)"},{"type":"DELETE","lineNumber":160,"oldContent":"            onClick = { onToggleMapType() },"},{"type":"DELETE","lineNumber":161,"oldContent":"fun FloatingButtons("},{"type":"DELETE","lineNumber":162,"oldContent":"        FloatingActionButton("},{"type":"DELETE","lineNumber":163,"oldContent":"    modifier: Modifier = Modifier,"},{"type":"DELETE","lineNumber":164,"oldContent":") {"},{"type":"DELETE","lineNumber":165,"oldContent":"    onToggleMapType: () -> Unit"}]},{"timestamp":1757998273930,"changes":[{"type":"DELETE","lineNumber":7,"oldContent":"import androidx.compose.runtime.Composable"},{"type":"MODIFY","lineNumber":7,"content":"import androidx.compose.material3.*","oldContent":"import androidx.compose.runtime.collectAsState"},{"type":"DELETE","lineNumber":10,"oldContent":"import androidx.compose.runtime.getValue"},{"type":"INSERT","lineNumber":17,"content":"import com.google.maps.android.compose.MapType"},{"type":"INSERT","lineNumber":18,"content":"import androidx.compose.ui.platform.LocalContext"},{"type":"INSERT","lineNumber":19,"content":"import android.widget.Toast"},{"type":"DELETE","lineNumber":27,"oldContent":"    Column("},{"type":"INSERT","lineNumber":28,"content":"    val uploadedWaypoints by telemetryViewModel.uploadedWaypoints.collectAsState()"},{"type":"INSERT","lineNumber":29,"content":"    val context = LocalContext.current"},{"type":"DELETE","lineNumber":29,"oldContent":"        // âœ… Corrected TopNavBar call"},{"type":"INSERT","lineNumber":31,"content":"    // ðŸ”‘ Map type state"},{"type":"INSERT","lineNumber":32,"content":"    var mapType by remember { mutableStateOf(MapType.SATELLITE) }"},{"type":"INSERT","lineNumber":33,"content":""},{"type":"INSERT","lineNumber":34,"content":"    Column("},{"type":"DELETE","lineNumber":40,"oldContent":"            // âœ… Pass telemetryState to GcsMap"},{"type":"DELETE","lineNumber":42,"oldContent":"//"},{"type":"DELETE","lineNumber":44,"oldContent":"            GcsMap(telemetryState = telemetryState)"},{"type":"DELETE","lineNumber":46,"oldContent":""},{"type":"DELETE","lineNumber":48,"oldContent":""},{"type":"INSERT","lineNumber":50,"content":"            // âœ… Pass telemetryState, mapType, and uploaded waypoints to GcsMap"},{"type":"INSERT","lineNumber":51,"content":"            GcsMap("},{"type":"INSERT","lineNumber":52,"content":"                telemetryState = telemetryState,"},{"type":"INSERT","lineNumber":53,"content":"                points = uploadedWaypoints,"},{"type":"INSERT","lineNumber":54,"content":"                mapType = mapType"},{"type":"INSERT","lineNumber":55,"content":"            )"},{"type":"DELETE","lineNumber":55,"oldContent":"                    .padding(12.dp)"},{"type":"DELETE","lineNumber":58,"oldContent":"        }"},{"type":"DELETE","lineNumber":59,"oldContent":"            )"},{"type":"DELETE","lineNumber":60,"oldContent":"    }"},{"type":"INSERT","lineNumber":67,"content":"                    .padding(12.dp),"},{"type":"INSERT","lineNumber":68,"content":"                onToggleMapType = {"},{"type":"INSERT","lineNumber":69,"content":"                    mapType = if (mapType == MapType.SATELLITE) MapType.NORMAL else MapType.SATELLITE"},{"type":"INSERT","lineNumber":70,"content":"                },"},{"type":"INSERT","lineNumber":71,"content":"                onStartMission = {"},{"type":"INSERT","lineNumber":72,"content":"                    telemetryViewModel.startMission { success, error ->"},{"type":"INSERT","lineNumber":73,"content":"                        if (success) {"},{"type":"INSERT","lineNumber":74,"content":"                            Toast.makeText(context, \"Mission start sent\", Toast.LENGTH_SHORT).show()"},{"type":"INSERT","lineNumber":75,"content":"                        } else {"},{"type":"INSERT","lineNumber":76,"content":"                            Toast.makeText(context, error ?: \"Failed to start mission\", Toast.LENGTH_SHORT).show()"},{"type":"INSERT","lineNumber":77,"content":"                        }"},{"type":"INSERT","lineNumber":78,"content":"                    }"},{"type":"INSERT","lineNumber":79,"content":"                }"},{"type":"INSERT","lineNumber":80,"content":"            )"},{"type":"INSERT","lineNumber":81,"content":"        }"},{"type":"INSERT","lineNumber":82,"content":"    }"},{"type":"DELETE","lineNumber":84,"oldContent":"fun FloatingButtons(modifier: Modifier = Modifier) {"},{"type":"DELETE","lineNumber":93,"oldContent":"        FloatingActionButton(onClick = { }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"INSERT","lineNumber":125,"content":"fun FloatingButtons("},{"type":"INSERT","lineNumber":126,"content":"    modifier: Modifier = Modifier,"},{"type":"INSERT","lineNumber":127,"content":"    onToggleMapType: () -> Unit,"},{"type":"INSERT","lineNumber":128,"content":"    onStartMission: () -> Unit"},{"type":"INSERT","lineNumber":129,"content":") {"},{"type":"DELETE","lineNumber":114,"oldContent":"        FloatingActionButton(onClick = { }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"INSERT","lineNumber":135,"content":"        FloatingActionButton(onClick = { onStartMission() }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"INSERT","lineNumber":144,"content":"        FloatingActionButton("},{"type":"INSERT","lineNumber":145,"content":"            onClick = { onToggleMapType() },"},{"type":"INSERT","lineNumber":146,"content":"            containerColor = Color.Black.copy(alpha = 0.7f)"},{"type":"INSERT","lineNumber":147,"content":"        ) {"}]},{"timestamp":1758019034220,"changes":[{"type":"DELETE","lineNumber":15,"oldContent":"import com.google.maps.android.compose.MapType"},{"type":"MODIFY","lineNumber":17,"content":"import com.google.maps.android.compose.MapType","oldContent":"import androidx.compose.ui.platform.LocalContext"},{"type":"INSERT","lineNumber":18,"content":"import androidx.compose.ui.platform.LocalContext"},{"type":"DELETE","lineNumber":29,"oldContent":""},{"type":"DELETE","lineNumber":31,"oldContent":"        modifier = Modifier"},{"type":"INSERT","lineNumber":30,"content":""},{"type":"DELETE","lineNumber":33,"oldContent":"            .fillMaxSize()"},{"type":"DELETE","lineNumber":35,"oldContent":"            .background(MaterialTheme.colorScheme.background)"},{"type":"DELETE","lineNumber":37,"oldContent":"    ) {"},{"type":"INSERT","lineNumber":35,"content":"        modifier = Modifier"},{"type":"INSERT","lineNumber":36,"content":"            .fillMaxSize()"},{"type":"INSERT","lineNumber":37,"content":"            .background(MaterialTheme.colorScheme.background)"},{"type":"INSERT","lineNumber":38,"content":"    ) {"},{"type":"MODIFY","lineNumber":50,"content":"            if (!telemetryState.connected) {","oldContent":"            // âœ… Pass telemetryState, mapType, and uploaded waypoints to GcsMap"},{"type":"INSERT","lineNumber":51,"content":"                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {"},{"type":"INSERT","lineNumber":52,"content":"                    CircularProgressIndicator()"},{"type":"INSERT","lineNumber":53,"content":"                    Text(\"Waiting for connection to drone...\", modifier = Modifier.padding(top = 16.dp))"},{"type":"INSERT","lineNumber":54,"content":"                }"},{"type":"INSERT","lineNumber":55,"content":"            } else {"},{"type":"INSERT","lineNumber":56,"content":"                // âœ… Pass telemetryState, mapType, and uploaded waypoints to GcsMap"},{"type":"INSERT","lineNumber":57,"content":"                GcsMap("},{"type":"INSERT","lineNumber":58,"content":"                    telemetryState = telemetryState,"},{"type":"INSERT","lineNumber":59,"content":"                    points = uploadedWaypoints,"},{"type":"INSERT","lineNumber":60,"content":"                    mapType = mapType"},{"type":"INSERT","lineNumber":61,"content":"                )"},{"type":"DELETE","lineNumber":52,"oldContent":"            GcsMap("},{"type":"DELETE","lineNumber":53,"oldContent":"            StatusPanel("},{"type":"DELETE","lineNumber":54,"oldContent":"                telemetryState = telemetryState,"},{"type":"DELETE","lineNumber":55,"oldContent":"                modifier = Modifier"},{"type":"DELETE","lineNumber":56,"oldContent":"                points = uploadedWaypoints,"},{"type":"DELETE","lineNumber":57,"oldContent":"                    .align(Alignment.BottomStart)"},{"type":"DELETE","lineNumber":58,"oldContent":"                mapType = mapType"},{"type":"DELETE","lineNumber":59,"oldContent":"                    .padding(12.dp),"},{"type":"DELETE","lineNumber":60,"oldContent":"            )"},{"type":"DELETE","lineNumber":61,"oldContent":"                telemetryState = telemetryState"},{"type":"DELETE","lineNumber":62,"oldContent":"            )"},{"type":"INSERT","lineNumber":63,"content":"                StatusPanel("},{"type":"INSERT","lineNumber":64,"content":"                    modifier = Modifier"},{"type":"INSERT","lineNumber":65,"content":"                        .align(Alignment.BottomStart)"},{"type":"INSERT","lineNumber":66,"content":"                        .padding(12.dp),"},{"type":"INSERT","lineNumber":67,"content":"                    telemetryState = telemetryState"},{"type":"INSERT","lineNumber":68,"content":"                )"},{"type":"DELETE","lineNumber":64,"oldContent":"            FloatingButtons("},{"type":"DELETE","lineNumber":65,"oldContent":"                modifier = Modifier"},{"type":"DELETE","lineNumber":66,"oldContent":"                    .align(Alignment.CenterEnd)"},{"type":"INSERT","lineNumber":70,"content":"                FloatingButtons("},{"type":"INSERT","lineNumber":71,"content":"                    modifier = Modifier"},{"type":"INSERT","lineNumber":72,"content":"                        .align(Alignment.CenterEnd)"},{"type":"INSERT","lineNumber":73,"content":"                        .padding(12.dp),"},{"type":"INSERT","lineNumber":74,"content":"                    onToggleMapType = {"},{"type":"INSERT","lineNumber":75,"content":"                        mapType = if (mapType == MapType.SATELLITE) MapType.NORMAL else MapType.SATELLITE"},{"type":"INSERT","lineNumber":76,"content":"                    },"},{"type":"INSERT","lineNumber":77,"content":"                    onStartMission = {"},{"type":"INSERT","lineNumber":78,"content":"                        telemetryViewModel.startMission { success, error ->"},{"type":"INSERT","lineNumber":79,"content":"                            if (success) {"},{"type":"INSERT","lineNumber":80,"content":"                                Toast.makeText(context, \"Mission start sent\", Toast.LENGTH_SHORT).show()"},{"type":"INSERT","lineNumber":81,"content":"                            } else {"},{"type":"INSERT","lineNumber":82,"content":"                                Toast.makeText(context, error ?: \"Failed to start mission\", Toast.LENGTH_SHORT).show()"},{"type":"INSERT","lineNumber":83,"content":"                            }"},{"type":"INSERT","lineNumber":84,"content":"                        }"},{"type":"INSERT","lineNumber":85,"content":"                    }"},{"type":"INSERT","lineNumber":86,"content":"                )"},{"type":"INSERT","lineNumber":87,"content":"            }"},{"type":"INSERT","lineNumber":88,"content":"        }"},{"type":"INSERT","lineNumber":89,"content":"    }"},{"type":"DELETE","lineNumber":69,"oldContent":"                    .padding(12.dp),"},{"type":"DELETE","lineNumber":71,"oldContent":"                onToggleMapType = {"},{"type":"DELETE","lineNumber":73,"oldContent":"                    mapType = if (mapType == MapType.SATELLITE) MapType.NORMAL else MapType.SATELLITE"},{"type":"DELETE","lineNumber":75,"oldContent":"                },"},{"type":"DELETE","lineNumber":77,"oldContent":"                onStartMission = {"},{"type":"DELETE","lineNumber":79,"oldContent":"                    telemetryViewModel.startMission { success, error ->"},{"type":"DELETE","lineNumber":81,"oldContent":"                        if (success) {"},{"type":"DELETE","lineNumber":83,"oldContent":"                            Toast.makeText(context, \"Mission start sent\", Toast.LENGTH_SHORT).show()"},{"type":"DELETE","lineNumber":85,"oldContent":"                        } else {"},{"type":"DELETE","lineNumber":87,"oldContent":"                            Toast.makeText(context, error ?: \"Failed to start mission\", Toast.LENGTH_SHORT).show()"},{"type":"DELETE","lineNumber":89,"oldContent":"                        }"},{"type":"DELETE","lineNumber":91,"oldContent":"                    }"},{"type":"DELETE","lineNumber":93,"oldContent":"                }"},{"type":"DELETE","lineNumber":95,"oldContent":"            )"},{"type":"DELETE","lineNumber":97,"oldContent":"        }"},{"type":"DELETE","lineNumber":99,"oldContent":"    }"},{"type":"INSERT","lineNumber":132,"content":"fun FloatingButtons("},{"type":"INSERT","lineNumber":133,"content":"    modifier: Modifier = Modifier,"},{"type":"INSERT","lineNumber":134,"content":"    onToggleMapType: () -> Unit,"},{"type":"INSERT","lineNumber":135,"content":"    onStartMission: () -> Unit"},{"type":"INSERT","lineNumber":136,"content":") {"},{"type":"INSERT","lineNumber":142,"content":"        FloatingActionButton(onClick = { onStartMission() }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"INSERT","lineNumber":151,"content":"        FloatingActionButton("},{"type":"INSERT","lineNumber":152,"content":"            onClick = { onToggleMapType() },"},{"type":"INSERT","lineNumber":153,"content":"            containerColor = Color.Black.copy(alpha = 0.7f)"},{"type":"INSERT","lineNumber":154,"content":"        ) {"},{"type":"DELETE","lineNumber":140,"oldContent":"fun FloatingButtons("},{"type":"DELETE","lineNumber":142,"oldContent":"    modifier: Modifier = Modifier,"},{"type":"DELETE","lineNumber":144,"oldContent":"    onToggleMapType: () -> Unit,"},{"type":"DELETE","lineNumber":145,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":146,"oldContent":"    onStartMission: () -> Unit"},{"type":"DELETE","lineNumber":147,"oldContent":"            containerColor = Color.Black.copy(alpha = 0.7f)"},{"type":"DELETE","lineNumber":148,"oldContent":") {"},{"type":"DELETE","lineNumber":149,"oldContent":"            onClick = { onToggleMapType() },"},{"type":"DELETE","lineNumber":150,"oldContent":"        FloatingActionButton("},{"type":"DELETE","lineNumber":151,"oldContent":"        FloatingActionButton(onClick = { onStartMission() }, containerColor = Color.Black.copy(alpha = 0.7f)) {"}]},{"timestamp":1758086730271,"changes":[{"type":"INSERT","lineNumber":16,"content":"import com.example.aerogcsclone.authentication.AuthViewModel"},{"type":"DELETE","lineNumber":18,"oldContent":"import com.example.aerogcsclone.authentication.AuthViewModel"},{"type":"DELETE","lineNumber":28,"oldContent":"    val uploadedWaypoints by telemetryViewModel.uploadedWaypoints.collectAsState()"},{"type":"MODIFY","lineNumber":29,"content":"","oldContent":""},{"type":"INSERT","lineNumber":32,"content":""},{"type":"INSERT","lineNumber":33,"content":"    Column("},{"type":"DELETE","lineNumber":35,"oldContent":""},{"type":"DELETE","lineNumber":38,"oldContent":"    Column("},{"type":"DELETE","lineNumber":50,"oldContent":"            if (!telemetryState.connected) {"},{"type":"DELETE","lineNumber":51,"oldContent":"                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {"},{"type":"INSERT","lineNumber":49,"content":"            // âœ… Pass telemetryState and mapType to GcsMap"},{"type":"INSERT","lineNumber":50,"content":"            GcsMap("},{"type":"INSERT","lineNumber":51,"content":"                telemetryState = telemetryState,"},{"type":"INSERT","lineNumber":52,"content":"                mapType = mapType"},{"type":"INSERT","lineNumber":53,"content":"            )"},{"type":"DELETE","lineNumber":53,"oldContent":"                    CircularProgressIndicator()"},{"type":"DELETE","lineNumber":54,"oldContent":"                    Text(\"Waiting for connection to drone...\", modifier = Modifier.padding(top = 16.dp))"},{"type":"DELETE","lineNumber":55,"oldContent":"                }"},{"type":"DELETE","lineNumber":56,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":57,"oldContent":"                // âœ… Pass telemetryState, mapType, and uploaded waypoints to GcsMap"},{"type":"DELETE","lineNumber":58,"oldContent":"                GcsMap("},{"type":"DELETE","lineNumber":59,"oldContent":"                    telemetryState = telemetryState,"},{"type":"DELETE","lineNumber":60,"oldContent":"                    points = uploadedWaypoints,"},{"type":"DELETE","lineNumber":61,"oldContent":"                    mapType = mapType"},{"type":"DELETE","lineNumber":62,"oldContent":"                )"},{"type":"DELETE","lineNumber":63,"oldContent":"                StatusPanel("},{"type":"INSERT","lineNumber":55,"content":"            StatusPanel("},{"type":"INSERT","lineNumber":56,"content":"                modifier = Modifier"},{"type":"INSERT","lineNumber":57,"content":"                    .align(Alignment.BottomStart)"},{"type":"INSERT","lineNumber":58,"content":"                    .padding(12.dp),"},{"type":"INSERT","lineNumber":59,"content":"                telemetryState = telemetryState"},{"type":"INSERT","lineNumber":60,"content":"            )"},{"type":"DELETE","lineNumber":65,"oldContent":"                    modifier = Modifier"},{"type":"DELETE","lineNumber":66,"oldContent":"                        .align(Alignment.BottomStart)"},{"type":"DELETE","lineNumber":67,"oldContent":"                        .padding(12.dp),"},{"type":"DELETE","lineNumber":68,"oldContent":"                    telemetryState = telemetryState"},{"type":"INSERT","lineNumber":62,"content":"            FloatingButtons("},{"type":"INSERT","lineNumber":63,"content":"                modifier = Modifier"},{"type":"INSERT","lineNumber":64,"content":"                    .align(Alignment.CenterEnd)"},{"type":"INSERT","lineNumber":65,"content":"                    .padding(12.dp),"},{"type":"INSERT","lineNumber":66,"content":"                onToggleMapType = {"},{"type":"INSERT","lineNumber":67,"content":"                    mapType = if (mapType == MapType.SATELLITE) MapType.NORMAL else MapType.SATELLITE"},{"type":"INSERT","lineNumber":68,"content":"                },"},{"type":"INSERT","lineNumber":69,"content":"                onStartMission = {"},{"type":"INSERT","lineNumber":70,"content":"                    telemetryViewModel.startMission { success, error ->"},{"type":"INSERT","lineNumber":71,"content":"                        if (success) {"},{"type":"INSERT","lineNumber":72,"content":"                            Toast.makeText(context, \"Mission start sent\", Toast.LENGTH_SHORT).show()"},{"type":"INSERT","lineNumber":73,"content":"                        } else {"},{"type":"INSERT","lineNumber":74,"content":"                            Toast.makeText(context, error ?: \"Failed to start mission\", Toast.LENGTH_SHORT).show()"},{"type":"INSERT","lineNumber":75,"content":"                        }"},{"type":"INSERT","lineNumber":76,"content":"                    }"},{"type":"INSERT","lineNumber":77,"content":"                }"},{"type":"INSERT","lineNumber":78,"content":"            )"},{"type":"INSERT","lineNumber":79,"content":"        }"},{"type":"INSERT","lineNumber":80,"content":"    }"},{"type":"DELETE","lineNumber":70,"oldContent":"                )"},{"type":"DELETE","lineNumber":72,"oldContent":"                FloatingButtons("},{"type":"DELETE","lineNumber":74,"oldContent":"                    modifier = Modifier"},{"type":"DELETE","lineNumber":75,"oldContent":"                        .align(Alignment.CenterEnd)"},{"type":"DELETE","lineNumber":77,"oldContent":"                        .padding(12.dp),"},{"type":"DELETE","lineNumber":78,"oldContent":"                    onToggleMapType = {"},{"type":"DELETE","lineNumber":80,"oldContent":"                        mapType = if (mapType == MapType.SATELLITE) MapType.NORMAL else MapType.SATELLITE"},{"type":"DELETE","lineNumber":81,"oldContent":"                    },"},{"type":"DELETE","lineNumber":83,"oldContent":"                    onStartMission = {"},{"type":"DELETE","lineNumber":84,"oldContent":"                        telemetryViewModel.startMission { success, error ->"},{"type":"DELETE","lineNumber":86,"oldContent":"                            if (success) {"},{"type":"DELETE","lineNumber":87,"oldContent":"                                Toast.makeText(context, \"Mission start sent\", Toast.LENGTH_SHORT).show()"},{"type":"DELETE","lineNumber":89,"oldContent":"                            } else {"},{"type":"DELETE","lineNumber":90,"oldContent":"                                Toast.makeText(context, error ?: \"Failed to start mission\", Toast.LENGTH_SHORT).show()"},{"type":"DELETE","lineNumber":92,"oldContent":"                            }"},{"type":"DELETE","lineNumber":93,"oldContent":"                        }"},{"type":"DELETE","lineNumber":95,"oldContent":"                    }"},{"type":"DELETE","lineNumber":96,"oldContent":"                )"},{"type":"DELETE","lineNumber":98,"oldContent":"            }"},{"type":"DELETE","lineNumber":99,"oldContent":"        }"},{"type":"DELETE","lineNumber":101,"oldContent":"    }"},{"type":"INSERT","lineNumber":123,"content":"fun FloatingButtons("},{"type":"INSERT","lineNumber":124,"content":"    modifier: Modifier = Modifier,"},{"type":"INSERT","lineNumber":125,"content":"    onToggleMapType: () -> Unit,"},{"type":"INSERT","lineNumber":126,"content":"    onStartMission: () -> Unit"},{"type":"INSERT","lineNumber":127,"content":") {"},{"type":"INSERT","lineNumber":133,"content":"        FloatingActionButton(onClick = { onStartMission() }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"DELETE","lineNumber":139,"oldContent":"fun FloatingButtons("},{"type":"DELETE","lineNumber":141,"oldContent":"    modifier: Modifier = Modifier,"},{"type":"DELETE","lineNumber":143,"oldContent":"    onToggleMapType: () -> Unit,"},{"type":"DELETE","lineNumber":145,"oldContent":"    onStartMission: () -> Unit"},{"type":"DELETE","lineNumber":147,"oldContent":") {"},{"type":"INSERT","lineNumber":142,"content":"        FloatingActionButton("},{"type":"INSERT","lineNumber":143,"content":"            onClick = { onToggleMapType() },"},{"type":"INSERT","lineNumber":144,"content":"            containerColor = Color.Black.copy(alpha = 0.7f)"},{"type":"INSERT","lineNumber":145,"content":"        ) {"},{"type":"DELETE","lineNumber":153,"oldContent":"        FloatingActionButton(onClick = { onStartMission() }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"DELETE","lineNumber":155,"oldContent":"        FloatingActionButton("},{"type":"DELETE","lineNumber":156,"oldContent":"            onClick = { onToggleMapType() },"},{"type":"DELETE","lineNumber":157,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":158,"oldContent":"            containerColor = Color.Black.copy(alpha = 0.7f)"}]},{"timestamp":1758166955463,"changes":[{"type":"INSERT","lineNumber":0,"content":"// Kotlin"},{"type":"INSERT","lineNumber":21,"content":"import com.google.maps.android.compose.rememberCameraPositionState"},{"type":"INSERT","lineNumber":22,"content":"import com.google.android.gms.maps.CameraUpdateFactory"},{"type":"INSERT","lineNumber":23,"content":"import com.google.android.gms.maps.model.LatLng"},{"type":"DELETE","lineNumber":28,"oldContent":""},{"type":"DELETE","lineNumber":30,"oldContent":"    // ðŸ”‘ Map type state"},{"type":"INSERT","lineNumber":34,"content":"    // Map camera state controlled from parent so refresh can move it"},{"type":"INSERT","lineNumber":35,"content":"    val cameraPositionState = rememberCameraPositionState()"},{"type":"INSERT","lineNumber":36,"content":""},{"type":"INSERT","lineNumber":37,"content":"    // Map type state"},{"type":"INSERT","lineNumber":39,"content":""},{"type":"DELETE","lineNumber":48,"oldContent":"            // âœ… Pass telemetryState and mapType to GcsMap"},{"type":"INSERT","lineNumber":56,"content":"            // Pass cameraPositionState and disable autoCenter so user can pan freely"},{"type":"DELETE","lineNumber":52,"oldContent":"                mapType = mapType"},{"type":"DELETE","lineNumber":53,"oldContent":""},{"type":"INSERT","lineNumber":59,"content":"                mapType = mapType,"},{"type":"INSERT","lineNumber":60,"content":"                cameraPositionState = cameraPositionState,"},{"type":"INSERT","lineNumber":61,"content":"                autoCenter = false"},{"type":"INSERT","lineNumber":63,"content":""},{"type":"INSERT","lineNumber":70,"content":""},{"type":"DELETE","lineNumber":64,"oldContent":""},{"type":"DELETE","lineNumber":70,"oldContent":"}"},{"type":"DELETE","lineNumber":73,"oldContent":""},{"type":"DELETE","lineNumber":76,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":80,"oldContent":"fun StatusPanel("},{"type":"INSERT","lineNumber":86,"content":"                },"},{"type":"INSERT","lineNumber":87,"content":"                onRefresh = {"},{"type":"INSERT","lineNumber":88,"content":"                    val lat = telemetryState.latitude"},{"type":"INSERT","lineNumber":89,"content":"                    val lon = telemetryState.longitude"},{"type":"INSERT","lineNumber":90,"content":"                    if (lat != null && lon != null) {"},{"type":"INSERT","lineNumber":91,"content":"                        cameraPositionState.move(CameraUpdateFactory.newLatLngZoom(LatLng(lat, lon), 16f))"},{"type":"INSERT","lineNumber":92,"content":"                    } else {"},{"type":"INSERT","lineNumber":93,"content":"                        Toast.makeText(context, \"No GPS location available\", Toast.LENGTH_SHORT).show()"},{"type":"INSERT","lineNumber":94,"content":"                    }"},{"type":"DELETE","lineNumber":84,"oldContent":"    modifier: Modifier = Modifier,"},{"type":"INSERT","lineNumber":99,"content":"}"},{"type":"INSERT","lineNumber":100,"content":""},{"type":"INSERT","lineNumber":101,"content":"@Composable"},{"type":"INSERT","lineNumber":102,"content":"fun StatusPanel("},{"type":"INSERT","lineNumber":103,"content":"    modifier: Modifier = Modifier,"},{"type":"DELETE","lineNumber":114,"oldContent":"fun FloatingButtons("},{"type":"DELETE","lineNumber":116,"oldContent":"    modifier: Modifier = Modifier,"},{"type":"DELETE","lineNumber":118,"oldContent":"    onToggleMapType: () -> Unit,"},{"type":"DELETE","lineNumber":120,"oldContent":"    onStartMission: () -> Unit"},{"type":"DELETE","lineNumber":122,"oldContent":") {"},{"type":"INSERT","lineNumber":141,"content":"fun FloatingButtons("},{"type":"INSERT","lineNumber":142,"content":"    modifier: Modifier = Modifier,"},{"type":"INSERT","lineNumber":143,"content":"    onToggleMapType: () -> Unit,"},{"type":"INSERT","lineNumber":144,"content":"    onStartMission: () -> Unit,"},{"type":"INSERT","lineNumber":145,"content":"    onRefresh: () -> Unit"},{"type":"INSERT","lineNumber":146,"content":") {"},{"type":"DELETE","lineNumber":129,"oldContent":"        FloatingActionButton(onClick = { onStartMission() }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"INSERT","lineNumber":152,"content":"        FloatingActionButton(onClick = { onStartMission() }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"DELETE","lineNumber":137,"oldContent":"        FloatingActionButton("},{"type":"DELETE","lineNumber":139,"oldContent":"            onClick = { onToggleMapType() },"},{"type":"DELETE","lineNumber":140,"oldContent":"            containerColor = Color.Black.copy(alpha = 0.7f)"},{"type":"DELETE","lineNumber":142,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":143,"oldContent":"        FloatingActionButton(onClick = { }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"INSERT","lineNumber":158,"content":"        FloatingActionButton(onClick = { onRefresh() }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"INSERT","lineNumber":161,"content":"        FloatingActionButton("},{"type":"INSERT","lineNumber":162,"content":"            onClick = { onToggleMapType() },"},{"type":"INSERT","lineNumber":163,"content":"            containerColor = Color.Black.copy(alpha = 0.7f)"},{"type":"INSERT","lineNumber":164,"content":"        ) {"},{"type":"INSERT","lineNumber":169,"content":""}]},{"timestamp":1758184041464,"changes":[{"type":"DELETE","lineNumber":21,"oldContent":""},{"type":"DELETE","lineNumber":23,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":25,"oldContent":"fun MainPage("},{"type":"INSERT","lineNumber":24,"content":""},{"type":"INSERT","lineNumber":25,"content":"@Composable"},{"type":"INSERT","lineNumber":26,"content":"fun MainPage("},{"type":"INSERT","lineNumber":34,"content":"    // Map camera state controlled from parent so refresh can move it"},{"type":"INSERT","lineNumber":35,"content":"    val cameraPositionState = rememberCameraPositionState()"},{"type":"INSERT","lineNumber":36,"content":""},{"type":"INSERT","lineNumber":37,"content":"    // Map type state"},{"type":"INSERT","lineNumber":39,"content":""},{"type":"DELETE","lineNumber":36,"oldContent":"    // Map camera state controlled from parent so refresh can move it"},{"type":"DELETE","lineNumber":38,"oldContent":"    val cameraPositionState = rememberCameraPositionState()"},{"type":"DELETE","lineNumber":40,"oldContent":""},{"type":"DELETE","lineNumber":42,"oldContent":"    // Map type state"},{"type":"DELETE","lineNumber":45,"oldContent":""},{"type":"INSERT","lineNumber":56,"content":"            // Pass cameraPositionState and disable autoCenter so user can pan freely"},{"type":"INSERT","lineNumber":59,"content":"                mapType = mapType,"},{"type":"INSERT","lineNumber":60,"content":"                cameraPositionState = cameraPositionState,"},{"type":"INSERT","lineNumber":61,"content":"                autoCenter = false"},{"type":"INSERT","lineNumber":63,"content":""},{"type":"DELETE","lineNumber":60,"oldContent":"            // Pass cameraPositionState and disable autoCenter so user can pan freely"},{"type":"DELETE","lineNumber":64,"oldContent":"                mapType = mapType,"},{"type":"DELETE","lineNumber":66,"oldContent":"                cameraPositionState = cameraPositionState,"},{"type":"DELETE","lineNumber":68,"oldContent":"                autoCenter = false"},{"type":"INSERT","lineNumber":70,"content":""},{"type":"DELETE","lineNumber":71,"oldContent":""},{"type":"DELETE","lineNumber":78,"oldContent":""},{"type":"INSERT","lineNumber":86,"content":"                },"},{"type":"INSERT","lineNumber":87,"content":"                onRefresh = {"},{"type":"INSERT","lineNumber":88,"content":"                    val lat = telemetryState.latitude"},{"type":"INSERT","lineNumber":89,"content":"                    val lon = telemetryState.longitude"},{"type":"INSERT","lineNumber":90,"content":"                    if (lat != null && lon != null) {"},{"type":"INSERT","lineNumber":91,"content":"                        cameraPositionState.move(CameraUpdateFactory.newLatLngZoom(LatLng(lat, lon), 16f))"},{"type":"INSERT","lineNumber":92,"content":"                    } else {"},{"type":"INSERT","lineNumber":93,"content":"                        Toast.makeText(context, \"No GPS location available\", Toast.LENGTH_SHORT).show()"},{"type":"INSERT","lineNumber":94,"content":"                    }"},{"type":"DELETE","lineNumber":90,"oldContent":"                },"},{"type":"INSERT","lineNumber":99,"content":"}"},{"type":"INSERT","lineNumber":100,"content":""},{"type":"INSERT","lineNumber":101,"content":"@Composable"},{"type":"INSERT","lineNumber":102,"content":"fun StatusPanel("},{"type":"INSERT","lineNumber":103,"content":"    modifier: Modifier = Modifier,"},{"type":"DELETE","lineNumber":92,"oldContent":"                onRefresh = {"},{"type":"DELETE","lineNumber":94,"oldContent":"                    val lat = telemetryState.latitude"},{"type":"DELETE","lineNumber":96,"oldContent":"                    val lon = telemetryState.longitude"},{"type":"DELETE","lineNumber":98,"oldContent":"                    if (lat != null && lon != null) {"},{"type":"DELETE","lineNumber":100,"oldContent":"                        cameraPositionState.move(CameraUpdateFactory.newLatLngZoom(LatLng(lat, lon), 16f))"},{"type":"DELETE","lineNumber":102,"oldContent":"                    } else {"},{"type":"DELETE","lineNumber":104,"oldContent":"                        Toast.makeText(context, \"No GPS location available\", Toast.LENGTH_SHORT).show()"},{"type":"DELETE","lineNumber":106,"oldContent":"                    }"},{"type":"DELETE","lineNumber":112,"oldContent":"}"},{"type":"DELETE","lineNumber":114,"oldContent":""},{"type":"DELETE","lineNumber":116,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":118,"oldContent":"fun StatusPanel("},{"type":"DELETE","lineNumber":120,"oldContent":"    modifier: Modifier = Modifier,"},{"type":"MODIFY","lineNumber":132,"content":"                // Format mission timer","oldContent":"                Text(\"Time: N/A\", color = Color.White)"},{"type":"INSERT","lineNumber":133,"content":"                val timeStr = telemetryState.missionElapsedSec?.let { sec ->"},{"type":"INSERT","lineNumber":134,"content":"                    val h = sec / 3600"},{"type":"INSERT","lineNumber":135,"content":"                    val m = (sec % 3600) / 60"},{"type":"INSERT","lineNumber":136,"content":"                    val s = sec % 60"},{"type":"INSERT","lineNumber":137,"content":"                    if (h > 0) \"%02d:%02d\".format(h, m) else \"%02d:%02d\".format(m, s)"},{"type":"INSERT","lineNumber":138,"content":"                } ?: \"N/A\""},{"type":"INSERT","lineNumber":139,"content":"                Text(\"Time: $timeStr\", color = Color.White)"},{"type":"INSERT","lineNumber":148,"content":"fun FloatingButtons("},{"type":"INSERT","lineNumber":149,"content":"    modifier: Modifier = Modifier,"},{"type":"INSERT","lineNumber":150,"content":"    onToggleMapType: () -> Unit,"},{"type":"INSERT","lineNumber":151,"content":"    onStartMission: () -> Unit,"},{"type":"INSERT","lineNumber":152,"content":"    onRefresh: () -> Unit"},{"type":"INSERT","lineNumber":153,"content":") {"},{"type":"INSERT","lineNumber":159,"content":"        FloatingActionButton(onClick = { onStartMission() }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"DELETE","lineNumber":150,"oldContent":"fun FloatingButtons("},{"type":"DELETE","lineNumber":152,"oldContent":"    modifier: Modifier = Modifier,"},{"type":"DELETE","lineNumber":153,"oldContent":"    onToggleMapType: () -> Unit,"},{"type":"DELETE","lineNumber":154,"oldContent":"    onStartMission: () -> Unit,"},{"type":"INSERT","lineNumber":165,"content":"        FloatingActionButton(onClick = { onRefresh() }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"DELETE","lineNumber":156,"oldContent":"    onRefresh: () -> Unit"},{"type":"DELETE","lineNumber":158,"oldContent":") {"},{"type":"INSERT","lineNumber":168,"content":"        FloatingActionButton("},{"type":"INSERT","lineNumber":169,"content":"            onClick = { onToggleMapType() },"},{"type":"INSERT","lineNumber":170,"content":"            containerColor = Color.Black.copy(alpha = 0.7f)"},{"type":"INSERT","lineNumber":171,"content":"        ) {"},{"type":"DELETE","lineNumber":164,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":165,"oldContent":"        FloatingActionButton(onClick = { onStartMission() }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"DELETE","lineNumber":166,"oldContent":"            containerColor = Color.Black.copy(alpha = 0.7f)"},{"type":"DELETE","lineNumber":167,"oldContent":"            onClick = { onToggleMapType() },"},{"type":"DELETE","lineNumber":168,"oldContent":"        FloatingActionButton("},{"type":"DELETE","lineNumber":169,"oldContent":"        FloatingActionButton(onClick = { onRefresh() }, containerColor = Color.Black.copy(alpha = 0.7f)) {"}]},{"timestamp":1758187799304,"changes":[{"type":"DELETE","lineNumber":22,"oldContent":""},{"type":"INSERT","lineNumber":23,"content":"import com.google.android.gms.maps.model.LatLng"},{"type":"INSERT","lineNumber":24,"content":""},{"type":"DELETE","lineNumber":26,"oldContent":"import com.google.android.gms.maps.model.LatLng"},{"type":"DELETE","lineNumber":35,"oldContent":"    var mapType by remember { mutableStateOf(MapType.SATELLITE) }"},{"type":"DELETE","lineNumber":37,"oldContent":"    Column("},{"type":"DELETE","lineNumber":40,"oldContent":"        modifier = Modifier"},{"type":"INSERT","lineNumber":38,"content":"    var mapType by remember { mutableStateOf(MapType.SATELLITE) }"},{"type":"INSERT","lineNumber":40,"content":"    Column("},{"type":"INSERT","lineNumber":41,"content":"        modifier = Modifier"},{"type":"DELETE","lineNumber":59,"oldContent":"            )"},{"type":"DELETE","lineNumber":61,"oldContent":"            StatusPanel("},{"type":"INSERT","lineNumber":62,"content":"            )"},{"type":"INSERT","lineNumber":63,"content":""},{"type":"INSERT","lineNumber":64,"content":"            StatusPanel("},{"type":"DELETE","lineNumber":66,"oldContent":""},{"type":"MODIFY","lineNumber":71,"content":"            FloatingButtons(","oldContent":"            FloatingButtons("},{"type":"DELETE","lineNumber":87,"oldContent":"                }"},{"type":"DELETE","lineNumber":89,"oldContent":"            )"},{"type":"DELETE","lineNumber":91,"oldContent":"        }"},{"type":"DELETE","lineNumber":93,"oldContent":"    }"},{"type":"DELETE","lineNumber":96,"oldContent":"    telemetryState: TelemetryState"},{"type":"DELETE","lineNumber":99,"oldContent":") {"},{"type":"DELETE","lineNumber":101,"oldContent":"    Surface("},{"type":"DELETE","lineNumber":102,"oldContent":"        modifier = modifier"},{"type":"INSERT","lineNumber":95,"content":"                }"},{"type":"INSERT","lineNumber":96,"content":"            )"},{"type":"INSERT","lineNumber":97,"content":"        }"},{"type":"INSERT","lineNumber":98,"content":"    }"},{"type":"DELETE","lineNumber":104,"oldContent":"            .width(500.dp)"},{"type":"DELETE","lineNumber":107,"oldContent":"            .height(120.dp),"},{"type":"INSERT","lineNumber":104,"content":"    telemetryState: TelemetryState"},{"type":"INSERT","lineNumber":105,"content":") {"},{"type":"INSERT","lineNumber":106,"content":"    Surface("},{"type":"INSERT","lineNumber":107,"content":"        modifier = modifier"},{"type":"INSERT","lineNumber":108,"content":"            .width(500.dp)"},{"type":"INSERT","lineNumber":109,"content":"            .height(120.dp),"},{"type":"DELETE","lineNumber":134,"oldContent":"                Text(\"Distance: N/A\", color = Color.White)"},{"type":"DELETE","lineNumber":136,"oldContent":"                Text(\"Consumed: N/A\", color = Color.White)"},{"type":"DELETE","lineNumber":138,"oldContent":"            }"},{"type":"DELETE","lineNumber":140,"oldContent":"        }"},{"type":"DELETE","lineNumber":142,"oldContent":"    }"},{"type":"DELETE","lineNumber":144,"oldContent":"}"},{"type":"INSERT","lineNumber":140,"content":"                // Format total distance"},{"type":"INSERT","lineNumber":141,"content":"                val distStr = telemetryState.totalDistanceMeters?.let { dist ->"},{"type":"INSERT","lineNumber":142,"content":"                    if (dist < 1000f) \"%.0f m\".format(dist)"},{"type":"INSERT","lineNumber":143,"content":"                    else \"%.2f km\".format(dist / 1000f)"},{"type":"INSERT","lineNumber":144,"content":"                } ?: \"N/A\""},{"type":"INSERT","lineNumber":145,"content":"                Text(\"Distance: $distStr\", color = Color.White)"},{"type":"INSERT","lineNumber":146,"content":"                Text(\"Consumed: N/A\", color = Color.White)"},{"type":"INSERT","lineNumber":147,"content":"            }"},{"type":"INSERT","lineNumber":148,"content":"        }"},{"type":"INSERT","lineNumber":149,"content":"    }"},{"type":"INSERT","lineNumber":150,"content":"}"},{"type":"INSERT","lineNumber":153,"content":"fun FloatingButtons("},{"type":"INSERT","lineNumber":154,"content":"    modifier: Modifier = Modifier,"},{"type":"INSERT","lineNumber":155,"content":"    onToggleMapType: () -> Unit,"},{"type":"INSERT","lineNumber":156,"content":"    onStartMission: () -> Unit,"},{"type":"INSERT","lineNumber":157,"content":"    onRefresh: () -> Unit"},{"type":"INSERT","lineNumber":158,"content":") {"},{"type":"INSERT","lineNumber":164,"content":"        FloatingActionButton(onClick = { onStartMission() }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"DELETE","lineNumber":155,"oldContent":"fun FloatingButtons("},{"type":"DELETE","lineNumber":157,"oldContent":"    modifier: Modifier = Modifier,"},{"type":"DELETE","lineNumber":159,"oldContent":"    onToggleMapType: () -> Unit,"},{"type":"DELETE","lineNumber":160,"oldContent":"    onStartMission: () -> Unit,"},{"type":"DELETE","lineNumber":162,"oldContent":"    onRefresh: () -> Unit"},{"type":"DELETE","lineNumber":163,"oldContent":") {"},{"type":"INSERT","lineNumber":170,"content":"        FloatingActionButton(onClick = { onRefresh() }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"DELETE","lineNumber":166,"oldContent":"        FloatingActionButton(onClick = { onStartMission() }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"INSERT","lineNumber":173,"content":"        FloatingActionButton("},{"type":"INSERT","lineNumber":174,"content":"            onClick = { onToggleMapType() },"},{"type":"INSERT","lineNumber":175,"content":"            containerColor = Color.Black.copy(alpha = 0.7f)"},{"type":"INSERT","lineNumber":176,"content":"        ) {"},{"type":"DELETE","lineNumber":172,"oldContent":"        FloatingActionButton(onClick = { onRefresh() }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"DELETE","lineNumber":173,"oldContent":"        FloatingActionButton("},{"type":"DELETE","lineNumber":174,"oldContent":"            onClick = { onToggleMapType() },"},{"type":"DELETE","lineNumber":175,"oldContent":"            containerColor = Color.Black.copy(alpha = 0.7f)"},{"type":"DELETE","lineNumber":176,"oldContent":"        ) {"}]},{"timestamp":1758189939733,"changes":[{"type":"MODIFY","lineNumber":23,"content":"import com.google.android.gms.maps.model.LatLng","oldContent":"import com.google.android.gms.maps.model.LatLng"},{"type":"DELETE","lineNumber":36,"oldContent":"    var mapType by remember { mutableStateOf(MapType.SATELLITE) }"},{"type":"INSERT","lineNumber":38,"content":"    var mapType by remember { mutableStateOf(MapType.SATELLITE) }"},{"type":"INSERT","lineNumber":39,"content":""},{"type":"INSERT","lineNumber":40,"content":"    // Mission completed popup state"},{"type":"INSERT","lineNumber":41,"content":"    var showMissionCompletedPopup by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":42,"content":"    var lastMissionCompleted by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":43,"content":""},{"type":"INSERT","lineNumber":44,"content":"    // Show popup when missionCompleted becomes true"},{"type":"INSERT","lineNumber":45,"content":"    LaunchedEffect(telemetryState.missionCompleted) {"},{"type":"INSERT","lineNumber":46,"content":"        if (telemetryState.missionCompleted && !lastMissionCompleted) {"},{"type":"INSERT","lineNumber":47,"content":"            showMissionCompletedPopup = true"},{"type":"INSERT","lineNumber":48,"content":"            lastMissionCompleted = true"},{"type":"INSERT","lineNumber":49,"content":"        }"},{"type":"INSERT","lineNumber":50,"content":"        if (!telemetryState.missionCompleted) {"},{"type":"INSERT","lineNumber":51,"content":"            lastMissionCompleted = false"},{"type":"INSERT","lineNumber":52,"content":"        }"},{"type":"INSERT","lineNumber":53,"content":"    }"},{"type":"INSERT","lineNumber":54,"content":""},{"type":"DELETE","lineNumber":41,"oldContent":""},{"type":"DELETE","lineNumber":60,"oldContent":"            )"},{"type":"DELETE","lineNumber":62,"oldContent":""},{"type":"INSERT","lineNumber":77,"content":"            )"},{"type":"INSERT","lineNumber":78,"content":""},{"type":"INSERT","lineNumber":85,"content":""},{"type":"DELETE","lineNumber":71,"oldContent":"            FloatingButtons("},{"type":"DELETE","lineNumber":91,"oldContent":"                }"},{"type":"DELETE","lineNumber":93,"oldContent":"            )"},{"type":"DELETE","lineNumber":94,"oldContent":"        }"},{"type":"DELETE","lineNumber":96,"oldContent":"    }"},{"type":"INSERT","lineNumber":110,"content":"                }"},{"type":"INSERT","lineNumber":111,"content":"            )"},{"type":"INSERT","lineNumber":112,"content":""},{"type":"INSERT","lineNumber":113,"content":"            // Mission Completed Popup"},{"type":"INSERT","lineNumber":114,"content":"            if (showMissionCompletedPopup) {"},{"type":"INSERT","lineNumber":115,"content":"                MissionCompletedPopup("},{"type":"INSERT","lineNumber":116,"content":"                    telemetryState = telemetryState,"},{"type":"INSERT","lineNumber":117,"content":"                    onDismiss = { showMissionCompletedPopup = false }"},{"type":"INSERT","lineNumber":118,"content":"                )"},{"type":"INSERT","lineNumber":119,"content":"            }"},{"type":"INSERT","lineNumber":120,"content":"        }"},{"type":"INSERT","lineNumber":121,"content":"    }"},{"type":"INSERT","lineNumber":123,"content":""},{"type":"INSERT","lineNumber":124,"content":"@Composable"},{"type":"INSERT","lineNumber":125,"content":"fun StatusPanel("},{"type":"INSERT","lineNumber":126,"content":"    modifier: Modifier = Modifier,"},{"type":"DELETE","lineNumber":102,"oldContent":""},{"type":"DELETE","lineNumber":104,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":107,"oldContent":"fun StatusPanel("},{"type":"DELETE","lineNumber":109,"oldContent":"    modifier: Modifier = Modifier,"},{"type":"INSERT","lineNumber":160,"content":"                    if (h > 0) \"%02d:%02d\".format(h, m) else \"%02d:%02d\".format(m, s)"},{"type":"INSERT","lineNumber":161,"content":"                } ?: \"N/A\""},{"type":"INSERT","lineNumber":162,"content":"                Text(\"Time: $timeStr\", color = Color.White)"},{"type":"DELETE","lineNumber":139,"oldContent":"                    if (h > 0) \"%02d:%02d\".format(h, m) else \"%02d:%02d\".format(m, s)"},{"type":"DELETE","lineNumber":143,"oldContent":"                } ?: \"N/A\""},{"type":"DELETE","lineNumber":145,"oldContent":"                Text(\"Time: $timeStr\", color = Color.White)"},{"type":"DELETE","lineNumber":147,"oldContent":""},{"type":"DELETE","lineNumber":149,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":151,"oldContent":"    Column("},{"type":"DELETE","lineNumber":153,"oldContent":"        modifier = modifier,"},{"type":"DELETE","lineNumber":155,"oldContent":"        verticalArrangement = Arrangement.spacedBy(12.dp),"},{"type":"DELETE","lineNumber":156,"oldContent":"        horizontalAlignment = Alignment.CenterHorizontally"},{"type":"DELETE","lineNumber":157,"oldContent":"    ) {"},{"type":"INSERT","lineNumber":174,"content":""},{"type":"INSERT","lineNumber":175,"content":"@Composable"},{"type":"DELETE","lineNumber":159,"oldContent":"            Icon(Icons.Default.PlayArrow, contentDescription = \"Start\", tint = Color.White)"},{"type":"DELETE","lineNumber":161,"oldContent":"        }"},{"type":"DELETE","lineNumber":164,"oldContent":"        FloatingActionButton(onClick = { }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"INSERT","lineNumber":182,"content":"    Column("},{"type":"INSERT","lineNumber":183,"content":"        modifier = modifier,"},{"type":"INSERT","lineNumber":184,"content":"        verticalArrangement = Arrangement.spacedBy(12.dp),"},{"type":"INSERT","lineNumber":185,"content":"        horizontalAlignment = Alignment.CenterHorizontally"},{"type":"INSERT","lineNumber":186,"content":"    ) {"},{"type":"INSERT","lineNumber":187,"content":"        FloatingActionButton(onClick = { onStartMission() }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"INSERT","lineNumber":188,"content":"            Icon(Icons.Default.PlayArrow, contentDescription = \"Start\", tint = Color.White)"},{"type":"INSERT","lineNumber":189,"content":"        }"},{"type":"INSERT","lineNumber":190,"content":"        FloatingActionButton(onClick = { }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"DELETE","lineNumber":169,"oldContent":"        FloatingActionButton(onClick = { onStartMission() }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"INSERT","lineNumber":193,"content":"        FloatingActionButton(onClick = { onRefresh() }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"INSERT","lineNumber":196,"content":"        FloatingActionButton("},{"type":"INSERT","lineNumber":197,"content":"            onClick = { onToggleMapType() },"},{"type":"INSERT","lineNumber":198,"content":"            containerColor = Color.Black.copy(alpha = 0.7f)"},{"type":"INSERT","lineNumber":199,"content":"        ) {"},{"type":"DELETE","lineNumber":175,"oldContent":"        FloatingActionButton(onClick = { onRefresh() }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"DELETE","lineNumber":178,"oldContent":"        FloatingActionButton("},{"type":"DELETE","lineNumber":179,"oldContent":"            onClick = { onToggleMapType() },"},{"type":"DELETE","lineNumber":180,"oldContent":"            containerColor = Color.Black.copy(alpha = 0.7f)"},{"type":"DELETE","lineNumber":181,"oldContent":"        ) {"},{"type":"INSERT","lineNumber":205,"content":"@Composable"},{"type":"INSERT","lineNumber":206,"content":"fun MissionCompletedPopup("},{"type":"INSERT","lineNumber":207,"content":"    telemetryState: TelemetryState,"},{"type":"INSERT","lineNumber":208,"content":"    onDismiss: () -> Unit"},{"type":"INSERT","lineNumber":209,"content":") {"},{"type":"INSERT","lineNumber":210,"content":"    // Popup content here"},{"type":"INSERT","lineNumber":211,"content":"    AlertDialog("},{"type":"INSERT","lineNumber":212,"content":"        onDismissRequest = onDismiss,"},{"type":"INSERT","lineNumber":213,"content":"        title = { Text(\"Mission Completed\") },"},{"type":"INSERT","lineNumber":214,"content":"        text = { Text(\"Your mission has been successfully completed.\") },"},{"type":"INSERT","lineNumber":215,"content":"        confirmButton = {"},{"type":"INSERT","lineNumber":216,"content":"            TextButton(onClick = onDismiss) {"},{"type":"INSERT","lineNumber":217,"content":"                Text(\"OK\")"},{"type":"INSERT","lineNumber":218,"content":"            }"},{"type":"INSERT","lineNumber":219,"content":"        },"},{"type":"INSERT","lineNumber":220,"content":"        modifier = Modifier"},{"type":"INSERT","lineNumber":221,"content":"            .fillMaxWidth(0.9f)"},{"type":"INSERT","lineNumber":222,"content":"            .wrapContentHeight()"},{"type":"INSERT","lineNumber":223,"content":"    )"},{"type":"INSERT","lineNumber":224,"content":"}"},{"type":"INSERT","lineNumber":225,"content":""}]},{"timestamp":1758189963790,"changes":[{"type":"INSERT","lineNumber":22,"content":"import com.google.android.gms.maps.CameraUpdateFactory"},{"type":"DELETE","lineNumber":23,"oldContent":"import com.google.android.gms.maps.model.LatLng"},{"type":"MODIFY","lineNumber":38,"content":"    var mapType by remember { mutableStateOf(MapType.SATELLITE) }","oldContent":"    var mapType by remember { mutableStateOf(MapType.SATELLITE) }"},{"type":"DELETE","lineNumber":41,"oldContent":"    // Mission completed popup state"},{"type":"DELETE","lineNumber":43,"oldContent":"    var showMissionCompletedPopup by remember { mutableStateOf(false) }"},{"type":"DELETE","lineNumber":44,"oldContent":"    var lastMissionCompleted by remember { mutableStateOf(false) }"},{"type":"DELETE","lineNumber":46,"oldContent":""},{"type":"DELETE","lineNumber":48,"oldContent":"    // Show popup when missionCompleted becomes true"},{"type":"DELETE","lineNumber":50,"oldContent":"    LaunchedEffect(telemetryState.missionCompleted) {"},{"type":"DELETE","lineNumber":52,"oldContent":"        if (telemetryState.missionCompleted && !lastMissionCompleted) {"},{"type":"DELETE","lineNumber":54,"oldContent":"            showMissionCompletedPopup = true"},{"type":"DELETE","lineNumber":56,"oldContent":"            lastMissionCompleted = true"},{"type":"DELETE","lineNumber":58,"oldContent":"        }"},{"type":"DELETE","lineNumber":60,"oldContent":"        if (!telemetryState.missionCompleted) {"},{"type":"DELETE","lineNumber":62,"oldContent":"            lastMissionCompleted = false"},{"type":"DELETE","lineNumber":64,"oldContent":"        }"},{"type":"DELETE","lineNumber":66,"oldContent":"    }"},{"type":"DELETE","lineNumber":68,"oldContent":""},{"type":"INSERT","lineNumber":62,"content":"            )"},{"type":"INSERT","lineNumber":63,"content":""},{"type":"INSERT","lineNumber":70,"content":""},{"type":"DELETE","lineNumber":89,"oldContent":"            )"},{"type":"DELETE","lineNumber":91,"oldContent":""},{"type":"DELETE","lineNumber":99,"oldContent":""},{"type":"INSERT","lineNumber":95,"content":"                }"},{"type":"INSERT","lineNumber":96,"content":"            )"},{"type":"INSERT","lineNumber":97,"content":"        }"},{"type":"INSERT","lineNumber":98,"content":"    }"},{"type":"INSERT","lineNumber":100,"content":""},{"type":"INSERT","lineNumber":101,"content":"@Composable"},{"type":"INSERT","lineNumber":102,"content":"fun StatusPanel("},{"type":"INSERT","lineNumber":103,"content":"    modifier: Modifier = Modifier,"},{"type":"DELETE","lineNumber":117,"oldContent":"                }"},{"type":"DELETE","lineNumber":119,"oldContent":"            )"},{"type":"DELETE","lineNumber":121,"oldContent":""},{"type":"DELETE","lineNumber":123,"oldContent":"            // Mission Completed Popup"},{"type":"DELETE","lineNumber":125,"oldContent":"            if (showMissionCompletedPopup) {"},{"type":"DELETE","lineNumber":127,"oldContent":"                MissionCompletedPopup("},{"type":"DELETE","lineNumber":129,"oldContent":"                    telemetryState = telemetryState,"},{"type":"DELETE","lineNumber":131,"oldContent":"                    onDismiss = { showMissionCompletedPopup = false }"},{"type":"DELETE","lineNumber":133,"oldContent":"                )"},{"type":"DELETE","lineNumber":135,"oldContent":"            }"},{"type":"DELETE","lineNumber":137,"oldContent":"        }"},{"type":"DELETE","lineNumber":139,"oldContent":"    }"},{"type":"DELETE","lineNumber":142,"oldContent":""},{"type":"DELETE","lineNumber":144,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":146,"oldContent":"fun StatusPanel("},{"type":"DELETE","lineNumber":148,"oldContent":"    modifier: Modifier = Modifier,"},{"type":"INSERT","lineNumber":137,"content":"                    if (h > 0) \"%02d:%02d\".format(h, m) else \"%02d:%02d\".format(m, s)"},{"type":"INSERT","lineNumber":138,"content":"                } ?: \"N/A\""},{"type":"INSERT","lineNumber":139,"content":"                Text(\"Time: $timeStr\", color = Color.White)"},{"type":"INSERT","lineNumber":151,"content":""},{"type":"INSERT","lineNumber":152,"content":"@Composable"},{"type":"DELETE","lineNumber":172,"oldContent":"                    if (h > 0) \"%02d:%02d\".format(h, m) else \"%02d:%02d\".format(m, s)"},{"type":"DELETE","lineNumber":174,"oldContent":"                } ?: \"N/A\""},{"type":"DELETE","lineNumber":175,"oldContent":"                Text(\"Time: $timeStr\", color = Color.White)"},{"type":"DELETE","lineNumber":180,"oldContent":"            Icon(Icons.Default.Settings, contentDescription = \"Settings\", tint = Color.White)"},{"type":"DELETE","lineNumber":181,"oldContent":"        }"},{"type":"DELETE","lineNumber":182,"oldContent":"            Icon(Icons.Default.Refresh, contentDescription = \"Refresh\", tint = Color.White)"},{"type":"DELETE","lineNumber":183,"oldContent":"        }"},{"type":"DELETE","lineNumber":184,"oldContent":"            Icon(Icons.Default.Map, contentDescription = \"Map Options\", tint = Color.White)"},{"type":"DELETE","lineNumber":185,"oldContent":"        }"},{"type":"DELETE","lineNumber":186,"oldContent":""},{"type":"DELETE","lineNumber":187,"oldContent":"    }"},{"type":"DELETE","lineNumber":188,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":189,"oldContent":"}"},{"type":"DELETE","lineNumber":190,"oldContent":""},{"type":"DELETE","lineNumber":192,"oldContent":""},{"type":"DELETE","lineNumber":194,"oldContent":"}"},{"type":"DELETE","lineNumber":196,"oldContent":"    )"},{"type":"DELETE","lineNumber":198,"oldContent":"            .wrapContentHeight()"},{"type":"DELETE","lineNumber":200,"oldContent":"            .fillMaxWidth(0.9f)"},{"type":"DELETE","lineNumber":202,"oldContent":"        modifier = Modifier"},{"type":"DELETE","lineNumber":204,"oldContent":"        },"},{"type":"DELETE","lineNumber":206,"oldContent":"            }"},{"type":"DELETE","lineNumber":208,"oldContent":"                Text(\"OK\")"},{"type":"DELETE","lineNumber":209,"oldContent":"            TextButton(onClick = onDismiss) {"},{"type":"DELETE","lineNumber":210,"oldContent":"        confirmButton = {"},{"type":"INSERT","lineNumber":168,"content":"            Icon(Icons.Default.Settings, contentDescription = \"Settings\", tint = Color.White)"},{"type":"INSERT","lineNumber":169,"content":"        }"},{"type":"DELETE","lineNumber":212,"oldContent":"        text = { Text(\"Your mission has been successfully completed.\") },"},{"type":"DELETE","lineNumber":213,"oldContent":"        title = { Text(\"Mission Completed\") },"},{"type":"DELETE","lineNumber":214,"oldContent":"        onDismissRequest = onDismiss,"},{"type":"INSERT","lineNumber":171,"content":"            Icon(Icons.Default.Refresh, contentDescription = \"Refresh\", tint = Color.White)"},{"type":"INSERT","lineNumber":172,"content":"        }"},{"type":"DELETE","lineNumber":216,"oldContent":"    AlertDialog("},{"type":"DELETE","lineNumber":218,"oldContent":"    // Popup content here"},{"type":"DELETE","lineNumber":220,"oldContent":") {"},{"type":"DELETE","lineNumber":222,"oldContent":"    onDismiss: () -> Unit"},{"type":"DELETE","lineNumber":223,"oldContent":"    telemetryState: TelemetryState,"},{"type":"DELETE","lineNumber":224,"oldContent":"fun MissionCompletedPopup("},{"type":"DELETE","lineNumber":225,"oldContent":"@Composable"},{"type":"INSERT","lineNumber":177,"content":"            Icon(Icons.Default.Map, contentDescription = \"Map Options\", tint = Color.White)"},{"type":"INSERT","lineNumber":178,"content":"        }"},{"type":"INSERT","lineNumber":179,"content":"    }"},{"type":"INSERT","lineNumber":180,"content":"}"},{"type":"INSERT","lineNumber":181,"content":""},{"type":"INSERT","lineNumber":182,"content":""}]},{"timestamp":1758190144053,"changes":[{"type":"INSERT","lineNumber":37,"content":"    // Map type state"},{"type":"DELETE","lineNumber":38,"oldContent":"    var mapType by remember { mutableStateOf(MapType.SATELLITE) }"},{"type":"DELETE","lineNumber":51,"oldContent":"            )"},{"type":"DELETE","lineNumber":52,"oldContent":""},{"type":"DELETE","lineNumber":57,"oldContent":""},{"type":"INSERT","lineNumber":62,"content":"            )"},{"type":"INSERT","lineNumber":63,"content":""},{"type":"INSERT","lineNumber":70,"content":""},{"type":"DELETE","lineNumber":81,"oldContent":"                }"},{"type":"DELETE","lineNumber":83,"oldContent":"            )"},{"type":"DELETE","lineNumber":85,"oldContent":"        }"},{"type":"DELETE","lineNumber":87,"oldContent":"    }"},{"type":"DELETE","lineNumber":89,"oldContent":""},{"type":"DELETE","lineNumber":91,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":93,"oldContent":"fun StatusPanel("},{"type":"MODIFY","lineNumber":95,"content":"                }","oldContent":"    modifier: Modifier = Modifier,"},{"type":"INSERT","lineNumber":96,"content":"            )"},{"type":"INSERT","lineNumber":97,"content":"        }"},{"type":"INSERT","lineNumber":98,"content":"    }"},{"type":"INSERT","lineNumber":100,"content":""},{"type":"INSERT","lineNumber":101,"content":"@Composable"},{"type":"INSERT","lineNumber":102,"content":"fun StatusPanel("},{"type":"INSERT","lineNumber":103,"content":"    modifier: Modifier = Modifier,"},{"type":"DELETE","lineNumber":120,"oldContent":"                    if (h > 0) \"%02d:%02d\".format(h, m) else \"%02d:%02d\".format(m, s)"},{"type":"DELETE","lineNumber":121,"oldContent":"                } ?: \"N/A\""},{"type":"DELETE","lineNumber":123,"oldContent":"                Text(\"Time: $timeStr\", color = Color.White)"},{"type":"DELETE","lineNumber":131,"oldContent":""},{"type":"DELETE","lineNumber":133,"oldContent":"@Composable"},{"type":"INSERT","lineNumber":137,"content":"                    if (h > 0) \"%02d:%02d\".format(h, m) else \"%02d:%02d\".format(m, s)"},{"type":"INSERT","lineNumber":138,"content":"                } ?: \"N/A\""},{"type":"INSERT","lineNumber":139,"content":"                Text(\"Time: $timeStr\", color = Color.White)"},{"type":"DELETE","lineNumber":150,"oldContent":"            Icon(Icons.Default.Settings, contentDescription = \"Settings\", tint = Color.White)"},{"type":"DELETE","lineNumber":152,"oldContent":"        }"},{"type":"DELETE","lineNumber":155,"oldContent":"            Icon(Icons.Default.Refresh, contentDescription = \"Refresh\", tint = Color.White)"},{"type":"INSERT","lineNumber":151,"content":""},{"type":"INSERT","lineNumber":152,"content":"@Composable"},{"type":"DELETE","lineNumber":157,"oldContent":"        }"},{"type":"DELETE","lineNumber":160,"oldContent":"            Icon(Icons.Default.Map, contentDescription = \"Map Options\", tint = Color.White)"},{"type":"DELETE","lineNumber":162,"oldContent":"        }"},{"type":"DELETE","lineNumber":164,"oldContent":"    }"},{"type":"DELETE","lineNumber":166,"oldContent":"}"},{"type":"DELETE","lineNumber":167,"oldContent":""},{"type":"MODIFY","lineNumber":168,"content":"            Icon(Icons.Default.Settings, contentDescription = \"Settings\", tint = Color.White)","oldContent":""},{"type":"INSERT","lineNumber":169,"content":"        }"},{"type":"INSERT","lineNumber":171,"content":"            Icon(Icons.Default.Refresh, contentDescription = \"Refresh\", tint = Color.White)"},{"type":"INSERT","lineNumber":172,"content":"        }"},{"type":"INSERT","lineNumber":177,"content":"            Icon(Icons.Default.Map, contentDescription = \"Map Options\", tint = Color.White)"},{"type":"INSERT","lineNumber":178,"content":"        }"},{"type":"INSERT","lineNumber":179,"content":"    }"},{"type":"INSERT","lineNumber":180,"content":"}"},{"type":"INSERT","lineNumber":181,"content":""}]},{"timestamp":1758190224829,"changes":[{"type":"DELETE","lineNumber":59,"oldContent":"            )"},{"type":"DELETE","lineNumber":61,"oldContent":""},{"type":"INSERT","lineNumber":62,"content":"            )"},{"type":"INSERT","lineNumber":63,"content":""},{"type":"MODIFY","lineNumber":70,"content":"","oldContent":""},{"type":"DELETE","lineNumber":88,"oldContent":"                }"},{"type":"DELETE","lineNumber":89,"oldContent":"            )"},{"type":"DELETE","lineNumber":91,"oldContent":"        }"},{"type":"DELETE","lineNumber":93,"oldContent":"    }"},{"type":"DELETE","lineNumber":96,"oldContent":""},{"type":"DELETE","lineNumber":98,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":100,"oldContent":"fun StatusPanel("},{"type":"DELETE","lineNumber":102,"oldContent":"    modifier: Modifier = Modifier,"},{"type":"INSERT","lineNumber":95,"content":"                }"},{"type":"INSERT","lineNumber":96,"content":"            )"},{"type":"INSERT","lineNumber":97,"content":"        }"},{"type":"INSERT","lineNumber":98,"content":"    }"},{"type":"INSERT","lineNumber":100,"content":""},{"type":"INSERT","lineNumber":101,"content":"@Composable"},{"type":"INSERT","lineNumber":102,"content":"fun StatusPanel("},{"type":"INSERT","lineNumber":103,"content":"    modifier: Modifier = Modifier,"},{"type":"DELETE","lineNumber":132,"oldContent":"                    if (h > 0) \"%02d:%02d\".format(h, m) else \"%02d:%02d\".format(m, s)"},{"type":"DELETE","lineNumber":134,"oldContent":"                } ?: \"N/A\""},{"type":"DELETE","lineNumber":136,"oldContent":"                Text(\"Time: $timeStr\", color = Color.White)"},{"type":"INSERT","lineNumber":137,"content":"                    if (h > 0) \"%02d:%02d\".format(h, m) else \"%02d:%02d\".format(m, s)"},{"type":"INSERT","lineNumber":138,"content":"                } ?: \"N/A\""},{"type":"INSERT","lineNumber":139,"content":"                Text(\"Time: $timeStr\", color = Color.White)"},{"type":"DELETE","lineNumber":148,"oldContent":""},{"type":"DELETE","lineNumber":150,"oldContent":"@Composable"},{"type":"INSERT","lineNumber":151,"content":""},{"type":"INSERT","lineNumber":152,"content":"@Composable"},{"type":"DELETE","lineNumber":159,"oldContent":"            Icon(Icons.Default.Settings, contentDescription = \"Settings\", tint = Color.White)"},{"type":"DELETE","lineNumber":160,"oldContent":"        }"},{"type":"DELETE","lineNumber":163,"oldContent":"            Icon(Icons.Default.Refresh, contentDescription = \"Refresh\", tint = Color.White)"},{"type":"DELETE","lineNumber":165,"oldContent":"        }"},{"type":"DELETE","lineNumber":171,"oldContent":"            Icon(Icons.Default.Map, contentDescription = \"Map Options\", tint = Color.White)"},{"type":"INSERT","lineNumber":168,"content":"            Icon(Icons.Default.Settings, contentDescription = \"Settings\", tint = Color.White)"},{"type":"DELETE","lineNumber":175,"oldContent":"    }"},{"type":"INSERT","lineNumber":171,"content":"            Icon(Icons.Default.Refresh, contentDescription = \"Refresh\", tint = Color.White)"},{"type":"INSERT","lineNumber":172,"content":"        }"},{"type":"DELETE","lineNumber":177,"oldContent":"}"},{"type":"DELETE","lineNumber":179,"oldContent":""},{"type":"INSERT","lineNumber":177,"content":"            Icon(Icons.Default.Map, contentDescription = \"Map Options\", tint = Color.White)"},{"type":"INSERT","lineNumber":178,"content":"        }"},{"type":"INSERT","lineNumber":179,"content":"    }"},{"type":"INSERT","lineNumber":180,"content":"}"},{"type":"INSERT","lineNumber":181,"content":""}]},{"timestamp":1758191676193,"changes":[{"type":"INSERT","lineNumber":34,"content":"    // Collect uploaded waypoints for display"},{"type":"INSERT","lineNumber":35,"content":"    val uploadedWaypoints by telemetryViewModel.uploadedWaypoints.collectAsState()"},{"type":"INSERT","lineNumber":36,"content":""},{"type":"DELETE","lineNumber":56,"oldContent":"            // Pass cameraPositionState and disable autoCenter so user can pan freely"},{"type":"INSERT","lineNumber":59,"content":"            // Pass uploadedWaypoints to GcsMap for blue markers/lines"},{"type":"INSERT","lineNumber":62,"content":"                waypoints = uploadedWaypoints,"},{"type":"DELETE","lineNumber":60,"oldContent":"            )"},{"type":"DELETE","lineNumber":62,"oldContent":""},{"type":"INSERT","lineNumber":66,"content":"            )"},{"type":"INSERT","lineNumber":67,"content":""},{"type":"INSERT","lineNumber":73,"content":"            )"},{"type":"DELETE","lineNumber":70,"oldContent":""},{"type":"DELETE","lineNumber":91,"oldContent":"                }"},{"type":"INSERT","lineNumber":96,"content":"                    } else {"},{"type":"INSERT","lineNumber":97,"content":"                        Toast.makeText(context, \"No GPS location available\", Toast.LENGTH_SHORT).show()"},{"type":"INSERT","lineNumber":98,"content":"                    }"},{"type":"INSERT","lineNumber":99,"content":"                }"},{"type":"DELETE","lineNumber":95,"oldContent":"                    } else {"},{"type":"DELETE","lineNumber":97,"oldContent":"                        Toast.makeText(context, \"No GPS location available\", Toast.LENGTH_SHORT).show()"},{"type":"INSERT","lineNumber":103,"content":"}"},{"type":"DELETE","lineNumber":100,"oldContent":"                    }"},{"type":"DELETE","lineNumber":103,"oldContent":"}"},{"type":"DELETE","lineNumber":134,"oldContent":"                    if (h > 0) \"%02d:%02d\".format(h, m) else \"%02d:%02d\".format(m, s)"},{"type":"DELETE","lineNumber":136,"oldContent":"                } ?: \"N/A\""},{"type":"DELETE","lineNumber":138,"oldContent":"                Text(\"Time: $timeStr\", color = Color.White)"},{"type":"INSERT","lineNumber":141,"content":"                    if (h > 0) \"%02d:%02d\".format(h, m) else \"%02d:%02d\".format(m, s)"},{"type":"INSERT","lineNumber":142,"content":"                } ?: \"N/A\""},{"type":"INSERT","lineNumber":143,"content":"                Text(\"Time: $timeStr\", color = Color.White)"},{"type":"DELETE","lineNumber":149,"oldContent":""},{"type":"DELETE","lineNumber":151,"oldContent":"@Composable"},{"type":"INSERT","lineNumber":155,"content":""},{"type":"INSERT","lineNumber":156,"content":"@Composable"},{"type":"DELETE","lineNumber":164,"oldContent":"            Icon(Icons.Default.Settings, contentDescription = \"Settings\", tint = Color.White)"},{"type":"DELETE","lineNumber":168,"oldContent":"            Icon(Icons.Default.Refresh, contentDescription = \"Refresh\", tint = Color.White)"},{"type":"DELETE","lineNumber":169,"oldContent":"        }"},{"type":"INSERT","lineNumber":172,"content":"            Icon(Icons.Default.Settings, contentDescription = \"Settings\", tint = Color.White)"},{"type":"INSERT","lineNumber":175,"content":"            Icon(Icons.Default.Refresh, contentDescription = \"Refresh\", tint = Color.White)"},{"type":"INSERT","lineNumber":176,"content":"        }"},{"type":"INSERT","lineNumber":178,"content":"            onClick = { onToggleMapType() },"},{"type":"INSERT","lineNumber":179,"content":"            containerColor = Color.Black.copy(alpha = 0.7f)"},{"type":"INSERT","lineNumber":180,"content":"        ) {"},{"type":"DELETE","lineNumber":176,"oldContent":"            onClick = { onToggleMapType() },"},{"type":"DELETE","lineNumber":179,"oldContent":"            containerColor = Color.Black.copy(alpha = 0.7f)"},{"type":"DELETE","lineNumber":181,"oldContent":"        ) {"}]},{"timestamp":1758191847062,"changes":[{"type":"DELETE","lineNumber":35,"oldContent":"    // Map camera state controlled from parent so refresh can move it"},{"type":"INSERT","lineNumber":36,"content":""},{"type":"INSERT","lineNumber":37,"content":"    // Map camera state controlled from parent so refresh can move it"},{"type":"DELETE","lineNumber":39,"oldContent":""},{"type":"INSERT","lineNumber":59,"content":"            // Pass uploadedWaypoints to GcsMap for blue markers/lines"},{"type":"DELETE","lineNumber":61,"oldContent":"            // Pass uploadedWaypoints to GcsMap for blue markers/lines"},{"type":"INSERT","lineNumber":62,"content":"                waypoints = uploadedWaypoints,"},{"type":"DELETE","lineNumber":64,"oldContent":"                waypoints = uploadedWaypoints,"},{"type":"INSERT","lineNumber":66,"content":"            )"},{"type":"INSERT","lineNumber":67,"content":""},{"type":"DELETE","lineNumber":68,"oldContent":"            )"},{"type":"DELETE","lineNumber":70,"oldContent":""},{"type":"INSERT","lineNumber":73,"content":"            )"},{"type":"DELETE","lineNumber":76,"oldContent":"            )"},{"type":"DELETE","lineNumber":96,"oldContent":"            )"},{"type":"DELETE","lineNumber":97,"oldContent":"        }"},{"type":"DELETE","lineNumber":99,"oldContent":"    }"},{"type":"DELETE","lineNumber":102,"oldContent":""},{"type":"INSERT","lineNumber":100,"content":"            )"},{"type":"INSERT","lineNumber":101,"content":"        }"},{"type":"INSERT","lineNumber":102,"content":"    }"},{"type":"INSERT","lineNumber":103,"content":"}"},{"type":"INSERT","lineNumber":104,"content":""},{"type":"DELETE","lineNumber":107,"oldContent":"}"},{"type":"DELETE","lineNumber":141,"oldContent":"                // Format total distance"},{"type":"DELETE","lineNumber":143,"oldContent":"                val distStr = telemetryState.totalDistanceMeters?.let { dist ->"},{"type":"DELETE","lineNumber":145,"oldContent":"                    if (dist < 1000f) \"%.0f m\".format(dist)"},{"type":"INSERT","lineNumber":144,"content":"                // Format total distance"},{"type":"INSERT","lineNumber":145,"content":"                val distStr = telemetryState.totalDistanceMeters?.let { dist ->"},{"type":"INSERT","lineNumber":146,"content":"                    if (dist < 1000f) \"%.0f m\".format(dist)"},{"type":"INSERT","lineNumber":155,"content":""},{"type":"INSERT","lineNumber":156,"content":"@Composable"},{"type":"DELETE","lineNumber":157,"oldContent":""},{"type":"DELETE","lineNumber":159,"oldContent":"@Composable"},{"type":"MODIFY","lineNumber":173,"content":"        }","oldContent":"        }"},{"type":"DELETE","lineNumber":175,"oldContent":"        FloatingActionButton("},{"type":"DELETE","lineNumber":176,"oldContent":"            Icon(Icons.Default.Map, contentDescription = \"Map Options\", tint = Color.White)"},{"type":"DELETE","lineNumber":179,"oldContent":"        }"},{"type":"DELETE","lineNumber":180,"oldContent":"    }"},{"type":"INSERT","lineNumber":177,"content":"        FloatingActionButton("},{"type":"DELETE","lineNumber":182,"oldContent":"}"},{"type":"INSERT","lineNumber":181,"content":"            Icon(Icons.Default.Map, contentDescription = \"Map Options\", tint = Color.White)"},{"type":"INSERT","lineNumber":182,"content":"        }"},{"type":"INSERT","lineNumber":183,"content":"    }"},{"type":"INSERT","lineNumber":184,"content":"}"}]},{"timestamp":1758191852135,"changes":[{"type":"MODIFY","lineNumber":36,"content":"","oldContent":""},{"type":"DELETE","lineNumber":62,"oldContent":"                waypoints = uploadedWaypoints,"},{"type":"MODIFY","lineNumber":67,"content":"            StatusPanel(","oldContent":"            StatusPanel("},{"type":"DELETE","lineNumber":97,"oldContent":"            )"},{"type":"MODIFY","lineNumber":98,"content":"                }","oldContent":"        }"},{"type":"INSERT","lineNumber":99,"content":"            )"},{"type":"INSERT","lineNumber":100,"content":"        }"},{"type":"DELETE","lineNumber":103,"oldContent":"                }"},{"type":"MODIFY","lineNumber":142,"content":"                Text(\"Time: $timeStr\", color = Color.White)","oldContent":"                // Format total distance"},{"type":"INSERT","lineNumber":143,"content":"                // Format total distance"},{"type":"DELETE","lineNumber":146,"oldContent":"                Text(\"Time: $timeStr\", color = Color.White)"},{"type":"MODIFY","lineNumber":156,"content":"fun FloatingButtons(","oldContent":"fun FloatingButtons("},{"type":"INSERT","lineNumber":171,"content":"            Icon(Icons.Default.Settings, contentDescription = \"Settings\", tint = Color.White)"},{"type":"DELETE","lineNumber":173,"oldContent":"        }"},{"type":"DELETE","lineNumber":175,"oldContent":"        FloatingActionButton("},{"type":"DELETE","lineNumber":178,"oldContent":"            Icon(Icons.Default.Map, contentDescription = \"Map Options\", tint = Color.White)"},{"type":"INSERT","lineNumber":176,"content":"        FloatingActionButton("},{"type":"INSERT","lineNumber":178,"content":"            containerColor = Color.Black.copy(alpha = 0.7f)"},{"type":"INSERT","lineNumber":179,"content":"        ) {"},{"type":"INSERT","lineNumber":180,"content":"            Icon(Icons.Default.Map, contentDescription = \"Map Options\", tint = Color.White)"},{"type":"DELETE","lineNumber":182,"oldContent":"            containerColor = Color.Black.copy(alpha = 0.7f)"},{"type":"DELETE","lineNumber":184,"oldContent":"        ) {"}]},{"timestamp":1758192045811,"changes":[{"type":"INSERT","lineNumber":35,"content":"    val uploadedWaypoints by telemetryViewModel.uploadedWaypoints.collectAsState()"},{"type":"DELETE","lineNumber":36,"oldContent":""},{"type":"INSERT","lineNumber":62,"content":"                waypoints = uploadedWaypoints,"},{"type":"DELETE","lineNumber":66,"oldContent":"            StatusPanel("},{"type":"INSERT","lineNumber":68,"content":"            StatusPanel("},{"type":"INSERT","lineNumber":97,"content":"                        Toast.makeText(context, \"No GPS location available\", Toast.LENGTH_SHORT).show()"},{"type":"INSERT","lineNumber":98,"content":"                    }"},{"type":"DELETE","lineNumber":99,"oldContent":"        }"},{"type":"DELETE","lineNumber":100,"oldContent":"                    }"},{"type":"INSERT","lineNumber":142,"content":"                } ?: \"N/A\""},{"type":"DELETE","lineNumber":143,"oldContent":"                } ?: \"N/A\""},{"type":"DELETE","lineNumber":155,"oldContent":"fun FloatingButtons("},{"type":"INSERT","lineNumber":157,"content":"fun FloatingButtons("},{"type":"DELETE","lineNumber":170,"oldContent":"            Icon(Icons.Default.Settings, contentDescription = \"Settings\", tint = Color.White)"},{"type":"INSERT","lineNumber":172,"content":"            Icon(Icons.Default.Settings, contentDescription = \"Settings\", tint = Color.White)"},{"type":"DELETE","lineNumber":174,"oldContent":"        FloatingActionButton("},{"type":"INSERT","lineNumber":177,"content":"        FloatingActionButton("},{"type":"INSERT","lineNumber":178,"content":"            onClick = { onToggleMapType() },"},{"type":"DELETE","lineNumber":179,"oldContent":"            onClick = { onToggleMapType() },"}]},{"timestamp":1758192058307,"changes":[{"type":"DELETE","lineNumber":62,"oldContent":"                waypoints = uploadedWaypoints,"},{"type":"DELETE","lineNumber":97,"oldContent":"                }"},{"type":"DELETE","lineNumber":99,"oldContent":"            )"},{"type":"INSERT","lineNumber":98,"content":"                }"},{"type":"INSERT","lineNumber":99,"content":"            )"},{"type":"MODIFY","lineNumber":142,"content":"                Text(\"Time: $timeStr\", color = Color.White)","oldContent":"                Text(\"Time: $timeStr\", color = Color.White)"},{"type":"MODIFY","lineNumber":178,"content":"            containerColor = Color.Black.copy(alpha = 0.7f)","oldContent":"            containerColor = Color.Black.copy(alpha = 0.7f)"}]},{"timestamp":1758192482087,"changes":[{"type":"INSERT","lineNumber":62,"content":"                waypoints = uploadedWaypoints,"},{"type":"DELETE","lineNumber":96,"oldContent":"                }"},{"type":"DELETE","lineNumber":98,"oldContent":"            )"},{"type":"INSERT","lineNumber":99,"content":"                }"},{"type":"INSERT","lineNumber":100,"content":"            )"},{"type":"DELETE","lineNumber":141,"oldContent":"                Text(\"Time: $timeStr\", color = Color.White)"},{"type":"INSERT","lineNumber":143,"content":"                Text(\"Time: $timeStr\", color = Color.White)"},{"type":"DELETE","lineNumber":177,"oldContent":"            containerColor = Color.Black.copy(alpha = 0.7f)"},{"type":"INSERT","lineNumber":179,"content":"            containerColor = Color.Black.copy(alpha = 0.7f)"}]},{"timestamp":1758192503316,"changes":[{"type":"INSERT","lineNumber":3,"content":"import androidx.compose.foundation.background"},{"type":"DELETE","lineNumber":8,"oldContent":"import androidx.compose.material3.*"},{"type":"INSERT","lineNumber":10,"content":"import androidx.compose.ui.Alignment"},{"type":"INSERT","lineNumber":15,"content":"import com.example.aerogcsclone.Telemetry.SharedViewModel"},{"type":"DELETE","lineNumber":16,"oldContent":""},{"type":"DELETE","lineNumber":17,"oldContent":"import com.example.aerogcsclone.authentication.AuthViewModel"},{"type":"INSERT","lineNumber":27,"content":"    telemetryViewModel: SharedViewModel,"},{"type":"INSERT","lineNumber":28,"content":"    authViewModel: AuthViewModel,"},{"type":"DELETE","lineNumber":30,"oldContent":""},{"type":"DELETE","lineNumber":31,"oldContent":"    Column("},{"type":"INSERT","lineNumber":48,"content":"        TopNavBar("},{"type":"INSERT","lineNumber":49,"content":"            telemetryState = telemetryState,"},{"type":"INSERT","lineNumber":50,"content":"            authViewModel = authViewModel,"},{"type":"INSERT","lineNumber":51,"content":"            navController = navController"},{"type":"DELETE","lineNumber":55,"oldContent":"            // âœ… Pass telemetryState to GcsMap"},{"type":"DELETE","lineNumber":56,"oldContent":"//"},{"type":"DELETE","lineNumber":57,"oldContent":"            GcsMap(telemetryState = telemetryState)"},{"type":"DELETE","lineNumber":58,"oldContent":""},{"type":"MODIFY","lineNumber":99,"content":"                }","oldContent":"                }"},{"type":"INSERT","lineNumber":114,"content":"        color = Color.Black.copy(alpha = 0.6f),"},{"type":"INSERT","lineNumber":115,"content":"        shape = RoundedCornerShape(8.dp)"},{"type":"INSERT","lineNumber":116,"content":"    ) {"},{"type":"INSERT","lineNumber":117,"content":"        Column("},{"type":"INSERT","lineNumber":118,"content":"            modifier = Modifier.padding(10.dp),"},{"type":"INSERT","lineNumber":119,"content":"            verticalArrangement = Arrangement.spacedBy(8.dp)"},{"type":"INSERT","lineNumber":120,"content":"        ) {"},{"type":"INSERT","lineNumber":121,"content":"            Row("},{"type":"INSERT","lineNumber":122,"content":"                horizontalArrangement = Arrangement.SpaceBetween,"},{"type":"INSERT","lineNumber":123,"content":"                modifier = Modifier.fillMaxWidth()"},{"type":"INSERT","lineNumber":124,"content":"            ) {"},{"type":"INSERT","lineNumber":125,"content":"                Text(\"Alt: ${telemetryState.altitudeRelative ?: \"N/A\"}\", color = Color.White)"},{"type":"INSERT","lineNumber":126,"content":"                Text(\"Speed: ${telemetryState.groundspeed ?: \"N/A\"}\", color = Color.White)"},{"type":"INSERT","lineNumber":127,"content":"                Text(\"Area: N/A\", color = Color.White)"},{"type":"INSERT","lineNumber":129,"content":"            }"},{"type":"INSERT","lineNumber":131,"content":"            Row("},{"type":"INSERT","lineNumber":133,"content":"                modifier = Modifier.fillMaxWidth()"},{"type":"DELETE","lineNumber":118,"oldContent":"                Text(\"Time: N/A\", color = Color.White)"},{"type":"DELETE","lineNumber":119,"oldContent":"                Text(\"Consumed: N/A\", color = Color.White)"},{"type":"DELETE","lineNumber":120,"oldContent":"        }"},{"type":"DELETE","lineNumber":121,"oldContent":"    }"},{"type":"DELETE","lineNumber":122,"oldContent":"}"},{"type":"DELETE","lineNumber":123,"oldContent":""},{"type":"DELETE","lineNumber":124,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":125,"oldContent":"fun FloatingButtons(modifier: Modifier = Modifier) {"},{"type":"DELETE","lineNumber":126,"oldContent":"    Column("},{"type":"DELETE","lineNumber":127,"oldContent":"        modifier = modifier,"},{"type":"DELETE","lineNumber":128,"oldContent":"        verticalArrangement = Arrangement.spacedBy(12.dp),"},{"type":"DELETE","lineNumber":129,"oldContent":"            }"},{"type":"DELETE","lineNumber":130,"oldContent":"    ) {"},{"type":"DELETE","lineNumber":131,"oldContent":"        FloatingActionButton(onClick = { }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"DELETE","lineNumber":132,"oldContent":"            Icon(Icons.Default.PlayArrow, contentDescription = \"Start\", tint = Color.White)"},{"type":"DELETE","lineNumber":133,"oldContent":"        }"},{"type":"DELETE","lineNumber":134,"oldContent":"        FloatingActionButton(onClick = { }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"MODIFY","lineNumber":135,"content":"                Text(\"Obs Alt: N/A\", color = Color.White)","oldContent":"            Icon(Icons.Default.Settings, contentDescription = \"Settings\", tint = Color.White)"}]},{"timestamp":1758192506807,"changes":[{"type":"DELETE","lineNumber":4,"oldContent":"import androidx.compose.foundation.background"},{"type":"INSERT","lineNumber":8,"content":"import androidx.compose.material3.*"},{"type":"DELETE","lineNumber":11,"oldContent":"import androidx.compose.ui.Alignment"},{"type":"MODIFY","lineNumber":16,"content":"import com.example.aerogcsclone.Telemetry.TelemetryState","oldContent":"import com.example.aerogcsclone.Telemetry.SharedViewModel"},{"type":"INSERT","lineNumber":17,"content":"import com.example.aerogcsclone.authentication.AuthViewModel"},{"type":"DELETE","lineNumber":28,"oldContent":"    telemetryViewModel: SharedViewModel,"},{"type":"MODIFY","lineNumber":30,"content":") {","oldContent":"    authViewModel: AuthViewModel,"},{"type":"INSERT","lineNumber":31,"content":"    val telemetryState by telemetryViewModel.telemetryState.collectAsState()"},{"type":"DELETE","lineNumber":49,"oldContent":"        TopNavBar("},{"type":"DELETE","lineNumber":51,"oldContent":"            telemetryState = telemetryState,"},{"type":"DELETE","lineNumber":53,"oldContent":"            authViewModel = authViewModel,"},{"type":"MODIFY","lineNumber":55,"content":"            modifier = Modifier","oldContent":"            navController = navController"},{"type":"INSERT","lineNumber":56,"content":"                .weight(1f)"},{"type":"INSERT","lineNumber":57,"content":"                .fillMaxWidth()"},{"type":"INSERT","lineNumber":58,"content":"        ) {"},{"type":"DELETE","lineNumber":62,"oldContent":"                waypoints = uploadedWaypoints,"},{"type":"INSERT","lineNumber":97,"content":"                    }"},{"type":"DELETE","lineNumber":99,"oldContent":"                }"},{"type":"DELETE","lineNumber":115,"oldContent":"        color = Color.Black.copy(alpha = 0.6f),"},{"type":"DELETE","lineNumber":117,"oldContent":"        shape = RoundedCornerShape(8.dp)"},{"type":"DELETE","lineNumber":119,"oldContent":"    ) {"},{"type":"DELETE","lineNumber":121,"oldContent":"        Column("},{"type":"INSERT","lineNumber":127,"content":"                Text(\"Flow: N/A\", color = Color.White)"},{"type":"INSERT","lineNumber":129,"content":"            Spacer(modifier = Modifier.height(8.dp))"},{"type":"INSERT","lineNumber":131,"content":"                horizontalArrangement = Arrangement.SpaceBetween,"},{"type":"INSERT","lineNumber":133,"content":"            ) {"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uimain/PlanScreen.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uimain/PlanScreen.kt","baseContent":"package com.example.aerogcsclone.uimain\n\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.FloatingActionButton\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Modifier\nimport androidx.navigation.NavHostController\nimport com.example.aerogcsclone.Telemetry.SharedViewModel\nimport com.example.aerogcsclone.authentication.AuthViewModel\n\n@Composable\nfun PlanScreen(\n    telemetryViewModel: SharedViewModel,\n    authViewModel: AuthViewModel,\n    navController: NavHostController\n) {\n    val telemetryState by telemetryViewModel.telemetryState.collectAsState()\n\n    Scaffold(\n        floatingActionButton = {\n            FloatingActionButton(onClick = { /* TODO */ }) {\n                Text(\"Create Plan\")\n            }\n        }\n    ) { paddingValues ->\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(paddingValues)\n        ) {\n            TopNavBar(\n                telemetryState = telemetryState,\n                authViewModel = authViewModel,\n                navController = navController\n            )\n            GcsMap(telemetryState = telemetryState)\n        }\n    }\n}","baseTimestamp":1757650088623,"deltas":[{"timestamp":1758166955436,"changes":[{"type":"INSERT","lineNumber":0,"content":"// Kotlin"},{"type":"INSERT","lineNumber":27,"content":"import com.google.android.gms.maps.CameraUpdateFactory"},{"type":"DELETE","lineNumber":58,"oldContent":"            cameraPositionState.move(com.google.android.gms.maps.CameraUpdateFactory.newLatLngZoom(LatLng(lat, lon), 16f))"},{"type":"INSERT","lineNumber":60,"content":"            cameraPositionState.move(CameraUpdateFactory.newLatLngZoom(LatLng(lat, lon), 16f))"},{"type":"DELETE","lineNumber":68,"oldContent":"    fun buildMissionItemFromLatLng(latLng: LatLng, seq: Int, command: MavEnumValue<MavCmd>, alt: Float = 10f): MissionItemInt {"},{"type":"INSERT","lineNumber":70,"content":"    fun buildMissionItemFromLatLng("},{"type":"INSERT","lineNumber":71,"content":"        latLng: LatLng,"},{"type":"INSERT","lineNumber":72,"content":"        seq: Int,"},{"type":"INSERT","lineNumber":73,"content":"        isTakeoff: Boolean = false,"},{"type":"INSERT","lineNumber":74,"content":"        alt: Float = 10f"},{"type":"INSERT","lineNumber":75,"content":"    ): MissionItemInt {"},{"type":"DELETE","lineNumber":74,"oldContent":"            command = command,"},{"type":"DELETE","lineNumber":75,"oldContent":"            current = 0u,"},{"type":"INSERT","lineNumber":81,"content":"            command = if (isTakeoff) MavEnumValue.of(MavCmd.NAV_TAKEOFF) else MavEnumValue.of("},{"type":"INSERT","lineNumber":82,"content":"                MavCmd.NAV_WAYPOINT"},{"type":"INSERT","lineNumber":83,"content":"            ),"},{"type":"INSERT","lineNumber":84,"content":"            current = 0u, // ensure 0 for compatibility"},{"type":"DELETE","lineNumber":87,"oldContent":"    // Handler when user taps on map: add marker only"},{"type":"INSERT","lineNumber":96,"content":"    // Handler when user taps on map: add marker and mission item"},{"type":"INSERT","lineNumber":98,"content":"        val seq = waypoints.size"},{"type":"INSERT","lineNumber":99,"content":"        val isTakeoff = seq == 0"},{"type":"INSERT","lineNumber":100,"content":"        val item = buildMissionItemFromLatLng(latLng, seq, isTakeoff)"},{"type":"INSERT","lineNumber":102,"content":"        waypoints.add(item)"},{"type":"DELETE","lineNumber":108,"oldContent":"                            val item = buildMissionItemFromLatLng(center, seq, MavEnumValue.of(MavCmd.NAV_WAYPOINT))"},{"type":"INSERT","lineNumber":121,"content":"                            val item = buildMissionItemFromLatLng(center, seq, isTakeoff)"},{"type":"INSERT","lineNumber":144,"content":"                    }"},{"type":"DELETE","lineNumber":132,"oldContent":""},{"type":"DELETE","lineNumber":154,"oldContent":"            // Map background - pass points and onMapClick callback, camera state, and mapType"},{"type":"INSERT","lineNumber":167,"content":"            // Map background"},{"type":"DELETE","lineNumber":161,"oldContent":"                autoCenter = false // do not force camera while planning"},{"type":"INSERT","lineNumber":174,"content":"                autoCenter = false // do not force camera while planning (user pans)"},{"type":"DELETE","lineNumber":164,"oldContent":"            // Small connection / FCU status indicator to help debugging"},{"type":"DELETE","lineNumber":165,"oldContent":"            Column(modifier = Modifier"},{"type":"DELETE","lineNumber":166,"oldContent":"                .align(Alignment.TopEnd)"},{"type":"DELETE","lineNumber":167,"oldContent":"                .padding(12.dp)) {"},{"type":"DELETE","lineNumber":168,"oldContent":"                Text(\"Connected: ${telemetryState.connected}\", style = MaterialTheme.typography.bodySmall, color = MaterialTheme.colorScheme.onSurface)"},{"type":"DELETE","lineNumber":169,"oldContent":"                Text(\"FCU detected: ${telemetryState.fcuDetected}\", style = MaterialTheme.typography.bodySmall, color = MaterialTheme.colorScheme.onSurface)"},{"type":"INSERT","lineNumber":177,"content":"            // Small connection / FCU status indicator"},{"type":"INSERT","lineNumber":178,"content":"            Column("},{"type":"INSERT","lineNumber":179,"content":"                modifier = Modifier"},{"type":"INSERT","lineNumber":180,"content":"                    .align(Alignment.TopEnd)"},{"type":"INSERT","lineNumber":181,"content":"                    .padding(12.dp)"},{"type":"INSERT","lineNumber":182,"content":"            ) {"},{"type":"INSERT","lineNumber":183,"content":"                Text("},{"type":"INSERT","lineNumber":184,"content":"                    \"Connected: ${telemetryState.connected}\","},{"type":"INSERT","lineNumber":185,"content":"                    style = MaterialTheme.typography.bodySmall,"},{"type":"INSERT","lineNumber":186,"content":"                    color = MaterialTheme.colorScheme.onSurface"},{"type":"INSERT","lineNumber":187,"content":"                )"},{"type":"INSERT","lineNumber":188,"content":"                Text("},{"type":"INSERT","lineNumber":189,"content":"                    \"FCU detected: ${telemetryState.fcuDetected}\","},{"type":"INSERT","lineNumber":190,"content":"                    style = MaterialTheme.typography.bodySmall,"},{"type":"INSERT","lineNumber":191,"content":"                    color = MaterialTheme.colorScheme.onSurface"},{"type":"INSERT","lineNumber":192,"content":"                )"},{"type":"DELETE","lineNumber":172,"oldContent":"            // Crosshair overlay at center (small so it doesn't cover the whole map)"},{"type":"DELETE","lineNumber":173,"oldContent":"            Box(modifier = Modifier.size(36.dp).align(Alignment.Center), contentAlignment = Alignment.Center) {"},{"type":"DELETE","lineNumber":174,"oldContent":"                Icon(Icons.Default.Add, contentDescription = \"Crosshair\", tint = MaterialTheme.colorScheme.primary, modifier = Modifier.size(28.dp))"},{"type":"INSERT","lineNumber":195,"content":"            // Crosshair overlay"},{"type":"INSERT","lineNumber":196,"content":"            Box("},{"type":"INSERT","lineNumber":197,"content":"                modifier = Modifier"},{"type":"INSERT","lineNumber":198,"content":"                    .size(36.dp)"},{"type":"INSERT","lineNumber":199,"content":"                    .align(Alignment.Center),"},{"type":"INSERT","lineNumber":200,"content":"                contentAlignment = Alignment.Center"},{"type":"INSERT","lineNumber":201,"content":"            ) {"},{"type":"INSERT","lineNumber":202,"content":"                Icon("},{"type":"INSERT","lineNumber":203,"content":"                    Icons.Default.Add,"},{"type":"INSERT","lineNumber":204,"content":"                    contentDescription = \"Crosshair\","},{"type":"INSERT","lineNumber":205,"content":"                    tint = MaterialTheme.colorScheme.primary,"},{"type":"INSERT","lineNumber":206,"content":"                    modifier = Modifier.size(28.dp)"},{"type":"INSERT","lineNumber":207,"content":"                )"},{"type":"INSERT","lineNumber":217,"content":"                // Refresh button (moved here above Arm)"},{"type":"INSERT","lineNumber":219,"content":"                    onClick = {"},{"type":"INSERT","lineNumber":220,"content":"                        val lat = telemetryState.latitude"},{"type":"INSERT","lineNumber":221,"content":"                        val lon = telemetryState.longitude"},{"type":"INSERT","lineNumber":222,"content":"                        if (lat != null && lon != null) {"},{"type":"INSERT","lineNumber":223,"content":"                            cameraPositionState.move("},{"type":"INSERT","lineNumber":224,"content":"                                CameraUpdateFactory.newLatLngZoom("},{"type":"INSERT","lineNumber":225,"content":"                                    LatLng(lat, lon),"},{"type":"INSERT","lineNumber":226,"content":"                                    16f"},{"type":"INSERT","lineNumber":227,"content":"                                )"},{"type":"INSERT","lineNumber":228,"content":"                            )"},{"type":"INSERT","lineNumber":229,"content":"                        } else {"},{"type":"INSERT","lineNumber":230,"content":"                            Toast.makeText("},{"type":"INSERT","lineNumber":231,"content":"                                context,"},{"type":"INSERT","lineNumber":232,"content":"                                \"No GPS location available\","},{"type":"INSERT","lineNumber":233,"content":"                                Toast.LENGTH_SHORT"},{"type":"INSERT","lineNumber":234,"content":"                            ).show()"},{"type":"INSERT","lineNumber":235,"content":"                        }"},{"type":"INSERT","lineNumber":236,"content":"                    },"},{"type":"INSERT","lineNumber":237,"content":"                    modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":238,"content":"                ) {"},{"type":"INSERT","lineNumber":239,"content":"                    Icon(Icons.Default.Refresh, contentDescription = \"Recenter Map\")"},{"type":"INSERT","lineNumber":240,"content":"                }"},{"type":"INSERT","lineNumber":241,"content":""},{"type":"INSERT","lineNumber":242,"content":"                // Arm button"},{"type":"INSERT","lineNumber":243,"content":"                FloatingActionButton("},{"type":"DELETE","lineNumber":192,"oldContent":"                    onClick = { mapType = if (mapType == MapType.SATELLITE) MapType.NORMAL else MapType.SATELLITE },"},{"type":"INSERT","lineNumber":251,"content":"                    onClick = {"},{"type":"INSERT","lineNumber":252,"content":"                        mapType ="},{"type":"INSERT","lineNumber":253,"content":"                            if (mapType == MapType.SATELLITE) MapType.NORMAL else MapType.SATELLITE"},{"type":"INSERT","lineNumber":254,"content":"                    },"},{"type":"DELETE","lineNumber":202,"oldContent":"                }"},{"type":"DELETE","lineNumber":204,"oldContent":""},{"type":"INSERT","lineNumber":265,"content":"                }"},{"type":"INSERT","lineNumber":267,"content":""},{"type":"DELETE","lineNumber":207,"oldContent":"            Column(modifier = Modifier.align(Alignment.BottomCenter).padding(12.dp)) {"},{"type":"DELETE","lineNumber":208,"oldContent":"                    onClick = {"},{"type":"INSERT","lineNumber":269,"content":"            Column("},{"type":"INSERT","lineNumber":270,"content":"                modifier = Modifier"},{"type":"INSERT","lineNumber":271,"content":"                    .align(Alignment.BottomCenter)"},{"type":"INSERT","lineNumber":272,"content":"                    .padding(12.dp)"},{"type":"INSERT","lineNumber":273,"content":"            ) {"},{"type":"DELETE","lineNumber":210,"oldContent":"                        // Build mission item list: home (waypoint), takeoff, user waypoints (last is LAND)"},{"type":"DELETE","lineNumber":211,"oldContent":"                        val missionItems = mutableListOf<MissionItemInt>()"},{"type":"DELETE","lineNumber":212,"oldContent":"                        val userPoints = points.toList()"},{"type":"DELETE","lineNumber":213,"oldContent":"                        val homeLat = telemetryState.latitude ?: 0.0"},{"type":"DELETE","lineNumber":214,"oldContent":"                        val homeLon = telemetryState.longitude ?: 0.0"},{"type":"DELETE","lineNumber":215,"oldContent":"                        val homeAlt = telemetryState.altitudeRelative ?: 10f"},{"type":"DELETE","lineNumber":216,"oldContent":"                        val takeoffAlt = 10f // Default takeoff altitude"},{"type":"DELETE","lineNumber":217,"oldContent":"                        // Sequence 0: Home waypoint"},{"type":"DELETE","lineNumber":218,"oldContent":"                        missionItems.add("},{"type":"DELETE","lineNumber":219,"oldContent":"                            buildMissionItemFromLatLng("},{"type":"DELETE","lineNumber":220,"oldContent":"                                LatLng(homeLat, homeLon),"},{"type":"DELETE","lineNumber":221,"oldContent":"                                0,"},{"type":"DELETE","lineNumber":222,"oldContent":"                                MavEnumValue.of(MavCmd.NAV_WAYPOINT),"},{"type":"DELETE","lineNumber":223,"oldContent":"                                homeAlt"},{"type":"DELETE","lineNumber":224,"oldContent":"                            ).copy(current = 1u) // current=true for first item"},{"type":"DELETE","lineNumber":225,"oldContent":"                        )"},{"type":"DELETE","lineNumber":226,"oldContent":"                        // Sequence 1: Takeoff"},{"type":"DELETE","lineNumber":227,"oldContent":"                        missionItems.add("},{"type":"DELETE","lineNumber":228,"oldContent":"                            buildMissionItemFromLatLng("},{"type":"DELETE","lineNumber":229,"oldContent":"                                LatLng(homeLat, homeLon),"},{"type":"DELETE","lineNumber":230,"oldContent":"                                1,"},{"type":"DELETE","lineNumber":231,"oldContent":"                                MavEnumValue.of(MavCmd.NAV_TAKEOFF),"},{"type":"DELETE","lineNumber":232,"oldContent":"                        // Sequence 2+: User waypoints (last is LAND)"},{"type":"DELETE","lineNumber":233,"oldContent":"                        for (i in userPoints.indices) {"},{"type":"DELETE","lineNumber":234,"oldContent":"                                takeoffAlt"},{"type":"DELETE","lineNumber":235,"oldContent":"                            val isLast = i == userPoints.lastIndex"},{"type":"DELETE","lineNumber":236,"oldContent":"                            val cmd = if (isLast) MavEnumValue.of(MavCmd.NAV_LAND) else MavEnumValue.of(MavCmd.NAV_WAYPOINT)"},{"type":"DELETE","lineNumber":237,"oldContent":"                            ).copy(current = 0u) // current=false"},{"type":"DELETE","lineNumber":238,"oldContent":"                            missionItems.add("},{"type":"DELETE","lineNumber":239,"oldContent":"                                buildMissionItemFromLatLng("},{"type":"DELETE","lineNumber":240,"oldContent":"                        )"},{"type":"DELETE","lineNumber":241,"oldContent":"                                    userPoints[i],"},{"type":"DELETE","lineNumber":242,"oldContent":"                        }"},{"type":"DELETE","lineNumber":243,"oldContent":"                                    i + 2,"},{"type":"DELETE","lineNumber":244,"oldContent":"                                    cmd,"},{"type":"DELETE","lineNumber":245,"oldContent":"                        telemetryViewModel.uploadMission(missionItems) { success, error ->"},{"type":"DELETE","lineNumber":246,"oldContent":"                                    homeAlt // Use homeAlt for all waypoints"},{"type":"INSERT","lineNumber":275,"content":"                    onClick = {"},{"type":"INSERT","lineNumber":276,"content":"                        telemetryViewModel.uploadMission(waypoints) { success, error ->"},{"type":"DELETE","lineNumber":248,"oldContent":"                                ).copy(current = 0u) // current=false"},{"type":"DELETE","lineNumber":249,"oldContent":"                            )"},{"type":"INSERT","lineNumber":278,"content":"                                Toast.makeText(context, \"Mission uploaded\", Toast.LENGTH_SHORT)"},{"type":"INSERT","lineNumber":279,"content":"                                    .show()"},{"type":"DELETE","lineNumber":251,"oldContent":"                                navController.navigate(Screen.Main.route) { popUpTo(Screen.Plan.route) { inclusive = true } }"},{"type":"INSERT","lineNumber":281,"content":"                                navController.navigate(Screen.Main.route) {"},{"type":"INSERT","lineNumber":282,"content":"                                    popUpTo(Screen.Plan.route) { inclusive = true }"},{"type":"INSERT","lineNumber":283,"content":"                                }"},{"type":"DELETE","lineNumber":253,"oldContent":"                                Toast.makeText(context, \"Mission uploaded\", Toast.LENGTH_SHORT).show()"},{"type":"DELETE","lineNumber":254,"oldContent":"                                Toast.makeText(context, error ?: \"Mission upload failed\", Toast.LENGTH_SHORT).show()"},{"type":"INSERT","lineNumber":285,"content":"                                Toast.makeText("},{"type":"INSERT","lineNumber":286,"content":"                                    context,"},{"type":"INSERT","lineNumber":287,"content":"                                    error ?: \"Mission upload failed\","},{"type":"INSERT","lineNumber":288,"content":"                                    Toast.LENGTH_SHORT"},{"type":"INSERT","lineNumber":289,"content":"                                ).show()"},{"type":"DELETE","lineNumber":258,"oldContent":"                    enabled = points.isNotEmpty(),"},{"type":"INSERT","lineNumber":293,"content":"                    enabled = waypoints.isNotEmpty(),"},{"type":"DELETE","lineNumber":261,"oldContent":"                    Text(\"Upload Mission (${points.size})\")"},{"type":"DELETE","lineNumber":262,"oldContent":""},{"type":"INSERT","lineNumber":296,"content":"                    Text(\"Upload Mission (${waypoints.size})\")"},{"type":"INSERT","lineNumber":298,"content":""},{"type":"DELETE","lineNumber":265,"oldContent":"                    }"},{"type":"DELETE","lineNumber":268,"oldContent":"                    }"},{"type":"DELETE","lineNumber":269,"oldContent":"                    Button(onClick = { telemetryViewModel.readMissionFromFcu(); Toast.makeText(context, \"Requested mission readback (check logs)\", Toast.LENGTH_SHORT).show() }) {"},{"type":"DELETE","lineNumber":270,"oldContent":""},{"type":"INSERT","lineNumber":302,"content":"                    Button(onClick = {"},{"type":"INSERT","lineNumber":303,"content":"                        telemetryViewModel.readMissionFromFcu()"},{"type":"INSERT","lineNumber":304,"content":"                        Toast.makeText("},{"type":"INSERT","lineNumber":305,"content":"                            context,"},{"type":"INSERT","lineNumber":306,"content":"                            \"Requested mission readback (check logs)\","},{"type":"INSERT","lineNumber":307,"content":"                            Toast.LENGTH_SHORT"},{"type":"INSERT","lineNumber":308,"content":"                        ).show()"},{"type":"INSERT","lineNumber":309,"content":"                    }) {"},{"type":"DELETE","lineNumber":272,"oldContent":""},{"type":"DELETE","lineNumber":273,"oldContent":"                    Button(onClick = { telemetryViewModel.startMission { s, e -> Toast.makeText(context, if (s) \"Start sent\" else (e ?: \"Start failed\"), Toast.LENGTH_SHORT).show() } }) {"},{"type":"INSERT","lineNumber":311,"content":"                    }"},{"type":"INSERT","lineNumber":312,"content":"                    Button(onClick = {"},{"type":"INSERT","lineNumber":313,"content":"                        telemetryViewModel.startMission { s, e ->"},{"type":"INSERT","lineNumber":314,"content":"                            Toast.makeText("},{"type":"INSERT","lineNumber":315,"content":"                                context,"},{"type":"INSERT","lineNumber":316,"content":"                                if (s) \"Start sent\" else (e ?: \"Start failed\"),"},{"type":"INSERT","lineNumber":317,"content":"                                Toast.LENGTH_SHORT"},{"type":"INSERT","lineNumber":318,"content":"                            ).show()"},{"type":"INSERT","lineNumber":319,"content":"                        }"},{"type":"INSERT","lineNumber":320,"content":"                    }) {"},{"type":"INSERT","lineNumber":322,"content":"                    }"},{"type":"INSERT","lineNumber":324,"content":""},{"type":"INSERT","lineNumber":326,"content":""},{"type":"DELETE","lineNumber":278,"oldContent":"                Column(modifier = Modifier.fillMaxWidth().background(MaterialTheme.colorScheme.surfaceVariant).padding(8.dp)) {"},{"type":"INSERT","lineNumber":328,"content":"                Column("},{"type":"INSERT","lineNumber":329,"content":"                    modifier = Modifier"},{"type":"INSERT","lineNumber":330,"content":"                        .fillMaxWidth()"},{"type":"INSERT","lineNumber":331,"content":"                        .background(MaterialTheme.colorScheme.surfaceVariant)"},{"type":"INSERT","lineNumber":332,"content":"                        .padding(8.dp)"},{"type":"INSERT","lineNumber":333,"content":"                ) {"},{"type":"DELETE","lineNumber":280,"oldContent":"                    points.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":281,"oldContent":"                        Text(\"#${idx + 1}: Lat=${wp.latitude}, Lon=${wp.longitude}\")"},{"type":"INSERT","lineNumber":335,"content":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"INSERT","lineNumber":336,"content":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"}]},{"timestamp":1758167992676,"changes":[{"type":"MODIFY","lineNumber":13,"content":"import com.example.aerogcsclone.Telemetry.SharedViewModel","oldContent":"import androidx.compose.ui.Modifier"},{"type":"MODIFY","lineNumber":28,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":61,"content":"            centeredOnce = true","oldContent":"            centeredOnce = true"},{"type":"DELETE","lineNumber":70,"oldContent":"        return MissionItemInt("},{"type":"DELETE","lineNumber":72,"oldContent":"            targetSystem = 0u,"},{"type":"DELETE","lineNumber":74,"oldContent":"            targetComponent = 0u,"},{"type":"DELETE","lineNumber":76,"oldContent":"            seq = seq.toUShort(),"},{"type":"DELETE","lineNumber":78,"oldContent":"            frame = MavEnumValue.of(MavFrame.GLOBAL_RELATIVE_ALT_INT),"},{"type":"INSERT","lineNumber":76,"content":"        return MissionItemInt("},{"type":"INSERT","lineNumber":77,"content":"            targetSystem = 0u,"},{"type":"INSERT","lineNumber":78,"content":"            targetComponent = 0u,"},{"type":"INSERT","lineNumber":79,"content":"            seq = seq.toUShort(),"},{"type":"INSERT","lineNumber":80,"content":"            frame = MavEnumValue.of(MavFrame.GLOBAL_RELATIVE_ALT_INT),"},{"type":"INSERT","lineNumber":81,"content":"            command = if (isTakeoff) MavEnumValue.of(MavCmd.NAV_TAKEOFF) else MavEnumValue.of("},{"type":"INSERT","lineNumber":82,"content":"                MavCmd.NAV_WAYPOINT"},{"type":"INSERT","lineNumber":83,"content":"            ),"},{"type":"INSERT","lineNumber":84,"content":"            current = 0u, // ensure 0 for compatibility"},{"type":"DELETE","lineNumber":86,"oldContent":"            command = if (isTakeoff) MavEnumValue.of(MavCmd.NAV_TAKEOFF) else MavEnumValue.of("},{"type":"DELETE","lineNumber":88,"oldContent":"                MavCmd.NAV_WAYPOINT"},{"type":"DELETE","lineNumber":90,"oldContent":"            ),"},{"type":"DELETE","lineNumber":92,"oldContent":"            current = 0u, // ensure 0 for compatibility"},{"type":"INSERT","lineNumber":96,"content":"    // Handler when user taps on map: add marker and mission item"},{"type":"INSERT","lineNumber":98,"content":"        val seq = waypoints.size"},{"type":"INSERT","lineNumber":99,"content":"        val isTakeoff = seq == 0"},{"type":"INSERT","lineNumber":100,"content":"        val item = buildMissionItemFromLatLng(latLng, seq, isTakeoff)"},{"type":"INSERT","lineNumber":102,"content":"        waypoints.add(item)"},{"type":"DELETE","lineNumber":104,"oldContent":"    // Handler when user taps on map: add marker and mission item"},{"type":"DELETE","lineNumber":107,"oldContent":"        val seq = waypoints.size"},{"type":"DELETE","lineNumber":109,"oldContent":"        val isTakeoff = seq == 0"},{"type":"DELETE","lineNumber":111,"oldContent":"        val item = buildMissionItemFromLatLng(latLng, seq, isTakeoff)"},{"type":"DELETE","lineNumber":114,"oldContent":"        waypoints.add(item)"},{"type":"INSERT","lineNumber":121,"content":"                            val item = buildMissionItemFromLatLng(center, seq, isTakeoff)"},{"type":"DELETE","lineNumber":133,"oldContent":"                            val item = buildMissionItemFromLatLng(center, seq, isTakeoff)"},{"type":"INSERT","lineNumber":144,"content":"                    }"},{"type":"DELETE","lineNumber":156,"oldContent":"                    }"},{"type":"INSERT","lineNumber":167,"content":"            // Map background"},{"type":"INSERT","lineNumber":174,"content":"                autoCenter = false // do not force camera while planning (user pans)"},{"type":"DELETE","lineNumber":175,"oldContent":"            // Map background"},{"type":"DELETE","lineNumber":176,"oldContent":"            }"},{"type":"DELETE","lineNumber":177,"oldContent":""},{"type":"DELETE","lineNumber":178,"oldContent":"                autoCenter = false // do not force camera while planning (user pans)"},{"type":"DELETE","lineNumber":179,"oldContent":"            }"},{"type":"DELETE","lineNumber":180,"oldContent":""},{"type":"DELETE","lineNumber":182,"oldContent":"            // Left-side floating buttons (below TopNavBar)"},{"type":"DELETE","lineNumber":184,"oldContent":"            Column("},{"type":"DELETE","lineNumber":186,"oldContent":"                modifier = Modifier"},{"type":"DELETE","lineNumber":188,"oldContent":"                    .align(Alignment.TopStart)"},{"type":"DELETE","lineNumber":190,"oldContent":"                    .padding(start = 16.dp, top = 72.dp),"},{"type":"DELETE","lineNumber":192,"oldContent":"                verticalArrangement = Arrangement.spacedBy(12.dp)"},{"type":"DELETE","lineNumber":194,"oldContent":"            ) {"},{"type":"DELETE","lineNumber":196,"oldContent":"                FloatingActionButton("},{"type":"DELETE","lineNumber":198,"oldContent":"                    onClick = { telemetryViewModel.arm() },"},{"type":"DELETE","lineNumber":200,"oldContent":"                    modifier = Modifier.size(56.dp)"},{"type":"DELETE","lineNumber":202,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":204,"oldContent":"                    Icon(Icons.Default.FlightTakeoff, contentDescription = \"Arm\")"},{"type":"DELETE","lineNumber":206,"oldContent":"                }"},{"type":"DELETE","lineNumber":208,"oldContent":""},{"type":"DELETE","lineNumber":210,"oldContent":"                FloatingActionButton("},{"type":"DELETE","lineNumber":212,"oldContent":"                    modifier = Modifier.size(56.dp)"},{"type":"DELETE","lineNumber":213,"oldContent":"                ) {"},{"type":"INSERT","lineNumber":193,"content":"            }"},{"type":"INSERT","lineNumber":194,"content":""},{"type":"DELETE","lineNumber":215,"oldContent":"                    Icon(Icons.Default.Map, contentDescription = \"Toggle Map Type\")"},{"type":"DELETE","lineNumber":217,"oldContent":"                }"},{"type":"DELETE","lineNumber":219,"oldContent":""},{"type":"DELETE","lineNumber":221,"oldContent":"                FloatingActionButton("},{"type":"DELETE","lineNumber":223,"oldContent":"                    onClick = { /* TODO: handle Change Mode action */ },"},{"type":"DELETE","lineNumber":225,"oldContent":"                    modifier = Modifier.size(56.dp)"},{"type":"DELETE","lineNumber":227,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":230,"oldContent":"                    Icon(Icons.Default.Build, contentDescription = \"Change Mode\")"},{"type":"DELETE","lineNumber":233,"oldContent":"            }"},{"type":"DELETE","lineNumber":235,"oldContent":"            // Bottom panel: upload and list"},{"type":"DELETE","lineNumber":237,"oldContent":"                Button("},{"type":"INSERT","lineNumber":208,"content":"            }"},{"type":"INSERT","lineNumber":209,"content":""},{"type":"INSERT","lineNumber":210,"content":"            // Left-side floating buttons (below TopNavBar)"},{"type":"INSERT","lineNumber":211,"content":"            Column("},{"type":"INSERT","lineNumber":212,"content":"                modifier = Modifier"},{"type":"INSERT","lineNumber":213,"content":"                    .align(Alignment.TopStart)"},{"type":"INSERT","lineNumber":214,"content":"                    .padding(start = 16.dp, top = 72.dp),"},{"type":"INSERT","lineNumber":215,"content":"                verticalArrangement = Arrangement.spacedBy(12.dp)"},{"type":"INSERT","lineNumber":216,"content":"            ) {"},{"type":"INSERT","lineNumber":218,"content":"                FloatingActionButton("},{"type":"DELETE","lineNumber":264,"oldContent":"                            if (success) {"},{"type":"DELETE","lineNumber":265,"oldContent":"                                coroutineScope.launch { telemetryViewModel.readMissionFromFcu() }"},{"type":"INSERT","lineNumber":244,"content":"                    onClick = { telemetryViewModel.arm() },"},{"type":"INSERT","lineNumber":245,"content":"                    modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":246,"content":"                ) {"},{"type":"INSERT","lineNumber":247,"content":"                    Icon(Icons.Default.FlightTakeoff, contentDescription = \"Arm\")"},{"type":"INSERT","lineNumber":248,"content":"                }"},{"type":"INSERT","lineNumber":249,"content":""},{"type":"INSERT","lineNumber":250,"content":"                FloatingActionButton("},{"type":"DELETE","lineNumber":268,"oldContent":"                            } else {"},{"type":"DELETE","lineNumber":271,"oldContent":"                            }"},{"type":"DELETE","lineNumber":272,"oldContent":"                        }"},{"type":"DELETE","lineNumber":273,"oldContent":"                    },"},{"type":"DELETE","lineNumber":274,"oldContent":"                    modifier = Modifier.fillMaxWidth()"},{"type":"INSERT","lineNumber":255,"content":"                    modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":257,"content":"                    Icon(Icons.Default.Map, contentDescription = \"Toggle Map Type\")"},{"type":"DELETE","lineNumber":277,"oldContent":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"INSERT","lineNumber":259,"content":""},{"type":"INSERT","lineNumber":260,"content":"                FloatingActionButton("},{"type":"INSERT","lineNumber":261,"content":"                    onClick = { /* TODO: handle Change Mode action */ },"},{"type":"INSERT","lineNumber":262,"content":"                    modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":263,"content":"                ) {"},{"type":"INSERT","lineNumber":264,"content":"                    Icon(Icons.Default.Build, contentDescription = \"Change Mode\")"},{"type":"INSERT","lineNumber":266,"content":"            }"},{"type":"DELETE","lineNumber":280,"oldContent":""},{"type":"DELETE","lineNumber":281,"oldContent":"                Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {"},{"type":"INSERT","lineNumber":268,"content":"            // Bottom panel: upload and list"},{"type":"DELETE","lineNumber":285,"oldContent":"                        Text(\"Read Mission (debug)\")"},{"type":"DELETE","lineNumber":288,"oldContent":"                        Text(\"Start Mission\")"},{"type":"INSERT","lineNumber":274,"content":"                Button("},{"type":"DELETE","lineNumber":290,"oldContent":"                }"},{"type":"DELETE","lineNumber":291,"oldContent":"                        telemetryViewModel.uploadMission(waypoints) { success, error ->"},{"type":"DELETE","lineNumber":292,"oldContent":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"DELETE","lineNumber":293,"oldContent":"                // Waypoint list"},{"type":"INSERT","lineNumber":276,"content":"                        // Build correct MAVLink mission plan"},{"type":"INSERT","lineNumber":277,"content":"                        val builtMission = mutableListOf<MissionItemInt>()"},{"type":"INSERT","lineNumber":278,"content":"                        val homeLat = telemetryState.latitude ?: 0.0"},{"type":"INSERT","lineNumber":279,"content":"                        val homeLon = telemetryState.longitude ?: 0.0"},{"type":"INSERT","lineNumber":280,"content":"                        val homeAlt = telemetryState.altitudeMsl ?: 10f"},{"type":"INSERT","lineNumber":281,"content":""},{"type":"INSERT","lineNumber":282,"content":"                        // Sequence 0: Home position as NAV_WAYPOINT"},{"type":"INSERT","lineNumber":283,"content":"                        builtMission.add("},{"type":"INSERT","lineNumber":284,"content":"                            MissionItemInt("},{"type":"INSERT","lineNumber":285,"content":"                                targetSystem = 0u,"},{"type":"INSERT","lineNumber":286,"content":"                                targetComponent = 0u,"},{"type":"INSERT","lineNumber":287,"content":"                                seq = 0u,"},{"type":"INSERT","lineNumber":288,"content":"                                frame = MavEnumValue.of(MavFrame.GLOBAL_RELATIVE_ALT_INT),"},{"type":"INSERT","lineNumber":289,"content":"                                command = MavEnumValue.of(MavCmd.NAV_WAYPOINT),"},{"type":"INSERT","lineNumber":290,"content":"                                current = 1u, // True for first item"},{"type":"INSERT","lineNumber":291,"content":"                                autocontinue = 1u,"},{"type":"INSERT","lineNumber":292,"content":"                                param1 = 0f,"},{"type":"INSERT","lineNumber":293,"content":"                                param2 = 0f,"},{"type":"INSERT","lineNumber":294,"content":"                                param3 = 0f,"},{"type":"INSERT","lineNumber":295,"content":"                                param4 = 0f,"},{"type":"INSERT","lineNumber":296,"content":"                                x = (homeLat * 1E7).toInt(),"},{"type":"INSERT","lineNumber":297,"content":"                                y = (homeLon * 1E7).toInt(),"},{"type":"INSERT","lineNumber":298,"content":"                                z = homeAlt"},{"type":"INSERT","lineNumber":299,"content":"                            )"},{"type":"INSERT","lineNumber":300,"content":"                        )"},{"type":"INSERT","lineNumber":301,"content":""},{"type":"INSERT","lineNumber":302,"content":"                        // Sequence 1: Takeoff at home position"},{"type":"INSERT","lineNumber":303,"content":"                        builtMission.add("},{"type":"INSERT","lineNumber":304,"content":"                            MissionItemInt("},{"type":"INSERT","lineNumber":305,"content":"                                targetSystem = 0u,"},{"type":"INSERT","lineNumber":306,"content":"                                targetComponent = 0u,"},{"type":"INSERT","lineNumber":307,"content":"                                seq = 1u,"},{"type":"INSERT","lineNumber":308,"content":"                                frame = MavEnumValue.of(MavFrame.GLOBAL_RELATIVE_ALT_INT),"},{"type":"INSERT","lineNumber":309,"content":"                                command = MavEnumValue.of(MavCmd.NAV_TAKEOFF),"},{"type":"INSERT","lineNumber":310,"content":"                                current = 0u,"},{"type":"INSERT","lineNumber":311,"content":"                                autocontinue = 1u,"},{"type":"INSERT","lineNumber":312,"content":"                                param1 = 0f,"},{"type":"INSERT","lineNumber":313,"content":"                                param2 = 0f,"},{"type":"INSERT","lineNumber":314,"content":"                                param3 = 0f,"},{"type":"INSERT","lineNumber":315,"content":"                                param4 = 0f,"},{"type":"INSERT","lineNumber":316,"content":"                                x = (homeLat * 1E7).toInt(),"},{"type":"INSERT","lineNumber":317,"content":"                                y = (homeLon * 1E7).toInt(),"},{"type":"INSERT","lineNumber":318,"content":"                                z = 10f // Takeoff altitude"},{"type":"INSERT","lineNumber":319,"content":"                            )"},{"type":"INSERT","lineNumber":320,"content":"                        )"},{"type":"INSERT","lineNumber":321,"content":""},{"type":"INSERT","lineNumber":322,"content":"                        // Sequence 2+: User waypoints"},{"type":"INSERT","lineNumber":323,"content":"                        points.forEachIndexed { idx, latLng ->"},{"type":"INSERT","lineNumber":324,"content":"                            val seq = idx + 2"},{"type":"INSERT","lineNumber":325,"content":"                            val isLast = idx == points.lastIndex"},{"type":"INSERT","lineNumber":326,"content":"                            val altitude = 10f // You may want to allow user to set this per waypoint"},{"type":"INSERT","lineNumber":327,"content":"                            builtMission.add("},{"type":"INSERT","lineNumber":328,"content":"                                MissionItemInt("},{"type":"INSERT","lineNumber":329,"content":"                                    targetSystem = 0u,"},{"type":"INSERT","lineNumber":330,"content":"                                    targetComponent = 0u,"},{"type":"INSERT","lineNumber":331,"content":"                                    seq = seq.toUShort(),"},{"type":"INSERT","lineNumber":332,"content":"                                    frame = MavEnumValue.of(MavFrame.GLOBAL_RELATIVE_ALT_INT),"},{"type":"INSERT","lineNumber":333,"content":"                                    command = if (isLast) MavEnumValue.of(MavCmd.NAV_LAND) else MavEnumValue.of(MavCmd.NAV_WAYPOINT),"},{"type":"INSERT","lineNumber":334,"content":"                                    current = 0u,"},{"type":"INSERT","lineNumber":335,"content":"                                    autocontinue = 1u,"},{"type":"INSERT","lineNumber":336,"content":"                                    param1 = 0f,"},{"type":"INSERT","lineNumber":337,"content":"                                    param2 = 0f,"},{"type":"INSERT","lineNumber":338,"content":"                                    param3 = 0f,"},{"type":"INSERT","lineNumber":339,"content":"                                    param4 = 0f,"},{"type":"INSERT","lineNumber":340,"content":"                                    x = (latLng.latitude * 1E7).toInt(),"},{"type":"INSERT","lineNumber":341,"content":"                                    y = (latLng.longitude * 1E7).toInt(),"},{"type":"INSERT","lineNumber":342,"content":"                                    z = altitude"},{"type":"INSERT","lineNumber":343,"content":"                                )"},{"type":"INSERT","lineNumber":344,"content":"                            )"},{"type":"INSERT","lineNumber":345,"content":"                        }"},{"type":"INSERT","lineNumber":346,"content":""},{"type":"INSERT","lineNumber":347,"content":"                        telemetryViewModel.uploadMission(builtMission) { success, error ->"},{"type":"INSERT","lineNumber":348,"content":"                            if (success) {"},{"type":"DELETE","lineNumber":296,"oldContent":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleSmall)"},{"type":"INSERT","lineNumber":351,"content":"                                coroutineScope.launch { telemetryViewModel.readMissionFromFcu() }"},{"type":"DELETE","lineNumber":299,"oldContent":"                    }"},{"type":"DELETE","lineNumber":301,"oldContent":"                }"},{"type":"DELETE","lineNumber":302,"oldContent":"            }"},{"type":"INSERT","lineNumber":355,"content":"                            } else {"},{"type":"DELETE","lineNumber":304,"oldContent":"        }"},{"type":"DELETE","lineNumber":306,"oldContent":"    }"},{"type":"DELETE","lineNumber":308,"oldContent":"}"},{"type":"DELETE","lineNumber":310,"oldContent":""},{"type":"DELETE","lineNumber":312,"oldContent":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"},{"type":"DELETE","lineNumber":313,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"INSERT","lineNumber":361,"content":"                            }"},{"type":"INSERT","lineNumber":362,"content":"                        }"},{"type":"INSERT","lineNumber":363,"content":"                    },"},{"type":"INSERT","lineNumber":364,"content":"                    enabled = points.isNotEmpty(),"},{"type":"INSERT","lineNumber":365,"content":"                    modifier = Modifier.fillMaxWidth()"},{"type":"DELETE","lineNumber":315,"oldContent":"                        .padding(8.dp)"},{"type":"DELETE","lineNumber":316,"oldContent":"                    enabled = waypoints.isNotEmpty(),"},{"type":"DELETE","lineNumber":317,"oldContent":"                        .background(MaterialTheme.colorScheme.surfaceVariant)"},{"type":"DELETE","lineNumber":318,"oldContent":"                        .fillMaxWidth()"},{"type":"DELETE","lineNumber":319,"oldContent":"                    modifier = Modifier"},{"type":"DELETE","lineNumber":320,"oldContent":"                    Text(\"Upload Mission (${waypoints.size})\")"},{"type":"DELETE","lineNumber":321,"oldContent":"                Column("},{"type":"INSERT","lineNumber":367,"content":"                    Text(\"Upload Mission (${points.size})\")"},{"type":"INSERT","lineNumber":368,"content":"                }"},{"type":"INSERT","lineNumber":370,"content":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"DELETE","lineNumber":324,"oldContent":""},{"type":"DELETE","lineNumber":325,"oldContent":"                    }"},{"type":"DELETE","lineNumber":326,"oldContent":"                    }) {"},{"type":"DELETE","lineNumber":327,"oldContent":"                        }"},{"type":"INSERT","lineNumber":372,"content":"                Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {"},{"type":"DELETE","lineNumber":329,"oldContent":"                            ).show()"},{"type":"DELETE","lineNumber":331,"oldContent":"                                Toast.LENGTH_SHORT"},{"type":"DELETE","lineNumber":333,"oldContent":"                                if (s) \"Start sent\" else (e ?: \"Start failed\"),"},{"type":"DELETE","lineNumber":335,"oldContent":"                                context,"},{"type":"DELETE","lineNumber":337,"oldContent":"                            Toast.makeText("},{"type":"DELETE","lineNumber":339,"oldContent":"                        telemetryViewModel.startMission { s, e ->"},{"type":"INSERT","lineNumber":380,"content":"                    }) {"},{"type":"INSERT","lineNumber":381,"content":"                        Text(\"Read Mission (debug)\")"},{"type":"INSERT","lineNumber":382,"content":"                    }"},{"type":"INSERT","lineNumber":384,"content":"                        telemetryViewModel.startMission { s, e ->"},{"type":"INSERT","lineNumber":385,"content":"                            Toast.makeText("},{"type":"INSERT","lineNumber":386,"content":"                                context,"},{"type":"INSERT","lineNumber":387,"content":"                                if (s) \"Start sent\" else (e ?: \"Start failed\"),"},{"type":"INSERT","lineNumber":388,"content":"                                Toast.LENGTH_SHORT"},{"type":"INSERT","lineNumber":389,"content":"                            ).show()"},{"type":"INSERT","lineNumber":390,"content":"                        }"},{"type":"INSERT","lineNumber":392,"content":"                        Text(\"Start Mission\")"},{"type":"INSERT","lineNumber":394,"content":"                }"},{"type":"INSERT","lineNumber":395,"content":""},{"type":"INSERT","lineNumber":396,"content":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"INSERT","lineNumber":397,"content":""},{"type":"INSERT","lineNumber":398,"content":"                // Waypoint list"},{"type":"INSERT","lineNumber":399,"content":"                Column("},{"type":"INSERT","lineNumber":400,"content":"                    modifier = Modifier"},{"type":"INSERT","lineNumber":401,"content":"                        .fillMaxWidth()"},{"type":"INSERT","lineNumber":402,"content":"                        .background(MaterialTheme.colorScheme.surfaceVariant)"},{"type":"INSERT","lineNumber":403,"content":"                        .padding(8.dp)"},{"type":"INSERT","lineNumber":404,"content":"                ) {"},{"type":"INSERT","lineNumber":405,"content":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleSmall)"},{"type":"INSERT","lineNumber":406,"content":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"INSERT","lineNumber":407,"content":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"},{"type":"INSERT","lineNumber":408,"content":"                    }"},{"type":"INSERT","lineNumber":409,"content":"                }"},{"type":"INSERT","lineNumber":410,"content":"            }"},{"type":"INSERT","lineNumber":411,"content":"        }"},{"type":"INSERT","lineNumber":412,"content":"    }"},{"type":"INSERT","lineNumber":413,"content":"}"},{"type":"INSERT","lineNumber":414,"content":""}]},{"timestamp":1758170044511,"changes":[{"type":"INSERT","lineNumber":27,"content":"import com.google.android.gms.maps.CameraUpdateFactory"},{"type":"DELETE","lineNumber":28,"oldContent":""},{"type":"INSERT","lineNumber":60,"content":"            cameraPositionState.move(CameraUpdateFactory.newLatLngZoom(LatLng(lat, lon), 16f))"},{"type":"DELETE","lineNumber":61,"oldContent":"            centeredOnce = true"},{"type":"INSERT","lineNumber":73,"content":"        isTakeoff: Boolean = false,"},{"type":"INSERT","lineNumber":74,"content":"        alt: Float = 10f"},{"type":"INSERT","lineNumber":75,"content":"    ): MissionItemInt {"},{"type":"DELETE","lineNumber":75,"oldContent":"        isTakeoff: Boolean = false,"},{"type":"DELETE","lineNumber":78,"oldContent":"        alt: Float = 10f"},{"type":"DELETE","lineNumber":80,"oldContent":"    ): MissionItemInt {"},{"type":"DELETE","lineNumber":82,"oldContent":"            autocontinue = 1u,"},{"type":"DELETE","lineNumber":84,"oldContent":"            param1 = 0f,"},{"type":"DELETE","lineNumber":86,"oldContent":"            param2 = 0f,"},{"type":"INSERT","lineNumber":85,"content":"            autocontinue = 1u,"},{"type":"INSERT","lineNumber":86,"content":"            param1 = 0f,"},{"type":"INSERT","lineNumber":87,"content":"            param2 = 0f,"},{"type":"DELETE","lineNumber":98,"oldContent":"        points.add(latLng)"},{"type":"DELETE","lineNumber":100,"oldContent":"    }"},{"type":"DELETE","lineNumber":102,"oldContent":""},{"type":"INSERT","lineNumber":101,"content":"        points.add(latLng)"},{"type":"INSERT","lineNumber":102,"content":"        waypoints.add(item)"},{"type":"INSERT","lineNumber":103,"content":"    }"},{"type":"INSERT","lineNumber":104,"content":""},{"type":"DELETE","lineNumber":106,"oldContent":"        waypoints.add(item)"},{"type":"MODIFY","lineNumber":175,"content":"            )","oldContent":"            )"},{"type":"DELETE","lineNumber":183,"oldContent":"            }"},{"type":"DELETE","lineNumber":185,"oldContent":""},{"type":"DELETE","lineNumber":193,"oldContent":"            }"},{"type":"DELETE","lineNumber":194,"oldContent":""},{"type":"DELETE","lineNumber":196,"oldContent":"            // Left-side floating buttons (below TopNavBar)"},{"type":"DELETE","lineNumber":197,"oldContent":"            Column("},{"type":"DELETE","lineNumber":199,"oldContent":"                modifier = Modifier"},{"type":"DELETE","lineNumber":200,"oldContent":"                    .align(Alignment.TopStart)"},{"type":"DELETE","lineNumber":201,"oldContent":"                    .padding(start = 16.dp, top = 72.dp),"},{"type":"INSERT","lineNumber":193,"content":"            }"},{"type":"INSERT","lineNumber":194,"content":""},{"type":"DELETE","lineNumber":203,"oldContent":"                verticalArrangement = Arrangement.spacedBy(12.dp)"},{"type":"DELETE","lineNumber":204,"oldContent":"            ) {"},{"type":"DELETE","lineNumber":206,"oldContent":"                FloatingActionButton("},{"type":"INSERT","lineNumber":208,"content":"            }"},{"type":"INSERT","lineNumber":209,"content":""},{"type":"INSERT","lineNumber":210,"content":"            // Left-side floating buttons (below TopNavBar)"},{"type":"INSERT","lineNumber":211,"content":"            Column("},{"type":"INSERT","lineNumber":212,"content":"                modifier = Modifier"},{"type":"INSERT","lineNumber":213,"content":"                    .align(Alignment.TopStart)"},{"type":"INSERT","lineNumber":214,"content":"                    .padding(start = 16.dp, top = 72.dp),"},{"type":"INSERT","lineNumber":215,"content":"                verticalArrangement = Arrangement.spacedBy(12.dp)"},{"type":"INSERT","lineNumber":216,"content":"            ) {"},{"type":"INSERT","lineNumber":218,"content":"                FloatingActionButton("},{"type":"DELETE","lineNumber":224,"oldContent":"                    onClick = { telemetryViewModel.arm() },"},{"type":"DELETE","lineNumber":226,"oldContent":"                    modifier = Modifier.size(56.dp)"},{"type":"DELETE","lineNumber":228,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":230,"oldContent":"                    Icon(Icons.Default.FlightTakeoff, contentDescription = \"Arm\")"},{"type":"DELETE","lineNumber":232,"oldContent":"                }"},{"type":"DELETE","lineNumber":234,"oldContent":""},{"type":"DELETE","lineNumber":236,"oldContent":"                FloatingActionButton("},{"type":"DELETE","lineNumber":242,"oldContent":"                    modifier = Modifier.size(56.dp)"},{"type":"DELETE","lineNumber":245,"oldContent":"                    Icon(Icons.Default.Map, contentDescription = \"Toggle Map Type\")"},{"type":"DELETE","lineNumber":248,"oldContent":""},{"type":"DELETE","lineNumber":250,"oldContent":"                FloatingActionButton("},{"type":"DELETE","lineNumber":252,"oldContent":"                    onClick = { /* TODO: handle Change Mode action */ },"},{"type":"DELETE","lineNumber":254,"oldContent":"                    modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":243,"content":"                FloatingActionButton("},{"type":"INSERT","lineNumber":244,"content":"                    onClick = { telemetryViewModel.arm() },"},{"type":"INSERT","lineNumber":245,"content":"                    modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":247,"content":"                    Icon(Icons.Default.FlightTakeoff, contentDescription = \"Arm\")"},{"type":"INSERT","lineNumber":248,"content":"                }"},{"type":"INSERT","lineNumber":249,"content":""},{"type":"DELETE","lineNumber":258,"oldContent":"                    Icon(Icons.Default.Build, contentDescription = \"Change Mode\")"},{"type":"DELETE","lineNumber":259,"oldContent":"            }"},{"type":"DELETE","lineNumber":262,"oldContent":"            // Bottom panel: upload and list"},{"type":"DELETE","lineNumber":265,"oldContent":"                Button("},{"type":"INSERT","lineNumber":255,"content":"                    modifier = Modifier.size(56.dp)"},{"type":"DELETE","lineNumber":267,"oldContent":"                        // Build correct MAVLink mission plan"},{"type":"INSERT","lineNumber":257,"content":"                    Icon(Icons.Default.Map, contentDescription = \"Toggle Map Type\")"},{"type":"DELETE","lineNumber":269,"oldContent":"                        val builtMission = mutableListOf<MissionItemInt>()"},{"type":"DELETE","lineNumber":270,"oldContent":"                        val homeLat = telemetryState.latitude ?: 0.0"},{"type":"INSERT","lineNumber":259,"content":""},{"type":"INSERT","lineNumber":260,"content":"                FloatingActionButton("},{"type":"INSERT","lineNumber":261,"content":"                    onClick = { /* TODO: handle Change Mode action */ },"},{"type":"INSERT","lineNumber":262,"content":"                    modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":263,"content":"                ) {"},{"type":"INSERT","lineNumber":264,"content":"                    Icon(Icons.Default.Build, contentDescription = \"Change Mode\")"},{"type":"DELETE","lineNumber":272,"oldContent":"                        val homeLon = telemetryState.longitude ?: 0.0"},{"type":"INSERT","lineNumber":266,"content":"            }"},{"type":"DELETE","lineNumber":274,"oldContent":"                        val homeAlt = telemetryState.altitudeMsl ?: 10f"},{"type":"DELETE","lineNumber":275,"oldContent":""},{"type":"DELETE","lineNumber":276,"oldContent":"                        // Sequence 0: Home position as NAV_WAYPOINT"},{"type":"INSERT","lineNumber":268,"content":"            // Bottom panel: upload and list"},{"type":"DELETE","lineNumber":278,"oldContent":"                        builtMission.add("},{"type":"DELETE","lineNumber":280,"oldContent":"                            MissionItemInt("},{"type":"DELETE","lineNumber":282,"oldContent":"                                targetSystem = 0u,"},{"type":"DELETE","lineNumber":283,"oldContent":"                                targetComponent = 0u,"},{"type":"DELETE","lineNumber":285,"oldContent":"                                seq = 0u,"},{"type":"DELETE","lineNumber":287,"oldContent":"                                frame = MavEnumValue.of(MavFrame.GLOBAL_RELATIVE_ALT_INT),"},{"type":"DELETE","lineNumber":288,"oldContent":"                                command = MavEnumValue.of(MavCmd.NAV_WAYPOINT),"},{"type":"INSERT","lineNumber":274,"content":"                Button("},{"type":"DELETE","lineNumber":290,"oldContent":"                                current = 1u, // True for first item"},{"type":"DELETE","lineNumber":291,"oldContent":"                                autocontinue = 1u,"},{"type":"DELETE","lineNumber":292,"oldContent":"                                param1 = 0f,"},{"type":"DELETE","lineNumber":293,"oldContent":"                                param2 = 0f,"},{"type":"DELETE","lineNumber":294,"oldContent":"                                param3 = 0f,"},{"type":"DELETE","lineNumber":295,"oldContent":"                                Toast.makeText(context, \"Mission uploaded\", Toast.LENGTH_SHORT)"},{"type":"DELETE","lineNumber":296,"oldContent":"                                param4 = 0f,"},{"type":"DELETE","lineNumber":297,"oldContent":"                                    .show()"},{"type":"DELETE","lineNumber":298,"oldContent":"                                x = (homeLat * 1E7).toInt(),"},{"type":"DELETE","lineNumber":299,"oldContent":"                                y = (homeLon * 1E7).toInt(),"},{"type":"DELETE","lineNumber":300,"oldContent":"                                navController.navigate(Screen.Main.route) {"},{"type":"DELETE","lineNumber":301,"oldContent":"                                z = homeAlt"},{"type":"DELETE","lineNumber":302,"oldContent":"                                    popUpTo(Screen.Plan.route) { inclusive = true }"},{"type":"DELETE","lineNumber":303,"oldContent":"                            )"},{"type":"DELETE","lineNumber":304,"oldContent":"                        )"},{"type":"DELETE","lineNumber":305,"oldContent":"                                }"},{"type":"INSERT","lineNumber":276,"content":"                        // Build correct MAVLink mission plan"},{"type":"INSERT","lineNumber":277,"content":"                        val builtMission = mutableListOf<MissionItemInt>()"},{"type":"INSERT","lineNumber":278,"content":"                        val homeLat = telemetryState.latitude ?: 0.0"},{"type":"INSERT","lineNumber":279,"content":"                        val homeLon = telemetryState.longitude ?: 0.0"},{"type":"INSERT","lineNumber":280,"content":"                        val takeoffAlt = 10f // Default takeoff altitude, can be user-set"},{"type":"DELETE","lineNumber":307,"oldContent":"                        // Sequence 1: Takeoff at home position"},{"type":"INSERT","lineNumber":282,"content":"                        // Sequence 0: Takeoff at current location"},{"type":"DELETE","lineNumber":309,"oldContent":"                                Toast.makeText("},{"type":"DELETE","lineNumber":312,"oldContent":"                                    context,"},{"type":"DELETE","lineNumber":314,"oldContent":"                                seq = 1u,"},{"type":"DELETE","lineNumber":315,"oldContent":"                                    error ?: \"Mission upload failed\","},{"type":"INSERT","lineNumber":287,"content":"                                seq = 0u,"},{"type":"DELETE","lineNumber":318,"oldContent":"                                    Toast.LENGTH_SHORT"},{"type":"DELETE","lineNumber":319,"oldContent":"                                current = 0u,"},{"type":"INSERT","lineNumber":290,"content":"                                current = 1u, // True for first item"},{"type":"DELETE","lineNumber":321,"oldContent":"                                ).show()"},{"type":"DELETE","lineNumber":325,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":329,"oldContent":"                                z = 10f // Takeoff altitude"},{"type":"INSERT","lineNumber":298,"content":"                                z = takeoffAlt"},{"type":"DELETE","lineNumber":333,"oldContent":"                        // Sequence 2+: User waypoints"},{"type":"DELETE","lineNumber":334,"oldContent":""},{"type":"INSERT","lineNumber":302,"content":"                        // Sequence 1+: User waypoints"},{"type":"DELETE","lineNumber":336,"oldContent":""},{"type":"DELETE","lineNumber":337,"oldContent":"                            val seq = idx + 2"},{"type":"INSERT","lineNumber":304,"content":"                            val seq = idx + 1"},{"type":"DELETE","lineNumber":342,"oldContent":"                    Button(onClick = {"},{"type":"DELETE","lineNumber":345,"oldContent":"                        telemetryViewModel.readMissionFromFcu()"},{"type":"DELETE","lineNumber":348,"oldContent":"                        Toast.makeText("},{"type":"DELETE","lineNumber":351,"oldContent":"                            context,"},{"type":"DELETE","lineNumber":354,"oldContent":"                            \"Requested mission readback (check logs)\","},{"type":"DELETE","lineNumber":357,"oldContent":"                            Toast.LENGTH_SHORT"},{"type":"DELETE","lineNumber":360,"oldContent":"                        ).show()"},{"type":"DELETE","lineNumber":362,"oldContent":"                    Button(onClick = {"},{"type":"DELETE","lineNumber":364,"oldContent":"                    }) {"},{"type":"DELETE","lineNumber":366,"oldContent":"                    }"},{"type":"DELETE","lineNumber":368,"oldContent":""},{"type":"DELETE","lineNumber":370,"oldContent":"}"},{"type":"DELETE","lineNumber":372,"oldContent":"    }"},{"type":"DELETE","lineNumber":374,"oldContent":"        }"},{"type":"DELETE","lineNumber":376,"oldContent":"            }"},{"type":"DELETE","lineNumber":377,"oldContent":"                }"},{"type":"DELETE","lineNumber":378,"oldContent":"                    }"},{"type":"INSERT","lineNumber":329,"content":"                                Toast.makeText(context, \"Mission uploaded\", Toast.LENGTH_SHORT)"},{"type":"INSERT","lineNumber":330,"content":"                                    .show()"},{"type":"DELETE","lineNumber":380,"oldContent":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"},{"type":"DELETE","lineNumber":381,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":382,"oldContent":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleSmall)"},{"type":"DELETE","lineNumber":383,"oldContent":"                ) {"},{"type":"INSERT","lineNumber":332,"content":"                                navController.navigate(Screen.Main.route) {"},{"type":"INSERT","lineNumber":333,"content":"                                    popUpTo(Screen.Plan.route) { inclusive = true }"},{"type":"INSERT","lineNumber":334,"content":"                                }"},{"type":"DELETE","lineNumber":385,"oldContent":"                        .padding(8.dp)"},{"type":"DELETE","lineNumber":386,"oldContent":"                        .background(MaterialTheme.colorScheme.surfaceVariant)"},{"type":"DELETE","lineNumber":387,"oldContent":"                        .fillMaxWidth()"},{"type":"DELETE","lineNumber":388,"oldContent":"                    modifier = Modifier"},{"type":"DELETE","lineNumber":389,"oldContent":"                Column("},{"type":"DELETE","lineNumber":390,"oldContent":"                // Waypoint list"},{"type":"INSERT","lineNumber":336,"content":"                                Toast.makeText("},{"type":"INSERT","lineNumber":337,"content":"                                    context,"},{"type":"INSERT","lineNumber":338,"content":"                                    error ?: \"Mission upload failed\","},{"type":"INSERT","lineNumber":339,"content":"                                    Toast.LENGTH_SHORT"},{"type":"INSERT","lineNumber":340,"content":"                                ).show()"},{"type":"DELETE","lineNumber":392,"oldContent":""},{"type":"DELETE","lineNumber":394,"oldContent":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"DELETE","lineNumber":396,"oldContent":""},{"type":"DELETE","lineNumber":398,"oldContent":"                }"},{"type":"DELETE","lineNumber":400,"oldContent":"                        Text(\"Start Mission\")"},{"type":"DELETE","lineNumber":401,"oldContent":"                        }"},{"type":"INSERT","lineNumber":346,"content":"                ) {"},{"type":"DELETE","lineNumber":403,"oldContent":"                            ).show()"},{"type":"DELETE","lineNumber":405,"oldContent":"                                Toast.LENGTH_SHORT"},{"type":"DELETE","lineNumber":406,"oldContent":"                                if (s) \"Start sent\" else (e ?: \"Start failed\"),"},{"type":"INSERT","lineNumber":349,"content":""},{"type":"DELETE","lineNumber":408,"oldContent":"                                context,"},{"type":"DELETE","lineNumber":409,"oldContent":"                            Toast.makeText("},{"type":"INSERT","lineNumber":351,"content":""},{"type":"DELETE","lineNumber":411,"oldContent":"                        telemetryViewModel.startMission { s, e ->"},{"type":"DELETE","lineNumber":412,"oldContent":"                    }"},{"type":"INSERT","lineNumber":353,"content":"                    Button(onClick = {"},{"type":"INSERT","lineNumber":354,"content":"                        telemetryViewModel.readMissionFromFcu()"},{"type":"INSERT","lineNumber":355,"content":"                        Toast.makeText("},{"type":"INSERT","lineNumber":356,"content":"                            context,"},{"type":"INSERT","lineNumber":357,"content":"                            \"Requested mission readback (check logs)\","},{"type":"INSERT","lineNumber":358,"content":"                            Toast.LENGTH_SHORT"},{"type":"INSERT","lineNumber":359,"content":"                        ).show()"},{"type":"INSERT","lineNumber":360,"content":"                    }) {"},{"type":"INSERT","lineNumber":362,"content":"                    }"},{"type":"INSERT","lineNumber":363,"content":"                    Button(onClick = {"},{"type":"INSERT","lineNumber":364,"content":"                        telemetryViewModel.startMission { s, e ->"},{"type":"INSERT","lineNumber":365,"content":"                            Toast.makeText("},{"type":"INSERT","lineNumber":366,"content":"                                context,"},{"type":"INSERT","lineNumber":367,"content":"                                if (s) \"Start sent\" else (e ?: \"Start failed\"),"},{"type":"INSERT","lineNumber":368,"content":"                                Toast.LENGTH_SHORT"},{"type":"INSERT","lineNumber":369,"content":"                            ).show()"},{"type":"INSERT","lineNumber":370,"content":"                        }"},{"type":"INSERT","lineNumber":372,"content":"                        Text(\"Start Mission\")"},{"type":"INSERT","lineNumber":373,"content":"                    }"},{"type":"INSERT","lineNumber":374,"content":"                }"},{"type":"INSERT","lineNumber":375,"content":""},{"type":"INSERT","lineNumber":376,"content":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"INSERT","lineNumber":377,"content":""},{"type":"INSERT","lineNumber":378,"content":"                // Waypoint list"},{"type":"INSERT","lineNumber":379,"content":"                Column("},{"type":"INSERT","lineNumber":380,"content":"                    modifier = Modifier"},{"type":"INSERT","lineNumber":381,"content":"                        .fillMaxWidth()"},{"type":"INSERT","lineNumber":382,"content":"                        .background(MaterialTheme.colorScheme.surfaceVariant)"},{"type":"INSERT","lineNumber":383,"content":"                        .padding(8.dp)"},{"type":"INSERT","lineNumber":384,"content":"                ) {"},{"type":"INSERT","lineNumber":385,"content":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleSmall)"},{"type":"INSERT","lineNumber":386,"content":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"INSERT","lineNumber":387,"content":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"},{"type":"INSERT","lineNumber":388,"content":"                    }"},{"type":"INSERT","lineNumber":389,"content":"                }"},{"type":"INSERT","lineNumber":390,"content":"            }"},{"type":"INSERT","lineNumber":391,"content":"        }"},{"type":"INSERT","lineNumber":392,"content":"    }"},{"type":"INSERT","lineNumber":393,"content":"}"},{"type":"INSERT","lineNumber":394,"content":""}]},{"timestamp":1758170050954,"changes":[{"type":"DELETE","lineNumber":74,"oldContent":"        return MissionItemInt("},{"type":"MODIFY","lineNumber":76,"content":"        return MissionItemInt(","oldContent":"            targetSystem = 0u,"},{"type":"INSERT","lineNumber":77,"content":"            targetSystem = 0u,"},{"type":"DELETE","lineNumber":83,"oldContent":"            autocontinue = 1u,"},{"type":"INSERT","lineNumber":84,"content":"            current = 0u, // ensure 0 for compatibility"},{"type":"INSERT","lineNumber":85,"content":"            autocontinue = 1u,"},{"type":"DELETE","lineNumber":87,"oldContent":"            current = 0u, // ensure 0 for compatibility"},{"type":"DELETE","lineNumber":99,"oldContent":"        points.add(latLng)"},{"type":"INSERT","lineNumber":100,"content":"        val item = buildMissionItemFromLatLng(latLng, seq, isTakeoff)"},{"type":"INSERT","lineNumber":101,"content":"        points.add(latLng)"},{"type":"DELETE","lineNumber":103,"oldContent":"        val item = buildMissionItemFromLatLng(latLng, seq, isTakeoff)"},{"type":"INSERT","lineNumber":174,"content":"                autoCenter = false // do not force camera while planning (user pans)"},{"type":"DELETE","lineNumber":175,"oldContent":"            )"},{"type":"DELETE","lineNumber":191,"oldContent":"            }"},{"type":"DELETE","lineNumber":192,"oldContent":""},{"type":"INSERT","lineNumber":193,"content":"            }"},{"type":"INSERT","lineNumber":194,"content":""},{"type":"DELETE","lineNumber":198,"oldContent":"            }"},{"type":"DELETE","lineNumber":200,"oldContent":""},{"type":"DELETE","lineNumber":202,"oldContent":"            // Left-side floating buttons (below TopNavBar)"},{"type":"DELETE","lineNumber":204,"oldContent":"            Column("},{"type":"DELETE","lineNumber":206,"oldContent":"                modifier = Modifier"},{"type":"DELETE","lineNumber":208,"oldContent":"                    .align(Alignment.TopStart)"},{"type":"DELETE","lineNumber":210,"oldContent":"                    .padding(start = 16.dp, top = 72.dp),"},{"type":"DELETE","lineNumber":212,"oldContent":"                verticalArrangement = Arrangement.spacedBy(12.dp)"},{"type":"DELETE","lineNumber":214,"oldContent":"            ) {"},{"type":"DELETE","lineNumber":217,"oldContent":"                FloatingActionButton("},{"type":"INSERT","lineNumber":208,"content":"            }"},{"type":"INSERT","lineNumber":209,"content":""},{"type":"INSERT","lineNumber":210,"content":"            // Left-side floating buttons (below TopNavBar)"},{"type":"INSERT","lineNumber":211,"content":"            Column("},{"type":"INSERT","lineNumber":212,"content":"                modifier = Modifier"},{"type":"INSERT","lineNumber":213,"content":"                    .align(Alignment.TopStart)"},{"type":"INSERT","lineNumber":214,"content":"                    .padding(start = 16.dp, top = 72.dp),"},{"type":"INSERT","lineNumber":215,"content":"                verticalArrangement = Arrangement.spacedBy(12.dp)"},{"type":"INSERT","lineNumber":216,"content":"            ) {"},{"type":"INSERT","lineNumber":218,"content":"                FloatingActionButton("},{"type":"DELETE","lineNumber":235,"oldContent":"                FloatingActionButton("},{"type":"DELETE","lineNumber":237,"oldContent":"                    onClick = { telemetryViewModel.arm() },"},{"type":"DELETE","lineNumber":240,"oldContent":"                    modifier = Modifier.size(56.dp)"},{"type":"DELETE","lineNumber":241,"oldContent":"                    Icon(Icons.Default.FlightTakeoff, contentDescription = \"Arm\")"},{"type":"INSERT","lineNumber":239,"content":"                    Icon(Icons.Default.Refresh, contentDescription = \"Recenter Map\")"},{"type":"DELETE","lineNumber":245,"oldContent":"                    Icon(Icons.Default.Refresh, contentDescription = \"Recenter Map\")"},{"type":"INSERT","lineNumber":242,"content":"                // Arm button"},{"type":"INSERT","lineNumber":243,"content":"                FloatingActionButton("},{"type":"INSERT","lineNumber":244,"content":"                    onClick = { telemetryViewModel.arm() },"},{"type":"INSERT","lineNumber":245,"content":"                    modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":246,"content":"                ) {"},{"type":"INSERT","lineNumber":247,"content":"                    Icon(Icons.Default.FlightTakeoff, contentDescription = \"Arm\")"},{"type":"INSERT","lineNumber":250,"content":"                FloatingActionButton("},{"type":"INSERT","lineNumber":251,"content":"                    onClick = {"},{"type":"INSERT","lineNumber":252,"content":"                        mapType ="},{"type":"INSERT","lineNumber":253,"content":"                            if (mapType == MapType.SATELLITE) MapType.NORMAL else MapType.SATELLITE"},{"type":"INSERT","lineNumber":254,"content":"                    },"},{"type":"DELETE","lineNumber":249,"oldContent":"                // Arm button"},{"type":"DELETE","lineNumber":252,"oldContent":"                FloatingActionButton("},{"type":"INSERT","lineNumber":258,"content":"                }"},{"type":"DELETE","lineNumber":255,"oldContent":"                    onClick = {"},{"type":"DELETE","lineNumber":257,"oldContent":"                        mapType ="},{"type":"DELETE","lineNumber":260,"oldContent":"                            if (mapType == MapType.SATELLITE) MapType.NORMAL else MapType.SATELLITE"},{"type":"DELETE","lineNumber":262,"oldContent":"                    },"},{"type":"DELETE","lineNumber":263,"oldContent":"            }"},{"type":"DELETE","lineNumber":264,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":265,"oldContent":"            // Bottom panel: upload and list"},{"type":"MODIFY","lineNumber":266,"content":"            }","oldContent":"                }"},{"type":"DELETE","lineNumber":269,"oldContent":"                Button("},{"type":"DELETE","lineNumber":270,"oldContent":"                        // Build correct MAVLink mission plan"},{"type":"DELETE","lineNumber":271,"oldContent":"                        val builtMission = mutableListOf<MissionItemInt>()"},{"type":"INSERT","lineNumber":268,"content":"            // Bottom panel: upload and list"},{"type":"DELETE","lineNumber":273,"oldContent":"                        val homeLat = telemetryState.latitude ?: 0.0"},{"type":"DELETE","lineNumber":274,"oldContent":"                        val homeLon = telemetryState.longitude ?: 0.0"},{"type":"DELETE","lineNumber":276,"oldContent":"                        val takeoffAlt = 10f // Default takeoff altitude, can be user-set"},{"type":"DELETE","lineNumber":278,"oldContent":"                        // Sequence 0: Takeoff at current location"},{"type":"DELETE","lineNumber":281,"oldContent":"                                seq = 0u,"},{"type":"INSERT","lineNumber":274,"content":"                Button("},{"type":"INSERT","lineNumber":276,"content":"                        // Build correct MAVLink mission plan"},{"type":"INSERT","lineNumber":277,"content":"                        val builtMission = mutableListOf<MissionItemInt>()"},{"type":"INSERT","lineNumber":278,"content":"                        val homeLat = telemetryState.latitude ?: 0.0"},{"type":"INSERT","lineNumber":279,"content":"                        val homeLon = telemetryState.longitude ?: 0.0"},{"type":"INSERT","lineNumber":280,"content":"                        val homeAlt = telemetryState.altitudeMsl ?: 10f"},{"type":"INSERT","lineNumber":281,"content":""},{"type":"INSERT","lineNumber":282,"content":"                        // Sequence 0: Home position as NAV_WAYPOINT"},{"type":"INSERT","lineNumber":283,"content":"                        builtMission.add("},{"type":"INSERT","lineNumber":284,"content":"                            MissionItemInt("},{"type":"INSERT","lineNumber":285,"content":"                                targetSystem = 0u,"},{"type":"INSERT","lineNumber":286,"content":"                                targetComponent = 0u,"},{"type":"INSERT","lineNumber":287,"content":"                                seq = 0u,"},{"type":"INSERT","lineNumber":288,"content":"                                frame = MavEnumValue.of(MavFrame.GLOBAL_RELATIVE_ALT_INT),"},{"type":"INSERT","lineNumber":289,"content":"                                command = MavEnumValue.of(MavCmd.NAV_WAYPOINT),"},{"type":"DELETE","lineNumber":284,"oldContent":"                                z = takeoffAlt"},{"type":"DELETE","lineNumber":285,"oldContent":"                        // Sequence 1+: User waypoints"},{"type":"DELETE","lineNumber":286,"oldContent":"                            val seq = idx + 1"},{"type":"INSERT","lineNumber":291,"content":"                                autocontinue = 1u,"},{"type":"INSERT","lineNumber":292,"content":"                                param1 = 0f,"},{"type":"INSERT","lineNumber":293,"content":"                                param2 = 0f,"},{"type":"INSERT","lineNumber":294,"content":"                                param3 = 0f,"},{"type":"INSERT","lineNumber":295,"content":"                                param4 = 0f,"},{"type":"INSERT","lineNumber":296,"content":"                                x = (homeLat * 1E7).toInt(),"},{"type":"INSERT","lineNumber":297,"content":"                                y = (homeLon * 1E7).toInt(),"},{"type":"INSERT","lineNumber":298,"content":"                                z = homeAlt"},{"type":"INSERT","lineNumber":299,"content":"                            )"},{"type":"INSERT","lineNumber":300,"content":"                        )"},{"type":"INSERT","lineNumber":302,"content":"                        // Sequence 1: Takeoff at home position"},{"type":"INSERT","lineNumber":307,"content":"                                seq = 1u,"},{"type":"INSERT","lineNumber":310,"content":"                                current = 0u,"},{"type":"DELETE","lineNumber":301,"oldContent":"                                Toast.makeText(context, \"Mission uploaded\", Toast.LENGTH_SHORT)"},{"type":"DELETE","lineNumber":302,"oldContent":"                                    .show()"},{"type":"INSERT","lineNumber":318,"content":"                                z = 10f // Takeoff altitude"},{"type":"DELETE","lineNumber":305,"oldContent":"                                navController.navigate(Screen.Main.route) {"},{"type":"DELETE","lineNumber":307,"oldContent":"                                    popUpTo(Screen.Plan.route) { inclusive = true }"},{"type":"DELETE","lineNumber":308,"oldContent":"                                }"},{"type":"INSERT","lineNumber":322,"content":"                        // Sequence 2+: User waypoints"},{"type":"DELETE","lineNumber":310,"oldContent":"                                Toast.makeText("},{"type":"DELETE","lineNumber":311,"oldContent":"                                    context,"},{"type":"DELETE","lineNumber":312,"oldContent":"                                    error ?: \"Mission upload failed\","},{"type":"INSERT","lineNumber":324,"content":"                            val seq = idx + 2"},{"type":"DELETE","lineNumber":314,"oldContent":"                                    Toast.LENGTH_SHORT"},{"type":"DELETE","lineNumber":316,"oldContent":"                                ).show()"},{"type":"DELETE","lineNumber":321,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":324,"oldContent":""},{"type":"DELETE","lineNumber":327,"oldContent":""},{"type":"DELETE","lineNumber":329,"oldContent":"                    Button(onClick = {"},{"type":"INSERT","lineNumber":337,"content":"                                    param2 = 0f,"},{"type":"INSERT","lineNumber":338,"content":"                                    param3 = 0f,"},{"type":"INSERT","lineNumber":339,"content":"                                    param4 = 0f,"},{"type":"INSERT","lineNumber":340,"content":"                                    x = (latLng.latitude * 1E7).toInt(),"},{"type":"INSERT","lineNumber":341,"content":"                                    y = (latLng.longitude * 1E7).toInt(),"},{"type":"INSERT","lineNumber":342,"content":"                                    z = altitude"},{"type":"INSERT","lineNumber":343,"content":"                                )"},{"type":"INSERT","lineNumber":344,"content":"                            )"},{"type":"INSERT","lineNumber":345,"content":"                        }"},{"type":"INSERT","lineNumber":346,"content":""},{"type":"INSERT","lineNumber":347,"content":"                        telemetryViewModel.uploadMission(builtMission) { success, error ->"},{"type":"INSERT","lineNumber":348,"content":"                            if (success) {"},{"type":"INSERT","lineNumber":349,"content":"                                Toast.makeText(context, \"Mission uploaded\", Toast.LENGTH_SHORT)"},{"type":"INSERT","lineNumber":350,"content":"                                    .show()"},{"type":"INSERT","lineNumber":351,"content":"                                coroutineScope.launch { telemetryViewModel.readMissionFromFcu() }"},{"type":"INSERT","lineNumber":352,"content":"                                navController.navigate(Screen.Main.route) {"},{"type":"INSERT","lineNumber":353,"content":"                                    popUpTo(Screen.Plan.route) { inclusive = true }"},{"type":"INSERT","lineNumber":354,"content":"                                }"},{"type":"INSERT","lineNumber":355,"content":"                            } else {"},{"type":"INSERT","lineNumber":356,"content":"                                Toast.makeText("},{"type":"INSERT","lineNumber":357,"content":"                                    context,"},{"type":"INSERT","lineNumber":358,"content":"                                    error ?: \"Mission upload failed\","},{"type":"INSERT","lineNumber":359,"content":"                                    Toast.LENGTH_SHORT"},{"type":"INSERT","lineNumber":360,"content":"                                ).show()"},{"type":"INSERT","lineNumber":361,"content":"                            }"},{"type":"INSERT","lineNumber":362,"content":"                        }"},{"type":"INSERT","lineNumber":363,"content":"                    },"},{"type":"INSERT","lineNumber":364,"content":"                    enabled = points.isNotEmpty(),"},{"type":"INSERT","lineNumber":365,"content":"                    modifier = Modifier.fillMaxWidth()"},{"type":"INSERT","lineNumber":366,"content":"                ) {"},{"type":"INSERT","lineNumber":367,"content":"                    Text(\"Upload Mission (${points.size})\")"},{"type":"INSERT","lineNumber":368,"content":"                }"},{"type":"INSERT","lineNumber":369,"content":""},{"type":"INSERT","lineNumber":370,"content":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"INSERT","lineNumber":371,"content":""},{"type":"INSERT","lineNumber":372,"content":"                Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {"},{"type":"INSERT","lineNumber":373,"content":"                    Button(onClick = {"},{"type":"DELETE","lineNumber":333,"oldContent":"                                    param2 = 0f,"},{"type":"DELETE","lineNumber":335,"oldContent":"                                    param3 = 0f,"},{"type":"DELETE","lineNumber":338,"oldContent":"                                    param4 = 0f,"},{"type":"DELETE","lineNumber":340,"oldContent":"                                    x = (latLng.latitude * 1E7).toInt(),"},{"type":"DELETE","lineNumber":342,"oldContent":"                                    y = (latLng.longitude * 1E7).toInt(),"},{"type":"INSERT","lineNumber":381,"content":"                        Text(\"Read Mission (debug)\")"},{"type":"DELETE","lineNumber":345,"oldContent":"                                    z = altitude"},{"type":"DELETE","lineNumber":348,"oldContent":"                                )"},{"type":"DELETE","lineNumber":351,"oldContent":"                            )"},{"type":"DELETE","lineNumber":355,"oldContent":"                        }"},{"type":"DELETE","lineNumber":356,"oldContent":""},{"type":"INSERT","lineNumber":391,"content":"                    }) {"},{"type":"DELETE","lineNumber":359,"oldContent":"                        telemetryViewModel.uploadMission(builtMission) { success, error ->"},{"type":"DELETE","lineNumber":362,"oldContent":"                            if (success) {"},{"type":"DELETE","lineNumber":367,"oldContent":"                                coroutineScope.launch { telemetryViewModel.readMissionFromFcu() }"},{"type":"DELETE","lineNumber":373,"oldContent":"                            } else {"},{"type":"DELETE","lineNumber":381,"oldContent":"                            }"},{"type":"DELETE","lineNumber":384,"oldContent":"                        }"},{"type":"DELETE","lineNumber":386,"oldContent":"                    },"},{"type":"DELETE","lineNumber":387,"oldContent":"                    enabled = points.isNotEmpty(),"},{"type":"DELETE","lineNumber":388,"oldContent":"                    modifier = Modifier.fillMaxWidth()"},{"type":"DELETE","lineNumber":389,"oldContent":"                    Text(\"Upload Mission (${points.size})\")"},{"type":"DELETE","lineNumber":390,"oldContent":"                }"},{"type":"DELETE","lineNumber":391,"oldContent":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"DELETE","lineNumber":392,"oldContent":"                Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {"},{"type":"DELETE","lineNumber":393,"oldContent":"                        Text(\"Read Mission (debug)\")"},{"type":"DELETE","lineNumber":394,"oldContent":"                    }) {"}]},{"timestamp":1758170083300,"changes":[{"type":"INSERT","lineNumber":75,"content":"    ): MissionItemInt {"},{"type":"DELETE","lineNumber":77,"oldContent":"    ): MissionItemInt {"},{"type":"MODIFY","lineNumber":84,"content":"            current = 0u, // ensure 0 for compatibility","oldContent":"            current = 0u, // ensure 0 for compatibility"},{"type":"MODIFY","lineNumber":100,"content":"        val item = buildMissionItemFromLatLng(latLng, seq, isTakeoff)","oldContent":"        val item = buildMissionItemFromLatLng(latLng, seq, isTakeoff)"},{"type":"DELETE","lineNumber":191,"oldContent":"            }"},{"type":"MODIFY","lineNumber":193,"content":"            }","oldContent":""},{"type":"INSERT","lineNumber":194,"content":""},{"type":"INSERT","lineNumber":203,"content":"                    Icons.Default.Add,"},{"type":"INSERT","lineNumber":204,"content":"                    contentDescription = \"Crosshair\","},{"type":"INSERT","lineNumber":205,"content":"                    tint = MaterialTheme.colorScheme.primary,"},{"type":"INSERT","lineNumber":206,"content":"                    modifier = Modifier.size(28.dp)"},{"type":"INSERT","lineNumber":207,"content":"                )"},{"type":"DELETE","lineNumber":205,"oldContent":"                    Icons.Default.Add,"},{"type":"DELETE","lineNumber":208,"oldContent":"                    contentDescription = \"Crosshair\","},{"type":"DELETE","lineNumber":211,"oldContent":"                    tint = MaterialTheme.colorScheme.primary,"},{"type":"DELETE","lineNumber":214,"oldContent":"                    modifier = Modifier.size(28.dp)"},{"type":"DELETE","lineNumber":216,"oldContent":"                )"},{"type":"MODIFY","lineNumber":218,"content":"                FloatingActionButton(","oldContent":"                FloatingActionButton("},{"type":"DELETE","lineNumber":237,"oldContent":"                    Icon(Icons.Default.Refresh, contentDescription = \"Recenter Map\")"},{"type":"DELETE","lineNumber":239,"oldContent":"                // Arm button"},{"type":"DELETE","lineNumber":241,"oldContent":"                FloatingActionButton("},{"type":"INSERT","lineNumber":239,"content":"                    Icon(Icons.Default.Refresh, contentDescription = \"Recenter Map\")"},{"type":"DELETE","lineNumber":243,"oldContent":"                    onClick = { telemetryViewModel.arm() },"},{"type":"INSERT","lineNumber":242,"content":"                // Arm button"},{"type":"INSERT","lineNumber":243,"content":"                FloatingActionButton("},{"type":"INSERT","lineNumber":244,"content":"                    onClick = { telemetryViewModel.arm() },"},{"type":"MODIFY","lineNumber":248,"content":"                }","oldContent":"                }"},{"type":"DELETE","lineNumber":250,"oldContent":"                    modifier = Modifier.size(56.dp)"},{"type":"DELETE","lineNumber":252,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":254,"oldContent":"                    Icon(Icons.Default.Map, contentDescription = \"Toggle Map Type\")"},{"type":"DELETE","lineNumber":257,"oldContent":""},{"type":"INSERT","lineNumber":255,"content":"                    modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":256,"content":"                ) {"},{"type":"INSERT","lineNumber":257,"content":"                    Icon(Icons.Default.Map, contentDescription = \"Toggle Map Type\")"},{"type":"INSERT","lineNumber":258,"content":"                }"},{"type":"INSERT","lineNumber":259,"content":""},{"type":"DELETE","lineNumber":261,"oldContent":"                }"},{"type":"DELETE","lineNumber":265,"oldContent":"            }"},{"type":"DELETE","lineNumber":267,"oldContent":"            // Bottom panel: upload and list"},{"type":"INSERT","lineNumber":266,"content":"            }"},{"type":"INSERT","lineNumber":268,"content":"            // Bottom panel: upload and list"},{"type":"DELETE","lineNumber":270,"oldContent":"                Button("},{"type":"DELETE","lineNumber":272,"oldContent":"                        // Build correct MAVLink mission plan"},{"type":"DELETE","lineNumber":273,"oldContent":"                        val builtMission = mutableListOf<MissionItemInt>()"},{"type":"DELETE","lineNumber":275,"oldContent":"                        val homeLat = telemetryState.latitude ?: 0.0"},{"type":"DELETE","lineNumber":276,"oldContent":"                        val homeLon = telemetryState.longitude ?: 0.0"},{"type":"DELETE","lineNumber":278,"oldContent":"                        val homeAlt = telemetryState.altitudeMsl ?: 10f"},{"type":"DELETE","lineNumber":280,"oldContent":""},{"type":"DELETE","lineNumber":281,"oldContent":"                        // Sequence 0: Home position as NAV_WAYPOINT"},{"type":"INSERT","lineNumber":274,"content":"                Button("},{"type":"INSERT","lineNumber":276,"content":"                        // Build correct MAVLink mission plan"},{"type":"INSERT","lineNumber":277,"content":"                        val builtMission = mutableListOf<MissionItemInt>()"},{"type":"INSERT","lineNumber":278,"content":"                        val takeoffLat = telemetryState.latitude ?: 0.0"},{"type":"INSERT","lineNumber":279,"content":"                        val takeoffLon = telemetryState.longitude ?: 0.0"},{"type":"INSERT","lineNumber":280,"content":"                        val takeoffAlt = telemetryState.altitudeRelative ?: 10f // Use relative altitude if available"},{"type":"INSERT","lineNumber":281,"content":""},{"type":"INSERT","lineNumber":282,"content":"                        // Sequence 0: Takeoff at current location"},{"type":"DELETE","lineNumber":284,"oldContent":"                                current = 1u, // True for first item"},{"type":"DELETE","lineNumber":289,"oldContent":""},{"type":"DELETE","lineNumber":291,"oldContent":"                        builtMission.add("},{"type":"DELETE","lineNumber":292,"oldContent":"                                command = MavEnumValue.of(MavCmd.NAV_WAYPOINT),"},{"type":"DELETE","lineNumber":293,"oldContent":"                            MissionItemInt("},{"type":"DELETE","lineNumber":294,"oldContent":"                                targetSystem = 0u,"},{"type":"DELETE","lineNumber":295,"oldContent":"                                autocontinue = 1u,"},{"type":"DELETE","lineNumber":296,"oldContent":"                                targetComponent = 0u,"},{"type":"DELETE","lineNumber":297,"oldContent":"                                param1 = 0f,"},{"type":"DELETE","lineNumber":298,"oldContent":"                                frame = MavEnumValue.of(MavFrame.GLOBAL_RELATIVE_ALT_INT),"},{"type":"DELETE","lineNumber":299,"oldContent":"                                param2 = 0f,"},{"type":"DELETE","lineNumber":301,"oldContent":"                                param3 = 0f,"},{"type":"INSERT","lineNumber":290,"content":"                                current = 1u, // True for first item"},{"type":"DELETE","lineNumber":303,"oldContent":"                                param4 = 0f,"},{"type":"DELETE","lineNumber":305,"oldContent":"                                x = (homeLat * 1E7).toInt(),"},{"type":"DELETE","lineNumber":307,"oldContent":"                                y = (homeLon * 1E7).toInt(),"},{"type":"DELETE","lineNumber":309,"oldContent":"                                z = homeAlt"},{"type":"INSERT","lineNumber":296,"content":"                                x = (takeoffLat * 1E7).toInt(),"},{"type":"INSERT","lineNumber":297,"content":"                                y = (takeoffLon * 1E7).toInt(),"},{"type":"INSERT","lineNumber":298,"content":"                                z = takeoffAlt"},{"type":"DELETE","lineNumber":312,"oldContent":"                                x = (homeLat * 1E7).toInt(),"},{"type":"DELETE","lineNumber":314,"oldContent":"                                y = (homeLon * 1E7).toInt(),"},{"type":"DELETE","lineNumber":315,"oldContent":"                        // Sequence 1: Takeoff at home position"},{"type":"DELETE","lineNumber":316,"oldContent":"                            )"},{"type":"DELETE","lineNumber":317,"oldContent":"                        )"},{"type":"DELETE","lineNumber":319,"oldContent":"                                seq = 1u,"},{"type":"INSERT","lineNumber":302,"content":"                        // Sequence 1+: User waypoints"},{"type":"DELETE","lineNumber":321,"oldContent":"                                current = 0u,"},{"type":"INSERT","lineNumber":304,"content":"                            val seq = idx + 1"},{"type":"DELETE","lineNumber":323,"oldContent":"                            val altitude = 10f // You may want to allow user to set this per waypoint"},{"type":"INSERT","lineNumber":306,"content":"                            val altitude = telemetryState.altitudeRelative ?: 10f // Use relative altitude if available"},{"type":"DELETE","lineNumber":325,"oldContent":"                                z = 10f // Takeoff altitude"},{"type":"DELETE","lineNumber":329,"oldContent":"                        // Sequence 2+: User waypoints"},{"type":"DELETE","lineNumber":332,"oldContent":"                            val seq = idx + 2"},{"type":"DELETE","lineNumber":337,"oldContent":"                        telemetryViewModel.readMissionFromFcu()"},{"type":"DELETE","lineNumber":338,"oldContent":"                        Toast.makeText("},{"type":"DELETE","lineNumber":339,"oldContent":"                            context,"},{"type":"DELETE","lineNumber":340,"oldContent":"                            \"Requested mission readback (check logs)\","},{"type":"DELETE","lineNumber":342,"oldContent":"                            Toast.LENGTH_SHORT"},{"type":"DELETE","lineNumber":345,"oldContent":"                        ).show()"},{"type":"DELETE","lineNumber":348,"oldContent":"                    }) {"},{"type":"DELETE","lineNumber":351,"oldContent":"                    }"},{"type":"DELETE","lineNumber":353,"oldContent":"                    Button(onClick = {"},{"type":"DELETE","lineNumber":356,"oldContent":"                        telemetryViewModel.startMission { s, e ->"},{"type":"DELETE","lineNumber":358,"oldContent":"                            Toast.makeText("},{"type":"DELETE","lineNumber":361,"oldContent":"                                context,"},{"type":"DELETE","lineNumber":363,"oldContent":"                                if (s) \"Start sent\" else (e ?: \"Start failed\"),"},{"type":"DELETE","lineNumber":366,"oldContent":"                                Toast.LENGTH_SHORT"},{"type":"DELETE","lineNumber":368,"oldContent":"                            ).show()"},{"type":"DELETE","lineNumber":370,"oldContent":"                        }"},{"type":"DELETE","lineNumber":374,"oldContent":"                        Text(\"Start Mission\")"},{"type":"DELETE","lineNumber":376,"oldContent":"                    }"},{"type":"DELETE","lineNumber":379,"oldContent":"                }"},{"type":"DELETE","lineNumber":381,"oldContent":""},{"type":"DELETE","lineNumber":384,"oldContent":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"DELETE","lineNumber":386,"oldContent":""},{"type":"DELETE","lineNumber":388,"oldContent":"                // Waypoint list"},{"type":"DELETE","lineNumber":390,"oldContent":"                Column("},{"type":"DELETE","lineNumber":393,"oldContent":"                    modifier = Modifier"},{"type":"DELETE","lineNumber":395,"oldContent":"                        .fillMaxWidth()"},{"type":"DELETE","lineNumber":397,"oldContent":"                        .background(MaterialTheme.colorScheme.surfaceVariant)"},{"type":"DELETE","lineNumber":399,"oldContent":"                        .padding(8.dp)"},{"type":"DELETE","lineNumber":401,"oldContent":"                ) {"},{"type":"INSERT","lineNumber":354,"content":"                        telemetryViewModel.readMissionFromFcu()"},{"type":"INSERT","lineNumber":355,"content":"                        Toast.makeText("},{"type":"INSERT","lineNumber":356,"content":"                            context,"},{"type":"INSERT","lineNumber":357,"content":"                            \"Requested mission readback (check logs)\","},{"type":"INSERT","lineNumber":358,"content":"                            Toast.LENGTH_SHORT"},{"type":"INSERT","lineNumber":359,"content":"                        ).show()"},{"type":"INSERT","lineNumber":360,"content":"                    }) {"},{"type":"INSERT","lineNumber":361,"content":"                        Text(\"Read Mission (debug)\")"},{"type":"INSERT","lineNumber":362,"content":"                    }"},{"type":"INSERT","lineNumber":363,"content":"                    Button(onClick = {"},{"type":"INSERT","lineNumber":364,"content":"                        telemetryViewModel.startMission { s, e ->"},{"type":"INSERT","lineNumber":365,"content":"                            Toast.makeText("},{"type":"INSERT","lineNumber":366,"content":"                                context,"},{"type":"INSERT","lineNumber":367,"content":"                                if (s) \"Start sent\" else (e ?: \"Start failed\"),"},{"type":"INSERT","lineNumber":368,"content":"                                Toast.LENGTH_SHORT"},{"type":"INSERT","lineNumber":369,"content":"                            ).show()"},{"type":"INSERT","lineNumber":370,"content":"                        }"},{"type":"INSERT","lineNumber":371,"content":"                    }) {"},{"type":"INSERT","lineNumber":372,"content":"                        Text(\"Start Mission\")"},{"type":"INSERT","lineNumber":373,"content":"                    }"},{"type":"INSERT","lineNumber":374,"content":"                }"},{"type":"INSERT","lineNumber":375,"content":""},{"type":"INSERT","lineNumber":376,"content":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"INSERT","lineNumber":377,"content":""},{"type":"INSERT","lineNumber":378,"content":"                // Waypoint list"},{"type":"INSERT","lineNumber":379,"content":"                Column("},{"type":"INSERT","lineNumber":380,"content":"                    modifier = Modifier"},{"type":"INSERT","lineNumber":381,"content":"                        .fillMaxWidth()"},{"type":"INSERT","lineNumber":382,"content":"                        .background(MaterialTheme.colorScheme.surfaceVariant)"},{"type":"INSERT","lineNumber":383,"content":"                        .padding(8.dp)"},{"type":"INSERT","lineNumber":384,"content":"                ) {"},{"type":"DELETE","lineNumber":410,"oldContent":"                        Text(\"Read Mission (debug)\")"},{"type":"DELETE","lineNumber":414,"oldContent":"                    }) {"}]},{"timestamp":1758170283089,"changes":[{"type":"INSERT","lineNumber":83,"content":"            ),"},{"type":"DELETE","lineNumber":84,"oldContent":"            current = 0u, // ensure 0 for compatibility"},{"type":"INSERT","lineNumber":99,"content":"        val isTakeoff = seq == 0"},{"type":"DELETE","lineNumber":100,"oldContent":"        val item = buildMissionItemFromLatLng(latLng, seq, isTakeoff)"},{"type":"INSERT","lineNumber":192,"content":"                )"},{"type":"DELETE","lineNumber":194,"oldContent":"                )"},{"type":"DELETE","lineNumber":204,"oldContent":"            }"},{"type":"DELETE","lineNumber":206,"oldContent":""},{"type":"DELETE","lineNumber":209,"oldContent":"            // Left-side floating buttons (below TopNavBar)"},{"type":"INSERT","lineNumber":208,"content":"            }"},{"type":"INSERT","lineNumber":209,"content":""},{"type":"INSERT","lineNumber":210,"content":"            // Left-side floating buttons (below TopNavBar)"},{"type":"INSERT","lineNumber":217,"content":"                // Refresh button (moved here above Arm)"},{"type":"DELETE","lineNumber":218,"oldContent":"                FloatingActionButton("},{"type":"DELETE","lineNumber":238,"oldContent":"                    Icon(Icons.Default.Refresh, contentDescription = \"Recenter Map\")"},{"type":"DELETE","lineNumber":240,"oldContent":"                // Arm button"},{"type":"INSERT","lineNumber":239,"content":"                    Icon(Icons.Default.Refresh, contentDescription = \"Recenter Map\")"},{"type":"INSERT","lineNumber":241,"content":""},{"type":"INSERT","lineNumber":242,"content":"                // Arm button"},{"type":"DELETE","lineNumber":244,"oldContent":""},{"type":"INSERT","lineNumber":247,"content":"                    Icon(Icons.Default.FlightTakeoff, contentDescription = \"Arm\")"},{"type":"DELETE","lineNumber":248,"oldContent":"                }"},{"type":"DELETE","lineNumber":252,"oldContent":"                    modifier = Modifier.size(56.dp)"},{"type":"MODIFY","lineNumber":254,"content":"                    },","oldContent":"                ) {"},{"type":"INSERT","lineNumber":255,"content":"                    modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":256,"content":"                ) {"},{"type":"DELETE","lineNumber":258,"oldContent":"                    },"},{"type":"DELETE","lineNumber":265,"oldContent":"            }"},{"type":"DELETE","lineNumber":267,"oldContent":"            // Bottom panel: upload and list"},{"type":"INSERT","lineNumber":266,"content":"            }"},{"type":"INSERT","lineNumber":268,"content":"            // Bottom panel: upload and list"},{"type":"DELETE","lineNumber":271,"oldContent":"                Button("},{"type":"DELETE","lineNumber":273,"oldContent":"                        // Build correct MAVLink mission plan"},{"type":"DELETE","lineNumber":274,"oldContent":"                        val builtMission = mutableListOf<MissionItemInt>()"},{"type":"DELETE","lineNumber":276,"oldContent":"                        val takeoffLat = telemetryState.latitude ?: 0.0"},{"type":"DELETE","lineNumber":277,"oldContent":"                        val takeoffLon = telemetryState.longitude ?: 0.0"},{"type":"DELETE","lineNumber":279,"oldContent":"                        val takeoffAlt = telemetryState.altitudeRelative ?: 10f // Use relative altitude if available"},{"type":"DELETE","lineNumber":280,"oldContent":""},{"type":"DELETE","lineNumber":281,"oldContent":"                        // Sequence 0: Takeoff at current location"},{"type":"INSERT","lineNumber":274,"content":"                Button("},{"type":"INSERT","lineNumber":276,"content":"                        // Build correct MAVLink mission plan"},{"type":"INSERT","lineNumber":277,"content":"                        val builtMission = mutableListOf<MissionItemInt>()"},{"type":"INSERT","lineNumber":278,"content":"                        val homeLat = telemetryState.latitude ?: 0.0"},{"type":"INSERT","lineNumber":279,"content":"                        val homeLon = telemetryState.longitude ?: 0.0"},{"type":"INSERT","lineNumber":280,"content":"                        val homeAlt = telemetryState.altitudeMsl ?: 10f"},{"type":"INSERT","lineNumber":281,"content":""},{"type":"INSERT","lineNumber":282,"content":"                        // Sequence 0: Home position as NAV_WAYPOINT"},{"type":"INSERT","lineNumber":288,"content":"                                frame = MavEnumValue.of(MavFrame.GLOBAL_RELATIVE_ALT_INT),"},{"type":"INSERT","lineNumber":289,"content":"                                command = MavEnumValue.of(MavCmd.NAV_WAYPOINT),"},{"type":"INSERT","lineNumber":291,"content":"                                autocontinue = 1u,"},{"type":"INSERT","lineNumber":292,"content":"                                param1 = 0f,"},{"type":"INSERT","lineNumber":293,"content":"                                param2 = 0f,"},{"type":"INSERT","lineNumber":294,"content":"                                param3 = 0f,"},{"type":"INSERT","lineNumber":295,"content":"                                param4 = 0f,"},{"type":"INSERT","lineNumber":296,"content":"                                x = (homeLat * 1E7).toInt(),"},{"type":"INSERT","lineNumber":297,"content":"                                y = (homeLon * 1E7).toInt(),"},{"type":"INSERT","lineNumber":298,"content":"                                z = homeAlt"},{"type":"INSERT","lineNumber":299,"content":"                            )"},{"type":"INSERT","lineNumber":300,"content":"                        )"},{"type":"INSERT","lineNumber":301,"content":""},{"type":"INSERT","lineNumber":302,"content":"                        // Sequence 1: Takeoff at home position"},{"type":"INSERT","lineNumber":303,"content":"                        builtMission.add("},{"type":"INSERT","lineNumber":304,"content":"                            MissionItemInt("},{"type":"INSERT","lineNumber":305,"content":"                                targetSystem = 0u,"},{"type":"INSERT","lineNumber":306,"content":"                                targetComponent = 0u,"},{"type":"INSERT","lineNumber":307,"content":"                                seq = 1u,"},{"type":"DELETE","lineNumber":290,"oldContent":"                                x = (takeoffLat * 1E7).toInt(),"},{"type":"DELETE","lineNumber":291,"oldContent":"                                y = (takeoffLon * 1E7).toInt(),"},{"type":"DELETE","lineNumber":292,"oldContent":"                                z = takeoffAlt"},{"type":"DELETE","lineNumber":294,"oldContent":"                        // Sequence 1+: User waypoints"},{"type":"INSERT","lineNumber":310,"content":"                                current = 0u,"},{"type":"DELETE","lineNumber":296,"oldContent":"                            val seq = idx + 1"},{"type":"DELETE","lineNumber":298,"oldContent":"                            val altitude = telemetryState.altitudeRelative ?: 10f // Use relative altitude if available"},{"type":"INSERT","lineNumber":316,"content":"                                x = (homeLat * 1E7).toInt(),"},{"type":"INSERT","lineNumber":317,"content":"                                y = (homeLon * 1E7).toInt(),"},{"type":"INSERT","lineNumber":318,"content":"                                z = 10f // Takeoff altitude"},{"type":"INSERT","lineNumber":322,"content":"                        // Sequence 2+: User waypoints"},{"type":"INSERT","lineNumber":324,"content":"                            val seq = idx + 2"},{"type":"INSERT","lineNumber":326,"content":"                            val altitude = 10f // You may want to allow user to set this per waypoint"},{"type":"DELETE","lineNumber":325,"oldContent":"                        telemetryViewModel.readMissionFromFcu()"},{"type":"DELETE","lineNumber":327,"oldContent":"                        Toast.makeText("},{"type":"INSERT","lineNumber":347,"content":"                        telemetryViewModel.uploadMission(builtMission) { success, error ->"},{"type":"INSERT","lineNumber":348,"content":"                            if (success) {"},{"type":"INSERT","lineNumber":349,"content":"                                Toast.makeText(context, \"Mission uploaded\", Toast.LENGTH_SHORT)"},{"type":"INSERT","lineNumber":350,"content":"                                    .show()"},{"type":"INSERT","lineNumber":351,"content":"                                coroutineScope.launch { telemetryViewModel.readMissionFromFcu() }"},{"type":"INSERT","lineNumber":352,"content":"                                navController.navigate(Screen.Main.route) {"},{"type":"INSERT","lineNumber":353,"content":"                                    popUpTo(Screen.Plan.route) { inclusive = true }"},{"type":"INSERT","lineNumber":354,"content":"                                }"},{"type":"INSERT","lineNumber":355,"content":"                            } else {"},{"type":"INSERT","lineNumber":356,"content":"                                Toast.makeText("},{"type":"INSERT","lineNumber":357,"content":"                                    context,"},{"type":"INSERT","lineNumber":358,"content":"                                    error ?: \"Mission upload failed\","},{"type":"INSERT","lineNumber":359,"content":"                                    Toast.LENGTH_SHORT"},{"type":"INSERT","lineNumber":360,"content":"                                ).show()"},{"type":"INSERT","lineNumber":361,"content":"                            }"},{"type":"INSERT","lineNumber":362,"content":"                        }"},{"type":"INSERT","lineNumber":363,"content":"                    },"},{"type":"INSERT","lineNumber":364,"content":"                    enabled = points.isNotEmpty(),"},{"type":"INSERT","lineNumber":365,"content":"                    modifier = Modifier.fillMaxWidth()"},{"type":"INSERT","lineNumber":366,"content":"                ) {"},{"type":"INSERT","lineNumber":367,"content":"                    Text(\"Upload Mission (${points.size})\")"},{"type":"INSERT","lineNumber":368,"content":"                }"},{"type":"INSERT","lineNumber":369,"content":""},{"type":"INSERT","lineNumber":370,"content":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"INSERT","lineNumber":371,"content":""},{"type":"INSERT","lineNumber":372,"content":"                Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {"},{"type":"INSERT","lineNumber":373,"content":"                    Button(onClick = {"},{"type":"INSERT","lineNumber":374,"content":"                        telemetryViewModel.readMissionFromFcu()"},{"type":"INSERT","lineNumber":375,"content":"                        Toast.makeText("},{"type":"DELETE","lineNumber":331,"oldContent":"                        telemetryViewModel.uploadMission(builtMission) { success, error ->"},{"type":"DELETE","lineNumber":334,"oldContent":"                            if (success) {"},{"type":"DELETE","lineNumber":336,"oldContent":"                                Toast.makeText(context, \"Mission uploaded\", Toast.LENGTH_SHORT)"},{"type":"DELETE","lineNumber":339,"oldContent":"                                    .show()"},{"type":"DELETE","lineNumber":342,"oldContent":"                                coroutineScope.launch { telemetryViewModel.readMissionFromFcu() }"},{"type":"DELETE","lineNumber":344,"oldContent":"                                navController.navigate(Screen.Main.route) {"},{"type":"DELETE","lineNumber":347,"oldContent":"                                    popUpTo(Screen.Plan.route) { inclusive = true }"},{"type":"DELETE","lineNumber":350,"oldContent":"                                }"},{"type":"DELETE","lineNumber":353,"oldContent":"                            } else {"},{"type":"DELETE","lineNumber":355,"oldContent":"                                Toast.makeText("},{"type":"DELETE","lineNumber":357,"oldContent":"                                    context,"},{"type":"DELETE","lineNumber":360,"oldContent":"                                    error ?: \"Mission upload failed\","},{"type":"DELETE","lineNumber":363,"oldContent":"                                    Toast.LENGTH_SHORT"},{"type":"DELETE","lineNumber":365,"oldContent":"                                ).show()"},{"type":"DELETE","lineNumber":368,"oldContent":"                            }"},{"type":"DELETE","lineNumber":371,"oldContent":"                        }"},{"type":"DELETE","lineNumber":373,"oldContent":"                    },"},{"type":"DELETE","lineNumber":375,"oldContent":"                    enabled = points.isNotEmpty(),"},{"type":"DELETE","lineNumber":376,"oldContent":"                    modifier = Modifier.fillMaxWidth()"},{"type":"DELETE","lineNumber":377,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":378,"oldContent":"                    Text(\"Upload Mission (${points.size})\")"},{"type":"DELETE","lineNumber":379,"oldContent":"                }"},{"type":"DELETE","lineNumber":380,"oldContent":""},{"type":"DELETE","lineNumber":381,"oldContent":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"DELETE","lineNumber":382,"oldContent":""},{"type":"DELETE","lineNumber":383,"oldContent":"                Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {"},{"type":"DELETE","lineNumber":384,"oldContent":"                    Button(onClick = {"}]},{"timestamp":1758188627573,"changes":[{"type":"MODIFY","lineNumber":5,"content":"import androidx.compose.foundation.layout.*","oldContent":"import androidx.compose.foundation.layout.fillMaxSize"},{"type":"MODIFY","lineNumber":9,"content":"import androidx.compose.ui.Alignment","oldContent":"import androidx.compose.runtime.Composable"},{"type":"DELETE","lineNumber":206,"oldContent":"            }"},{"type":"INSERT","lineNumber":207,"content":"                )"},{"type":"INSERT","lineNumber":208,"content":"            }"},{"type":"DELETE","lineNumber":210,"oldContent":"                )"},{"type":"DELETE","lineNumber":238,"oldContent":"                    Icon(Icons.Default.Refresh, contentDescription = \"Recenter Map\")"},{"type":"DELETE","lineNumber":240,"oldContent":""},{"type":"INSERT","lineNumber":239,"content":"                    Icon(Icons.Default.Refresh, contentDescription = \"Recenter Map\")"},{"type":"INSERT","lineNumber":241,"content":""},{"type":"INSERT","lineNumber":253,"content":"                            if (mapType == MapType.SATELLITE) MapType.NORMAL else MapType.SATELLITE"},{"type":"DELETE","lineNumber":255,"oldContent":"                            if (mapType == MapType.SATELLITE) MapType.NORMAL else MapType.SATELLITE"},{"type":"DELETE","lineNumber":265,"oldContent":"            }"},{"type":"DELETE","lineNumber":267,"oldContent":"            // Bottom panel: upload and list"},{"type":"INSERT","lineNumber":266,"content":"            }"},{"type":"INSERT","lineNumber":268,"content":"            // Bottom panel: upload and list"},{"type":"DELETE","lineNumber":272,"oldContent":"                Button("},{"type":"INSERT","lineNumber":273,"content":"            ) {"},{"type":"INSERT","lineNumber":274,"content":"                Button("},{"type":"INSERT","lineNumber":275,"content":"                    onClick = {"},{"type":"DELETE","lineNumber":277,"oldContent":"            ) {"},{"type":"DELETE","lineNumber":282,"oldContent":"                    onClick = {"},{"type":"DELETE","lineNumber":289,"oldContent":"                                current = 1u, // True for first item"},{"type":"DELETE","lineNumber":291,"oldContent":"                                frame = MavEnumValue.of(MavFrame.GLOBAL_RELATIVE_ALT_INT),"},{"type":"INSERT","lineNumber":290,"content":"                                current = 1u, // True for first item"},{"type":"DELETE","lineNumber":295,"oldContent":"                                command = MavEnumValue.of(MavCmd.NAV_TAKEOFF),"},{"type":"DELETE","lineNumber":298,"oldContent":"                                autocontinue = 1u,"},{"type":"DELETE","lineNumber":301,"oldContent":"                                param1 = 0f,"},{"type":"DELETE","lineNumber":304,"oldContent":"                                param2 = 0f,"},{"type":"DELETE","lineNumber":306,"oldContent":"                                param3 = 0f,"},{"type":"DELETE","lineNumber":308,"oldContent":"                                param4 = 0f,"},{"type":"DELETE","lineNumber":310,"oldContent":"                            )"},{"type":"DELETE","lineNumber":312,"oldContent":"                        )"},{"type":"DELETE","lineNumber":314,"oldContent":""},{"type":"DELETE","lineNumber":316,"oldContent":"                        points.forEachIndexed { idx, latLng ->"},{"type":"DELETE","lineNumber":318,"oldContent":"                            val isLast = idx == points.lastIndex"},{"type":"INSERT","lineNumber":308,"content":"                                frame = MavEnumValue.of(MavFrame.GLOBAL_RELATIVE_ALT_INT),"},{"type":"INSERT","lineNumber":309,"content":"                                command = MavEnumValue.of(MavCmd.NAV_TAKEOFF),"},{"type":"INSERT","lineNumber":310,"content":"                                current = 0u,"},{"type":"INSERT","lineNumber":311,"content":"                                autocontinue = 1u,"},{"type":"INSERT","lineNumber":312,"content":"                                param1 = 0f,"},{"type":"INSERT","lineNumber":313,"content":"                                param2 = 0f,"},{"type":"INSERT","lineNumber":314,"content":"                                param3 = 0f,"},{"type":"INSERT","lineNumber":315,"content":"                                param4 = 0f,"},{"type":"INSERT","lineNumber":316,"content":"                                x = (homeLat * 1E7).toInt(),"},{"type":"INSERT","lineNumber":317,"content":"                                y = (homeLon * 1E7).toInt(),"},{"type":"INSERT","lineNumber":318,"content":"                                z = 10f // Takeoff altitude"},{"type":"INSERT","lineNumber":319,"content":"                            )"},{"type":"INSERT","lineNumber":320,"content":"                        )"},{"type":"INSERT","lineNumber":321,"content":""},{"type":"INSERT","lineNumber":322,"content":"                        // Sequence 2+: User waypoints"},{"type":"INSERT","lineNumber":323,"content":"                        points.forEachIndexed { idx, latLng ->"},{"type":"INSERT","lineNumber":324,"content":"                            val seq = idx + 2"},{"type":"INSERT","lineNumber":325,"content":"                            val isLast = idx == points.lastIndex"},{"type":"INSERT","lineNumber":326,"content":"                            val altitude = 10f // You may want to allow user to set this per waypoint"},{"type":"DELETE","lineNumber":323,"oldContent":"                                current = 0u,"},{"type":"DELETE","lineNumber":330,"oldContent":"                                x = (homeLat * 1E7).toInt(),"},{"type":"DELETE","lineNumber":332,"oldContent":"                                y = (homeLon * 1E7).toInt(),"},{"type":"DELETE","lineNumber":334,"oldContent":"                                z = 10f // Takeoff altitude"},{"type":"DELETE","lineNumber":339,"oldContent":"                        // Sequence 2+: User waypoints"},{"type":"DELETE","lineNumber":342,"oldContent":"                            val seq = idx + 2"},{"type":"DELETE","lineNumber":344,"oldContent":"                            val altitude = 10f // You may want to allow user to set this per waypoint"},{"type":"DELETE","lineNumber":347,"oldContent":"                            context,"},{"type":"DELETE","lineNumber":348,"oldContent":"                            \"Requested mission readback (check logs)\","},{"type":"DELETE","lineNumber":349,"oldContent":"                            Toast.LENGTH_SHORT"},{"type":"DELETE","lineNumber":350,"oldContent":"                        ).show()"},{"type":"DELETE","lineNumber":351,"oldContent":"                    }) {"},{"type":"DELETE","lineNumber":352,"oldContent":"                        Text(\"Read Mission (debug)\")"},{"type":"DELETE","lineNumber":353,"oldContent":"                    }"},{"type":"DELETE","lineNumber":354,"oldContent":"                    Button(onClick = {"},{"type":"DELETE","lineNumber":355,"oldContent":"                        telemetryViewModel.startMission { s, e ->"},{"type":"DELETE","lineNumber":356,"oldContent":"                            Toast.makeText("},{"type":"DELETE","lineNumber":357,"oldContent":"                                context,"},{"type":"DELETE","lineNumber":358,"oldContent":"                                if (s) \"Start sent\" else (e ?: \"Start failed\"),"},{"type":"DELETE","lineNumber":361,"oldContent":"                                Toast.LENGTH_SHORT"},{"type":"DELETE","lineNumber":363,"oldContent":"                            ).show()"},{"type":"DELETE","lineNumber":366,"oldContent":"                        }"},{"type":"DELETE","lineNumber":368,"oldContent":"                    }) {"},{"type":"DELETE","lineNumber":371,"oldContent":"                        Text(\"Start Mission\")"},{"type":"DELETE","lineNumber":374,"oldContent":"                    }"},{"type":"DELETE","lineNumber":377,"oldContent":"                }"},{"type":"DELETE","lineNumber":379,"oldContent":""},{"type":"DELETE","lineNumber":382,"oldContent":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"DELETE","lineNumber":384,"oldContent":""},{"type":"DELETE","lineNumber":387,"oldContent":"                // Waypoint list"},{"type":"DELETE","lineNumber":390,"oldContent":"                Column("},{"type":"DELETE","lineNumber":392,"oldContent":"                    modifier = Modifier"},{"type":"DELETE","lineNumber":395,"oldContent":"                        .fillMaxWidth()"},{"type":"DELETE","lineNumber":397,"oldContent":"                        .background(MaterialTheme.colorScheme.surfaceVariant)"},{"type":"DELETE","lineNumber":399,"oldContent":"                Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {"},{"type":"INSERT","lineNumber":372,"content":"//                Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {"},{"type":"INSERT","lineNumber":373,"content":"//                    Button(onClick = {"},{"type":"INSERT","lineNumber":374,"content":"//                        telemetryViewModel.readMissionFromFcu()"},{"type":"INSERT","lineNumber":375,"content":"//                        Toast.makeText("},{"type":"INSERT","lineNumber":376,"content":"//                            context,"},{"type":"INSERT","lineNumber":377,"content":"//                            \"Requested mission readback (check logs)\","},{"type":"INSERT","lineNumber":378,"content":"//                            Toast.LENGTH_SHORT"},{"type":"INSERT","lineNumber":379,"content":"//                        ).show()"},{"type":"INSERT","lineNumber":380,"content":"//                    }) {"},{"type":"INSERT","lineNumber":381,"content":"//                        Text(\"Read Mission (debug)\")"},{"type":"INSERT","lineNumber":382,"content":"//                    }"},{"type":"INSERT","lineNumber":383,"content":"//                    Button(onClick = {"},{"type":"INSERT","lineNumber":384,"content":"//                        telemetryViewModel.startMission { s, e ->"},{"type":"INSERT","lineNumber":385,"content":"//                            Toast.makeText("},{"type":"INSERT","lineNumber":386,"content":"//                                context,"},{"type":"INSERT","lineNumber":387,"content":"//                                if (s) \"Start sent\" else (e ?: \"Start failed\"),"},{"type":"INSERT","lineNumber":388,"content":"//                                Toast.LENGTH_SHORT"},{"type":"INSERT","lineNumber":389,"content":"//                            ).show()"},{"type":"INSERT","lineNumber":390,"content":"//                        }"},{"type":"INSERT","lineNumber":391,"content":"//                    }) {"},{"type":"INSERT","lineNumber":392,"content":"//                        Text(\"Start Mission\")"},{"type":"INSERT","lineNumber":393,"content":"//                    }"},{"type":"INSERT","lineNumber":394,"content":"//                }"},{"type":"INSERT","lineNumber":395,"content":""},{"type":"INSERT","lineNumber":396,"content":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"INSERT","lineNumber":397,"content":""},{"type":"INSERT","lineNumber":398,"content":"                // Waypoint list"},{"type":"INSERT","lineNumber":399,"content":"                Column("},{"type":"INSERT","lineNumber":400,"content":"                    modifier = Modifier"},{"type":"INSERT","lineNumber":401,"content":"                        .fillMaxWidth()"},{"type":"INSERT","lineNumber":402,"content":"                        .background(MaterialTheme.colorScheme.surfaceVariant)"},{"type":"DELETE","lineNumber":401,"oldContent":"                    Button(onClick = {"},{"type":"DELETE","lineNumber":402,"oldContent":"                        telemetryViewModel.readMissionFromFcu()"},{"type":"DELETE","lineNumber":404,"oldContent":"                        Toast.makeText("}]},{"timestamp":1758188652019,"changes":[{"type":"MODIFY","lineNumber":207,"content":"                )","oldContent":"                )"},{"type":"DELETE","lineNumber":238,"oldContent":"                    Icon(Icons.Default.Refresh, contentDescription = \"Recenter Map\")"},{"type":"DELETE","lineNumber":240,"oldContent":""},{"type":"INSERT","lineNumber":239,"content":"                    Icon(Icons.Default.Refresh, contentDescription = \"Recenter Map\")"},{"type":"INSERT","lineNumber":241,"content":""},{"type":"DELETE","lineNumber":265,"oldContent":"            }"},{"type":"DELETE","lineNumber":267,"oldContent":"            // Bottom panel: upload and list"},{"type":"INSERT","lineNumber":266,"content":"            }"},{"type":"INSERT","lineNumber":268,"content":"            // Bottom panel: upload and list"},{"type":"MODIFY","lineNumber":273,"content":"            ) {","oldContent":"            ) {"},{"type":"MODIFY","lineNumber":276,"content":"                        // Build correct MAVLink mission plan","oldContent":"                        // Build correct MAVLink mission plan"},{"type":"MODIFY","lineNumber":290,"content":"                                current = 1u, // True for first item","oldContent":"                                current = 1u, // True for first item"},{"type":"INSERT","lineNumber":302,"content":"                        // Sequence 1: Takeoff at home position"},{"type":"INSERT","lineNumber":303,"content":"                        builtMission.add("},{"type":"INSERT","lineNumber":304,"content":"                            MissionItemInt("},{"type":"INSERT","lineNumber":305,"content":"                                targetSystem = 0u,"},{"type":"INSERT","lineNumber":306,"content":"                                targetComponent = 0u,"},{"type":"INSERT","lineNumber":307,"content":"                                seq = 1u,"},{"type":"DELETE","lineNumber":304,"oldContent":"                        // Sequence 1: Takeoff at home position"},{"type":"DELETE","lineNumber":307,"oldContent":"                        builtMission.add("},{"type":"DELETE","lineNumber":310,"oldContent":"                            MissionItemInt("},{"type":"DELETE","lineNumber":313,"oldContent":"                                targetSystem = 0u,"},{"type":"DELETE","lineNumber":316,"oldContent":"                                targetComponent = 0u,"},{"type":"DELETE","lineNumber":319,"oldContent":"                                seq = 1u,"},{"type":"DELETE","lineNumber":321,"oldContent":"                            builtMission.add("},{"type":"DELETE","lineNumber":323,"oldContent":"                                MissionItemInt("},{"type":"DELETE","lineNumber":325,"oldContent":"                                    targetSystem = 0u,"},{"type":"DELETE","lineNumber":328,"oldContent":"                                    targetComponent = 0u,"},{"type":"DELETE","lineNumber":330,"oldContent":"                                    seq = seq.toUShort(),"},{"type":"INSERT","lineNumber":327,"content":"                            builtMission.add("},{"type":"INSERT","lineNumber":328,"content":"                                MissionItemInt("},{"type":"INSERT","lineNumber":329,"content":"                                    targetSystem = 0u,"},{"type":"INSERT","lineNumber":330,"content":"                                    targetComponent = 0u,"},{"type":"INSERT","lineNumber":331,"content":"                                    seq = seq.toUShort(),"},{"type":"DELETE","lineNumber":355,"oldContent":"//                Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {"},{"type":"MODIFY","lineNumber":357,"content":"                                    context,","oldContent":"//                    Button(onClick = {"},{"type":"INSERT","lineNumber":358,"content":"                                    error ?: \"Mission upload failed\","},{"type":"INSERT","lineNumber":359,"content":"                                    Toast.LENGTH_SHORT"},{"type":"INSERT","lineNumber":360,"content":"                                ).show()"},{"type":"INSERT","lineNumber":361,"content":"                            }"},{"type":"INSERT","lineNumber":362,"content":"                        }"},{"type":"INSERT","lineNumber":363,"content":"                    },"},{"type":"INSERT","lineNumber":364,"content":"                    enabled = points.isNotEmpty(),"},{"type":"INSERT","lineNumber":365,"content":"                    modifier = Modifier.fillMaxWidth()"},{"type":"INSERT","lineNumber":366,"content":"                ) {"},{"type":"INSERT","lineNumber":367,"content":"                    Text(\"Upload Mission (${points.size})\")"},{"type":"INSERT","lineNumber":368,"content":"                }"},{"type":"INSERT","lineNumber":369,"content":""},{"type":"INSERT","lineNumber":370,"content":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"INSERT","lineNumber":371,"content":""},{"type":"INSERT","lineNumber":372,"content":"//                Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {"},{"type":"INSERT","lineNumber":373,"content":"//                    Button(onClick = {"},{"type":"DELETE","lineNumber":361,"oldContent":"                                    context,"},{"type":"DELETE","lineNumber":363,"oldContent":"                                    error ?: \"Mission upload failed\","},{"type":"DELETE","lineNumber":366,"oldContent":"                                    Toast.LENGTH_SHORT"},{"type":"DELETE","lineNumber":369,"oldContent":"                                ).show()"},{"type":"DELETE","lineNumber":371,"oldContent":"                            }"},{"type":"DELETE","lineNumber":374,"oldContent":"                        }"},{"type":"DELETE","lineNumber":377,"oldContent":"                    },"},{"type":"DELETE","lineNumber":379,"oldContent":"                    enabled = points.isNotEmpty(),"},{"type":"DELETE","lineNumber":382,"oldContent":"                    modifier = Modifier.fillMaxWidth()"},{"type":"DELETE","lineNumber":384,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":387,"oldContent":"                    Text(\"Upload Mission (${points.size})\")"},{"type":"DELETE","lineNumber":390,"oldContent":"                }"},{"type":"DELETE","lineNumber":393,"oldContent":""},{"type":"DELETE","lineNumber":395,"oldContent":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"DELETE","lineNumber":398,"oldContent":""},{"type":"DELETE","lineNumber":399,"oldContent":"                Column("},{"type":"DELETE","lineNumber":400,"oldContent":"                    modifier = Modifier"},{"type":"DELETE","lineNumber":401,"oldContent":"                        .padding(8.dp)"},{"type":"DELETE","lineNumber":402,"oldContent":"                        .fillMaxWidth()"},{"type":"DELETE","lineNumber":403,"oldContent":"                        .background(MaterialTheme.colorScheme.surfaceVariant)"},{"type":"DELETE","lineNumber":404,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":405,"oldContent":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleSmall)"},{"type":"DELETE","lineNumber":406,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":407,"oldContent":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"},{"type":"DELETE","lineNumber":408,"oldContent":"                    }"},{"type":"INSERT","lineNumber":399,"content":"//                Column("},{"type":"INSERT","lineNumber":400,"content":"//                    modifier = Modifier"},{"type":"INSERT","lineNumber":401,"content":"//                        .fillMaxWidth()"},{"type":"INSERT","lineNumber":402,"content":"//                        .background(MaterialTheme.colorScheme.surfaceVariant)"},{"type":"INSERT","lineNumber":403,"content":"//                        .padding(8.dp)"},{"type":"INSERT","lineNumber":404,"content":"//                ) {"},{"type":"INSERT","lineNumber":405,"content":"//                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleSmall)"},{"type":"INSERT","lineNumber":406,"content":"//                    waypoints.forEachIndexed { idx, wp ->"},{"type":"INSERT","lineNumber":407,"content":"//                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"},{"type":"INSERT","lineNumber":408,"content":"//                    }"}]},{"timestamp":1758188665482,"changes":[{"type":"MODIFY","lineNumber":3,"content":"import android.widget.Toast","oldContent":"import androidx.compose.foundation.layout.Column"},{"type":"DELETE","lineNumber":16,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":17,"oldContent":"    telemetryViewModel: SharedViewModel,"},{"type":"DELETE","lineNumber":18,"oldContent":"    authViewModel: AuthViewModel,"},{"type":"DELETE","lineNumber":19,"oldContent":") {"},{"type":"DELETE","lineNumber":20,"oldContent":"    val telemetryState by telemetryViewModel.telemetryState.collectAsState()"},{"type":"DELETE","lineNumber":21,"oldContent":"    Scaffold("},{"type":"DELETE","lineNumber":22,"oldContent":"        floatingActionButton = {"},{"type":"DELETE","lineNumber":23,"oldContent":"                Text(\"Create Plan\")"},{"type":"INSERT","lineNumber":16,"content":"import androidx.compose.material.icons.filled.*"},{"type":"INSERT","lineNumber":17,"content":"import androidx.compose.ui.platform.LocalContext"},{"type":"INSERT","lineNumber":18,"content":"import com.google.android.gms.maps.model.LatLng"},{"type":"INSERT","lineNumber":19,"content":"import com.divpundir.mavlink.api.MavEnumValue"},{"type":"INSERT","lineNumber":20,"content":"import com.divpundir.mavlink.definitions.common.MavFrame"},{"type":"INSERT","lineNumber":21,"content":"import com.divpundir.mavlink.definitions.common.MavCmd"},{"type":"INSERT","lineNumber":22,"content":"import com.divpundir.mavlink.definitions.common.MissionItemInt"},{"type":"INSERT","lineNumber":23,"content":"import com.google.maps.android.compose.rememberCameraPositionState"},{"type":"MODIFY","lineNumber":36,"content":"    val context = LocalContext.current","oldContent":"            GcsMap(telemetryState = telemetryState)"},{"type":"DELETE","lineNumber":38,"oldContent":"    }"},{"type":"DELETE","lineNumber":39,"oldContent":"}"},{"type":"INSERT","lineNumber":38,"content":"    // Top navigation bar"},{"type":"INSERT","lineNumber":39,"content":"    TopNavBar("},{"type":"MODIFY","lineNumber":48,"content":"    // Map type state","oldContent":"                Column(modifier = Modifier.fillMaxWidth().background(MaterialTheme.colorScheme.surfaceVariant).padding(8.dp)) {"},{"type":"INSERT","lineNumber":49,"content":"    var mapType by remember { mutableStateOf(MapType.SATELLITE) }"},{"type":"INSERT","lineNumber":51,"content":"    // Camera state for map center / crosshair"},{"type":"INSERT","lineNumber":52,"content":"    val cameraPositionState = rememberCameraPositionState()"},{"type":"DELETE","lineNumber":51,"oldContent":"                    }"},{"type":"DELETE","lineNumber":52,"oldContent":"                    Button(onClick = { telemetryViewModel.startMission { s, e -> Toast.makeText(context, if (s) \"Start sent\" else (e ?: \"Start failed\"), Toast.LENGTH_SHORT).show() } }) {"},{"type":"DELETE","lineNumber":53,"oldContent":"                    }"},{"type":"DELETE","lineNumber":54,"oldContent":"                        Text(\"Read Mission (debug)\")"},{"type":"DELETE","lineNumber":55,"oldContent":"                Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {"},{"type":"DELETE","lineNumber":56,"oldContent":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"DELETE","lineNumber":57,"oldContent":""},{"type":"DELETE","lineNumber":58,"oldContent":"                    Text(\"Upload Mission (${waypoints.size})\")"},{"type":"DELETE","lineNumber":59,"oldContent":"                    modifier = Modifier.fillMaxWidth()"},{"type":"INSERT","lineNumber":54,"content":"    // Ensure we center the map once when Plan screen opens if we have telemetry"},{"type":"INSERT","lineNumber":55,"content":"    var centeredOnce by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":56,"content":"    LaunchedEffect(telemetryState.latitude, telemetryState.longitude) {"},{"type":"INSERT","lineNumber":57,"content":"        val lat = telemetryState.latitude"},{"type":"INSERT","lineNumber":58,"content":"        val lon = telemetryState.longitude"},{"type":"INSERT","lineNumber":59,"content":"        if (!centeredOnce && lat != null && lon != null) {"},{"type":"DELETE","lineNumber":61,"oldContent":"                        }"},{"type":"DELETE","lineNumber":62,"oldContent":"                            }"},{"type":"DELETE","lineNumber":63,"oldContent":"                            } else {"},{"type":"DELETE","lineNumber":64,"oldContent":"                                    }"},{"type":"DELETE","lineNumber":65,"oldContent":"                                    navController.navigate(Screen.Main.route) {"},{"type":"DELETE","lineNumber":66,"oldContent":"                                    // Navigate to main screen to show uploaded waypoints"},{"type":"DELETE","lineNumber":67,"oldContent":"                                coroutineScope.launch {"},{"type":"DELETE","lineNumber":68,"oldContent":"                                // After upload, request a readback to confirm what the FC stored"},{"type":"DELETE","lineNumber":69,"oldContent":"                            if (success) {"},{"type":"INSERT","lineNumber":61,"content":"            centeredOnce = true"},{"type":"INSERT","lineNumber":62,"content":"        }"},{"type":"INSERT","lineNumber":63,"content":"    }"},{"type":"INSERT","lineNumber":64,"content":""},{"type":"INSERT","lineNumber":65,"content":"    // Waypoint storage: geographic points and mission items"},{"type":"INSERT","lineNumber":66,"content":"    val points = remember { mutableStateListOf<LatLng>() }"},{"type":"INSERT","lineNumber":67,"content":"    val waypoints = remember { mutableStateListOf<MissionItemInt>() }"},{"type":"INSERT","lineNumber":68,"content":""},{"type":"INSERT","lineNumber":69,"content":"    // Helper to build MissionItemInt from LatLng"},{"type":"DELETE","lineNumber":88,"oldContent":"                }"},{"type":"DELETE","lineNumber":89,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":90,"oldContent":"                    modifier = Modifier.size(56.dp)"},{"type":"DELETE","lineNumber":91,"oldContent":"                    onClick = { mapType = if (mapType == MapType.SATELLITE) MapType.NORMAL else MapType.SATELLITE },"},{"type":"DELETE","lineNumber":92,"oldContent":""},{"type":"DELETE","lineNumber":93,"oldContent":"                    Icon(Icons.Default.FlightTakeoff, contentDescription = \"Arm\")"},{"type":"INSERT","lineNumber":88,"content":"            param3 = 0f,"},{"type":"INSERT","lineNumber":89,"content":"            param4 = 0f,"},{"type":"INSERT","lineNumber":90,"content":"            x = (latLng.latitude * 1E7).toInt(),"},{"type":"INSERT","lineNumber":91,"content":"            y = (latLng.longitude * 1E7).toInt(),"},{"type":"INSERT","lineNumber":92,"content":"            z = alt"},{"type":"INSERT","lineNumber":93,"content":"        )"},{"type":"MODIFY","lineNumber":95,"content":"","oldContent":"                    onClick = { telemetryViewModel.arm() },"},{"type":"MODIFY","lineNumber":97,"content":"    val onMapClick: (LatLng) -> Unit = { latLng ->","oldContent":"            ) {"},{"type":"DELETE","lineNumber":163,"oldContent":"                            x = (homeLat * 1E7).toInt(),"},{"type":"DELETE","lineNumber":164,"oldContent":"                            param3 = 0f,"},{"type":"INSERT","lineNumber":163,"content":"            }"},{"type":"INSERT","lineNumber":164,"content":"        }"},{"type":"INSERT","lineNumber":206,"content":"                    modifier = Modifier.size(28.dp)"},{"type":"DELETE","lineNumber":207,"oldContent":"                )"},{"type":"DELETE","lineNumber":238,"oldContent":"                    Icon(Icons.Default.Refresh, contentDescription = \"Recenter Map\")"},{"type":"DELETE","lineNumber":240,"oldContent":""},{"type":"INSERT","lineNumber":239,"content":"                    Icon(Icons.Default.Refresh, contentDescription = \"Recenter Map\")"},{"type":"INSERT","lineNumber":241,"content":""},{"type":"DELETE","lineNumber":265,"oldContent":"            }"},{"type":"DELETE","lineNumber":267,"oldContent":"            // Bottom panel: upload and list"},{"type":"INSERT","lineNumber":266,"content":"            }"},{"type":"INSERT","lineNumber":268,"content":"            // Bottom panel: upload and list"},{"type":"INSERT","lineNumber":272,"content":"                    .padding(12.dp)"},{"type":"DELETE","lineNumber":273,"oldContent":"            ) {"},{"type":"INSERT","lineNumber":275,"content":"                    onClick = {"},{"type":"DELETE","lineNumber":276,"oldContent":"                        // Build correct MAVLink mission plan"},{"type":"INSERT","lineNumber":289,"content":"                                command = MavEnumValue.of(MavCmd.NAV_WAYPOINT),"},{"type":"DELETE","lineNumber":290,"oldContent":"                                current = 1u, // True for first item"},{"type":"DELETE","lineNumber":303,"oldContent":"                                frame = MavEnumValue.of(MavFrame.GLOBAL_RELATIVE_ALT_INT),"},{"type":"DELETE","lineNumber":305,"oldContent":"                                command = MavEnumValue.of(MavCmd.NAV_TAKEOFF),"},{"type":"DELETE","lineNumber":308,"oldContent":"                                current = 0u,"},{"type":"DELETE","lineNumber":310,"oldContent":"                                autocontinue = 1u,"},{"type":"INSERT","lineNumber":308,"content":"                                frame = MavEnumValue.of(MavFrame.GLOBAL_RELATIVE_ALT_INT),"},{"type":"INSERT","lineNumber":309,"content":"                                command = MavEnumValue.of(MavCmd.NAV_TAKEOFF),"},{"type":"INSERT","lineNumber":310,"content":"                                current = 0u,"},{"type":"INSERT","lineNumber":311,"content":"                                autocontinue = 1u,"},{"type":"DELETE","lineNumber":324,"oldContent":"                            builtMission.add("},{"type":"INSERT","lineNumber":325,"content":"                            val isLast = idx == points.lastIndex"},{"type":"INSERT","lineNumber":326,"content":"                            val altitude = 10f // You may want to allow user to set this per waypoint"},{"type":"INSERT","lineNumber":327,"content":"                            builtMission.add("},{"type":"DELETE","lineNumber":328,"oldContent":"                            val isLast = idx == points.lastIndex"},{"type":"DELETE","lineNumber":331,"oldContent":"                            val altitude = 10f // You may want to allow user to set this per waypoint"},{"type":"INSERT","lineNumber":356,"content":"                                Toast.makeText("},{"type":"DELETE","lineNumber":358,"oldContent":"                                Toast.makeText("},{"type":"DELETE","lineNumber":360,"oldContent":"//                        telemetryViewModel.readMissionFromFcu()"},{"type":"DELETE","lineNumber":362,"oldContent":"//                        Toast.makeText("},{"type":"DELETE","lineNumber":365,"oldContent":"//                            context,"},{"type":"DELETE","lineNumber":368,"oldContent":"//                            \"Requested mission readback (check logs)\","},{"type":"DELETE","lineNumber":370,"oldContent":"//                            Toast.LENGTH_SHORT"},{"type":"DELETE","lineNumber":373,"oldContent":"//                        ).show()"},{"type":"DELETE","lineNumber":375,"oldContent":"//                    }) {"},{"type":"DELETE","lineNumber":378,"oldContent":"//                        Text(\"Read Mission (debug)\")"},{"type":"INSERT","lineNumber":373,"content":"//                    Button(onClick = {"},{"type":"INSERT","lineNumber":374,"content":"//                        telemetryViewModel.readMissionFromFcu()"},{"type":"INSERT","lineNumber":375,"content":"//                        Toast.makeText("},{"type":"INSERT","lineNumber":376,"content":"//                            context,"},{"type":"INSERT","lineNumber":377,"content":"//                            \"Requested mission readback (check logs)\","},{"type":"INSERT","lineNumber":378,"content":"//                            Toast.LENGTH_SHORT"},{"type":"INSERT","lineNumber":379,"content":"//                        ).show()"},{"type":"INSERT","lineNumber":380,"content":"//                    }) {"},{"type":"INSERT","lineNumber":381,"content":"//                        Text(\"Read Mission (debug)\")"},{"type":"DELETE","lineNumber":383,"oldContent":"//                    Button(onClick = {"},{"type":"MODIFY","lineNumber":409,"content":"                ","oldContent":"                }"}]},{"timestamp":1758188671446,"changes":[{"type":"DELETE","lineNumber":33,"oldContent":"        }"},{"type":"DELETE","lineNumber":34,"oldContent":"    ) { paddingValues ->"},{"type":"DELETE","lineNumber":35,"oldContent":"            modifier = Modifier"},{"type":"INSERT","lineNumber":33,"content":"    navController: NavHostController"},{"type":"INSERT","lineNumber":34,"content":") {"},{"type":"INSERT","lineNumber":35,"content":"    val telemetryState by telemetryViewModel.telemetryState.collectAsState()"},{"type":"MODIFY","lineNumber":37,"content":"","oldContent":"            TopNavBar("},{"type":"DELETE","lineNumber":50,"oldContent":"                modifier = Modifier"},{"type":"DELETE","lineNumber":51,"oldContent":"            Column("},{"type":"INSERT","lineNumber":50,"content":""},{"type":"INSERT","lineNumber":53,"content":""},{"type":"MODIFY","lineNumber":142,"content":"                    ) {","oldContent":"                            param1 = 0f,"},{"type":"DELETE","lineNumber":238,"oldContent":"                    Icon(Icons.Default.Refresh, contentDescription = \"Recenter Map\")"},{"type":"DELETE","lineNumber":240,"oldContent":""},{"type":"INSERT","lineNumber":239,"content":"                    Icon(Icons.Default.Refresh, contentDescription = \"Recenter Map\")"},{"type":"INSERT","lineNumber":241,"content":""},{"type":"DELETE","lineNumber":265,"oldContent":"            }"},{"type":"DELETE","lineNumber":267,"oldContent":"            // Bottom panel: upload and list"},{"type":"INSERT","lineNumber":266,"content":"            }"},{"type":"INSERT","lineNumber":268,"content":"            // Bottom panel: upload and list"},{"type":"INSERT","lineNumber":306,"content":"                                targetComponent = 0u,"},{"type":"INSERT","lineNumber":307,"content":"                                seq = 1u,"},{"type":"DELETE","lineNumber":308,"oldContent":"                                targetComponent = 0u,"},{"type":"DELETE","lineNumber":311,"oldContent":"                                seq = 1u,"},{"type":"MODIFY","lineNumber":325,"content":"                            val isLast = idx == points.lastIndex","oldContent":"                            val isLast = idx == points.lastIndex"},{"type":"MODIFY","lineNumber":328,"content":"                                MissionItemInt(","oldContent":"                                MissionItemInt("},{"type":"INSERT","lineNumber":368,"content":"                }"},{"type":"INSERT","lineNumber":369,"content":""},{"type":"INSERT","lineNumber":370,"content":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"INSERT","lineNumber":371,"content":""},{"type":"INSERT","lineNumber":372,"content":"//                Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {"},{"type":"DELETE","lineNumber":370,"oldContent":"                }"},{"type":"DELETE","lineNumber":373,"oldContent":""},{"type":"DELETE","lineNumber":375,"oldContent":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"DELETE","lineNumber":378,"oldContent":""},{"type":"DELETE","lineNumber":380,"oldContent":"//                Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {"},{"type":"MODIFY","lineNumber":409,"content":"//                }","oldContent":"                "}]},{"timestamp":1758188762596,"changes":[{"type":"MODIFY","lineNumber":4,"content":"import androidx.compose.foundation.background","oldContent":"import androidx.compose.foundation.layout.fillMaxSize"},{"type":"MODIFY","lineNumber":7,"content":"import androidx.compose.material3.FloatingActionButton","oldContent":"import androidx.compose.material3.Scaffold"},{"type":"MODIFY","lineNumber":10,"content":"import androidx.compose.ui.Modifier","oldContent":"import androidx.compose.runtime.collectAsState"},{"type":"DELETE","lineNumber":25,"oldContent":""},{"type":"DELETE","lineNumber":26,"oldContent":"    Scaffold("},{"type":"INSERT","lineNumber":25,"content":"import com.example.aerogcsclone.navigation.Screen"},{"type":"INSERT","lineNumber":26,"content":"import kotlinx.coroutines.launch"},{"type":"DELETE","lineNumber":28,"oldContent":"            FloatingActionButton(onClick = { /* TODO */ }) {"},{"type":"DELETE","lineNumber":29,"oldContent":"            }"},{"type":"INSERT","lineNumber":28,"content":""},{"type":"INSERT","lineNumber":29,"content":"@Composable"},{"type":"DELETE","lineNumber":46,"oldContent":"        }"},{"type":"DELETE","lineNumber":47,"oldContent":"}"},{"type":"INSERT","lineNumber":46,"content":"    var showPlanActions by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":47,"content":""},{"type":"MODIFY","lineNumber":53,"content":"","oldContent":""},{"type":"DELETE","lineNumber":238,"oldContent":"                    Icon(Icons.Default.Refresh, contentDescription = \"Recenter Map\")"},{"type":"DELETE","lineNumber":240,"oldContent":""},{"type":"INSERT","lineNumber":239,"content":"                    Icon(Icons.Default.Refresh, contentDescription = \"Recenter Map\")"},{"type":"INSERT","lineNumber":241,"content":""},{"type":"DELETE","lineNumber":265,"oldContent":"            }"},{"type":"DELETE","lineNumber":267,"oldContent":"            // Bottom panel: upload and list"},{"type":"INSERT","lineNumber":266,"content":"            }"},{"type":"INSERT","lineNumber":268,"content":"            // Bottom panel: upload and list"},{"type":"MODIFY","lineNumber":308,"content":"                                frame = MavEnumValue.of(MavFrame.GLOBAL_RELATIVE_ALT_INT),","oldContent":"                                frame = MavEnumValue.of(MavFrame.GLOBAL_RELATIVE_ALT_INT),"},{"type":"INSERT","lineNumber":324,"content":"                            val seq = idx + 2"},{"type":"DELETE","lineNumber":325,"oldContent":"                            val isLast = idx == points.lastIndex"},{"type":"INSERT","lineNumber":327,"content":"                            builtMission.add("},{"type":"DELETE","lineNumber":328,"oldContent":"                                MissionItemInt("},{"type":"DELETE","lineNumber":369,"oldContent":"//                    Button(onClick = {"},{"type":"DELETE","lineNumber":371,"oldContent":"//                        telemetryViewModel.readMissionFromFcu()"},{"type":"MODIFY","lineNumber":373,"content":"//                    Button(onClick = {","oldContent":"//                        Toast.makeText("},{"type":"INSERT","lineNumber":374,"content":"//                        telemetryViewModel.readMissionFromFcu()"},{"type":"INSERT","lineNumber":375,"content":"//                        Toast.makeText("},{"type":"DELETE","lineNumber":396,"oldContent":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"DELETE","lineNumber":397,"oldContent":""},{"type":"DELETE","lineNumber":398,"oldContent":"                // Waypoint list"},{"type":"DELETE","lineNumber":399,"oldContent":"//                Column("},{"type":"DELETE","lineNumber":400,"oldContent":"//                    modifier = Modifier"},{"type":"DELETE","lineNumber":401,"oldContent":"//                        .fillMaxWidth()"},{"type":"DELETE","lineNumber":402,"oldContent":"//                        .background(MaterialTheme.colorScheme.surfaceVariant)"},{"type":"DELETE","lineNumber":403,"oldContent":"//                        .padding(8.dp)"},{"type":"DELETE","lineNumber":404,"oldContent":"//                ) {"},{"type":"DELETE","lineNumber":405,"oldContent":"//                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleSmall)"},{"type":"DELETE","lineNumber":406,"oldContent":"//                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":407,"oldContent":"//                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"},{"type":"DELETE","lineNumber":408,"oldContent":"//                    }"},{"type":"DELETE","lineNumber":409,"oldContent":"//                }"},{"type":"INSERT","lineNumber":396,"content":"                "}]},{"timestamp":1758188777377,"changes":[{"type":"MODIFY","lineNumber":24,"content":"import com.google.maps.android.compose.MapType","oldContent":""},{"type":"DELETE","lineNumber":31,"oldContent":"            }"},{"type":"DELETE","lineNumber":32,"oldContent":"        }"},{"type":"INSERT","lineNumber":31,"content":"    telemetryViewModel: SharedViewModel,"},{"type":"INSERT","lineNumber":32,"content":"    authViewModel: AuthViewModel,"},{"type":"DELETE","lineNumber":40,"oldContent":"                authViewModel = authViewModel,"},{"type":"DELETE","lineNumber":41,"oldContent":"            )"},{"type":"DELETE","lineNumber":42,"oldContent":"            GcsMap(telemetryState = telemetryState)"},{"type":"INSERT","lineNumber":40,"content":"        telemetryState = telemetryState,"},{"type":"INSERT","lineNumber":41,"content":"        authViewModel = authViewModel,"},{"type":"INSERT","lineNumber":42,"content":"        navController = navController"},{"type":"INSERT","lineNumber":52,"content":"    val cameraPositionState = rememberCameraPositionState()"},{"type":"DELETE","lineNumber":53,"oldContent":""},{"type":"MODIFY","lineNumber":94,"content":"    }","oldContent":"                                param3 = 0f,"},{"type":"DELETE","lineNumber":238,"oldContent":"                    Icon(Icons.Default.Refresh, contentDescription = \"Recenter Map\")"},{"type":"DELETE","lineNumber":240,"oldContent":""},{"type":"INSERT","lineNumber":239,"content":"                    Icon(Icons.Default.Refresh, contentDescription = \"Recenter Map\")"},{"type":"INSERT","lineNumber":241,"content":""},{"type":"DELETE","lineNumber":265,"oldContent":"            }"},{"type":"DELETE","lineNumber":267,"oldContent":"            // Bottom panel: upload and list"},{"type":"INSERT","lineNumber":266,"content":"            }"},{"type":"INSERT","lineNumber":268,"content":"            // Bottom panel: upload and list"},{"type":"INSERT","lineNumber":307,"content":"                                seq = 1u,"},{"type":"DELETE","lineNumber":308,"oldContent":"                                frame = MavEnumValue.of(MavFrame.GLOBAL_RELATIVE_ALT_INT),"},{"type":"DELETE","lineNumber":369,"oldContent":""},{"type":"DELETE","lineNumber":370,"oldContent":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"DELETE","lineNumber":371,"oldContent":"//                    Button(onClick = {"},{"type":"DELETE","lineNumber":372,"oldContent":"//                        telemetryViewModel.readMissionFromFcu()"},{"type":"DELETE","lineNumber":373,"oldContent":"//                        Toast.makeText("},{"type":"DELETE","lineNumber":374,"oldContent":"//                        Toast.makeText("},{"type":"DELETE","lineNumber":375,"oldContent":"//                Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {"},{"type":"DELETE","lineNumber":376,"oldContent":"//                            context,"},{"type":"DELETE","lineNumber":377,"oldContent":"//                            \"Requested mission readback (check logs)\","},{"type":"DELETE","lineNumber":378,"oldContent":"//                            Toast.LENGTH_SHORT"},{"type":"DELETE","lineNumber":379,"oldContent":"//                        ).show()"},{"type":"DELETE","lineNumber":380,"oldContent":"//                    }) {"},{"type":"DELETE","lineNumber":381,"oldContent":"//                        Text(\"Read Mission (debug)\")"},{"type":"DELETE","lineNumber":382,"oldContent":"//                    }"},{"type":"DELETE","lineNumber":383,"oldContent":"//                    Button(onClick = {"},{"type":"DELETE","lineNumber":384,"oldContent":"//                        telemetryViewModel.startMission { s, e ->"},{"type":"DELETE","lineNumber":385,"oldContent":"//                            Toast.makeText("},{"type":"DELETE","lineNumber":386,"oldContent":"//                                context,"},{"type":"DELETE","lineNumber":387,"oldContent":"//                                if (s) \"Start sent\" else (e ?: \"Start failed\"),"},{"type":"DELETE","lineNumber":388,"oldContent":"//                                Toast.LENGTH_SHORT"},{"type":"DELETE","lineNumber":389,"oldContent":"//                            ).show()"},{"type":"DELETE","lineNumber":390,"oldContent":"//                        }"},{"type":"DELETE","lineNumber":391,"oldContent":"//                    }) {"},{"type":"DELETE","lineNumber":392,"oldContent":"//                        Text(\"Start Mission\")"},{"type":"DELETE","lineNumber":393,"oldContent":"//                    }"},{"type":"DELETE","lineNumber":394,"oldContent":"//                }"},{"type":"DELETE","lineNumber":395,"oldContent":""},{"type":"DELETE","lineNumber":396,"oldContent":"                "}]},{"timestamp":1758190224830,"changes":[{"type":"MODIFY","lineNumber":30,"content":"fun PlanScreen(","oldContent":"            }"},{"type":"DELETE","lineNumber":44,"oldContent":"            GcsMap(telemetryState = telemetryState)"},{"type":"DELETE","lineNumber":45,"oldContent":"        }"},{"type":"INSERT","lineNumber":44,"content":""},{"type":"INSERT","lineNumber":45,"content":"    // State to toggle plan action buttons"},{"type":"DELETE","lineNumber":238,"oldContent":"                    Icon(Icons.Default.Refresh, contentDescription = \"Recenter Map\")"},{"type":"DELETE","lineNumber":240,"oldContent":""},{"type":"INSERT","lineNumber":239,"content":"                    Icon(Icons.Default.Refresh, contentDescription = \"Recenter Map\")"},{"type":"INSERT","lineNumber":241,"content":""},{"type":"DELETE","lineNumber":265,"oldContent":"            }"},{"type":"DELETE","lineNumber":267,"oldContent":"            // Bottom panel: upload and list"},{"type":"INSERT","lineNumber":266,"content":"            }"},{"type":"INSERT","lineNumber":268,"content":"            // Bottom panel: upload and list"},{"type":"INSERT","lineNumber":369,"content":""},{"type":"INSERT","lineNumber":370,"content":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"INSERT","lineNumber":371,"content":""},{"type":"INSERT","lineNumber":372,"content":"                Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {"},{"type":"INSERT","lineNumber":373,"content":"                    Button(onClick = {"},{"type":"INSERT","lineNumber":374,"content":"                        telemetryViewModel.readMissionFromFcu()"},{"type":"INSERT","lineNumber":375,"content":"                        Toast.makeText("},{"type":"INSERT","lineNumber":376,"content":"                            context,"},{"type":"INSERT","lineNumber":377,"content":"                            \"Requested mission readback (check logs)\","},{"type":"INSERT","lineNumber":378,"content":"                            Toast.LENGTH_SHORT"},{"type":"INSERT","lineNumber":379,"content":"                        ).show()"},{"type":"INSERT","lineNumber":380,"content":"                    }) {"},{"type":"INSERT","lineNumber":381,"content":"                        Text(\"Read Mission (debug)\")"},{"type":"INSERT","lineNumber":382,"content":"                    }"},{"type":"INSERT","lineNumber":383,"content":"                    Button(onClick = {"},{"type":"INSERT","lineNumber":384,"content":"                        telemetryViewModel.startMission { s, e ->"},{"type":"INSERT","lineNumber":385,"content":"                            Toast.makeText("},{"type":"INSERT","lineNumber":386,"content":"                                context,"},{"type":"INSERT","lineNumber":387,"content":"                                if (s) \"Start sent\" else (e ?: \"Start failed\"),"},{"type":"INSERT","lineNumber":388,"content":"                                Toast.LENGTH_SHORT"},{"type":"INSERT","lineNumber":389,"content":"                            ).show()"},{"type":"INSERT","lineNumber":390,"content":"                        }"},{"type":"INSERT","lineNumber":391,"content":"                    }) {"},{"type":"INSERT","lineNumber":392,"content":"                        Text(\"Start Mission\")"},{"type":"INSERT","lineNumber":393,"content":"                    }"},{"type":"INSERT","lineNumber":394,"content":"                }"},{"type":"INSERT","lineNumber":395,"content":""},{"type":"INSERT","lineNumber":396,"content":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"INSERT","lineNumber":397,"content":""},{"type":"INSERT","lineNumber":398,"content":"                // Waypoint list"},{"type":"INSERT","lineNumber":399,"content":"                Column("},{"type":"INSERT","lineNumber":400,"content":"                    modifier = Modifier"},{"type":"INSERT","lineNumber":401,"content":"                        .fillMaxWidth()"},{"type":"INSERT","lineNumber":402,"content":"                        .background(MaterialTheme.colorScheme.surfaceVariant)"},{"type":"INSERT","lineNumber":403,"content":"                        .padding(8.dp)"},{"type":"INSERT","lineNumber":404,"content":"                ) {"},{"type":"INSERT","lineNumber":405,"content":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleSmall)"},{"type":"INSERT","lineNumber":406,"content":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"INSERT","lineNumber":407,"content":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"},{"type":"INSERT","lineNumber":408,"content":"                    }"},{"type":"INSERT","lineNumber":409,"content":"                }"}]},{"timestamp":1758191011962,"changes":[{"type":"INSERT","lineNumber":6,"content":"import androidx.compose.material3.*"},{"type":"DELETE","lineNumber":7,"oldContent":"import androidx.compose.material3.FloatingActionButton"},{"type":"MODIFY","lineNumber":8,"content":"import androidx.compose.runtime.*","oldContent":"import androidx.compose.material3.Text"},{"type":"MODIFY","lineNumber":11,"content":"import androidx.compose.ui.unit.dp","oldContent":"import androidx.compose.runtime.getValue"},{"type":"MODIFY","lineNumber":14,"content":"import com.example.aerogcsclone.authentication.AuthViewModel","oldContent":"import androidx.navigation.NavHostController"},{"type":"MODIFY","lineNumber":43,"content":"    )","oldContent":"            GcsMap(telemetryState = telemetryState)"},{"type":"MODIFY","lineNumber":108,"content":"        floatingActionButton = {","oldContent":"                            )"},{"type":"DELETE","lineNumber":238,"oldContent":"                    Icon(Icons.Default.Refresh, contentDescription = \"Recenter Map\")"},{"type":"DELETE","lineNumber":240,"oldContent":""},{"type":"INSERT","lineNumber":239,"content":"                    Icon(Icons.Default.Refresh, contentDescription = \"Recenter Map\")"},{"type":"INSERT","lineNumber":241,"content":""},{"type":"DELETE","lineNumber":265,"oldContent":"            }"},{"type":"DELETE","lineNumber":267,"oldContent":"            // Bottom panel: upload and list"},{"type":"INSERT","lineNumber":266,"content":"            }"},{"type":"INSERT","lineNumber":268,"content":"            // Bottom panel: upload and list"},{"type":"DELETE","lineNumber":369,"oldContent":""},{"type":"DELETE","lineNumber":371,"oldContent":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"DELETE","lineNumber":373,"oldContent":""},{"type":"DELETE","lineNumber":375,"oldContent":"                Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {"},{"type":"DELETE","lineNumber":377,"oldContent":"                    Button(onClick = {"},{"type":"DELETE","lineNumber":379,"oldContent":"                        telemetryViewModel.readMissionFromFcu()"},{"type":"DELETE","lineNumber":380,"oldContent":"                }"},{"type":"DELETE","lineNumber":381,"oldContent":"                        Toast.makeText("},{"type":"DELETE","lineNumber":382,"oldContent":"                    }"},{"type":"DELETE","lineNumber":383,"oldContent":"                            context,"},{"type":"DELETE","lineNumber":384,"oldContent":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"},{"type":"DELETE","lineNumber":385,"oldContent":"                            \"Requested mission readback (check logs)\","},{"type":"DELETE","lineNumber":386,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":387,"oldContent":"                            Toast.LENGTH_SHORT"},{"type":"DELETE","lineNumber":388,"oldContent":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleSmall)"},{"type":"DELETE","lineNumber":389,"oldContent":"                        ).show()"},{"type":"DELETE","lineNumber":390,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":391,"oldContent":"                    }) {"},{"type":"DELETE","lineNumber":392,"oldContent":"                        .padding(8.dp)"},{"type":"DELETE","lineNumber":393,"oldContent":"                        Text(\"Read Mission (debug)\")"},{"type":"DELETE","lineNumber":394,"oldContent":"                        .background(MaterialTheme.colorScheme.surfaceVariant)"},{"type":"DELETE","lineNumber":395,"oldContent":"                    }"},{"type":"DELETE","lineNumber":396,"oldContent":"                        .fillMaxWidth()"},{"type":"DELETE","lineNumber":397,"oldContent":"                    Button(onClick = {"},{"type":"DELETE","lineNumber":398,"oldContent":"                    modifier = Modifier"},{"type":"DELETE","lineNumber":399,"oldContent":"                        telemetryViewModel.startMission { s, e ->"},{"type":"DELETE","lineNumber":400,"oldContent":"                Column("},{"type":"DELETE","lineNumber":401,"oldContent":"                            Toast.makeText("},{"type":"DELETE","lineNumber":402,"oldContent":"                // Waypoint list"},{"type":"DELETE","lineNumber":403,"oldContent":"                                context,"},{"type":"DELETE","lineNumber":404,"oldContent":""},{"type":"DELETE","lineNumber":405,"oldContent":"                                if (s) \"Start sent\" else (e ?: \"Start failed\"),"},{"type":"DELETE","lineNumber":406,"oldContent":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"DELETE","lineNumber":407,"oldContent":"                                Toast.LENGTH_SHORT"},{"type":"DELETE","lineNumber":408,"oldContent":""},{"type":"DELETE","lineNumber":409,"oldContent":"                            ).show()"},{"type":"DELETE","lineNumber":410,"oldContent":"                }"},{"type":"DELETE","lineNumber":411,"oldContent":"                        }"},{"type":"DELETE","lineNumber":412,"oldContent":"                    }"},{"type":"DELETE","lineNumber":413,"oldContent":"                    }) {"},{"type":"DELETE","lineNumber":414,"oldContent":"                        Text(\"Start Mission\")"}]},{"timestamp":1758191182190,"changes":[{"type":"MODIFY","lineNumber":12,"content":"import androidx.navigation.NavHostController","oldContent":"import androidx.compose.ui.Modifier"},{"type":"DELETE","lineNumber":148,"oldContent":"                    points.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":149,"oldContent":""},{"type":"INSERT","lineNumber":148,"content":"                        modifier = Modifier"},{"type":"INSERT","lineNumber":149,"content":"                            .padding(bottom = 12.dp)"},{"type":"DELETE","lineNumber":156,"oldContent":"                    Text(\"Upload Mission (${points.size})\")"},{"type":"DELETE","lineNumber":157,"oldContent":"                    enabled = points.isNotEmpty(),"},{"type":"DELETE","lineNumber":158,"oldContent":"                            }"},{"type":"DELETE","lineNumber":159,"oldContent":"                        telemetryViewModel.uploadMission(missionItems) { success, error ->"},{"type":"DELETE","lineNumber":160,"oldContent":"                        }"},{"type":"DELETE","lineNumber":161,"oldContent":"                                )"},{"type":"DELETE","lineNumber":162,"oldContent":"                                    homeAlt"},{"type":"INSERT","lineNumber":156,"content":"                // Main Create Plan button"},{"type":"INSERT","lineNumber":157,"content":"                FloatingActionButton("},{"type":"INSERT","lineNumber":158,"content":"                    onClick = { showPlanActions = !showPlanActions },"},{"type":"INSERT","lineNumber":159,"content":"                    modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":160,"content":"                ) {"},{"type":"INSERT","lineNumber":161,"content":"                    Icon(Icons.Default.Menu, contentDescription = \"Create Plan\")"},{"type":"INSERT","lineNumber":162,"content":"                }"},{"type":"DELETE","lineNumber":168,"oldContent":"                        for (i in 1 until userPoints.size) {"},{"type":"DELETE","lineNumber":169,"oldContent":"                        // All user waypoints (seq=2...N)"},{"type":"DELETE","lineNumber":170,"oldContent":"                        }"},{"type":"DELETE","lineNumber":171,"oldContent":"                            )"},{"type":"DELETE","lineNumber":172,"oldContent":"                                )"},{"type":"DELETE","lineNumber":173,"oldContent":"                                    homeAlt"},{"type":"INSERT","lineNumber":168,"content":"            GcsMap("},{"type":"INSERT","lineNumber":169,"content":"                telemetryState = telemetryState,"},{"type":"INSERT","lineNumber":170,"content":"                points = points,"},{"type":"INSERT","lineNumber":171,"content":"                onMapClick = onMapClick,"},{"type":"INSERT","lineNumber":172,"content":"                cameraPositionState = cameraPositionState,"},{"type":"INSERT","lineNumber":173,"content":"                mapType = mapType,"},{"type":"DELETE","lineNumber":175,"oldContent":"                                    1,"},{"type":"DELETE","lineNumber":176,"oldContent":"                                    userPoints[0],"},{"type":"INSERT","lineNumber":175,"content":"            )"},{"type":"INSERT","lineNumber":176,"content":""},{"type":"DELETE","lineNumber":238,"oldContent":"                    Icon(Icons.Default.Refresh, contentDescription = \"Recenter Map\")"},{"type":"DELETE","lineNumber":240,"oldContent":""},{"type":"INSERT","lineNumber":239,"content":"                    Icon(Icons.Default.Refresh, contentDescription = \"Recenter Map\")"},{"type":"INSERT","lineNumber":241,"content":""},{"type":"MODIFY","lineNumber":266,"content":"            }","oldContent":"            }"},{"type":"INSERT","lineNumber":267,"content":""},{"type":"DELETE","lineNumber":268,"oldContent":"                        .fillMaxWidth()"},{"type":"MODIFY","lineNumber":369,"content":"","oldContent":"            }"},{"type":"INSERT","lineNumber":370,"content":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"INSERT","lineNumber":371,"content":""},{"type":"INSERT","lineNumber":372,"content":"                Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {"},{"type":"INSERT","lineNumber":373,"content":"                    Button(onClick = {"},{"type":"INSERT","lineNumber":374,"content":"                        telemetryViewModel.readMissionFromFcu()"},{"type":"INSERT","lineNumber":375,"content":"                        Toast.makeText("},{"type":"INSERT","lineNumber":376,"content":"                            context,"},{"type":"INSERT","lineNumber":377,"content":"                            \"Requested mission readback (check logs)\","},{"type":"INSERT","lineNumber":378,"content":"                            Toast.LENGTH_SHORT"},{"type":"INSERT","lineNumber":379,"content":"                        ).show()"},{"type":"DELETE","lineNumber":371,"oldContent":"                }"},{"type":"INSERT","lineNumber":381,"content":"                        Text(\"Read Mission (debug)\")"},{"type":"INSERT","lineNumber":383,"content":"                    Button(onClick = {"},{"type":"INSERT","lineNumber":384,"content":"                        telemetryViewModel.startMission { s, e ->"},{"type":"INSERT","lineNumber":385,"content":"                            Toast.makeText("},{"type":"INSERT","lineNumber":386,"content":"                                context,"},{"type":"INSERT","lineNumber":387,"content":"                                if (s) \"Start sent\" else (e ?: \"Start failed\"),"},{"type":"INSERT","lineNumber":388,"content":"                                Toast.LENGTH_SHORT"},{"type":"INSERT","lineNumber":389,"content":"                            ).show()"},{"type":"INSERT","lineNumber":390,"content":"                        }"},{"type":"INSERT","lineNumber":391,"content":"                    }) {"},{"type":"INSERT","lineNumber":392,"content":"                        Text(\"Start Mission\")"},{"type":"INSERT","lineNumber":393,"content":"                    }"},{"type":"INSERT","lineNumber":394,"content":"                }"},{"type":"INSERT","lineNumber":395,"content":""},{"type":"INSERT","lineNumber":396,"content":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"INSERT","lineNumber":397,"content":""},{"type":"INSERT","lineNumber":398,"content":"                // Waypoint list"},{"type":"INSERT","lineNumber":399,"content":"                Column("},{"type":"INSERT","lineNumber":400,"content":"                    modifier = Modifier"},{"type":"INSERT","lineNumber":401,"content":"                        .fillMaxWidth()"},{"type":"INSERT","lineNumber":402,"content":"                        .background(MaterialTheme.colorScheme.surfaceVariant)"},{"type":"INSERT","lineNumber":403,"content":"                        .padding(8.dp)"},{"type":"INSERT","lineNumber":404,"content":"                ) {"},{"type":"INSERT","lineNumber":405,"content":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleSmall)"},{"type":"INSERT","lineNumber":406,"content":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"INSERT","lineNumber":408,"content":"                    }"},{"type":"INSERT","lineNumber":409,"content":"                }"},{"type":"INSERT","lineNumber":410,"content":"            }"},{"type":"INSERT","lineNumber":411,"content":"        }"},{"type":"INSERT","lineNumber":412,"content":"    }"},{"type":"INSERT","lineNumber":413,"content":"}"},{"type":"INSERT","lineNumber":414,"content":""}]},{"timestamp":1758191221521,"changes":[{"type":"MODIFY","lineNumber":15,"content":"import androidx.compose.material.icons.Icons","oldContent":"import com.example.aerogcsclone.authentication.AuthViewModel"},{"type":"MODIFY","lineNumber":107,"content":"    Scaffold(","oldContent":""},{"type":"DELETE","lineNumber":109,"oldContent":"            // Map background - pass points and onMapClick callback, camera state, and mapType"},{"type":"DELETE","lineNumber":110,"oldContent":"        Box(modifier = Modifier.fillMaxSize().padding(paddingValues)) {"},{"type":"DELETE","lineNumber":111,"oldContent":"                }"},{"type":"DELETE","lineNumber":112,"oldContent":"                    }"},{"type":"DELETE","lineNumber":113,"oldContent":"                    ) {"},{"type":"INSERT","lineNumber":109,"content":"            Column("},{"type":"INSERT","lineNumber":110,"content":"                horizontalAlignment = Alignment.End"},{"type":"INSERT","lineNumber":111,"content":"            ) {"},{"type":"INSERT","lineNumber":112,"content":"                // Extra buttons shown above \"Create Plan\""},{"type":"INSERT","lineNumber":113,"content":"                if (showPlanActions) {"},{"type":"INSERT","lineNumber":114,"content":"                    // Add at crosshair"},{"type":"DELETE","lineNumber":115,"oldContent":""},{"type":"DELETE","lineNumber":116,"oldContent":"                    }"},{"type":"DELETE","lineNumber":117,"oldContent":""},{"type":"DELETE","lineNumber":118,"oldContent":""},{"type":"DELETE","lineNumber":119,"oldContent":"}"},{"type":"INSERT","lineNumber":116,"content":"                        onClick = {"},{"type":"INSERT","lineNumber":117,"content":"                            // get map center"},{"type":"INSERT","lineNumber":118,"content":"                            val center = cameraPositionState.position.target"},{"type":"INSERT","lineNumber":119,"content":"                            val seq = waypoints.size"},{"type":"DELETE","lineNumber":122,"oldContent":"        }"},{"type":"DELETE","lineNumber":123,"oldContent":"            }"},{"type":"DELETE","lineNumber":124,"oldContent":"                }"},{"type":"INSERT","lineNumber":122,"content":"                            points.add(center)"},{"type":"INSERT","lineNumber":123,"content":"                            waypoints.add(item)"},{"type":"INSERT","lineNumber":124,"content":"                        },"},{"type":"INSERT","lineNumber":125,"content":"                        modifier = Modifier"},{"type":"INSERT","lineNumber":126,"content":"                            .padding(bottom = 12.dp)"},{"type":"INSERT","lineNumber":127,"content":"                            .size(56.dp)"},{"type":"INSERT","lineNumber":128,"content":"                    ) {"},{"type":"INSERT","lineNumber":129,"content":"                        Icon(Icons.Default.Add, contentDescription = \"Add Waypoint at Crosshair\")"},{"type":"DELETE","lineNumber":126,"oldContent":"                    points.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":127,"oldContent":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleSmall)"},{"type":"DELETE","lineNumber":128,"oldContent":"                Column(modifier = Modifier.fillMaxWidth().background(MaterialTheme.colorScheme.surfaceVariant).padding(8.dp)) {"},{"type":"DELETE","lineNumber":129,"oldContent":"                // Waypoint list"},{"type":"DELETE","lineNumber":130,"oldContent":"                    }"},{"type":"DELETE","lineNumber":132,"oldContent":"                }"},{"type":"DELETE","lineNumber":133,"oldContent":"                        Text(\"Start Mission\")"},{"type":"DELETE","lineNumber":134,"oldContent":"                    Button(onClick = { telemetryViewModel.startMission { s, e -> Toast.makeText(context, if (s) \"Start sent\" else (e ?: \"Start failed\"), Toast.LENGTH_SHORT).show() } }) {"},{"type":"DELETE","lineNumber":135,"oldContent":"                        Text(\"Read Mission (debug)\")"},{"type":"DELETE","lineNumber":136,"oldContent":"                    Button(onClick = { telemetryViewModel.readMissionFromFcu(); Toast.makeText(context, \"Requested mission readback (check logs)\", Toast.LENGTH_SHORT).show() }) {"},{"type":"DELETE","lineNumber":137,"oldContent":""},{"type":"DELETE","lineNumber":138,"oldContent":"                }"},{"type":"DELETE","lineNumber":139,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":140,"oldContent":"                    modifier = Modifier.fillMaxWidth()"},{"type":"DELETE","lineNumber":141,"oldContent":"                    },"},{"type":"INSERT","lineNumber":132,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":133,"content":"                        onClick = {"},{"type":"INSERT","lineNumber":134,"content":"                            if (waypoints.isNotEmpty()) {"},{"type":"INSERT","lineNumber":135,"content":"                                waypoints.removeAt(waypoints.lastIndex)"},{"type":"INSERT","lineNumber":136,"content":"                                points.removeAt(points.lastIndex)"},{"type":"INSERT","lineNumber":137,"content":"                            }"},{"type":"INSERT","lineNumber":138,"content":"                        },"},{"type":"INSERT","lineNumber":139,"content":"                        modifier = Modifier"},{"type":"INSERT","lineNumber":140,"content":"                            .padding(bottom = 12.dp)"},{"type":"INSERT","lineNumber":141,"content":"                            .size(56.dp)"},{"type":"MODIFY","lineNumber":155,"content":"","oldContent":"                        // Home item (seq=0) - always NAV_WAYPOINT, never takeoff"},{"type":"DELETE","lineNumber":238,"oldContent":"                    Icon(Icons.Default.Refresh, contentDescription = \"Recenter Map\")"},{"type":"DELETE","lineNumber":240,"oldContent":""},{"type":"INSERT","lineNumber":239,"content":"                    Icon(Icons.Default.Refresh, contentDescription = \"Recenter Map\")"},{"type":"INSERT","lineNumber":241,"content":""},{"type":"INSERT","lineNumber":265,"content":"                }"},{"type":"DELETE","lineNumber":266,"oldContent":"            }"},{"type":"DELETE","lineNumber":371,"oldContent":"                    }"},{"type":"DELETE","lineNumber":374,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":376,"oldContent":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleSmall)"},{"type":"DELETE","lineNumber":378,"oldContent":""},{"type":"DELETE","lineNumber":380,"oldContent":"}"},{"type":"DELETE","lineNumber":382,"oldContent":"    }"},{"type":"DELETE","lineNumber":384,"oldContent":"        }"},{"type":"DELETE","lineNumber":386,"oldContent":"            }"},{"type":"DELETE","lineNumber":388,"oldContent":"                }"},{"type":"DELETE","lineNumber":389,"oldContent":"                    }"},{"type":"INSERT","lineNumber":380,"content":"                    }) {"},{"type":"DELETE","lineNumber":391,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":392,"oldContent":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleSmall)"},{"type":"INSERT","lineNumber":382,"content":"                    }"},{"type":"DELETE","lineNumber":394,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":396,"oldContent":"                        .padding(8.dp)"},{"type":"DELETE","lineNumber":398,"oldContent":"                        .background(MaterialTheme.colorScheme.surfaceVariant)"},{"type":"DELETE","lineNumber":400,"oldContent":"                        .fillMaxWidth()"},{"type":"DELETE","lineNumber":402,"oldContent":"                    modifier = Modifier"},{"type":"DELETE","lineNumber":404,"oldContent":"                Column("},{"type":"DELETE","lineNumber":406,"oldContent":"                // Waypoint list"},{"type":"DELETE","lineNumber":408,"oldContent":""},{"type":"DELETE","lineNumber":410,"oldContent":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"DELETE","lineNumber":412,"oldContent":""},{"type":"INSERT","lineNumber":395,"content":""},{"type":"INSERT","lineNumber":396,"content":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"INSERT","lineNumber":397,"content":""},{"type":"INSERT","lineNumber":398,"content":"                // Waypoint list"},{"type":"INSERT","lineNumber":399,"content":"                "},{"type":"INSERT","lineNumber":400,"content":"                }"},{"type":"INSERT","lineNumber":401,"content":"            }"},{"type":"INSERT","lineNumber":402,"content":"        }"},{"type":"INSERT","lineNumber":403,"content":"    }"},{"type":"INSERT","lineNumber":404,"content":"}"},{"type":"INSERT","lineNumber":405,"content":""}]},{"timestamp":1758191228976,"changes":[{"type":"MODIFY","lineNumber":115,"content":"                    FloatingActionButton(","oldContent":""},{"type":"DELETE","lineNumber":126,"oldContent":"                                    i + 1,"},{"type":"DELETE","lineNumber":131,"oldContent":"                        // Build mission item list: home (takeoff), waypoints"},{"type":"INSERT","lineNumber":130,"content":"                    }"},{"type":"INSERT","lineNumber":131,"content":""},{"type":"DELETE","lineNumber":146,"oldContent":"                    }"},{"type":"DELETE","lineNumber":147,"oldContent":""},{"type":"INSERT","lineNumber":146,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":147,"content":"                        onClick = { waypoints.clear(); points.clear() },"},{"type":"MODIFY","lineNumber":151,"content":"                    ) {","oldContent":"                                0f // Land altitude"},{"type":"DELETE","lineNumber":153,"oldContent":"                                missionItems.size,"},{"type":"DELETE","lineNumber":154,"oldContent":"                                landLatLng,"},{"type":"INSERT","lineNumber":153,"content":"                    }"},{"type":"INSERT","lineNumber":154,"content":"                }"},{"type":"MODIFY","lineNumber":166,"content":"        Box(modifier = Modifier.fillMaxSize().padding(paddingValues)) {","oldContent":"                                MavEnumValue.of(MavCmd.NAV_TAKEOFF),"},{"type":"DELETE","lineNumber":238,"oldContent":"                    Icon(Icons.Default.Refresh, contentDescription = \"Recenter Map\")"},{"type":"DELETE","lineNumber":240,"oldContent":""},{"type":"INSERT","lineNumber":239,"content":"                    Icon(Icons.Default.Refresh, contentDescription = \"Recenter Map\")"},{"type":"INSERT","lineNumber":241,"content":""},{"type":"DELETE","lineNumber":269,"oldContent":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"DELETE","lineNumber":270,"oldContent":""},{"type":"DELETE","lineNumber":271,"oldContent":"                }"},{"type":"INSERT","lineNumber":269,"content":"            Column("},{"type":"INSERT","lineNumber":270,"content":"                modifier = Modifier"},{"type":"INSERT","lineNumber":271,"content":"                    .align(Alignment.BottomCenter)"},{"type":"DELETE","lineNumber":332,"oldContent":"                    }"},{"type":"DELETE","lineNumber":333,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":334,"oldContent":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleSmall)"},{"type":"DELETE","lineNumber":335,"oldContent":"                        .padding(8.dp)"},{"type":"DELETE","lineNumber":336,"oldContent":"                        .background(MaterialTheme.colorScheme.surfaceVariant)"},{"type":"INSERT","lineNumber":332,"content":"                                    frame = MavEnumValue.of(MavFrame.GLOBAL_RELATIVE_ALT_INT),"},{"type":"INSERT","lineNumber":333,"content":"                                    command = if (isLast) MavEnumValue.of(MavCmd.NAV_LAND) else MavEnumValue.of(MavCmd.NAV_WAYPOINT),"},{"type":"INSERT","lineNumber":334,"content":"                                    current = 0u,"},{"type":"INSERT","lineNumber":335,"content":"                                    autocontinue = 1u,"},{"type":"INSERT","lineNumber":336,"content":"                                    param1 = 0f,"},{"type":"DELETE","lineNumber":376,"oldContent":"                    }) {"},{"type":"DELETE","lineNumber":378,"oldContent":"                    }"},{"type":"INSERT","lineNumber":380,"content":"                    }) {"},{"type":"INSERT","lineNumber":382,"content":"                    }"},{"type":"DELETE","lineNumber":384,"oldContent":""},{"type":"DELETE","lineNumber":386,"oldContent":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"DELETE","lineNumber":387,"oldContent":""},{"type":"DELETE","lineNumber":389,"oldContent":"                // Waypoint list"},{"type":"DELETE","lineNumber":390,"oldContent":"                "},{"type":"DELETE","lineNumber":392,"oldContent":"                }"},{"type":"DELETE","lineNumber":393,"oldContent":"            }"},{"type":"DELETE","lineNumber":395,"oldContent":"        }"},{"type":"DELETE","lineNumber":396,"oldContent":"    }"},{"type":"DELETE","lineNumber":398,"oldContent":"}"},{"type":"DELETE","lineNumber":399,"oldContent":""},{"type":"INSERT","lineNumber":395,"content":""},{"type":"INSERT","lineNumber":396,"content":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"INSERT","lineNumber":397,"content":""},{"type":"INSERT","lineNumber":398,"content":"                // Waypoint list"},{"type":"INSERT","lineNumber":399,"content":"            }"},{"type":"INSERT","lineNumber":400,"content":"        }"},{"type":"INSERT","lineNumber":401,"content":"    }"},{"type":"INSERT","lineNumber":402,"content":"}"},{"type":"INSERT","lineNumber":403,"content":""}]},{"timestamp":1758191364369,"changes":[{"type":"MODIFY","lineNumber":106,"content":"","oldContent":"                        // Sequence 2+: User waypoints"},{"type":"MODIFY","lineNumber":130,"content":"                    }","oldContent":"                    }"},{"type":"MODIFY","lineNumber":143,"content":"                        Icon(Icons.Default.Delete, contentDescription = \"Delete Waypoints\")","oldContent":"                            val cmd = if (isLast) MavEnumValue.of(MavCmd.NAV_LAND) else MavEnumValue.of(MavCmd.NAV_WAYPOINT)"},{"type":"MODIFY","lineNumber":145,"content":"","oldContent":"                            val isLast = i == userPoints.lastIndex"},{"type":"MODIFY","lineNumber":152,"content":"                        Icon(Icons.Default.ClearAll, contentDescription = \"Clear Plan\")","oldContent":""},{"type":"MODIFY","lineNumber":165,"content":"    ) { paddingValues ->","oldContent":"                        }"},{"type":"DELETE","lineNumber":220,"oldContent":""},{"type":"DELETE","lineNumber":221,"oldContent":"}"},{"type":"DELETE","lineNumber":222,"oldContent":"    }"},{"type":"DELETE","lineNumber":223,"oldContent":"        }"},{"type":"DELETE","lineNumber":224,"oldContent":"            }"},{"type":"DELETE","lineNumber":225,"oldContent":"                }"},{"type":"DELETE","lineNumber":226,"oldContent":"                    }"},{"type":"DELETE","lineNumber":227,"oldContent":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"},{"type":"DELETE","lineNumber":228,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":229,"oldContent":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleSmall)"},{"type":"DELETE","lineNumber":230,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":231,"oldContent":"                        .padding(8.dp)"},{"type":"DELETE","lineNumber":232,"oldContent":"                        .background(MaterialTheme.colorScheme.surfaceVariant)"},{"type":"DELETE","lineNumber":233,"oldContent":"                        .fillMaxWidth()"},{"type":"DELETE","lineNumber":234,"oldContent":"                    modifier = Modifier"},{"type":"DELETE","lineNumber":235,"oldContent":"                Column("},{"type":"DELETE","lineNumber":236,"oldContent":"                // Waypoint list"},{"type":"INSERT","lineNumber":220,"content":"                        val lat = telemetryState.latitude"},{"type":"INSERT","lineNumber":221,"content":"                        val lon = telemetryState.longitude"},{"type":"INSERT","lineNumber":222,"content":"                        if (lat != null && lon != null) {"},{"type":"INSERT","lineNumber":223,"content":"                            cameraPositionState.move("},{"type":"INSERT","lineNumber":224,"content":"                                CameraUpdateFactory.newLatLngZoom("},{"type":"INSERT","lineNumber":225,"content":"                                    LatLng(lat, lon),"},{"type":"INSERT","lineNumber":226,"content":"                                    16f"},{"type":"INSERT","lineNumber":227,"content":"                                )"},{"type":"INSERT","lineNumber":228,"content":"                            )"},{"type":"INSERT","lineNumber":229,"content":"                        } else {"},{"type":"INSERT","lineNumber":230,"content":"                            Toast.makeText("},{"type":"INSERT","lineNumber":231,"content":"                                context,"},{"type":"INSERT","lineNumber":232,"content":"                                \"No GPS location available\","},{"type":"INSERT","lineNumber":233,"content":"                                Toast.LENGTH_SHORT"},{"type":"INSERT","lineNumber":234,"content":"                            ).show()"},{"type":"INSERT","lineNumber":235,"content":"                        }"},{"type":"INSERT","lineNumber":236,"content":"                    },"},{"type":"INSERT","lineNumber":238,"content":"                ) {"},{"type":"DELETE","lineNumber":239,"oldContent":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"MODIFY","lineNumber":241,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":249,"content":"","oldContent":"                        Text(\"Start Mission\")"},{"type":"DELETE","lineNumber":378,"oldContent":"                    }) {"},{"type":"DELETE","lineNumber":381,"oldContent":"                    }"},{"type":"INSERT","lineNumber":380,"content":"                    }) {"},{"type":"DELETE","lineNumber":383,"oldContent":"                    Button(onClick = {"},{"type":"DELETE","lineNumber":384,"oldContent":"                        telemetryViewModel.startMission { s, e ->"},{"type":"DELETE","lineNumber":385,"oldContent":"                            Toast.makeText("},{"type":"DELETE","lineNumber":386,"oldContent":"                                context,"},{"type":"DELETE","lineNumber":387,"oldContent":"                                if (s) \"Start sent\" else (e ?: \"Start failed\"),"},{"type":"INSERT","lineNumber":382,"content":"                    }"},{"type":"INSERT","lineNumber":383,"content":"                    "},{"type":"INSERT","lineNumber":384,"content":"                }"},{"type":"DELETE","lineNumber":391,"oldContent":"                                Toast.LENGTH_SHORT"},{"type":"DELETE","lineNumber":395,"oldContent":"                            ).show()"},{"type":"DELETE","lineNumber":397,"oldContent":"                        }"},{"type":"DELETE","lineNumber":399,"oldContent":"                    }) {"},{"type":"DELETE","lineNumber":401,"oldContent":"                        Text(\"Start Mission\")"},{"type":"DELETE","lineNumber":402,"oldContent":"                    }"},{"type":"DELETE","lineNumber":403,"oldContent":"                }"}]},{"timestamp":1758191431076,"changes":[{"type":"MODIFY","lineNumber":105,"content":"    val coroutineScope = rememberCoroutineScope()","oldContent":"                    }"},{"type":"MODIFY","lineNumber":120,"content":"                            val isTakeoff = seq == 0","oldContent":"                        // Sequence 2+: User waypoints (last is LAND)"},{"type":"INSERT","lineNumber":129,"content":"                        Icon(Icons.Default.Add, contentDescription = \"Add Waypoint at Crosshair\")"},{"type":"DELETE","lineNumber":130,"oldContent":"                    }"},{"type":"MODIFY","lineNumber":150,"content":"                            .size(56.dp)","oldContent":"                        ).show()"},{"type":"MODIFY","lineNumber":202,"content":"                Icon(","oldContent":""},{"type":"MODIFY","lineNumber":219,"content":"                    onClick = {","oldContent":"                        .padding(8.dp)"},{"type":"INSERT","lineNumber":240,"content":"                }"},{"type":"DELETE","lineNumber":241,"oldContent":""},{"type":"MODIFY","lineNumber":248,"content":"                }","oldContent":"                Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {"},{"type":"INSERT","lineNumber":371,"content":"                "},{"type":"DELETE","lineNumber":372,"oldContent":"                Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {"},{"type":"DELETE","lineNumber":373,"oldContent":"                    Button(onClick = {"},{"type":"DELETE","lineNumber":374,"oldContent":"                        telemetryViewModel.readMissionFromFcu()"},{"type":"DELETE","lineNumber":375,"oldContent":"                        Toast.makeText("},{"type":"DELETE","lineNumber":376,"oldContent":"                            context,"},{"type":"DELETE","lineNumber":377,"oldContent":"                            \"Requested mission readback (check logs)\","},{"type":"DELETE","lineNumber":378,"oldContent":"                            Toast.LENGTH_SHORT"},{"type":"DELETE","lineNumber":379,"oldContent":"                    }) {"},{"type":"DELETE","lineNumber":380,"oldContent":"                        ).show()"},{"type":"DELETE","lineNumber":381,"oldContent":"                    }"},{"type":"DELETE","lineNumber":382,"oldContent":"                        Text(\"Read Mission (debug)\")"},{"type":"DELETE","lineNumber":383,"oldContent":"                    "},{"type":"DELETE","lineNumber":384,"oldContent":"                }"},{"type":"DELETE","lineNumber":385,"oldContent":""}]},{"timestamp":1758191599625,"changes":[{"type":"DELETE","lineNumber":179,"oldContent":"}"},{"type":"DELETE","lineNumber":180,"oldContent":"        }"},{"type":"DELETE","lineNumber":181,"oldContent":"                }"},{"type":"DELETE","lineNumber":182,"oldContent":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"},{"type":"DELETE","lineNumber":183,"oldContent":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleSmall)"},{"type":"DELETE","lineNumber":184,"oldContent":"                        .padding(8.dp)"},{"type":"DELETE","lineNumber":185,"oldContent":"                        .fillMaxWidth()"},{"type":"DELETE","lineNumber":186,"oldContent":"                Column("},{"type":"DELETE","lineNumber":187,"oldContent":""},{"type":"DELETE","lineNumber":188,"oldContent":""},{"type":"DELETE","lineNumber":189,"oldContent":"                        Text(\"Start Mission\")"},{"type":"DELETE","lineNumber":190,"oldContent":"                            ).show()"},{"type":"DELETE","lineNumber":191,"oldContent":"                                if (s) \"Start sent\" else (e ?: \"Start failed\"),"},{"type":"INSERT","lineNumber":179,"content":"                modifier = Modifier"},{"type":"INSERT","lineNumber":180,"content":"                    .align(Alignment.TopEnd)"},{"type":"INSERT","lineNumber":181,"content":"                    .padding(12.dp)"},{"type":"INSERT","lineNumber":182,"content":"            ) {"},{"type":"INSERT","lineNumber":183,"content":"                Text("},{"type":"INSERT","lineNumber":184,"content":"                    \"Connected: ${telemetryState.connected}\","},{"type":"INSERT","lineNumber":185,"content":"                    style = MaterialTheme.typography.bodySmall,"},{"type":"INSERT","lineNumber":186,"content":"                    color = MaterialTheme.colorScheme.onSurface"},{"type":"INSERT","lineNumber":188,"content":"                Text("},{"type":"INSERT","lineNumber":189,"content":"                    \"FCU detected: ${telemetryState.fcuDetected}\","},{"type":"INSERT","lineNumber":190,"content":"                    style = MaterialTheme.typography.bodySmall,"},{"type":"INSERT","lineNumber":191,"content":"                    color = MaterialTheme.colorScheme.onSurface"},{"type":"INSERT","lineNumber":192,"content":"                )"},{"type":"DELETE","lineNumber":195,"oldContent":"                        Text(\"Read Mission (debug)\")"},{"type":"DELETE","lineNumber":196,"oldContent":"                Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {"},{"type":"DELETE","lineNumber":197,"oldContent":"                }"},{"type":"DELETE","lineNumber":198,"oldContent":"                    modifier = Modifier.fillMaxWidth()"},{"type":"DELETE","lineNumber":199,"oldContent":"                    },"},{"type":"DELETE","lineNumber":200,"oldContent":"                            }"},{"type":"DELETE","lineNumber":201,"oldContent":"                                coroutineScope.launch { telemetryViewModel.readMissionFromFcu() }"},{"type":"INSERT","lineNumber":195,"content":"            // Crosshair overlay"},{"type":"INSERT","lineNumber":196,"content":"            Box("},{"type":"INSERT","lineNumber":197,"content":"                modifier = Modifier"},{"type":"INSERT","lineNumber":198,"content":"                    .size(36.dp)"},{"type":"INSERT","lineNumber":199,"content":"                    .align(Alignment.Center),"},{"type":"INSERT","lineNumber":200,"content":"                contentAlignment = Alignment.Center"},{"type":"INSERT","lineNumber":201,"content":"            ) {"},{"type":"DELETE","lineNumber":343,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":344,"oldContent":"                        .background(MaterialTheme.colorScheme.surfaceVariant)"},{"type":"DELETE","lineNumber":345,"oldContent":"                    modifier = Modifier"},{"type":"DELETE","lineNumber":346,"oldContent":"                Column("},{"type":"INSERT","lineNumber":343,"content":"                                )"},{"type":"INSERT","lineNumber":344,"content":"                            )"},{"type":"INSERT","lineNumber":345,"content":"                        }"},{"type":"INSERT","lineNumber":346,"content":""},{"type":"MODIFY","lineNumber":372,"content":"","oldContent":"                "}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/Telemetry/TelemetryRepository.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/Telemetry/TelemetryRepository.kt","baseContent":"package com.example.aerogcsclone.Telemetry\n\nimport android.util.Log\nimport com.divpundir.mavlink.adapters.coroutines.asCoroutine\nimport com.divpundir.mavlink.adapters.coroutines.tryConnect\nimport com.divpundir.mavlink.adapters.coroutines.trySendUnsignedV2\nimport com.divpundir.mavlink.api.wrap\nimport com.divpundir.mavlink.connection.StreamState\nimport com.divpundir.mavlink.connection.tcp.TcpClientMavConnection\nimport com.divpundir.mavlink.definitions.common.*\nimport com.divpundir.mavlink.definitions.minimal.*\nimport com.google.android.gms.maps.model.LatLng\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.flow.*\nimport kotlinx.coroutines.isActive\nimport kotlinx.coroutines.launch\n\nclass MavlinkTelemetryRepository(\n    private val host: String,\n    private val port: Int\n) {\n    private var mission by mutableStateOf<List<LatLng>>(emptyList())\n    private val gcsSystemId: UByte = 200u\n    private val gcsComponentId: UByte = 1u\n    private val _state = MutableStateFlow(TelemetryState())\n    val state: StateFlow<TelemetryState> = _state.asStateFlow()\n\n    private var fcuSystemId: UByte = 0u\n    private var fcuComponentId: UByte = 0u\n\n    // Diagnostic info\n    private val _lastFailure = MutableStateFlow<Throwable?>(null)\n    val lastFailure: StateFlow<Throwable?> = _lastFailure.asStateFlow()\n\n    // Connection\n    private val connection = TcpClientMavConnection(host, port, CommonDialect).asCoroutine()\n\n    fun start() {\n        val scope = AppScope\n\n        suspend fun reconnect(scope: kotlinx.coroutines.CoroutineScope) {\n            while (scope.isActive) {\n                try {\n                    if (connection.tryConnect(scope)) {\n                        return // Exit on successful connection\n                    }\n                } catch (e: Exception) {\n                    Log.e(\"MavlinkRepo\", \"Connection attempt failed\", e)\n                    _lastFailure.value = e\n                }\n                delay(1000)\n            }\n        }\n\n        // Manage connection state + reconnects\n        scope.launch {\n            reconnect(this) // Initial connection attempt\n            connection.streamState.collect { st ->\n                when (st) {\n                    is StreamState.Active -> {\n                        if (!state.value.connected) {\n                            Log.i(\"MavlinkRepo\", \"Connection Active\")\n                            _state.update { it.copy(connected = true) }\n                        }\n                    }\n                    is StreamState.Inactive -> {\n                        if (state.value.connected) {\n                            Log.i(\"MavlinkRepo\", \"Connection Inactive, reconnecting...\")\n                            _state.update { it.copy(connected = false, fcuDetected = false) }\n                            reconnect(this)\n                        }\n                    }\n                }\n            }\n        }\n\n        // Send GCS heartbeat\n        scope.launch {\n            val heartbeat = Heartbeat(\n                type = MavType.GCS.wrap(),\n                autopilot = MavAutopilot.INVALID.wrap(),\n                baseMode = emptyList<MavModeFlag>().wrap(),\n                customMode = 0u,\n                mavlinkVersion = 3u\n            )\n            while (isActive) {\n                if (state.value.connected) {\n                    try {\n                        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, heartbeat)\n                    } catch (e: Exception) {\n                        Log.e(\"MavlinkRepo\", \"Failed to send heartbeat\", e)\n                        _lastFailure.value = e\n                    }\n                }\n                delay(1000)\n            }\n        }\n\n        // Shared message stream\n        val mavFrameStream = connection.mavFrame\n            .shareIn(scope, SharingStarted.Eagerly, replay = 0)\n\n        // Log raw messages\n        scope.launch {\n            mavFrameStream.collect {\n                Log.d(\"MavlinkRepo\", \"Frame: ${it.message.javaClass.simpleName} (sysId=${it.systemId}, compId=${it.componentId})\")\n            }\n        }\n\n        // Detect FCU\n        scope.launch {\n            mavFrameStream\n                .filter { it.message is Heartbeat && (it.message as Heartbeat).type != MavType.GCS.wrap() }\n                .collect {\n                    if (!state.value.fcuDetected) {\n                        fcuSystemId = it.systemId\n                        fcuComponentId = it.componentId\n                        Log.i(\"MavlinkRepo\", \"FCU detected sysId=$fcuSystemId compId=$fcuComponentId\")\n                        _state.update { it.copy(fcuDetected = true) }\n\n                        // Set message intervals\n                        launch {\n                            suspend fun setMessageRate(messageId: UInt, hz: Float) {\n                                val intervalUsec = if (hz <= 0f) 0f else (1_000_000f / hz)\n                                val cmd = CommandLong(\n                                    targetSystem = fcuSystemId,\n                                    targetComponent = fcuComponentId,\n                                    command = MavCmd.SET_MESSAGE_INTERVAL.wrap(),\n                                    confirmation = 0u,\n                                    param1 = messageId.toFloat(),\n                                    param2 = intervalUsec,\n                                    param3 = 0f,\n                                    param4 = 0f,\n                                    param5 = 0f,\n                                    param6 = 0f,\n                                    param7 = 0f\n                                )\n                                try {\n                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, cmd)\n                                } catch (e: Exception) {\n                                    Log.e(\"MavlinkRepo\", \"Failed to send SET_MESSAGE_INTERVAL\", e)\n                                    _lastFailure.value = e\n                                }\n                            }\n\n                            setMessageRate(1u, 1f)   // SYS_STATUS\n                            setMessageRate(24u, 1f)  // GPS_RAW_INT\n                            setMessageRate(33u, 5f)  // GLOBAL_POSITION_INT\n                            setMessageRate(74u, 5f)  // VFR_HUD\n                            setMessageRate(147u, 1f) // BATTERY_STATUS\n                        }\n                    }\n                }\n        }\n\n        // Collectors\n\n        // VFR_HUD\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .filterIsInstance<VfrHud>()\n                .collect { hud ->\n                    _state.update {\n                        it.copy(\n                            altitudeMsl = hud.alt,\n                            airspeed = hud.airspeed.takeIf { v -> v > 0f },\n                            groundspeed = hud.groundspeed.takeIf { v -> v > 0f }\n                        )\n                    }\n                }\n        }\n\n        // GLOBAL_POSITION_INT\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .filterIsInstance<GlobalPositionInt>()\n                .collect { gp ->\n                    val altAMSLm = gp.alt / 1000f\n                    val relAltM = gp.relativeAlt / 1000f\n                    val lat = gp.lat.takeIf { it != Int.MIN_VALUE }?.let { it / 10_000_000.0 }\n                    val lon = gp.lon.takeIf { it != Int.MIN_VALUE }?.let { it / 10_000_000.0 }\n                    _state.update {\n                        it.copy(\n                            altitudeMsl = altAMSLm,\n                            altitudeRelative = relAltM,\n                            latitude = lat,\n                            longitude = lon\n                        )\n                    }\n                }\n        }\n\n        // BATTERY_STATUS\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .filterIsInstance<BatteryStatus>()\n                .collect { b ->\n                    val currentA = if (b.currentBattery.toInt() == -1) null else b.currentBattery / 100f\n                    _state.update { it.copy(currentA = currentA) }\n                }\n        }\n        //HEARTBEAT for mode, armed, armable\n        scope.launch {\n            mavFrameStream\n                .filter{ frame-> state.value.fcuDetected && frame.systemId == fcuSystemId }\n                .map{frame -> frame.message}\n                .filterIsInstance<Heartbeat>()\n                .collect{ hb->\n                    val armed = (hb.baseMode.value and MavModeFlag.SAFETY_ARMED.value )!= 0u\n                    val mode = when (hb.customMode) {\n                        0u -> \"Stabilize\"\n                        1u -> \"Acro\"\n                        2u -> \"Alt Hold\"\n                        3u -> \"Auto\"\n                        4u -> \"Guided\"\n                        5u -> \"Loiter\"\n                        6u -> \"RTL\"\n                        7u -> \"Circle\"\n                        9u -> \"Land\"\n                        11u -> \"Drift\"\n                        13u -> \"Sport\"\n                        14u -> \"Flip\"\n                        15u -> \"AutoTune\"\n                        16u -> \"Pos Hold\"\n                        17u -> \"Brake\"\n                        18u -> \"Throw\"\n                        19u -> \"Avoid_ADSB\"\n                        20u -> \"Guided_NoGPS\"\n                        21u -> \"Smart_RTL\"\n                        22u -> \"FlowHold\"\n                        23u -> \"Follow\"\n                        24u -> \"ZigZag\"\n                        25u -> \"SystemID\"\n                        26u -> \"AutoRotate\"\n                        27u -> \"Auto_RTL\"\n                        else -> \"Unknown\"\n                    }\n                    _state.update { it.copy(armed=armed , mode = mode)}\n                }\n        }\n        // SYS_STATUS\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .filterIsInstance<SysStatus>()\n                .collect { s ->\n                    val vBatt = if (s.voltageBattery.toUInt() == 0xFFFFu) null else s.voltageBattery.toFloat() / 1000f\n                    val pct = if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()\n                    val SENSOR_3D_GYRO = 1u\n                    val present = (s.onboardControlSensorsPresent.value and SENSOR_3D_GYRO) != 0u\n                    val enabled = (s.onboardControlSensorsEnabled.value and SENSOR_3D_GYRO) != 0u\n                    val healthy = (s.onboardControlSensorsHealth.value and SENSOR_3D_GYRO) != 0u\n                    val armable = present && enabled && healthy\n                    _state.update { it.copy(voltage = vBatt, batteryPercent = pct , armable = armable) }\n                }\n        }\n\n        // GPS_RAW_INT\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .filterIsInstance<GpsRawInt>()\n                .collect { gps ->\n                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }\n                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f\n                    _state.update { it.copy(sats = sats, hdop = hdop) }\n                }\n        }\n\n        // Mission handling\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .collect { message ->\n                    when (message) {\n                        is MissionRequest -> {\n                            val seq = message.seq.toInt()\n                            if (seq < mission.size) {\n                                val waypoint = mission[seq]\n                                val missionItem = MissionItemInt(\n                                    targetSystem = fcuSystemId,\n                                    targetComponent = fcuComponentId,\n                                    seq = seq.toUShort(),\n                                    frame = MavFrame.GLOBAL_RELATIVE_ALT.wrap(),\n                                    command = MavCmd.NAV_WAYPOINT.wrap(),\n                                    current = if (seq == 0) 1u else 0u,\n                                    autocontinue = 1u,\n                                    param1 = 0f,\n                                    param2 = 0f,\n                                    param3 = 0f,\n                                    param4 = 0f,\n                                    x = (waypoint.latitude * 1e7).toInt(),\n                                    y = (waypoint.longitude * 1e7).toInt(),\n                                    z = 100f, // Default altitude\n                                    missionType = MavMissionType.MISSION.wrap()\n                                )\n                                try {\n                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)\n                                } catch (e: Exception) {\n                                    Log.e(\"MavlinkRepo\", \"Failed to send mission item\", e)\n                                    _lastFailure.value = e\n                                }\n                            }\n                        }\n                        is MissionAck -> {\n                            Log.i(\"MavlinkRepo\", \"Mission upload acknowledged with result: ${message.type.value}\")\n                            if (message.type == MavMissionResult.MAV_MISSION_ACCEPTED.wrap()) {\n                                _state.update { it.copy(missionLoaded = true) }\n                            }\n                        }\n                    }\n                }\n        }\n    }\n\n    suspend fun sendCommand(command: MavCmd, param1: Float = 0f, param2: Float = 0f, param3: Float = 0f, param4: Float = 0f, param5: Float = 0f, param6: Float = 0f, param7: Float = 0f) {\n        val commandLong = CommandLong(\n            targetSystem = fcuSystemId,\n            targetComponent = fcuComponentId,\n            command = command.wrap(),\n            confirmation = 0u,\n            param1 = param1,\n            param2 = param2,\n            param3 = param3,\n            param4 = param4,\n            param5 = param5,\n            param6 = param6,\n            param7 = param7\n        )\n        try {\n            connection.trySendUnsignedV2(\n               gcsSystemId,\n                gcsComponentId, commandLong)\n        } catch (e: Exception) {\n            Log.e(\"MavlinkRepo\", \"Failed to send command\", e)\n            _lastFailure.value = e\n        }\n    }\n\n    suspend fun arm() {\n        if (state.value.armable) {\n            sendCommand(\n                MavCmd.COMPONENT_ARM_DISARM,\n                1f\n            )\n        } else {\n            Log.w(\"MavlinkRepo\", \"Arm command rejected, vehicle not armable\")\n        }\n    }\n\n    suspend fun disarm() {\n        sendCommand(\n            MavCmd.COMPONENT_ARM_DISARM,\n            0f\n        )\n    }\n\n    suspend fun changeMode(mode: MavMode) {\n        sendCommand(\n            MavCmd.DO_SET_MODE,\n            mode.value.toFloat(),\n            0f\n        )\n    }\n\n    suspend fun takeoff(altitude: Float) {\n        sendCommand(\n            MavCmd.NAV_TAKEOFF,\n            -1f,\n            0f,\n            0f,\n            0f,\n            0f,\n            0f,\n            altitude\n        )\n    }\n\n    suspend fun land() {\n        sendCommand(MavCmd.NAV_LAND)\n    }\n\n    suspend fun loadMission(waypoints: List<LatLng>) {\n        mission = waypoints\n        val missionCount = MissionCount(\n            targetSystem = fcuSystemId,\n            targetComponent = fcuComponentId,\n            count = mission.size.toUShort(),\n            missionType = MavMissionType.MISSION.wrap()\n        )\n        try {\n            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionCount)\n        } catch (e: Exception) {\n            Log.e(\"MavlinkRepo\", \"Failed to send mission count\", e)\n            _lastFailure.value = e\n        }\n    }\n\n    suspend fun startMission() {\n        sendCommand(MavCmd.MISSION_START)\n    }\n}\n","baseTimestamp":1757909141732,"deltas":[{"timestamp":1758183758291,"changes":[{"type":"MODIFY","lineNumber":308,"content":"","oldContent":"        "},{"type":"INSERT","lineNumber":342,"content":"        }"},{"type":"INSERT","lineNumber":343,"content":"    }"},{"type":"INSERT","lineNumber":344,"content":""},{"type":"INSERT","lineNumber":345,"content":"    suspend fun sendCommand(command: MavCmd, param1: Float = 0f, param2: Float = 0f, param3: Float = 0f, param4: Float = 0f, param5: Float = 0f, param6: Float = 0f, param7: Float = 0f) {"},{"type":"INSERT","lineNumber":346,"content":"        val commandLong = CommandLong("},{"type":"DELETE","lineNumber":344,"oldContent":"        }"},{"type":"DELETE","lineNumber":346,"oldContent":"    }"},{"type":"DELETE","lineNumber":349,"oldContent":""},{"type":"DELETE","lineNumber":352,"oldContent":"    suspend fun sendCommand(command: MavCmd, param1: Float = 0f, param2: Float = 0f, param3: Float = 0f, param4: Float = 0f, param5: Float = 0f, param6: Float = 0f, param7: Float = 0f) {"},{"type":"DELETE","lineNumber":354,"oldContent":"        val commandLong = CommandLong("},{"type":"INSERT","lineNumber":382,"content":"     * Change vehicle mode (ArduPilot: param1=1, param2=customMode)"},{"type":"DELETE","lineNumber":383,"oldContent":"     * Waits for Heartbeat confirmation."},{"type":"MODIFY","lineNumber":419,"content":"            Log.e(\"MavlinkRepo\", \"FCU not detected, cannot upload mission\")","oldContent":"            Log.e(\"MavlinkRepo\", \"FCU not detected, cannot upload mission\")"},{"type":"DELETE","lineNumber":421,"oldContent":"                    .map { it.message }"},{"type":"DELETE","lineNumber":423,"oldContent":"                    .filterIsInstance<CommandAck>()"},{"type":"DELETE","lineNumber":426,"oldContent":"                    .collect { ack ->"},{"type":"DELETE","lineNumber":428,"oldContent":"                        if (ack.command.value == MISSION_CLEAR_ALL_CMD && ack.result.value == MavResult.ACCEPTED.value) {"},{"type":"DELETE","lineNumber":431,"oldContent":"                            Log.i(\"MavlinkRepo\", \"[Mission Upload] MISSION_CLEAR_ALL acknowledged by FCU\")"},{"type":"DELETE","lineNumber":433,"oldContent":"                            clearAckDeferred.complete(true)"},{"type":"DELETE","lineNumber":436,"oldContent":"                        }"},{"type":"DELETE","lineNumber":439,"oldContent":"                    }"},{"type":"DELETE","lineNumber":442,"oldContent":"            }"},{"type":"DELETE","lineNumber":444,"oldContent":"            val clearAck = withTimeoutOrNull(3000L) { clearAckDeferred.await() } ?: false"},{"type":"INSERT","lineNumber":437,"content":"                    .map { it.message }"},{"type":"INSERT","lineNumber":438,"content":"                    .filterIsInstance<CommandAck>()"},{"type":"INSERT","lineNumber":439,"content":"                    .collect { ack ->"},{"type":"INSERT","lineNumber":440,"content":"                        if (ack.command.value == MISSION_CLEAR_ALL_CMD && ack.result.value == MavResult.ACCEPTED.value) {"},{"type":"INSERT","lineNumber":441,"content":"                            Log.i(\"MavlinkRepo\", \"[Mission Upload] MISSION_CLEAR_ALL acknowledged by FCU\")"},{"type":"INSERT","lineNumber":442,"content":"                            clearAckDeferred.complete(true)"},{"type":"INSERT","lineNumber":443,"content":"                        }"},{"type":"INSERT","lineNumber":444,"content":"                    }"},{"type":"INSERT","lineNumber":445,"content":"            }"},{"type":"INSERT","lineNumber":446,"content":"            val clearAck = withTimeoutOrNull(3000L) { clearAckDeferred.await() } ?: false"},{"type":"INSERT","lineNumber":451,"content":""},{"type":"DELETE","lineNumber":455,"oldContent":""},{"type":"DELETE","lineNumber":538,"oldContent":"        }"},{"type":"DELETE","lineNumber":539,"oldContent":"            Log.w(\"MavlinkRepo\", \"Cannot set current mission item - FCU not detected\")"},{"type":"DELETE","lineNumber":540,"oldContent":"        if (!state.value.fcuDetected) {"},{"type":"DELETE","lineNumber":541,"oldContent":"     */"},{"type":"DELETE","lineNumber":542,"oldContent":"     * Sets the current mission item (waypoint) using MISSION_SET_CURRENT."},{"type":"INSERT","lineNumber":538,"content":"                                // ignore other messages"},{"type":"INSERT","lineNumber":539,"content":"                            }"},{"type":"INSERT","lineNumber":540,"content":"                        }"},{"type":"INSERT","lineNumber":541,"content":"                    }"},{"type":"INSERT","lineNumber":542,"content":"            }"},{"type":"DELETE","lineNumber":545,"oldContent":"    }"},{"type":"DELETE","lineNumber":546,"oldContent":"        return false"},{"type":"DELETE","lineNumber":547,"oldContent":"        Log.e(\"MavlinkRepo\", \"Fallback failed: vehicle did not switch to AUTO mode\")"},{"type":"INSERT","lineNumber":545,"content":"            val firstRequestTimeout = 5000L"},{"type":"INSERT","lineNumber":546,"content":"            val startWait = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":547,"content":"            while (!firstRequestReceived && !ackDeferred.isCompleted && System.currentTimeMillis() - startWait < firstRequestTimeout) {"},{"type":"MODIFY","lineNumber":553,"content":"                for (seq in 0 until missionItems.size) {","oldContent":"                for (seq in 0 until missionItems.size) {"},{"type":"MODIFY","lineNumber":557,"content":"                    val missionItem = item.copy(","oldContent":"                    val missionItem = item.copy("},{"type":"DELETE","lineNumber":562,"oldContent":""},{"type":"DELETE","lineNumber":563,"oldContent":"            job.cancel()"},{"type":"DELETE","lineNumber":564,"oldContent":"            }"},{"type":"DELETE","lineNumber":565,"oldContent":"                }"},{"type":"INSERT","lineNumber":562,"content":"                    try {"},{"type":"INSERT","lineNumber":563,"content":"                        Log.d(\"MavlinkRepo\", \"Sending fallback item seq=$seq cmd=${missionItem.command} frame=${missionItem.frame} x=${missionItem.x} y=${missionItem.y} z=${missionItem.z}\")"},{"type":"INSERT","lineNumber":564,"content":"                        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"INSERT","lineNumber":565,"content":"                        sentSeqs.add(seq)"},{"type":"INSERT","lineNumber":566,"content":"                        Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_ITEM_INT seq=$seq\")"},{"type":"INSERT","lineNumber":567,"content":"                        delay(300)"},{"type":"INSERT","lineNumber":568,"content":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":569,"content":"                        Log.e(\"MavlinkRepo\", \"Fallback: Failed to send mission item seq=$seq\", e)"},{"type":"DELETE","lineNumber":567,"oldContent":""},{"type":"DELETE","lineNumber":568,"oldContent":"            }"},{"type":"DELETE","lineNumber":569,"oldContent":"                Log.e(\"MavlinkRepo\", \"Failed to send MISSION_START on attempt $attempt\", e)"},{"type":"DELETE","lineNumber":570,"oldContent":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":576,"content":"            } ?: false"},{"type":"DELETE","lineNumber":577,"oldContent":""},{"type":"INSERT","lineNumber":585,"content":"                Log.e(\"MavlinkRepo\", \"[Mission Upload] Mission upload timed out waiting for ACK\")"},{"type":"DELETE","lineNumber":586,"oldContent":"                return false"},{"type":"DELETE","lineNumber":602,"oldContent":"                connection.mavFrame.collect { frame ->"},{"type":"INSERT","lineNumber":603,"content":""},{"type":"INSERT","lineNumber":604,"content":"            val job = AppScope.launch {"},{"type":"INSERT","lineNumber":605,"content":"                connection.mavFrame.collect { frame ->"},{"type":"DELETE","lineNumber":606,"oldContent":""},{"type":"DELETE","lineNumber":608,"oldContent":"            val job = AppScope.launch {"},{"type":"INSERT","lineNumber":630,"content":""},{"type":"DELETE","lineNumber":632,"oldContent":"            confirmation = 0u,"},{"type":"INSERT","lineNumber":635,"content":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":637,"oldContent":"            } catch (e: Exception) {"},{"type":"MODIFY","lineNumber":643,"content":"            }","oldContent":"            }"},{"type":"INSERT","lineNumber":645,"content":"            Log.i(\"MavlinkRepo\", \"Expecting $expectedCount mission items - requesting each item\")"},{"type":"DELETE","lineNumber":646,"oldContent":""},{"type":"INSERT","lineNumber":651,"content":"                    val reqItem = MissionRequestInt(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = seq.toUShort())"},{"type":"DELETE","lineNumber":652,"oldContent":"                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, reqItem)"},{"type":"DELETE","lineNumber":656,"oldContent":"                val got = withTimeoutOrNull(1500L) {"},{"type":"INSERT","lineNumber":657,"content":""},{"type":"INSERT","lineNumber":658,"content":"                val got = withTimeoutOrNull(1500L) {"},{"type":"DELETE","lineNumber":660,"oldContent":""},{"type":"INSERT","lineNumber":662,"content":""},{"type":"DELETE","lineNumber":663,"oldContent":"                if (!got) {"},{"type":"INSERT","lineNumber":680,"content":"    /**"},{"type":"DELETE","lineNumber":681,"oldContent":"     * Start the mission after uploading."},{"type":"DELETE","lineNumber":682,"oldContent":"                Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to switch to AUTO mode\")"},{"type":"DELETE","lineNumber":683,"oldContent":"            delay(500)"},{"type":"DELETE","lineNumber":684,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Setting mode to AUTO...\")"},{"type":"DELETE","lineNumber":685,"oldContent":""},{"type":"INSERT","lineNumber":682,"content":"     * Replicates the Dart/Flutter workflow:"},{"type":"INSERT","lineNumber":683,"content":"     * 1. Arm the vehicle"},{"type":"INSERT","lineNumber":684,"content":"     * 2. Send MISSION_START as CommandLong"},{"type":"INSERT","lineNumber":685,"content":"     * 3. Set mode to AUTO"},{"type":"INSERT","lineNumber":696,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending ARM command...\")"},{"type":"INSERT","lineNumber":697,"content":"            arm()"},{"type":"DELETE","lineNumber":699,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending ARM command...\")"},{"type":"DELETE","lineNumber":701,"oldContent":"            arm()"},{"type":"DELETE","lineNumber":703,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"DELETE","lineNumber":705,"oldContent":"            sendMissionStartCommand()"},{"type":"MODIFY","lineNumber":707,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")","oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] MISSION_START command sent\")"},{"type":"INSERT","lineNumber":708,"content":"            sendMissionStartCommand()"},{"type":"INSERT","lineNumber":709,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Start] MISSION_START command sent\")"},{"type":"DELETE","lineNumber":714,"oldContent":"        try {"},{"type":"DELETE","lineNumber":716,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Setting mode to AUTO...\")"},{"type":"DELETE","lineNumber":719,"oldContent":"            delay(500)"},{"type":"INSERT","lineNumber":717,"content":"        try {"},{"type":"INSERT","lineNumber":718,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Setting mode to AUTO...\")"},{"type":"MODIFY","lineNumber":721,"content":"            delay(500)","oldContent":"            if (!modeChanged) {"},{"type":"INSERT","lineNumber":722,"content":"            if (!modeChanged) {"},{"type":"INSERT","lineNumber":723,"content":"                Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to switch to AUTO mode\")"},{"type":"DELETE","lineNumber":725,"oldContent":"                Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to switch to AUTO mode\")"},{"type":"MODIFY","lineNumber":728,"content":"            return false","oldContent":"            return false"},{"type":"INSERT","lineNumber":754,"content":""},{"type":"INSERT","lineNumber":755,"content":"    // --- Mission end LAND handling ---"},{"type":"INSERT","lineNumber":756,"content":"    scope.launch {"},{"type":"INSERT","lineNumber":757,"content":"        var lastMissionSeq: Int? = null"},{"type":"INSERT","lineNumber":758,"content":"        var landHandled = false"},{"type":"INSERT","lineNumber":759,"content":"        // Track last mission seq from MissionCount"},{"type":"INSERT","lineNumber":760,"content":"        mavFrameStream"},{"type":"INSERT","lineNumber":761,"content":"            .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":762,"content":"            .map { it.message }"},{"type":"INSERT","lineNumber":763,"content":"            .filterIsInstance<MissionCount>()"},{"type":"INSERT","lineNumber":764,"content":"            .collect { countMsg ->"},{"type":"INSERT","lineNumber":765,"content":"                lastMissionSeq = countMsg.count.toInt() - 1"},{"type":"INSERT","lineNumber":766,"content":"                landHandled = false // reset for new mission"},{"type":"INSERT","lineNumber":767,"content":"            }"},{"type":"INSERT","lineNumber":768,"content":"    }"},{"type":"INSERT","lineNumber":769,"content":"    scope.launch {"},{"type":"INSERT","lineNumber":770,"content":"        var lastMissionSeq: Int? = null"},{"type":"INSERT","lineNumber":771,"content":"        var landHandled = false"},{"type":"INSERT","lineNumber":772,"content":"        // Listen for MissionCurrent and trigger LAND/disarm"},{"type":"INSERT","lineNumber":773,"content":"        mavFrameStream"},{"type":"INSERT","lineNumber":774,"content":"            .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":775,"content":"            .map { it.message }"},{"type":"INSERT","lineNumber":776,"content":"            .filterIsInstance<MissionCurrent>()"},{"type":"INSERT","lineNumber":777,"content":"            .collect { currentMsg ->"},{"type":"INSERT","lineNumber":778,"content":"                if (lastMissionSeq != null && currentMsg.seq.toInt() == lastMissionSeq && !landHandled) {"},{"type":"INSERT","lineNumber":779,"content":"                    Log.i(\"MavlinkRepo\", \"Last mission item reached (LAND), switching to LAND mode and disarming...\")"},{"type":"INSERT","lineNumber":780,"content":"                    launch {"},{"type":"INSERT","lineNumber":781,"content":"                        val changed = changeMode(MavMode.LAND)"},{"type":"INSERT","lineNumber":782,"content":"                        if (changed) {"},{"type":"INSERT","lineNumber":783,"content":"                            Log.i(\"MavlinkRepo\", \"Switched to LAND mode, sending disarm...\")"},{"type":"INSERT","lineNumber":784,"content":"                            armDisarm(false)"},{"type":"INSERT","lineNumber":785,"content":"                        } else {"},{"type":"INSERT","lineNumber":786,"content":"                            Log.w(\"MavlinkRepo\", \"Failed to switch to LAND mode after last mission item\")"},{"type":"INSERT","lineNumber":787,"content":"                        }"},{"type":"INSERT","lineNumber":788,"content":"                    }"},{"type":"INSERT","lineNumber":789,"content":"                    landHandled = true"},{"type":"INSERT","lineNumber":790,"content":"                }"},{"type":"INSERT","lineNumber":791,"content":"            }"},{"type":"INSERT","lineNumber":792,"content":"    }"},{"type":"INSERT","lineNumber":793,"content":"    /**"},{"type":"INSERT","lineNumber":794,"content":"     * Helper to arm/disarm the vehicle"},{"type":"INSERT","lineNumber":795,"content":"     */"},{"type":"INSERT","lineNumber":796,"content":"    suspend fun armDisarm(arm: Boolean) {"},{"type":"INSERT","lineNumber":797,"content":"        sendCommand(MavCmd.COMPONENT_ARM_DISARM, if (arm) 1f else 0f)"},{"type":"INSERT","lineNumber":798,"content":"    }"}]},{"timestamp":1758183773515,"changes":[{"type":"MODIFY","lineNumber":3,"content":"import com.divpundir.mavlink.adapters.coroutines.asCoroutine","oldContent":"import android.util.Log"},{"type":"DELETE","lineNumber":5,"oldContent":"import com.divpundir.mavlink.adapters.coroutines.tryConnect"},{"type":"INSERT","lineNumber":9,"content":"import com.divpundir.mavlink.definitions.common.*"},{"type":"MODIFY","lineNumber":11,"content":"import kotlinx.coroutines.CompletableDeferred","oldContent":"import com.divpundir.mavlink.definitions.minimal.*"},{"type":"DELETE","lineNumber":178,"oldContent":"        // GLOBAL_POSITION_INT"},{"type":"DELETE","lineNumber":179,"oldContent":"        scope.launch {"},{"type":"INSERT","lineNumber":178,"content":"                            \"COMMAND_ACK received: command=${ack.command} result=${ack.result} progress=${ack.progress}\""},{"type":"INSERT","lineNumber":179,"content":"                        )"},{"type":"MODIFY","lineNumber":308,"content":"","oldContent":"        "},{"type":"DELETE","lineNumber":343,"oldContent":"            targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":345,"oldContent":"            targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":348,"oldContent":"            command = command.wrap(),"},{"type":"INSERT","lineNumber":347,"content":"            targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":348,"content":"            targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":349,"content":"            command = command.wrap(),"},{"type":"DELETE","lineNumber":388,"oldContent":"                1f"},{"type":"DELETE","lineNumber":389,"oldContent":"            )"},{"type":"DELETE","lineNumber":390,"oldContent":"        } else {"},{"type":"INSERT","lineNumber":388,"content":"            1f,                   // param1: MAV_MODE_FLAG_CUSTOM_MODE_ENABLED (always 1 for ArduPilot)"},{"type":"INSERT","lineNumber":389,"content":"            customMode.toFloat(), // param2: custom mode (e.g., 3u for AUTO)"},{"type":"INSERT","lineNumber":390,"content":"            0f, 0f, 0f, 0f, 0f"},{"type":"DELETE","lineNumber":392,"oldContent":"            Log.w(\"MavlinkRepo\", \"Arm command rejected, vehicle not armable\")"},{"type":"DELETE","lineNumber":393,"oldContent":"    }"},{"type":"DELETE","lineNumber":394,"oldContent":"    suspend fun disarm() {"},{"type":"DELETE","lineNumber":395,"oldContent":"        sendCommand("},{"type":"DELETE","lineNumber":396,"oldContent":"            MavCmd.COMPONENT_ARM_DISARM,"},{"type":"DELETE","lineNumber":397,"oldContent":"            0f"},{"type":"DELETE","lineNumber":398,"oldContent":"        )"},{"type":"DELETE","lineNumber":399,"oldContent":"    }"},{"type":"INSERT","lineNumber":392,"content":"        // Wait for Heartbeat to confirm mode change"},{"type":"INSERT","lineNumber":393,"content":"        val timeoutMs = 5000L"},{"type":"INSERT","lineNumber":394,"content":"        val start = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":395,"content":"        val expectedMode = when (customMode) {"},{"type":"INSERT","lineNumber":396,"content":"            3u -> \"Auto\""},{"type":"INSERT","lineNumber":397,"content":"            0u -> \"Stabilize\""},{"type":"INSERT","lineNumber":398,"content":"            5u -> \"Loiter\""},{"type":"INSERT","lineNumber":399,"content":"            else -> \"Unknown\""},{"type":"INSERT","lineNumber":418,"content":"        if (!state.value.fcuDetected) {"},{"type":"DELETE","lineNumber":419,"oldContent":"            Log.e(\"MavlinkRepo\", \"FCU not detected, cannot upload mission\")"},{"type":"DELETE","lineNumber":430,"oldContent":"                    .map { it.message }"},{"type":"MODIFY","lineNumber":432,"content":"            // Wait for COMMAND_ACK for MISSION_CLEAR_ALL","oldContent":"                    .filterIsInstance<CommandAck>()"},{"type":"INSERT","lineNumber":433,"content":"            val clearAckDeferred = CompletableDeferred<Boolean>()"},{"type":"INSERT","lineNumber":434,"content":"            val clearJob = AppScope.launch {"},{"type":"INSERT","lineNumber":435,"content":"                connection.mavFrame"},{"type":"INSERT","lineNumber":436,"content":"                    .filter { it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":437,"content":"                    .map { it.message }"},{"type":"INSERT","lineNumber":438,"content":"                    .filterIsInstance<CommandAck>()"},{"type":"DELETE","lineNumber":436,"oldContent":"            // Wait for COMMAND_ACK for MISSION_CLEAR_ALL"},{"type":"DELETE","lineNumber":438,"oldContent":"            val clearAckDeferred = CompletableDeferred<Boolean>()"},{"type":"DELETE","lineNumber":441,"oldContent":"            val clearJob = AppScope.launch {"},{"type":"DELETE","lineNumber":444,"oldContent":"                connection.mavFrame"},{"type":"DELETE","lineNumber":446,"oldContent":"                    .filter { it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":552,"content":"                Log.w(\"MavlinkRepo\", \"[Mission Upload] No MissionRequest received; sending all items directly\")"},{"type":"DELETE","lineNumber":553,"oldContent":"                for (seq in 0 until missionItems.size) {"},{"type":"INSERT","lineNumber":556,"content":"                    Log.i(\"MavlinkRepo\", \"[Mission Upload] Fallback sending waypoint seq=$seq: ${item.command} lat=${item.x / 1e7} lon=${item.y / 1e7} alt=${item.z}\")"},{"type":"DELETE","lineNumber":557,"oldContent":"                    val missionItem = item.copy("},{"type":"DELETE","lineNumber":560,"oldContent":"                Log.e(\"MavlinkRepo\", \"Failed to send MISSION_REQUEST_LIST\", e)"},{"type":"DELETE","lineNumber":561,"oldContent":"                            expectedCountDeferred.complete(msg.count.toInt())"},{"type":"INSERT","lineNumber":560,"content":"                        seq = seq.toUShort()"},{"type":"INSERT","lineNumber":561,"content":"                    )"},{"type":"DELETE","lineNumber":567,"oldContent":"        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, cmd)"},{"type":"INSERT","lineNumber":570,"content":"                    }"},{"type":"MODIFY","lineNumber":581,"content":"            if (ackReceived) {","oldContent":"     */"},{"type":"DELETE","lineNumber":587,"oldContent":"        Log.i(\"MavlinkRepo\", \"Mission start workflow complete. Vehicle should be in AUTO mode.\")"},{"type":"DELETE","lineNumber":588,"oldContent":""},{"type":"INSERT","lineNumber":587,"content":"            }"},{"type":"INSERT","lineNumber":588,"content":"        } catch (e: Exception) {"},{"type":"MODIFY","lineNumber":603,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":606,"content":"                    when (val msg = frame.message) {","oldContent":"                    when (val msg = frame.message) {"},{"type":"MODIFY","lineNumber":619,"content":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_ITEM seq=${msg.seq} x=${msg.x} y=${msg.y} z=${msg.z}\")","oldContent":"                perSeqMap.remove(seq)"},{"type":"INSERT","lineNumber":642,"content":"                return"},{"type":"DELETE","lineNumber":643,"oldContent":"            }"},{"type":"MODIFY","lineNumber":657,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":698,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Start] ARM command sent\")","oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] ARM command sent\")"},{"type":"INSERT","lineNumber":705,"content":"        // Step 2: Send MISSION_START as CommandLong"},{"type":"INSERT","lineNumber":706,"content":"        try {"},{"type":"DELETE","lineNumber":708,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] MISSION_START command sent\")"},{"type":"DELETE","lineNumber":709,"oldContent":"        try {"},{"type":"DELETE","lineNumber":715,"oldContent":"        try {"},{"type":"MODIFY","lineNumber":717,"content":"        try {","oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Setting mode to AUTO...\")"},{"type":"INSERT","lineNumber":718,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Setting mode to AUTO...\")"},{"type":"INSERT","lineNumber":720,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Set mode to AUTO, result=$modeChanged\")"},{"type":"DELETE","lineNumber":722,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Set mode to AUTO, result=$modeChanged\")"},{"type":"INSERT","lineNumber":727,"content":"            Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to set AUTO mode\", e)"},{"type":"DELETE","lineNumber":728,"oldContent":"            return false"},{"type":"DELETE","lineNumber":754,"oldContent":""},{"type":"DELETE","lineNumber":756,"oldContent":"    // --- Mission end LAND handling ---"},{"type":"DELETE","lineNumber":757,"oldContent":"    }"},{"type":"DELETE","lineNumber":758,"oldContent":"    scope.launch {"},{"type":"DELETE","lineNumber":759,"oldContent":"        sendCommand(MavCmd.COMPONENT_ARM_DISARM, if (arm) 1f else 0f)"},{"type":"DELETE","lineNumber":760,"oldContent":"        var lastMissionSeq: Int? = null"},{"type":"DELETE","lineNumber":761,"oldContent":"    suspend fun armDisarm(arm: Boolean) {"},{"type":"DELETE","lineNumber":762,"oldContent":"        var landHandled = false"},{"type":"DELETE","lineNumber":763,"oldContent":"     */"},{"type":"DELETE","lineNumber":764,"oldContent":"        // Track last mission seq from MissionCount"},{"type":"DELETE","lineNumber":765,"oldContent":"     * Helper to arm/disarm the vehicle"},{"type":"DELETE","lineNumber":766,"oldContent":"        mavFrameStream"},{"type":"DELETE","lineNumber":767,"oldContent":"    /**"},{"type":"DELETE","lineNumber":768,"oldContent":"            .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":769,"oldContent":"    }"},{"type":"DELETE","lineNumber":770,"oldContent":"            .map { it.message }"},{"type":"DELETE","lineNumber":771,"oldContent":"            }"},{"type":"DELETE","lineNumber":772,"oldContent":"            .filterIsInstance<MissionCount>()"},{"type":"DELETE","lineNumber":773,"oldContent":"                }"},{"type":"DELETE","lineNumber":774,"oldContent":"            .collect { countMsg ->"},{"type":"DELETE","lineNumber":775,"oldContent":"                    landHandled = true"},{"type":"DELETE","lineNumber":776,"oldContent":"                lastMissionSeq = countMsg.count.toInt() - 1"},{"type":"DELETE","lineNumber":777,"oldContent":"                    }"},{"type":"DELETE","lineNumber":778,"oldContent":"                landHandled = false // reset for new mission"},{"type":"DELETE","lineNumber":779,"oldContent":"                        }"},{"type":"DELETE","lineNumber":780,"oldContent":"            }"},{"type":"DELETE","lineNumber":781,"oldContent":"                            Log.w(\"MavlinkRepo\", \"Failed to switch to LAND mode after last mission item\")"},{"type":"DELETE","lineNumber":782,"oldContent":"    }"},{"type":"DELETE","lineNumber":783,"oldContent":"                        } else {"},{"type":"DELETE","lineNumber":784,"oldContent":"    scope.launch {"},{"type":"DELETE","lineNumber":785,"oldContent":"                            armDisarm(false)"},{"type":"DELETE","lineNumber":786,"oldContent":"        var lastMissionSeq: Int? = null"},{"type":"DELETE","lineNumber":787,"oldContent":"                            Log.i(\"MavlinkRepo\", \"Switched to LAND mode, sending disarm...\")"},{"type":"DELETE","lineNumber":788,"oldContent":"        var landHandled = false"},{"type":"DELETE","lineNumber":789,"oldContent":"                        if (changed) {"},{"type":"DELETE","lineNumber":790,"oldContent":"        // Listen for MissionCurrent and trigger LAND/disarm"},{"type":"DELETE","lineNumber":791,"oldContent":"                        val changed = changeMode(MavMode.LAND)"},{"type":"DELETE","lineNumber":792,"oldContent":"        mavFrameStream"},{"type":"DELETE","lineNumber":793,"oldContent":"                    launch {"},{"type":"DELETE","lineNumber":794,"oldContent":"            .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":795,"oldContent":"                    Log.i(\"MavlinkRepo\", \"Last mission item reached (LAND), switching to LAND mode and disarming...\")"},{"type":"DELETE","lineNumber":796,"oldContent":"            .map { it.message }"},{"type":"DELETE","lineNumber":797,"oldContent":"                if (lastMissionSeq != null && currentMsg.seq.toInt() == lastMissionSeq && !landHandled) {"},{"type":"DELETE","lineNumber":798,"oldContent":"            .filterIsInstance<MissionCurrent>()"},{"type":"DELETE","lineNumber":799,"oldContent":"            .collect { currentMsg ->"}]},{"timestamp":1758184011505,"changes":[{"type":"MODIFY","lineNumber":9,"content":"import com.divpundir.mavlink.definitions.common.*","oldContent":"import com.divpundir.mavlink.definitions.common.*"},{"type":"MODIFY","lineNumber":16,"content":"import kotlinx.coroutines.withTimeoutOrNull","oldContent":""},{"type":"MODIFY","lineNumber":18,"content":"","oldContent":"    private val host: String,"},{"type":"MODIFY","lineNumber":39,"content":"","oldContent":"    fun start() {"},{"type":"MODIFY","lineNumber":53,"content":"        suspend fun reconnect(scope: kotlinx.coroutines.CoroutineScope) {","oldContent":"                }"},{"type":"MODIFY","lineNumber":64,"content":"            }","oldContent":"                        if (!state.value.connected) {"},{"type":"DELETE","lineNumber":108,"oldContent":"        scope.launch {"},{"type":"DELETE","lineNumber":109,"oldContent":"            mavFrameStream.collect {"},{"type":"INSERT","lineNumber":108,"content":"            }"},{"type":"INSERT","lineNumber":109,"content":"        }"},{"type":"MODIFY","lineNumber":121,"content":"","oldContent":"                        fcuComponentId = it.componentId"},{"type":"DELETE","lineNumber":176,"oldContent":"                }"},{"type":"DELETE","lineNumber":177,"oldContent":"        }"},{"type":"INSERT","lineNumber":176,"content":"                        Log.i("},{"type":"INSERT","lineNumber":177,"content":"                            \"MavlinkRepo\","},{"type":"INSERT","lineNumber":237,"content":"        var missionTimerJob: kotlinx.coroutines.Job? = null"},{"type":"INSERT","lineNumber":238,"content":"        var lastMode: String? = null"},{"type":"DELETE","lineNumber":239,"oldContent":"                        20u -> \"Guided_NoGPS\""},{"type":"DELETE","lineNumber":240,"oldContent":"                        21u -> \"Smart_RTL\""},{"type":"INSERT","lineNumber":241,"content":"                .filter { frame -> state.value.fcuDetected && frame.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":242,"content":"                .map { frame -> frame.message }"},{"type":"DELETE","lineNumber":242,"oldContent":"                        23u -> \"Follow\""},{"type":"DELETE","lineNumber":243,"oldContent":"                        25u -> \"SystemID\""},{"type":"INSERT","lineNumber":244,"content":"                .collect { hb ->"},{"type":"INSERT","lineNumber":245,"content":"                    val armed = (hb.baseMode.value and MavModeFlag.SAFETY_ARMED.value) != 0u"},{"type":"INSERT","lineNumber":275,"content":""},{"type":"INSERT","lineNumber":276,"content":"                    // Mission timer logic"},{"type":"INSERT","lineNumber":277,"content":"                    if (lastMode != mode) {"},{"type":"INSERT","lineNumber":278,"content":"                        if (mode.equals(\"Auto\", ignoreCase = true)) {"},{"type":"INSERT","lineNumber":279,"content":"                            // Mission started"},{"type":"INSERT","lineNumber":280,"content":"                            missionTimerJob?.cancel()"},{"type":"INSERT","lineNumber":281,"content":"                            missionTimerJob = scope.launch {"},{"type":"INSERT","lineNumber":282,"content":"                                var elapsed = 0L"},{"type":"INSERT","lineNumber":283,"content":"                                _state.update { it.copy(missionElapsedSec = 0L) }"},{"type":"INSERT","lineNumber":284,"content":"                                while (isActive && state.value.mode?.equals(\"Auto\", ignoreCase = true) == true) {"},{"type":"INSERT","lineNumber":285,"content":"                                    delay(1000)"},{"type":"INSERT","lineNumber":286,"content":"                                    elapsed += 1"},{"type":"INSERT","lineNumber":287,"content":"                                    _state.update { it.copy(missionElapsedSec = elapsed) }"},{"type":"INSERT","lineNumber":288,"content":"                                }"},{"type":"INSERT","lineNumber":289,"content":"                                // Mission ended"},{"type":"INSERT","lineNumber":290,"content":"                                _state.update { it.copy(missionElapsedSec = null) }"},{"type":"INSERT","lineNumber":291,"content":"                            }"},{"type":"INSERT","lineNumber":292,"content":"                        } else if (lastMode?.equals(\"Auto\", ignoreCase = true) == true) {"},{"type":"INSERT","lineNumber":293,"content":"                            // Mission ended"},{"type":"INSERT","lineNumber":294,"content":"                            missionTimerJob?.cancel()"},{"type":"INSERT","lineNumber":295,"content":"                            missionTimerJob = null"},{"type":"INSERT","lineNumber":296,"content":"                            _state.update { it.copy(missionElapsedSec = null) }"},{"type":"INSERT","lineNumber":297,"content":"                        }"},{"type":"INSERT","lineNumber":298,"content":"                        lastMode = mode"},{"type":"INSERT","lineNumber":299,"content":"                    }"},{"type":"DELETE","lineNumber":278,"oldContent":"                    _state.update { it.copy(sats = sats, hdop = hdop) }"},{"type":"INSERT","lineNumber":305,"content":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":289,"oldContent":"                        is MissionRequest -> {"},{"type":"INSERT","lineNumber":316,"content":"                    _state.update { it.copy(voltage = vBatt, batteryPercent = pct, armable = armable) }"},{"type":"DELETE","lineNumber":307,"oldContent":"        "},{"type":"INSERT","lineNumber":335,"content":""},{"type":"DELETE","lineNumber":345,"oldContent":"            targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":373,"content":"        val commandLong = CommandLong("},{"type":"INSERT","lineNumber":374,"content":"            targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":349,"oldContent":"        val commandLong = CommandLong("},{"type":"DELETE","lineNumber":384,"oldContent":"        if (state.value.armable) {"},{"type":"DELETE","lineNumber":385,"oldContent":"            sendCommand("},{"type":"DELETE","lineNumber":386,"oldContent":"                1f"},{"type":"INSERT","lineNumber":411,"content":"     */"},{"type":"INSERT","lineNumber":412,"content":"    suspend fun changeMode(customMode: UInt): Boolean {"},{"type":"INSERT","lineNumber":413,"content":"        sendCommand("},{"type":"INSERT","lineNumber":458,"content":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, clearAll)"},{"type":"DELETE","lineNumber":433,"oldContent":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, clearAll)"},{"type":"DELETE","lineNumber":435,"oldContent":"                    .collect { ack ->"},{"type":"DELETE","lineNumber":437,"oldContent":"                        if (ack.command.value == MISSION_CLEAR_ALL_CMD && ack.result.value == MavResult.ACCEPTED.value) {"},{"type":"DELETE","lineNumber":440,"oldContent":"                            Log.i(\"MavlinkRepo\", \"[Mission Upload] MISSION_CLEAR_ALL acknowledged by FCU\")"},{"type":"INSERT","lineNumber":466,"content":"                    .collect { ack ->"},{"type":"INSERT","lineNumber":467,"content":"                        if (ack.command.value == MISSION_CLEAR_ALL_CMD && ack.result.value == MavResult.ACCEPTED.value) {"},{"type":"INSERT","lineNumber":468,"content":"                            Log.i(\"MavlinkRepo\", \"[Mission Upload] MISSION_CLEAR_ALL acknowledged by FCU\")"},{"type":"DELETE","lineNumber":544,"oldContent":"        }"},{"type":"INSERT","lineNumber":571,"content":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"INSERT","lineNumber":576,"content":"            }"},{"type":"DELETE","lineNumber":550,"oldContent":"    }"},{"type":"DELETE","lineNumber":569,"oldContent":"                    }"},{"type":"INSERT","lineNumber":597,"content":"                    }"},{"type":"INSERT","lineNumber":629,"content":"            val perSeqMap = mutableMapOf<Int, CompletableDeferred<Unit>>()"},{"type":"DELETE","lineNumber":603,"oldContent":""},{"type":"INSERT","lineNumber":632,"content":"                connection.mavFrame.collect { frame ->"},{"type":"DELETE","lineNumber":606,"oldContent":"                    when (val msg = frame.message) {"},{"type":"INSERT","lineNumber":683,"content":"                }"},{"type":"DELETE","lineNumber":657,"oldContent":""},{"type":"INSERT","lineNumber":724,"content":"            arm()"},{"type":"DELETE","lineNumber":698,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] ARM command sent\")"},{"type":"DELETE","lineNumber":706,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"INSERT","lineNumber":734,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"INSERT","lineNumber":743,"content":"        // Step 3: Set mode to AUTO"},{"type":"DELETE","lineNumber":718,"oldContent":"        // Step 3: Set mode to AUTO"},{"type":"DELETE","lineNumber":750,"oldContent":"    }"},{"type":"DELETE","lineNumber":751,"oldContent":"                }"},{"type":"INSERT","lineNumber":777,"content":"            param7 = 0f"},{"type":"INSERT","lineNumber":778,"content":"        )"},{"type":"DELETE","lineNumber":753,"oldContent":"                    else -> {}"},{"type":"DELETE","lineNumber":754,"oldContent":"                        lastMissionCmd = msg.command.value"},{"type":"INSERT","lineNumber":780,"content":"    }"},{"type":"INSERT","lineNumber":781,"content":"}"}]},{"timestamp":1758185441407,"changes":[{"type":"INSERT","lineNumber":5,"content":"import com.divpundir.mavlink.adapters.coroutines.trySendUnsignedV2"},{"type":"DELETE","lineNumber":9,"oldContent":"import com.divpundir.mavlink.definitions.common.*"},{"type":"MODIFY","lineNumber":107,"content":"                delay(1000)","oldContent":"        scope.launch {"},{"type":"MODIFY","lineNumber":158,"content":"                            setMessageRate(1u, 1f)   // SYS_STATUS","oldContent":""},{"type":"MODIFY","lineNumber":175,"content":"                    try {","oldContent":"                }"},{"type":"MODIFY","lineNumber":236,"content":"        // HEARTBEAT for mode, armed, armable","oldContent":"                        18u -> \"Throw\""},{"type":"DELETE","lineNumber":238,"oldContent":"                        20u -> \"Guided_NoGPS\""},{"type":"INSERT","lineNumber":239,"content":"        var lastArmed: Boolean? = null"},{"type":"INSERT","lineNumber":240,"content":"        scope.launch {"},{"type":"DELETE","lineNumber":242,"oldContent":"                .filterIsInstance<Heartbeat>()"},{"type":"INSERT","lineNumber":244,"content":"                .filterIsInstance<Heartbeat>()"},{"type":"DELETE","lineNumber":245,"oldContent":"                    val mode = when (hb.customMode) {"},{"type":"INSERT","lineNumber":247,"content":"                    val mode = when (hb.customMode) {"},{"type":"DELETE","lineNumber":275,"oldContent":"                .map { it.message }"},{"type":"DELETE","lineNumber":276,"oldContent":"                .filterIsInstance<GpsRawInt>()"},{"type":"MODIFY","lineNumber":278,"content":"                    // Stop timer if mode changes from Auto, or if armed changes from true to false while in Auto","oldContent":"        // SYS_STATUS"},{"type":"INSERT","lineNumber":279,"content":"                    if (lastMode != mode || lastArmed != armed) {"},{"type":"INSERT","lineNumber":280,"content":"                        // Mission started"},{"type":"INSERT","lineNumber":281,"content":"                        if (mode.equals(\"Auto\", ignoreCase = true) && armed && (lastMode != mode || lastArmed != armed)) {"},{"type":"INSERT","lineNumber":282,"content":"                            missionTimerJob?.cancel()"},{"type":"INSERT","lineNumber":283,"content":"                            missionTimerJob = scope.launch {"},{"type":"INSERT","lineNumber":284,"content":"                                var elapsed = 0L"},{"type":"INSERT","lineNumber":285,"content":"                                _state.update { it.copy(missionElapsedSec = 0L) }"},{"type":"INSERT","lineNumber":286,"content":"                                while (isActive && state.value.mode?.equals(\"Auto\", ignoreCase = true) == true && state.value.armed) {"},{"type":"INSERT","lineNumber":287,"content":"                                    delay(1000)"},{"type":"INSERT","lineNumber":288,"content":"                                    elapsed += 1"},{"type":"INSERT","lineNumber":289,"content":"                                    _state.update { it.copy(missionElapsedSec = elapsed) }"},{"type":"INSERT","lineNumber":290,"content":"                                }"},{"type":"INSERT","lineNumber":291,"content":"                                // Mission ended"},{"type":"INSERT","lineNumber":292,"content":"                                _state.update { it.copy(missionElapsedSec = null) }"},{"type":"INSERT","lineNumber":293,"content":"                            }"},{"type":"INSERT","lineNumber":294,"content":"                        } else if ((lastMode?.equals(\"Auto\", ignoreCase = true) == true && mode != \"Auto\") ||"},{"type":"INSERT","lineNumber":295,"content":"                                   (lastArmed == true && armed == false && mode.equals(\"Auto\", ignoreCase = true))) {"},{"type":"INSERT","lineNumber":296,"content":"                            // Mission ended (either mode changed from Auto, or drone disarmed in Auto)"},{"type":"INSERT","lineNumber":297,"content":"                            missionTimerJob?.cancel()"},{"type":"INSERT","lineNumber":298,"content":"                            missionTimerJob = null"},{"type":"INSERT","lineNumber":299,"content":"                            _state.update { it.copy(missionElapsedSec = null) }"},{"type":"INSERT","lineNumber":300,"content":"                        }"},{"type":"INSERT","lineNumber":301,"content":"                        lastMode = mode"},{"type":"INSERT","lineNumber":302,"content":"                        lastArmed = armed"},{"type":"INSERT","lineNumber":303,"content":"                    }"},{"type":"INSERT","lineNumber":304,"content":"                }"},{"type":"INSERT","lineNumber":305,"content":"        }"},{"type":"INSERT","lineNumber":306,"content":"        // SYS_STATUS"},{"type":"DELETE","lineNumber":281,"oldContent":"                    if (lastMode != mode) {"},{"type":"DELETE","lineNumber":283,"oldContent":"                        if (mode.equals(\"Auto\", ignoreCase = true)) {"},{"type":"DELETE","lineNumber":284,"oldContent":"                            // Mission started"},{"type":"INSERT","lineNumber":309,"content":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":286,"oldContent":"                            missionTimerJob?.cancel()"},{"type":"DELETE","lineNumber":288,"oldContent":"                            missionTimerJob = scope.launch {"},{"type":"DELETE","lineNumber":290,"oldContent":"                                var elapsed = 0L"},{"type":"DELETE","lineNumber":292,"oldContent":"                                _state.update { it.copy(missionElapsedSec = 0L) }"},{"type":"DELETE","lineNumber":294,"oldContent":"                                while (isActive && state.value.mode?.equals(\"Auto\", ignoreCase = true) == true) {"},{"type":"DELETE","lineNumber":296,"oldContent":"                                    delay(1000)"},{"type":"DELETE","lineNumber":298,"oldContent":"                                    elapsed += 1"},{"type":"DELETE","lineNumber":300,"oldContent":"                                    _state.update { it.copy(missionElapsedSec = elapsed) }"},{"type":"DELETE","lineNumber":302,"oldContent":"                                }"},{"type":"DELETE","lineNumber":304,"oldContent":"                                // Mission ended"},{"type":"DELETE","lineNumber":305,"oldContent":"                                _state.update { it.copy(missionElapsedSec = null) }"},{"type":"INSERT","lineNumber":320,"content":"                    _state.update { it.copy(voltage = vBatt, batteryPercent = pct, armable = armable) }"},{"type":"DELETE","lineNumber":307,"oldContent":"                            }"},{"type":"DELETE","lineNumber":309,"oldContent":"                        } else if (lastMode?.equals(\"Auto\", ignoreCase = true) == true) {"},{"type":"DELETE","lineNumber":311,"oldContent":"                            // Mission ended"},{"type":"DELETE","lineNumber":313,"oldContent":"                            missionTimerJob?.cancel()"},{"type":"DELETE","lineNumber":315,"oldContent":"                            missionTimerJob = null"},{"type":"DELETE","lineNumber":317,"oldContent":"                            _state.update { it.copy(missionElapsedSec = null) }"},{"type":"DELETE","lineNumber":319,"oldContent":"                        }"},{"type":"DELETE","lineNumber":321,"oldContent":"                        lastMode = mode"},{"type":"DELETE","lineNumber":323,"oldContent":"                    }"},{"type":"DELETE","lineNumber":330,"oldContent":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":339,"content":""},{"type":"DELETE","lineNumber":341,"oldContent":"                    _state.update { it.copy(voltage = vBatt, batteryPercent = pct, armable = armable) }"},{"type":"DELETE","lineNumber":361,"oldContent":""},{"type":"INSERT","lineNumber":377,"content":"        val commandLong = CommandLong("},{"type":"INSERT","lineNumber":378,"content":"            targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":398,"oldContent":"        val commandLong = CommandLong("},{"type":"DELETE","lineNumber":400,"oldContent":"            targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":415,"content":"     */"},{"type":"INSERT","lineNumber":416,"content":"    suspend fun changeMode(customMode: UInt): Boolean {"},{"type":"INSERT","lineNumber":417,"content":"        sendCommand("},{"type":"DELETE","lineNumber":435,"oldContent":"     */"},{"type":"DELETE","lineNumber":437,"oldContent":"    suspend fun changeMode(customMode: UInt): Boolean {"},{"type":"DELETE","lineNumber":439,"oldContent":"        sendCommand("},{"type":"INSERT","lineNumber":462,"content":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, clearAll)"},{"type":"INSERT","lineNumber":470,"content":"                    .collect { ack ->"},{"type":"INSERT","lineNumber":471,"content":"                        if (ack.command.value == MISSION_CLEAR_ALL_CMD && ack.result.value == MavResult.ACCEPTED.value) {"},{"type":"INSERT","lineNumber":472,"content":"                            Log.i(\"MavlinkRepo\", \"[Mission Upload] MISSION_CLEAR_ALL acknowledged by FCU\")"},{"type":"DELETE","lineNumber":481,"oldContent":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, clearAll)"},{"type":"DELETE","lineNumber":490,"oldContent":"                    .collect { ack ->"},{"type":"DELETE","lineNumber":492,"oldContent":"                        if (ack.command.value == MISSION_CLEAR_ALL_CMD && ack.result.value == MavResult.ACCEPTED.value) {"},{"type":"DELETE","lineNumber":494,"oldContent":"                            Log.i(\"MavlinkRepo\", \"[Mission Upload] MISSION_CLEAR_ALL acknowledged by FCU\")"},{"type":"INSERT","lineNumber":575,"content":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"DELETE","lineNumber":574,"oldContent":"            delay(200)"},{"type":"DELETE","lineNumber":575,"oldContent":"                }"},{"type":"INSERT","lineNumber":579,"content":"                delay(100)"},{"type":"INSERT","lineNumber":580,"content":"            }"},{"type":"INSERT","lineNumber":581,"content":""},{"type":"DELETE","lineNumber":584,"oldContent":""},{"type":"INSERT","lineNumber":590,"content":"                        targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":595,"oldContent":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"INSERT","lineNumber":601,"content":"                    }"},{"type":"DELETE","lineNumber":601,"oldContent":"            }"},{"type":"DELETE","lineNumber":623,"oldContent":"                    }"},{"type":"INSERT","lineNumber":633,"content":"            val perSeqMap = mutableMapOf<Int, CompletableDeferred<Unit>>()"},{"type":"INSERT","lineNumber":636,"content":"                connection.mavFrame.collect { frame ->"},{"type":"DELETE","lineNumber":654,"oldContent":"            val perSeqMap = mutableMapOf<Int, CompletableDeferred<Unit>>()"},{"type":"DELETE","lineNumber":658,"oldContent":"                connection.mavFrame.collect { frame ->"},{"type":"INSERT","lineNumber":687,"content":"                }"},{"type":"DELETE","lineNumber":709,"oldContent":"                }"},{"type":"INSERT","lineNumber":728,"content":"            arm()"},{"type":"INSERT","lineNumber":738,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"INSERT","lineNumber":747,"content":"        // Step 3: Set mode to AUTO"},{"type":"DELETE","lineNumber":748,"oldContent":"            arm()"},{"type":"DELETE","lineNumber":759,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"DELETE","lineNumber":769,"oldContent":"        // Step 3: Set mode to AUTO"},{"type":"DELETE","lineNumber":774,"oldContent":"    }"},{"type":"DELETE","lineNumber":775,"oldContent":"            }"},{"type":"INSERT","lineNumber":778,"content":"            param4 = 0f,"},{"type":"INSERT","lineNumber":779,"content":"            param5 = 0f,"},{"type":"INSERT","lineNumber":781,"content":"            param7 = 0f"},{"type":"INSERT","lineNumber":782,"content":"        )"},{"type":"DELETE","lineNumber":778,"oldContent":"}"},{"type":"DELETE","lineNumber":780,"oldContent":"        )"},{"type":"DELETE","lineNumber":781,"oldContent":"            param7 = 0f"},{"type":"INSERT","lineNumber":785,"content":"}"}]},{"timestamp":1758185817639,"changes":[{"type":"DELETE","lineNumber":20,"oldContent":") {"},{"type":"DELETE","lineNumber":21,"oldContent":"    private var mission by mutableStateOf<List<LatLng>>(emptyList())"},{"type":"INSERT","lineNumber":20,"content":"object MavMode {"},{"type":"INSERT","lineNumber":21,"content":"    const val STABILIZE: UInt = 0u"},{"type":"MODIFY","lineNumber":38,"content":"    private var fcuComponentId: UByte = 0u","oldContent":"    fun start() {"},{"type":"MODIFY","lineNumber":110,"content":"","oldContent":"            }"},{"type":"MODIFY","lineNumber":120,"content":"        }","oldContent":"                        fcuComponentId = it.componentId"},{"type":"MODIFY","lineNumber":239,"content":"        var lastArmed: Boolean? = null","oldContent":"        var lastArmed: Boolean? = null"},{"type":"DELETE","lineNumber":274,"oldContent":"            mavFrameStream"},{"type":"DELETE","lineNumber":275,"oldContent":"                .map { it.message }"},{"type":"INSERT","lineNumber":274,"content":"                    }"},{"type":"INSERT","lineNumber":275,"content":"                    _state.update { it.copy(armed = armed, mode = mode) }"},{"type":"DELETE","lineNumber":277,"oldContent":"                    // Stop timer if mode changes from Auto, or if armed changes from true to false while in Auto"},{"type":"DELETE","lineNumber":278,"oldContent":"                    if (lastMode != mode || lastArmed != armed) {"},{"type":"DELETE","lineNumber":280,"oldContent":"                        // Mission started"},{"type":"DELETE","lineNumber":281,"oldContent":"        scope.launch {"},{"type":"INSERT","lineNumber":278,"content":"                    if (lastMode != mode || lastArmed != armed) {"},{"type":"DELETE","lineNumber":284,"oldContent":"            mavFrameStream"},{"type":"DELETE","lineNumber":287,"oldContent":"                                _state.update { it.copy(missionElapsedSec = 0L) }"},{"type":"DELETE","lineNumber":288,"oldContent":"                .map { it.message }"},{"type":"INSERT","lineNumber":283,"content":"                                _state.update { it.copy(missionElapsedSec = 0L, missionCompleted = false) }"},{"type":"DELETE","lineNumber":291,"oldContent":"                .filterIsInstance<SysStatus>()"},{"type":"DELETE","lineNumber":294,"oldContent":"                .collect { s ->"},{"type":"DELETE","lineNumber":297,"oldContent":"                    val vBatt = if (s.voltageBattery.toUInt() == 0xFFFFu) null else s.voltageBattery.toFloat() / 1000f"},{"type":"DELETE","lineNumber":298,"oldContent":"                                _state.update { it.copy(missionElapsedSec = null) }"},{"type":"INSERT","lineNumber":290,"content":"                                _state.update { it.copy(missionElapsedSec = null, missionCompleted = true) }"},{"type":"INSERT","lineNumber":291,"content":"                                // Clear mission from FCU"},{"type":"INSERT","lineNumber":292,"content":"                                val clearAll = MissionClearAll(targetSystem = fcuSystemId, targetComponent = fcuComponentId)"},{"type":"INSERT","lineNumber":293,"content":"                                try {"},{"type":"INSERT","lineNumber":294,"content":"                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, clearAll)"},{"type":"INSERT","lineNumber":295,"content":"                                    Log.i(\"MavlinkRepo\", \"Sent MISSION_CLEAR_ALL after mission completion\")"},{"type":"INSERT","lineNumber":296,"content":"                                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":297,"content":"                                    Log.e(\"MavlinkRepo\", \"Failed to send MISSION_CLEAR_ALL after mission completion\", e)"},{"type":"INSERT","lineNumber":298,"content":"                                }"},{"type":"DELETE","lineNumber":300,"oldContent":"                    val pct = if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()"},{"type":"DELETE","lineNumber":303,"oldContent":"                    val SENSOR_3D_GYRO = 1u"},{"type":"DELETE","lineNumber":306,"oldContent":"                    val present = (s.onboardControlSensorsPresent.value and SENSOR_3D_GYRO) != 0u"},{"type":"DELETE","lineNumber":308,"oldContent":"                            _state.update { it.copy(missionElapsedSec = null) }"},{"type":"DELETE","lineNumber":309,"oldContent":"                    val enabled = (s.onboardControlSensorsEnabled.value and SENSOR_3D_GYRO) != 0u"},{"type":"INSERT","lineNumber":305,"content":"                            _state.update { it.copy(missionElapsedSec = null, missionCompleted = true) }"},{"type":"INSERT","lineNumber":306,"content":"                            // Clear mission from FCU"},{"type":"INSERT","lineNumber":307,"content":"                            val clearAll = MissionClearAll(targetSystem = fcuSystemId, targetComponent = fcuComponentId)"},{"type":"INSERT","lineNumber":308,"content":"                            try {"},{"type":"INSERT","lineNumber":309,"content":"                                connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, clearAll)"},{"type":"INSERT","lineNumber":310,"content":"                                Log.i(\"MavlinkRepo\", \"Sent MISSION_CLEAR_ALL after mission completion\")"},{"type":"INSERT","lineNumber":311,"content":"                            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":312,"content":"                                Log.e(\"MavlinkRepo\", \"Failed to send MISSION_CLEAR_ALL after mission completion\", e)"},{"type":"INSERT","lineNumber":313,"content":"                            }"},{"type":"DELETE","lineNumber":312,"oldContent":"                    val healthy = (s.onboardControlSensorsHealth.value and SENSOR_3D_GYRO) != 0u"},{"type":"DELETE","lineNumber":315,"oldContent":"                        is MissionRequest -> {"},{"type":"INSERT","lineNumber":321,"content":"        scope.launch {"},{"type":"INSERT","lineNumber":322,"content":"            mavFrameStream"},{"type":"INSERT","lineNumber":323,"content":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":324,"content":"                .map { it.message }"},{"type":"INSERT","lineNumber":325,"content":"                .filterIsInstance<SysStatus>()"},{"type":"INSERT","lineNumber":326,"content":"                .collect { s ->"},{"type":"INSERT","lineNumber":327,"content":"                    val vBatt = if (s.voltageBattery.toUInt() == 0xFFFFu) null else s.voltageBattery.toFloat() / 1000f"},{"type":"INSERT","lineNumber":328,"content":"                    val pct = if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()"},{"type":"INSERT","lineNumber":329,"content":"                    val SENSOR_3D_GYRO = 1u"},{"type":"INSERT","lineNumber":330,"content":"                    val present = (s.onboardControlSensorsPresent.value and SENSOR_3D_GYRO) != 0u"},{"type":"INSERT","lineNumber":331,"content":"                    val enabled = (s.onboardControlSensorsEnabled.value and SENSOR_3D_GYRO) != 0u"},{"type":"INSERT","lineNumber":332,"content":"                    val healthy = (s.onboardControlSensorsHealth.value and SENSOR_3D_GYRO) != 0u"},{"type":"INSERT","lineNumber":333,"content":"                    val armable = present && enabled && healthy"},{"type":"INSERT","lineNumber":334,"content":"                    _state.update { it.copy(voltage = vBatt, batteryPercent = pct, armable = armable) }"},{"type":"DELETE","lineNumber":321,"oldContent":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":327,"oldContent":"                    _state.update { it.copy(voltage = vBatt, batteryPercent = pct, armable = armable) }"},{"type":"INSERT","lineNumber":353,"content":""},{"type":"DELETE","lineNumber":344,"oldContent":""},{"type":"INSERT","lineNumber":391,"content":"        val commandLong = CommandLong("},{"type":"INSERT","lineNumber":392,"content":"            targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":381,"oldContent":"        val commandLong = CommandLong("},{"type":"DELETE","lineNumber":383,"oldContent":"            targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":415,"oldContent":"            )"},{"type":"INSERT","lineNumber":429,"content":"     */"},{"type":"INSERT","lineNumber":430,"content":"    suspend fun changeMode(customMode: UInt): Boolean {"},{"type":"INSERT","lineNumber":431,"content":"        sendCommand("},{"type":"INSERT","lineNumber":432,"content":"            MavCmd.DO_SET_MODE,"},{"type":"DELETE","lineNumber":419,"oldContent":"     */"},{"type":"DELETE","lineNumber":420,"oldContent":"    }"},{"type":"DELETE","lineNumber":421,"oldContent":"    suspend fun changeMode(customMode: UInt): Boolean {"},{"type":"INSERT","lineNumber":436,"content":"        )"},{"type":"DELETE","lineNumber":423,"oldContent":"        sendCommand("},{"type":"INSERT","lineNumber":476,"content":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, clearAll)"},{"type":"DELETE","lineNumber":466,"oldContent":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, clearAll)"},{"type":"INSERT","lineNumber":484,"content":"                    .collect { ack ->"},{"type":"INSERT","lineNumber":485,"content":"                        if (ack.command.value == MISSION_CLEAR_ALL_CMD && ack.result.value == MavResult.ACCEPTED.value) {"},{"type":"INSERT","lineNumber":486,"content":"                            Log.i(\"MavlinkRepo\", \"[Mission Upload] MISSION_CLEAR_ALL acknowledged by FCU\")"},{"type":"DELETE","lineNumber":475,"oldContent":"                    .collect { ack ->"},{"type":"DELETE","lineNumber":477,"oldContent":"                        if (ack.command.value == MISSION_CLEAR_ALL_CMD && ack.result.value == MavResult.ACCEPTED.value) {"},{"type":"DELETE","lineNumber":479,"oldContent":"                            Log.i(\"MavlinkRepo\", \"[Mission Upload] MISSION_CLEAR_ALL acknowledged by FCU\")"},{"type":"INSERT","lineNumber":589,"content":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"DELETE","lineNumber":578,"oldContent":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"INSERT","lineNumber":593,"content":"                delay(100)"},{"type":"INSERT","lineNumber":594,"content":"            }"},{"type":"INSERT","lineNumber":595,"content":""},{"type":"DELETE","lineNumber":582,"oldContent":"                delay(100)"},{"type":"DELETE","lineNumber":584,"oldContent":"            }"},{"type":"DELETE","lineNumber":586,"oldContent":""},{"type":"INSERT","lineNumber":604,"content":"                        targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":595,"oldContent":"                        targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":615,"content":"                    }"},{"type":"DELETE","lineNumber":606,"oldContent":"                    }"},{"type":"INSERT","lineNumber":647,"content":"            val perSeqMap = mutableMapOf<Int, CompletableDeferred<Unit>>()"},{"type":"INSERT","lineNumber":650,"content":"                connection.mavFrame.collect { frame ->"},{"type":"DELETE","lineNumber":637,"oldContent":"            val perSeqMap = mutableMapOf<Int, CompletableDeferred<Unit>>()"},{"type":"DELETE","lineNumber":641,"oldContent":"                connection.mavFrame.collect { frame ->"},{"type":"INSERT","lineNumber":701,"content":"                }"},{"type":"DELETE","lineNumber":691,"oldContent":"                }"},{"type":"INSERT","lineNumber":742,"content":"            arm()"},{"type":"DELETE","lineNumber":732,"oldContent":"            arm()"},{"type":"INSERT","lineNumber":752,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"DELETE","lineNumber":743,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"INSERT","lineNumber":761,"content":"        // Step 3: Set mode to AUTO"},{"type":"DELETE","lineNumber":753,"oldContent":"        // Step 3: Set mode to AUTO"},{"type":"DELETE","lineNumber":773,"oldContent":"    }"},{"type":"DELETE","lineNumber":774,"oldContent":"            }"},{"type":"DELETE","lineNumber":775,"oldContent":"                }"},{"type":"DELETE","lineNumber":776,"oldContent":"                    else -> {}"},{"type":"DELETE","lineNumber":777,"oldContent":"                    }"},{"type":"DELETE","lineNumber":778,"oldContent":"            param6 = 0f,"},{"type":"DELETE","lineNumber":779,"oldContent":"        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, cmd)"},{"type":"INSERT","lineNumber":787,"content":"            command = MavCmd.MISSION_START.wrap(),"},{"type":"INSERT","lineNumber":788,"content":"            confirmation = 0u,"},{"type":"INSERT","lineNumber":789,"content":"            param1 = 0f,"},{"type":"INSERT","lineNumber":790,"content":"            param2 = 0f,"},{"type":"INSERT","lineNumber":791,"content":"            param3 = 0f,"},{"type":"DELETE","lineNumber":782,"oldContent":"    }"},{"type":"INSERT","lineNumber":794,"content":"            param6 = 0f,"},{"type":"INSERT","lineNumber":797,"content":"        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, cmd)"},{"type":"INSERT","lineNumber":798,"content":"    }"}]},{"timestamp":1758187740516,"changes":[{"type":"MODIFY","lineNumber":17,"content":"import kotlin.math.absoluteValue","oldContent":"class MavlinkTelemetryRepository("},{"type":"DELETE","lineNumber":28,"oldContent":"    private var fcuSystemId: UByte = 0u"},{"type":"DELETE","lineNumber":29,"oldContent":"    private var fcuComponentId: UByte = 0u"},{"type":"DELETE","lineNumber":30,"oldContent":""},{"type":"INSERT","lineNumber":28,"content":"class MavlinkTelemetryRepository("},{"type":"INSERT","lineNumber":29,"content":"    private val host: String,"},{"type":"INSERT","lineNumber":30,"content":"    private val port: Int"},{"type":"DELETE","lineNumber":33,"oldContent":"    val lastFailure: StateFlow<Throwable?> = _lastFailure.asStateFlow()"},{"type":"DELETE","lineNumber":34,"oldContent":""},{"type":"INSERT","lineNumber":33,"content":"    private val gcsComponentId: UByte = 1u"},{"type":"INSERT","lineNumber":34,"content":"    private val _state = MutableStateFlow(TelemetryState())"},{"type":"MODIFY","lineNumber":37,"content":"    private var fcuSystemId: UByte = 0u","oldContent":""},{"type":"INSERT","lineNumber":50,"content":"    // For total distance tracking"},{"type":"INSERT","lineNumber":51,"content":"    private val positionHistory = mutableListOf<Pair<Double, Double>>()"},{"type":"INSERT","lineNumber":52,"content":"    private var totalDistanceMeters: Float = 0f"},{"type":"INSERT","lineNumber":53,"content":"    private var lastMissionRunning = false"},{"type":"INSERT","lineNumber":54,"content":""},{"type":"DELETE","lineNumber":66,"oldContent":"                            _state.update { it.copy(connected = true) }"},{"type":"INSERT","lineNumber":71,"content":""},{"type":"DELETE","lineNumber":159,"oldContent":"        // Collectors"},{"type":"INSERT","lineNumber":164,"content":"                            setMessageRate(24u, 1f)  // GPS_RAW_INT"},{"type":"DELETE","lineNumber":214,"oldContent":"                    _state.update {"},{"type":"DELETE","lineNumber":215,"oldContent":"                        it.copy("},{"type":"DELETE","lineNumber":216,"oldContent":"                            altitudeMsl = altAMSLm,"},{"type":"DELETE","lineNumber":217,"oldContent":"                            altitudeRelative = relAltM,"},{"type":"DELETE","lineNumber":218,"oldContent":"                            latitude = lat,"},{"type":"DELETE","lineNumber":219,"oldContent":"                            longitude = lon"},{"type":"DELETE","lineNumber":220,"oldContent":"                        )"},{"type":"INSERT","lineNumber":219,"content":""},{"type":"INSERT","lineNumber":220,"content":"                    val missionRunning = state.value.mode?.equals(\"Auto\", ignoreCase = true) == true && state.value.armed"},{"type":"INSERT","lineNumber":221,"content":"                    if (missionRunning) {"},{"type":"INSERT","lineNumber":222,"content":"                        if (!lastMissionRunning) {"},{"type":"INSERT","lineNumber":223,"content":"                            positionHistory.clear()"},{"type":"INSERT","lineNumber":224,"content":"                            totalDistanceMeters = 0f"},{"type":"INSERT","lineNumber":225,"content":"                        }"},{"type":"INSERT","lineNumber":226,"content":"                        if (lat != null && lon != null) {"},{"type":"INSERT","lineNumber":227,"content":"                            if (positionHistory.isNotEmpty()) {"},{"type":"INSERT","lineNumber":228,"content":"                                val (prevLat, prevLon) = positionHistory.last()"},{"type":"INSERT","lineNumber":229,"content":"                                val dist = haversine(prevLat, prevLon, lat, lon)"},{"type":"INSERT","lineNumber":230,"content":"                                totalDistanceMeters += dist"},{"type":"INSERT","lineNumber":231,"content":"                            }"},{"type":"INSERT","lineNumber":232,"content":"                            positionHistory.add(lat to lon)"},{"type":"INSERT","lineNumber":233,"content":"                        }"},{"type":"INSERT","lineNumber":234,"content":"                        _state.update {"},{"type":"INSERT","lineNumber":235,"content":"                            it.copy("},{"type":"INSERT","lineNumber":236,"content":"                                altitudeMsl = altAMSLm,"},{"type":"INSERT","lineNumber":237,"content":"                                altitudeRelative = relAltM,"},{"type":"INSERT","lineNumber":238,"content":"                                latitude = lat,"},{"type":"INSERT","lineNumber":239,"content":"                                longitude = lon,"},{"type":"INSERT","lineNumber":240,"content":"                                totalDistanceMeters = totalDistanceMeters"},{"type":"INSERT","lineNumber":241,"content":"                            )"},{"type":"INSERT","lineNumber":242,"content":"                        }"},{"type":"INSERT","lineNumber":243,"content":"                    } else {"},{"type":"INSERT","lineNumber":244,"content":"                        _state.update {"},{"type":"INSERT","lineNumber":245,"content":"                            it.copy("},{"type":"INSERT","lineNumber":246,"content":"                                altitudeMsl = altAMSLm,"},{"type":"INSERT","lineNumber":247,"content":"                                altitudeRelative = relAltM,"},{"type":"INSERT","lineNumber":248,"content":"                                latitude = lat,"},{"type":"INSERT","lineNumber":249,"content":"                                longitude = lon,"},{"type":"INSERT","lineNumber":250,"content":"                                totalDistanceMeters = if (positionHistory.isNotEmpty()) totalDistanceMeters else null"},{"type":"INSERT","lineNumber":251,"content":"                            )"},{"type":"INSERT","lineNumber":252,"content":"                        }"},{"type":"INSERT","lineNumber":254,"content":"                    lastMissionRunning = missionRunning"},{"type":"DELETE","lineNumber":235,"oldContent":"                        18u -> \"Throw\""},{"type":"INSERT","lineNumber":268,"content":"        }"},{"type":"INSERT","lineNumber":271,"content":"        var lastMode: String? = null"},{"type":"DELETE","lineNumber":239,"oldContent":"        var lastArmed: Boolean? = null"},{"type":"DELETE","lineNumber":241,"oldContent":"                        21u -> \"Smart_RTL\""},{"type":"INSERT","lineNumber":274,"content":"            mavFrameStream"},{"type":"DELETE","lineNumber":277,"oldContent":"                    if (lastMode != mode || lastArmed != armed) {"},{"type":"INSERT","lineNumber":311,"content":"                    if (lastMode != mode || lastArmed != armed) {"},{"type":"DELETE","lineNumber":280,"oldContent":"                                _state.update { it.copy(missionElapsedSec = 0L, missionCompleted = false) }"},{"type":"INSERT","lineNumber":316,"content":"                                _state.update { it.copy(missionElapsedSec = 0L, missionCompleted = false) }"},{"type":"DELETE","lineNumber":285,"oldContent":"                                _state.update { it.copy(missionElapsedSec = null, missionCompleted = true) }"},{"type":"INSERT","lineNumber":319,"content":"                                    elapsed += 1"},{"type":"INSERT","lineNumber":320,"content":"                                    _state.update { it.copy(missionElapsedSec = elapsed) }"},{"type":"INSERT","lineNumber":321,"content":"                                }"},{"type":"INSERT","lineNumber":322,"content":"                                // Mission ended"},{"type":"INSERT","lineNumber":323,"content":"                                _state.update { it.copy(missionElapsedSec = null, missionCompleted = true) }"},{"type":"DELETE","lineNumber":289,"oldContent":"                                    elapsed += 1"},{"type":"DELETE","lineNumber":291,"oldContent":"                                    _state.update { it.copy(missionElapsedSec = elapsed) }"},{"type":"DELETE","lineNumber":294,"oldContent":"                                }"},{"type":"DELETE","lineNumber":296,"oldContent":"                                // Mission ended"},{"type":"DELETE","lineNumber":303,"oldContent":"                            _state.update { it.copy(missionElapsedSec = null, missionCompleted = true) }"},{"type":"INSERT","lineNumber":337,"content":"                            missionTimerJob = null"},{"type":"INSERT","lineNumber":338,"content":"                            _state.update { it.copy(missionElapsedSec = null, missionCompleted = true) }"},{"type":"DELETE","lineNumber":307,"oldContent":"                            missionTimerJob = null"},{"type":"DELETE","lineNumber":311,"oldContent":"                        }"},{"type":"DELETE","lineNumber":313,"oldContent":"                        lastMode = mode"},{"type":"INSERT","lineNumber":347,"content":"                        }"},{"type":"INSERT","lineNumber":348,"content":"                        lastMode = mode"},{"type":"DELETE","lineNumber":321,"oldContent":"                }"},{"type":"DELETE","lineNumber":322,"oldContent":"        }"},{"type":"DELETE","lineNumber":325,"oldContent":""},{"type":"DELETE","lineNumber":327,"oldContent":"        // GPS_RAW_INT"},{"type":"DELETE","lineNumber":329,"oldContent":"        scope.launch {"},{"type":"DELETE","lineNumber":331,"oldContent":"            mavFrameStream"},{"type":"DELETE","lineNumber":333,"oldContent":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":336,"oldContent":"                .map { it.message }"},{"type":"DELETE","lineNumber":338,"oldContent":"                .filterIsInstance<GpsRawInt>()"},{"type":"DELETE","lineNumber":340,"oldContent":"                .collect { gps ->"},{"type":"DELETE","lineNumber":342,"oldContent":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"DELETE","lineNumber":344,"oldContent":"                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"DELETE","lineNumber":346,"oldContent":"                    _state.update { it.copy(sats = sats, hdop = hdop) }"},{"type":"DELETE","lineNumber":350,"oldContent":"                                    y = (waypoint.longitude * 1e7).toInt(),"},{"type":"INSERT","lineNumber":370,"content":""},{"type":"INSERT","lineNumber":371,"content":"        // GPS_RAW_INT"},{"type":"INSERT","lineNumber":372,"content":"        scope.launch {"},{"type":"INSERT","lineNumber":373,"content":"            mavFrameStream"},{"type":"INSERT","lineNumber":374,"content":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":375,"content":"                .map { it.message }"},{"type":"INSERT","lineNumber":376,"content":"                .filterIsInstance<GpsRawInt>()"},{"type":"INSERT","lineNumber":377,"content":"                .collect { gps ->"},{"type":"INSERT","lineNumber":378,"content":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"INSERT","lineNumber":379,"content":"                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"INSERT","lineNumber":380,"content":"                    _state.update { it.copy(sats = sats, hdop = hdop) }"},{"type":"INSERT","lineNumber":381,"content":"                }"},{"type":"INSERT","lineNumber":382,"content":"        }"},{"type":"INSERT","lineNumber":383,"content":""},{"type":"INSERT","lineNumber":386,"content":""},{"type":"DELETE","lineNumber":366,"oldContent":""},{"type":"INSERT","lineNumber":424,"content":"        val commandLong = CommandLong("},{"type":"INSERT","lineNumber":425,"content":"            targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":403,"oldContent":"        val commandLong = CommandLong("},{"type":"DELETE","lineNumber":405,"oldContent":"            targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":462,"content":"     */"},{"type":"INSERT","lineNumber":463,"content":"    suspend fun changeMode(customMode: UInt): Boolean {"},{"type":"INSERT","lineNumber":464,"content":"        sendCommand("},{"type":"INSERT","lineNumber":465,"content":"            MavCmd.DO_SET_MODE,"},{"type":"INSERT","lineNumber":469,"content":"        )"},{"type":"DELETE","lineNumber":438,"oldContent":"     */"},{"type":"DELETE","lineNumber":440,"oldContent":"    suspend fun changeMode(customMode: UInt): Boolean {"},{"type":"DELETE","lineNumber":442,"oldContent":"        sendCommand("},{"type":"DELETE","lineNumber":444,"oldContent":"            MavCmd.DO_SET_MODE,"},{"type":"DELETE","lineNumber":449,"oldContent":"        )"},{"type":"INSERT","lineNumber":509,"content":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, clearAll)"},{"type":"INSERT","lineNumber":517,"content":"                    .collect { ack ->"},{"type":"INSERT","lineNumber":518,"content":"                        if (ack.command.value == MISSION_CLEAR_ALL_CMD && ack.result.value == MavResult.ACCEPTED.value) {"},{"type":"INSERT","lineNumber":519,"content":"                            Log.i(\"MavlinkRepo\", \"[Mission Upload] MISSION_CLEAR_ALL acknowledged by FCU\")"},{"type":"DELETE","lineNumber":488,"oldContent":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, clearAll)"},{"type":"DELETE","lineNumber":495,"oldContent":"                    .collect { ack ->"},{"type":"DELETE","lineNumber":497,"oldContent":"                        if (ack.command.value == MISSION_CLEAR_ALL_CMD && ack.result.value == MavResult.ACCEPTED.value) {"},{"type":"DELETE","lineNumber":499,"oldContent":"                            Log.i(\"MavlinkRepo\", \"[Mission Upload] MISSION_CLEAR_ALL acknowledged by FCU\")"},{"type":"INSERT","lineNumber":622,"content":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"INSERT","lineNumber":626,"content":"                delay(100)"},{"type":"INSERT","lineNumber":627,"content":"            }"},{"type":"INSERT","lineNumber":628,"content":""},{"type":"DELETE","lineNumber":599,"oldContent":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"INSERT","lineNumber":637,"content":"                        targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":604,"oldContent":"                delay(100)"},{"type":"DELETE","lineNumber":606,"oldContent":"            }"},{"type":"DELETE","lineNumber":608,"oldContent":""},{"type":"INSERT","lineNumber":648,"content":"                    }"},{"type":"DELETE","lineNumber":617,"oldContent":"                        targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":628,"oldContent":"                    }"},{"type":"INSERT","lineNumber":680,"content":"            val perSeqMap = mutableMapOf<Int, CompletableDeferred<Unit>>()"},{"type":"INSERT","lineNumber":683,"content":"                connection.mavFrame.collect { frame ->"},{"type":"DELETE","lineNumber":659,"oldContent":"            val perSeqMap = mutableMapOf<Int, CompletableDeferred<Unit>>()"},{"type":"DELETE","lineNumber":663,"oldContent":"                connection.mavFrame.collect { frame ->"},{"type":"INSERT","lineNumber":734,"content":"                }"},{"type":"DELETE","lineNumber":714,"oldContent":"                }"},{"type":"DELETE","lineNumber":731,"oldContent":"                Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to switch to AUTO mode\")"},{"type":"INSERT","lineNumber":764,"content":"     */"},{"type":"INSERT","lineNumber":775,"content":"            arm()"},{"type":"INSERT","lineNumber":785,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"DELETE","lineNumber":755,"oldContent":"            arm()"},{"type":"INSERT","lineNumber":794,"content":"        // Step 3: Set mode to AUTO"},{"type":"DELETE","lineNumber":765,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"DELETE","lineNumber":774,"oldContent":"        // Step 3: Set mode to AUTO"},{"type":"DELETE","lineNumber":785,"oldContent":"    }"},{"type":"DELETE","lineNumber":786,"oldContent":"            }"},{"type":"INSERT","lineNumber":818,"content":"            targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":819,"content":"            targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":820,"content":"            command = MavCmd.MISSION_START.wrap(),"},{"type":"INSERT","lineNumber":821,"content":"            confirmation = 0u,"},{"type":"INSERT","lineNumber":822,"content":"            param1 = 0f,"},{"type":"INSERT","lineNumber":823,"content":"            param2 = 0f,"},{"type":"INSERT","lineNumber":824,"content":"            param3 = 0f,"},{"type":"INSERT","lineNumber":827,"content":"            param6 = 0f,"},{"type":"DELETE","lineNumber":791,"oldContent":"}"},{"type":"DELETE","lineNumber":792,"oldContent":"    }"},{"type":"DELETE","lineNumber":793,"oldContent":"            command = MavCmd.MISSION_START.wrap(),"},{"type":"DELETE","lineNumber":795,"oldContent":"            confirmation = 0u,"},{"type":"DELETE","lineNumber":796,"oldContent":"            param6 = 0f,"},{"type":"DELETE","lineNumber":797,"oldContent":"            param1 = 0f,"},{"type":"DELETE","lineNumber":798,"oldContent":"            param3 = 0f,"},{"type":"DELETE","lineNumber":799,"oldContent":"            param2 = 0f,"},{"type":"INSERT","lineNumber":831,"content":"    }"},{"type":"INSERT","lineNumber":832,"content":""},{"type":"INSERT","lineNumber":833,"content":"    // Haversine formula for distance in meters"},{"type":"INSERT","lineNumber":834,"content":"    private fun haversine(lat1: Double, lon1: Double, lat2: Double, lon2: Double): Float {"},{"type":"INSERT","lineNumber":835,"content":"        val R = 6371000.0 // Earth radius in meters"},{"type":"INSERT","lineNumber":836,"content":"        val dLat = Math.toRadians(lat2 - lat1)"},{"type":"INSERT","lineNumber":837,"content":"        val dLon = Math.toRadians(lon2 - lon1)"},{"type":"INSERT","lineNumber":838,"content":"        val a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +"},{"type":"INSERT","lineNumber":839,"content":"                Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2)) *"},{"type":"INSERT","lineNumber":840,"content":"                Math.sin(dLon / 2) * Math.sin(dLon / 2)"},{"type":"INSERT","lineNumber":841,"content":"        val c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))"},{"type":"INSERT","lineNumber":842,"content":"        return (R * c).toFloat()"},{"type":"INSERT","lineNumber":843,"content":"    }"},{"type":"INSERT","lineNumber":844,"content":"}"}]},{"timestamp":1758189905650,"changes":[{"type":"DELETE","lineNumber":25,"oldContent":"    private val _state = MutableStateFlow(TelemetryState())"},{"type":"DELETE","lineNumber":26,"oldContent":"    val state: StateFlow<TelemetryState> = _state.asStateFlow()"},{"type":"INSERT","lineNumber":25,"content":"    // Add other modes as needed"},{"type":"INSERT","lineNumber":26,"content":"}"},{"type":"MODIFY","lineNumber":31,"content":") {","oldContent":"    // Diagnostic info"},{"type":"DELETE","lineNumber":51,"oldContent":"    fun start() {"},{"type":"DELETE","lineNumber":53,"oldContent":"        val scope = AppScope"},{"type":"DELETE","lineNumber":55,"oldContent":""},{"type":"DELETE","lineNumber":57,"oldContent":"        suspend fun reconnect(scope: kotlinx.coroutines.CoroutineScope) {"},{"type":"INSERT","lineNumber":55,"content":"    fun start() {"},{"type":"INSERT","lineNumber":56,"content":"        val scope = AppScope"},{"type":"INSERT","lineNumber":57,"content":""},{"type":"INSERT","lineNumber":58,"content":"        suspend fun reconnect(scope: kotlinx.coroutines.CoroutineScope) {"},{"type":"INSERT","lineNumber":71,"content":""},{"type":"DELETE","lineNumber":75,"oldContent":""},{"type":"INSERT","lineNumber":164,"content":"                            setMessageRate(24u, 1f)  // GPS_RAW_INT"},{"type":"DELETE","lineNumber":168,"oldContent":"                            setMessageRate(24u, 1f)  // GPS_RAW_INT"},{"type":"DELETE","lineNumber":222,"oldContent":"                    }"},{"type":"DELETE","lineNumber":224,"oldContent":"                }"},{"type":"DELETE","lineNumber":226,"oldContent":"        }"},{"type":"DELETE","lineNumber":228,"oldContent":""},{"type":"DELETE","lineNumber":230,"oldContent":"        // BATTERY_STATUS"},{"type":"DELETE","lineNumber":232,"oldContent":"        scope.launch {"},{"type":"DELETE","lineNumber":234,"oldContent":"            mavFrameStream"},{"type":"DELETE","lineNumber":236,"oldContent":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":238,"oldContent":"                .map { it.message }"},{"type":"DELETE","lineNumber":240,"oldContent":"                .filterIsInstance<BatteryStatus>()"},{"type":"DELETE","lineNumber":242,"oldContent":"                .collect { b ->"},{"type":"DELETE","lineNumber":244,"oldContent":"                    val currentA = if (b.currentBattery.toInt() == -1) null else b.currentBattery / 100f"},{"type":"DELETE","lineNumber":246,"oldContent":"                    _state.update { it.copy(currentA = currentA) }"},{"type":"DELETE","lineNumber":248,"oldContent":"                }"},{"type":"DELETE","lineNumber":251,"oldContent":"        // HEARTBEAT for mode, armed, armable"},{"type":"DELETE","lineNumber":253,"oldContent":"        var missionTimerJob: kotlinx.coroutines.Job? = null"},{"type":"DELETE","lineNumber":255,"oldContent":"        var lastArmed: Boolean? = null"},{"type":"DELETE","lineNumber":258,"oldContent":"        scope.launch {"},{"type":"DELETE","lineNumber":261,"oldContent":"                .filter { frame -> state.value.fcuDetected && frame.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":263,"oldContent":"                .map { frame -> frame.message }"},{"type":"DELETE","lineNumber":265,"oldContent":"                .filterIsInstance<Heartbeat>()"},{"type":"DELETE","lineNumber":267,"oldContent":"                .collect { hb ->"},{"type":"DELETE","lineNumber":269,"oldContent":"                    val armed = (hb.baseMode.value and MavModeFlag.SAFETY_ARMED.value) != 0u"},{"type":"DELETE","lineNumber":271,"oldContent":"                    val mode = when (hb.customMode) {"},{"type":"DELETE","lineNumber":273,"oldContent":"                        0u -> \"Stabilize\""},{"type":"DELETE","lineNumber":275,"oldContent":"                        1u -> \"Acro\""},{"type":"DELETE","lineNumber":277,"oldContent":"                        2u -> \"Alt Hold\""},{"type":"DELETE","lineNumber":279,"oldContent":"                        3u -> \"Auto\""},{"type":"INSERT","lineNumber":253,"content":"                    }"},{"type":"INSERT","lineNumber":254,"content":"                    lastMissionRunning = missionRunning"},{"type":"INSERT","lineNumber":255,"content":"                }"},{"type":"INSERT","lineNumber":256,"content":"        }"},{"type":"INSERT","lineNumber":257,"content":""},{"type":"INSERT","lineNumber":258,"content":"        // BATTERY_STATUS"},{"type":"INSERT","lineNumber":259,"content":"        scope.launch {"},{"type":"INSERT","lineNumber":260,"content":"            mavFrameStream"},{"type":"INSERT","lineNumber":261,"content":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":262,"content":"                .map { it.message }"},{"type":"INSERT","lineNumber":263,"content":"                .filterIsInstance<BatteryStatus>()"},{"type":"INSERT","lineNumber":264,"content":"                .collect { b ->"},{"type":"INSERT","lineNumber":265,"content":"                    val currentA = if (b.currentBattery.toInt() == -1) null else b.currentBattery / 100f"},{"type":"INSERT","lineNumber":266,"content":"                    _state.update { it.copy(currentA = currentA) }"},{"type":"INSERT","lineNumber":267,"content":"                }"},{"type":"INSERT","lineNumber":268,"content":"        }"},{"type":"INSERT","lineNumber":269,"content":"        // HEARTBEAT for mode, armed, armable"},{"type":"INSERT","lineNumber":270,"content":"        var missionTimerJob: kotlinx.coroutines.Job? = null"},{"type":"INSERT","lineNumber":271,"content":"        var lastMode: String? = null"},{"type":"INSERT","lineNumber":272,"content":"        var lastArmed: Boolean? = null"},{"type":"INSERT","lineNumber":273,"content":"        scope.launch {"},{"type":"INSERT","lineNumber":274,"content":"            mavFrameStream"},{"type":"INSERT","lineNumber":275,"content":"                .filter { frame -> state.value.fcuDetected && frame.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":276,"content":"                .map { frame -> frame.message }"},{"type":"INSERT","lineNumber":277,"content":"                .filterIsInstance<Heartbeat>()"},{"type":"INSERT","lineNumber":278,"content":"                .collect { hb ->"},{"type":"INSERT","lineNumber":279,"content":"                    val armed = (hb.baseMode.value and MavModeFlag.SAFETY_ARMED.value) != 0u"},{"type":"INSERT","lineNumber":280,"content":"                    val mode = when (hb.customMode) {"},{"type":"INSERT","lineNumber":281,"content":"                        0u -> \"Stabilize\""},{"type":"INSERT","lineNumber":282,"content":"                        1u -> \"Acro\""},{"type":"INSERT","lineNumber":283,"content":"                        2u -> \"Alt Hold\""},{"type":"INSERT","lineNumber":284,"content":"                        3u -> \"Auto\""},{"type":"DELETE","lineNumber":283,"oldContent":"                    lastMissionRunning = missionRunning"},{"type":"DELETE","lineNumber":298,"oldContent":"        }"},{"type":"DELETE","lineNumber":302,"oldContent":"        var lastMode: String? = null"},{"type":"DELETE","lineNumber":305,"oldContent":"            mavFrameStream"},{"type":"MODIFY","lineNumber":306,"content":"                        else -> \"Unknown\"","oldContent":"            mavFrameStream"},{"type":"INSERT","lineNumber":311,"content":"                    if (lastMode != mode || lastArmed != armed) {"},{"type":"INSERT","lineNumber":316,"content":"                                val startTs = System.currentTimeMillis() / 1000L"},{"type":"INSERT","lineNumber":317,"content":"                                _state.update { it.copy(missionElapsedSec = 0L, missionCompleted = false, missionStartTimestamp = startTs, missionEndTimestamp = null) }"},{"type":"INSERT","lineNumber":320,"content":"                                    elapsed += 1"},{"type":"INSERT","lineNumber":321,"content":"                                    _state.update { it.copy(missionElapsedSec = elapsed) }"},{"type":"INSERT","lineNumber":322,"content":"                                }"},{"type":"INSERT","lineNumber":323,"content":"                                // Mission ended"},{"type":"INSERT","lineNumber":324,"content":"                                val endTs = System.currentTimeMillis() / 1000L"},{"type":"INSERT","lineNumber":325,"content":"                                _state.update { it.copy(missionElapsedSec = null, missionCompleted = true, missionEndTimestamp = endTs) }"},{"type":"INSERT","lineNumber":339,"content":"                            missionTimerJob = null"},{"type":"INSERT","lineNumber":340,"content":"                            val endTs = System.currentTimeMillis() / 1000L"},{"type":"INSERT","lineNumber":341,"content":"                            _state.update { it.copy(missionElapsedSec = null, missionCompleted = true, missionEndTimestamp = endTs) }"},{"type":"DELETE","lineNumber":335,"oldContent":"                    if (lastMode != mode || lastArmed != armed) {"},{"type":"DELETE","lineNumber":339,"oldContent":"                                _state.update { it.copy(missionElapsedSec = 0L, missionCompleted = false) }"},{"type":"INSERT","lineNumber":350,"content":"                        }"},{"type":"INSERT","lineNumber":351,"content":"                        lastMode = mode"},{"type":"DELETE","lineNumber":343,"oldContent":"                                    elapsed += 1"},{"type":"DELETE","lineNumber":345,"oldContent":"                                    _state.update { it.copy(missionElapsedSec = elapsed) }"},{"type":"DELETE","lineNumber":347,"oldContent":"                                }"},{"type":"DELETE","lineNumber":348,"oldContent":"                                // Mission ended"},{"type":"DELETE","lineNumber":349,"oldContent":"                                _state.update { it.copy(missionElapsedSec = null, missionCompleted = true) }"},{"type":"DELETE","lineNumber":358,"oldContent":"                            missionTimerJob = null"},{"type":"DELETE","lineNumber":360,"oldContent":"                            _state.update { it.copy(missionElapsedSec = null, missionCompleted = true) }"},{"type":"DELETE","lineNumber":365,"oldContent":"                        }"},{"type":"DELETE","lineNumber":367,"oldContent":"                        lastMode = mode"},{"type":"DELETE","lineNumber":370,"oldContent":"                                    z = 100f, // Default altitude"},{"type":"INSERT","lineNumber":374,"content":"        // GPS_RAW_INT"},{"type":"INSERT","lineNumber":375,"content":"        scope.launch {"},{"type":"INSERT","lineNumber":376,"content":"            mavFrameStream"},{"type":"INSERT","lineNumber":377,"content":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":378,"content":"                .map { it.message }"},{"type":"INSERT","lineNumber":379,"content":"                .filterIsInstance<GpsRawInt>()"},{"type":"INSERT","lineNumber":380,"content":"                .collect { gps ->"},{"type":"INSERT","lineNumber":381,"content":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"INSERT","lineNumber":382,"content":"                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"INSERT","lineNumber":383,"content":"                    _state.update { it.copy(sats = sats, hdop = hdop) }"},{"type":"INSERT","lineNumber":384,"content":"                }"},{"type":"INSERT","lineNumber":385,"content":"        }"},{"type":"INSERT","lineNumber":386,"content":""},{"type":"INSERT","lineNumber":387,"content":"        // Mission progress logging: MISSION_ITEM_REACHED, MISSION_CURRENT, and mode"},{"type":"INSERT","lineNumber":388,"content":""},{"type":"INSERT","lineNumber":389,"content":""},{"type":"DELETE","lineNumber":388,"oldContent":""},{"type":"DELETE","lineNumber":390,"oldContent":"        // GPS_RAW_INT"},{"type":"DELETE","lineNumber":392,"oldContent":"        scope.launch {"},{"type":"DELETE","lineNumber":394,"oldContent":"            mavFrameStream"},{"type":"DELETE","lineNumber":396,"oldContent":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":398,"oldContent":"                .map { it.message }"},{"type":"DELETE","lineNumber":400,"oldContent":"                .filterIsInstance<GpsRawInt>()"},{"type":"DELETE","lineNumber":402,"oldContent":"                .collect { gps ->"},{"type":"DELETE","lineNumber":404,"oldContent":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"DELETE","lineNumber":406,"oldContent":"                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"DELETE","lineNumber":408,"oldContent":"                    _state.update { it.copy(sats = sats, hdop = hdop) }"},{"type":"DELETE","lineNumber":410,"oldContent":"                }"},{"type":"DELETE","lineNumber":412,"oldContent":"        }"},{"type":"DELETE","lineNumber":414,"oldContent":""},{"type":"DELETE","lineNumber":418,"oldContent":""},{"type":"INSERT","lineNumber":427,"content":"        val commandLong = CommandLong("},{"type":"INSERT","lineNumber":428,"content":"            targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":455,"oldContent":"        val commandLong = CommandLong("},{"type":"DELETE","lineNumber":457,"oldContent":"            targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":465,"content":"     */"},{"type":"INSERT","lineNumber":466,"content":"    suspend fun changeMode(customMode: UInt): Boolean {"},{"type":"INSERT","lineNumber":467,"content":"        sendCommand("},{"type":"INSERT","lineNumber":468,"content":"            MavCmd.DO_SET_MODE,"},{"type":"INSERT","lineNumber":472,"content":"        )"},{"type":"DELETE","lineNumber":490,"oldContent":"     */"},{"type":"DELETE","lineNumber":492,"oldContent":"    suspend fun changeMode(customMode: UInt): Boolean {"},{"type":"DELETE","lineNumber":494,"oldContent":"        sendCommand("},{"type":"DELETE","lineNumber":496,"oldContent":"            MavCmd.DO_SET_MODE,"},{"type":"DELETE","lineNumber":501,"oldContent":"        )"},{"type":"INSERT","lineNumber":512,"content":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, clearAll)"},{"type":"INSERT","lineNumber":520,"content":"                    .collect { ack ->"},{"type":"INSERT","lineNumber":521,"content":"                        if (ack.command.value == MISSION_CLEAR_ALL_CMD && ack.result.value == MavResult.ACCEPTED.value) {"},{"type":"INSERT","lineNumber":522,"content":"                            Log.i(\"MavlinkRepo\", \"[Mission Upload] MISSION_CLEAR_ALL acknowledged by FCU\")"},{"type":"DELETE","lineNumber":538,"oldContent":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, clearAll)"},{"type":"DELETE","lineNumber":547,"oldContent":"                    .collect { ack ->"},{"type":"DELETE","lineNumber":549,"oldContent":"                        if (ack.command.value == MISSION_CLEAR_ALL_CMD && ack.result.value == MavResult.ACCEPTED.value) {"},{"type":"DELETE","lineNumber":551,"oldContent":"                            Log.i(\"MavlinkRepo\", \"[Mission Upload] MISSION_CLEAR_ALL acknowledged by FCU\")"},{"type":"INSERT","lineNumber":625,"content":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"INSERT","lineNumber":629,"content":"                delay(100)"},{"type":"INSERT","lineNumber":630,"content":"            }"},{"type":"INSERT","lineNumber":631,"content":""},{"type":"INSERT","lineNumber":640,"content":"                        targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":651,"content":"                    }"},{"type":"DELETE","lineNumber":650,"oldContent":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"DELETE","lineNumber":655,"oldContent":"                delay(100)"},{"type":"DELETE","lineNumber":657,"oldContent":"            }"},{"type":"DELETE","lineNumber":659,"oldContent":""},{"type":"DELETE","lineNumber":668,"oldContent":"                        targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":683,"content":"            val perSeqMap = mutableMapOf<Int, CompletableDeferred<Unit>>()"},{"type":"DELETE","lineNumber":680,"oldContent":"                    }"},{"type":"INSERT","lineNumber":686,"content":"                connection.mavFrame.collect { frame ->"},{"type":"DELETE","lineNumber":711,"oldContent":"            val perSeqMap = mutableMapOf<Int, CompletableDeferred<Unit>>()"},{"type":"DELETE","lineNumber":715,"oldContent":"                connection.mavFrame.collect { frame ->"},{"type":"INSERT","lineNumber":737,"content":"                }"},{"type":"DELETE","lineNumber":756,"oldContent":"    }"},{"type":"INSERT","lineNumber":760,"content":""},{"type":"INSERT","lineNumber":767,"content":"     */"},{"type":"DELETE","lineNumber":765,"oldContent":"                }"},{"type":"INSERT","lineNumber":778,"content":"            arm()"},{"type":"INSERT","lineNumber":788,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"INSERT","lineNumber":797,"content":"        // Step 3: Set mode to AUTO"},{"type":"DELETE","lineNumber":795,"oldContent":"     */"},{"type":"DELETE","lineNumber":805,"oldContent":"            arm()"},{"type":"DELETE","lineNumber":812,"oldContent":"    }"},{"type":"DELETE","lineNumber":813,"oldContent":"            }"},{"type":"DELETE","lineNumber":814,"oldContent":"                    else -> {}"},{"type":"DELETE","lineNumber":815,"oldContent":"                    }"},{"type":"DELETE","lineNumber":816,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"INSERT","lineNumber":817,"content":"     * Sends MISSION_START as CommandLong (param1=0, param2=0, ...)"},{"type":"INSERT","lineNumber":818,"content":"     */"},{"type":"INSERT","lineNumber":819,"content":"    suspend fun sendMissionStartCommand() {"},{"type":"INSERT","lineNumber":820,"content":"        val cmd = CommandLong("},{"type":"INSERT","lineNumber":821,"content":"            targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":822,"content":"            targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":823,"content":"            command = MavCmd.MISSION_START.wrap(),"},{"type":"INSERT","lineNumber":824,"content":"            confirmation = 0u,"},{"type":"INSERT","lineNumber":825,"content":"            param1 = 0f,"},{"type":"INSERT","lineNumber":826,"content":"            param2 = 0f,"},{"type":"INSERT","lineNumber":827,"content":"            param3 = 0f,"},{"type":"INSERT","lineNumber":830,"content":"            param6 = 0f,"},{"type":"DELETE","lineNumber":821,"oldContent":"        // Step 3: Set mode to AUTO"},{"type":"DELETE","lineNumber":823,"oldContent":"}"},{"type":"DELETE","lineNumber":825,"oldContent":"        return (R * c).toFloat()"},{"type":"DELETE","lineNumber":826,"oldContent":"        val c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))"},{"type":"DELETE","lineNumber":827,"oldContent":"                Math.sin(dLon / 2) * Math.sin(dLon / 2)"},{"type":"DELETE","lineNumber":828,"oldContent":"                Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2)) *"},{"type":"DELETE","lineNumber":829,"oldContent":"        val a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +"},{"type":"DELETE","lineNumber":830,"oldContent":"        val dLon = Math.toRadians(lon2 - lon1)"},{"type":"DELETE","lineNumber":831,"oldContent":"        val dLat = Math.toRadians(lat2 - lat1)"},{"type":"DELETE","lineNumber":832,"oldContent":"        val R = 6371000.0 // Earth radius in meters"},{"type":"DELETE","lineNumber":833,"oldContent":"    private fun haversine(lat1: Double, lon1: Double, lat2: Double, lon2: Double): Float {"},{"type":"DELETE","lineNumber":834,"oldContent":"    // Haversine formula for distance in meters"},{"type":"INSERT","lineNumber":836,"content":"    // Haversine formula for distance in meters"},{"type":"INSERT","lineNumber":837,"content":"    private fun haversine(lat1: Double, lon1: Double, lat2: Double, lon2: Double): Float {"},{"type":"INSERT","lineNumber":838,"content":"        val R = 6371000.0 // Earth radius in meters"},{"type":"INSERT","lineNumber":839,"content":"        val dLat = Math.toRadians(lat2 - lat1)"},{"type":"INSERT","lineNumber":840,"content":"        val dLon = Math.toRadians(lon2 - lon1)"},{"type":"INSERT","lineNumber":841,"content":"        val a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +"},{"type":"INSERT","lineNumber":842,"content":"                Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2)) *"},{"type":"INSERT","lineNumber":843,"content":"                Math.sin(dLon / 2) * Math.sin(dLon / 2)"},{"type":"INSERT","lineNumber":844,"content":"        val c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))"},{"type":"INSERT","lineNumber":845,"content":"        return (R * c).toFloat()"},{"type":"DELETE","lineNumber":837,"oldContent":"            param6 = 0f,"},{"type":"DELETE","lineNumber":838,"oldContent":"            param3 = 0f,"},{"type":"DELETE","lineNumber":839,"oldContent":"            param2 = 0f,"},{"type":"DELETE","lineNumber":840,"oldContent":"            param1 = 0f,"},{"type":"DELETE","lineNumber":841,"oldContent":"            targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":842,"oldContent":"            confirmation = 0u,"},{"type":"DELETE","lineNumber":843,"oldContent":"            targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":844,"oldContent":"            command = MavCmd.MISSION_START.wrap(),"},{"type":"INSERT","lineNumber":847,"content":"}"}]},{"timestamp":1758190130735,"changes":[{"type":"INSERT","lineNumber":53,"content":"    private var lastMissionRunning = false"},{"type":"INSERT","lineNumber":54,"content":""},{"type":"DELETE","lineNumber":55,"oldContent":"    private var lastMissionRunning = false"},{"type":"DELETE","lineNumber":58,"oldContent":""},{"type":"INSERT","lineNumber":238,"content":"                                latitude = lat,"},{"type":"INSERT","lineNumber":239,"content":"                                longitude = lon,"},{"type":"INSERT","lineNumber":240,"content":"                                totalDistanceMeters = totalDistanceMeters"},{"type":"INSERT","lineNumber":241,"content":"                            )"},{"type":"INSERT","lineNumber":242,"content":"                        }"},{"type":"INSERT","lineNumber":243,"content":"                    } else {"},{"type":"INSERT","lineNumber":244,"content":"                        _state.update {"},{"type":"INSERT","lineNumber":245,"content":"                            it.copy("},{"type":"INSERT","lineNumber":246,"content":"                                altitudeMsl = altAMSLm,"},{"type":"INSERT","lineNumber":247,"content":"                                altitudeRelative = relAltM,"},{"type":"INSERT","lineNumber":248,"content":"                                latitude = lat,"},{"type":"INSERT","lineNumber":249,"content":"                                longitude = lon,"},{"type":"INSERT","lineNumber":250,"content":"                                totalDistanceMeters = if (positionHistory.isNotEmpty()) totalDistanceMeters else null"},{"type":"INSERT","lineNumber":251,"content":"                            )"},{"type":"INSERT","lineNumber":252,"content":"                        }"},{"type":"DELETE","lineNumber":240,"oldContent":"                                latitude = lat,"},{"type":"DELETE","lineNumber":243,"oldContent":"                                longitude = lon,"},{"type":"DELETE","lineNumber":245,"oldContent":"                                totalDistanceMeters = totalDistanceMeters"},{"type":"DELETE","lineNumber":248,"oldContent":"                            )"},{"type":"DELETE","lineNumber":250,"oldContent":"                        }"},{"type":"DELETE","lineNumber":253,"oldContent":"                    } else {"},{"type":"DELETE","lineNumber":256,"oldContent":"                        _state.update {"},{"type":"DELETE","lineNumber":259,"oldContent":"                            it.copy("},{"type":"DELETE","lineNumber":262,"oldContent":"                                altitudeMsl = altAMSLm,"},{"type":"DELETE","lineNumber":265,"oldContent":"                                altitudeRelative = relAltM,"},{"type":"DELETE","lineNumber":268,"oldContent":"                                latitude = lat,"},{"type":"DELETE","lineNumber":271,"oldContent":"                                longitude = lon,"},{"type":"DELETE","lineNumber":274,"oldContent":"                                totalDistanceMeters = if (positionHistory.isNotEmpty()) totalDistanceMeters else null"},{"type":"DELETE","lineNumber":277,"oldContent":"                            )"},{"type":"DELETE","lineNumber":280,"oldContent":"                        }"},{"type":"DELETE","lineNumber":282,"oldContent":"                        4u -> \"Guided\""},{"type":"MODIFY","lineNumber":285,"content":"                        4u -> \"Guided\"","oldContent":"                        5u -> \"Loiter\""},{"type":"INSERT","lineNumber":286,"content":"                        5u -> \"Loiter\""},{"type":"INSERT","lineNumber":316,"content":"                                _state.update { it.copy(missionElapsedSec = 0L, missionCompleted = false) }"},{"type":"DELETE","lineNumber":317,"oldContent":"                                val startTs = System.currentTimeMillis() / 1000L"},{"type":"MODIFY","lineNumber":319,"content":"                                    elapsed += 1","oldContent":"                                _state.update { it.copy(missionElapsedSec = 0L, missionCompleted = false, missionStartTimestamp = startTs, missionEndTimestamp = null) }"},{"type":"INSERT","lineNumber":320,"content":"                                    _state.update { it.copy(missionElapsedSec = elapsed) }"},{"type":"INSERT","lineNumber":321,"content":"                                }"},{"type":"INSERT","lineNumber":322,"content":"                                // Mission ended"},{"type":"INSERT","lineNumber":323,"content":"                                _state.update { it.copy(missionElapsedSec = null, missionCompleted = true) }"},{"type":"DELETE","lineNumber":323,"oldContent":"                                    elapsed += 1"},{"type":"DELETE","lineNumber":325,"oldContent":"                                    _state.update { it.copy(missionElapsedSec = elapsed) }"},{"type":"DELETE","lineNumber":327,"oldContent":"                                }"},{"type":"DELETE","lineNumber":329,"oldContent":"                                // Mission ended"},{"type":"DELETE","lineNumber":331,"oldContent":"                                val endTs = System.currentTimeMillis() / 1000L"},{"type":"DELETE","lineNumber":333,"oldContent":"                                _state.update { it.copy(missionElapsedSec = null, missionCompleted = true, missionEndTimestamp = endTs) }"},{"type":"INSERT","lineNumber":337,"content":"                            missionTimerJob = null"},{"type":"INSERT","lineNumber":338,"content":"                            _state.update { it.copy(missionElapsedSec = null, missionCompleted = true) }"},{"type":"DELETE","lineNumber":347,"oldContent":"                            missionTimerJob = null"},{"type":"DELETE","lineNumber":348,"oldContent":"                            val endTs = System.currentTimeMillis() / 1000L"},{"type":"INSERT","lineNumber":347,"content":"                        }"},{"type":"INSERT","lineNumber":348,"content":"                        lastMode = mode"},{"type":"DELETE","lineNumber":350,"oldContent":"                            _state.update { it.copy(missionElapsedSec = null, missionCompleted = true, missionEndTimestamp = endTs) }"},{"type":"DELETE","lineNumber":355,"oldContent":"                        }"},{"type":"DELETE","lineNumber":357,"oldContent":"                        lastMode = mode"},{"type":"DELETE","lineNumber":374,"oldContent":"        // Helper to request mission items from FCU and return as list"},{"type":"DELETE","lineNumber":375,"oldContent":"        suspend fun requestMissionItemsFromFcu(timeoutMs: Long = 5000): List<MissionItemInt> {"},{"type":"DELETE","lineNumber":377,"oldContent":"            val items = mutableListOf<MissionItemInt>()"},{"type":"DELETE","lineNumber":379,"oldContent":"            val expectedCountDeferred = CompletableDeferred<Int?>()"},{"type":"DELETE","lineNumber":381,"oldContent":"            val perSeqMap = mutableMapOf<Int, CompletableDeferred<Unit>>()"},{"type":"DELETE","lineNumber":383,"oldContent":"            val job = AppScope.launch {"},{"type":"DELETE","lineNumber":385,"oldContent":"                connection.mavFrame.collect { frame ->"},{"type":"DELETE","lineNumber":387,"oldContent":"                    when (val msg = frame.message) {"},{"type":"DELETE","lineNumber":389,"oldContent":"                        is MissionCount -> {"},{"type":"DELETE","lineNumber":391,"oldContent":"                            expectedCountDeferred.complete(msg.count.toInt())"},{"type":"DELETE","lineNumber":393,"oldContent":"                        }"},{"type":"DELETE","lineNumber":395,"oldContent":"                        is MissionItemInt -> {"},{"type":"DELETE","lineNumber":397,"oldContent":"                            items.add(msg)"},{"type":"DELETE","lineNumber":399,"oldContent":"                            perSeqMap[msg.seq.toInt()]?.let { d -> if (!d.isCompleted) d.complete(Unit) }"},{"type":"DELETE","lineNumber":401,"oldContent":"                        }"},{"type":"DELETE","lineNumber":403,"oldContent":"                        else -> {}"},{"type":"INSERT","lineNumber":387,"content":"        // Helper to request mission items from FCU and return as list"},{"type":"INSERT","lineNumber":388,"content":"        suspend fun requestMissionItemsFromFcu(timeoutMs: Long = 5000): List<MissionItemInt> {"},{"type":"INSERT","lineNumber":389,"content":"            val items = mutableListOf<MissionItemInt>()"},{"type":"INSERT","lineNumber":390,"content":"            val expectedCountDeferred = CompletableDeferred<Int?>()"},{"type":"INSERT","lineNumber":391,"content":"            val perSeqMap = mutableMapOf<Int, CompletableDeferred<Unit>>()"},{"type":"INSERT","lineNumber":392,"content":"            val job = AppScope.launch {"},{"type":"INSERT","lineNumber":393,"content":"                connection.mavFrame.collect { frame ->"},{"type":"INSERT","lineNumber":394,"content":"                    when (val msg = frame.message) {"},{"type":"INSERT","lineNumber":395,"content":"                        is MissionCount -> {"},{"type":"INSERT","lineNumber":396,"content":"                            expectedCountDeferred.complete(msg.count.toInt())"},{"type":"INSERT","lineNumber":397,"content":"                        }"},{"type":"INSERT","lineNumber":398,"content":"                        is MissionItemInt -> {"},{"type":"INSERT","lineNumber":399,"content":"                            items.add(msg)"},{"type":"INSERT","lineNumber":400,"content":"                            perSeqMap[msg.seq.toInt()]?.let { d -> if (!d.isCompleted) d.complete(Unit) }"},{"type":"INSERT","lineNumber":401,"content":"                        }"},{"type":"INSERT","lineNumber":402,"content":"                        else -> {}"},{"type":"INSERT","lineNumber":424,"content":"        val commandLong = CommandLong("},{"type":"INSERT","lineNumber":425,"content":"            targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":430,"oldContent":"        val commandLong = CommandLong("},{"type":"DELETE","lineNumber":432,"oldContent":"            targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":462,"oldContent":"            mode.value.toFloat(),"},{"type":"INSERT","lineNumber":459,"content":"    /**"},{"type":"INSERT","lineNumber":462,"content":"     */"},{"type":"INSERT","lineNumber":463,"content":"    suspend fun changeMode(customMode: UInt): Boolean {"},{"type":"INSERT","lineNumber":464,"content":"        sendCommand("},{"type":"INSERT","lineNumber":465,"content":"            MavCmd.DO_SET_MODE,"},{"type":"DELETE","lineNumber":468,"oldContent":"     */"},{"type":"INSERT","lineNumber":469,"content":"        )"},{"type":"DELETE","lineNumber":470,"oldContent":"    suspend fun changeMode(customMode: UInt): Boolean {"},{"type":"DELETE","lineNumber":472,"oldContent":"        sendCommand("},{"type":"DELETE","lineNumber":474,"oldContent":"            MavCmd.DO_SET_MODE,"},{"type":"DELETE","lineNumber":479,"oldContent":"        )"},{"type":"INSERT","lineNumber":509,"content":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, clearAll)"},{"type":"DELETE","lineNumber":515,"oldContent":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, clearAll)"},{"type":"INSERT","lineNumber":517,"content":"                    .collect { ack ->"},{"type":"INSERT","lineNumber":518,"content":"                        if (ack.command.value == MISSION_CLEAR_ALL_CMD && ack.result.value == MavResult.ACCEPTED.value) {"},{"type":"INSERT","lineNumber":519,"content":"                            Log.i(\"MavlinkRepo\", \"[Mission Upload] MISSION_CLEAR_ALL acknowledged by FCU\")"},{"type":"DELETE","lineNumber":524,"oldContent":"                    .collect { ack ->"},{"type":"DELETE","lineNumber":526,"oldContent":"                        if (ack.command.value == MISSION_CLEAR_ALL_CMD && ack.result.value == MavResult.ACCEPTED.value) {"},{"type":"DELETE","lineNumber":528,"oldContent":"                            Log.i(\"MavlinkRepo\", \"[Mission Upload] MISSION_CLEAR_ALL acknowledged by FCU\")"},{"type":"INSERT","lineNumber":622,"content":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"DELETE","lineNumber":628,"oldContent":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"INSERT","lineNumber":626,"content":"                delay(100)"},{"type":"INSERT","lineNumber":627,"content":"            }"},{"type":"INSERT","lineNumber":628,"content":""},{"type":"DELETE","lineNumber":633,"oldContent":"                delay(100)"},{"type":"DELETE","lineNumber":635,"oldContent":"            }"},{"type":"MODIFY","lineNumber":637,"content":"                        targetComponent = fcuComponentId,","oldContent":""},{"type":"DELETE","lineNumber":647,"oldContent":"                        targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":648,"content":"                    }"},{"type":"DELETE","lineNumber":658,"oldContent":"                    }"},{"type":"INSERT","lineNumber":680,"content":"            val perSeqMap = mutableMapOf<Int, CompletableDeferred<Unit>>()"},{"type":"INSERT","lineNumber":683,"content":"                connection.mavFrame.collect { frame ->"},{"type":"DELETE","lineNumber":686,"oldContent":"            val perSeqMap = mutableMapOf<Int, CompletableDeferred<Unit>>()"},{"type":"DELETE","lineNumber":690,"oldContent":"                connection.mavFrame.collect { frame ->"},{"type":"INSERT","lineNumber":707,"content":"            }"},{"type":"DELETE","lineNumber":711,"oldContent":""},{"type":"INSERT","lineNumber":734,"content":"                }"},{"type":"DELETE","lineNumber":740,"oldContent":"                }"},{"type":"DELETE","lineNumber":758,"oldContent":"}"},{"type":"INSERT","lineNumber":755,"content":"        }"},{"type":"INSERT","lineNumber":757,"content":""},{"type":"DELETE","lineNumber":763,"oldContent":""},{"type":"INSERT","lineNumber":764,"content":"     */"},{"type":"DELETE","lineNumber":770,"oldContent":"     */"},{"type":"INSERT","lineNumber":775,"content":"            arm()"},{"type":"DELETE","lineNumber":782,"oldContent":"            arm()"},{"type":"INSERT","lineNumber":785,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"DELETE","lineNumber":793,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"INSERT","lineNumber":794,"content":"        // Step 3: Set mode to AUTO"},{"type":"DELETE","lineNumber":802,"oldContent":"        // Step 3: Set mode to AUTO"},{"type":"DELETE","lineNumber":813,"oldContent":"                }"},{"type":"INSERT","lineNumber":810,"content":"        return true"},{"type":"DELETE","lineNumber":816,"oldContent":"                    }"},{"type":"INSERT","lineNumber":813,"content":"    /**"},{"type":"DELETE","lineNumber":818,"oldContent":"            param4 = 0f,"},{"type":"DELETE","lineNumber":820,"oldContent":"            param5 = 0f,"},{"type":"DELETE","lineNumber":822,"oldContent":"            param7 = 0f"},{"type":"DELETE","lineNumber":824,"oldContent":"        )"},{"type":"DELETE","lineNumber":827,"oldContent":"        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, cmd)"},{"type":"DELETE","lineNumber":830,"oldContent":"    }"},{"type":"INSERT","lineNumber":825,"content":"            param4 = 0f,"},{"type":"INSERT","lineNumber":826,"content":"            param5 = 0f,"},{"type":"INSERT","lineNumber":828,"content":"            param7 = 0f"},{"type":"INSERT","lineNumber":829,"content":"        )"},{"type":"INSERT","lineNumber":830,"content":"        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, cmd)"},{"type":"INSERT","lineNumber":831,"content":"    }"},{"type":"DELETE","lineNumber":837,"oldContent":"    }"},{"type":"INSERT","lineNumber":843,"content":"    }"}]},{"timestamp":1758190224848,"changes":[{"type":"MODIFY","lineNumber":23,"content":"    const val AUTO: UInt = 3u","oldContent":"    private val gcsComponentId: UByte = 1u"},{"type":"MODIFY","lineNumber":35,"content":"    val state: StateFlow<TelemetryState> = _state.asStateFlow()","oldContent":"    // Connection"},{"type":"DELETE","lineNumber":47,"oldContent":"                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":48,"oldContent":"                    _lastFailure.value = e"},{"type":"INSERT","lineNumber":47,"content":"    // MAVLink command value for MISSION_CLEAR_ALL"},{"type":"INSERT","lineNumber":48,"content":"    private val MISSION_CLEAR_ALL_CMD: UInt = 45u"},{"type":"MODIFY","lineNumber":55,"content":"    fun start() {","oldContent":"    fun start() {"},{"type":"DELETE","lineNumber":239,"oldContent":"                    }"},{"type":"DELETE","lineNumber":241,"oldContent":"                    lastMissionRunning = missionRunning"},{"type":"DELETE","lineNumber":244,"oldContent":"                }"},{"type":"DELETE","lineNumber":246,"oldContent":"        }"},{"type":"DELETE","lineNumber":249,"oldContent":""},{"type":"DELETE","lineNumber":252,"oldContent":"        // BATTERY_STATUS"},{"type":"DELETE","lineNumber":254,"oldContent":"        scope.launch {"},{"type":"DELETE","lineNumber":257,"oldContent":"            mavFrameStream"},{"type":"DELETE","lineNumber":260,"oldContent":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":253,"content":"                    }"},{"type":"INSERT","lineNumber":254,"content":"                    lastMissionRunning = missionRunning"},{"type":"INSERT","lineNumber":255,"content":"                }"},{"type":"INSERT","lineNumber":256,"content":"        }"},{"type":"INSERT","lineNumber":257,"content":""},{"type":"INSERT","lineNumber":258,"content":"        // BATTERY_STATUS"},{"type":"INSERT","lineNumber":259,"content":"        scope.launch {"},{"type":"INSERT","lineNumber":260,"content":"            mavFrameStream"},{"type":"INSERT","lineNumber":261,"content":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"MODIFY","lineNumber":283,"content":"                        2u -> \"Alt Hold\"","oldContent":"                        5u -> \"Loiter\""},{"type":"INSERT","lineNumber":284,"content":"                        3u -> \"Auto\""},{"type":"DELETE","lineNumber":286,"oldContent":"                        3u -> \"Auto\""},{"type":"DELETE","lineNumber":321,"oldContent":"                                // Clear mission from FCU"},{"type":"DELETE","lineNumber":323,"oldContent":"                                val clearAll = MissionClearAll(targetSystem = fcuSystemId, targetComponent = fcuComponentId)"},{"type":"DELETE","lineNumber":325,"oldContent":"                                try {"},{"type":"INSERT","lineNumber":324,"content":"                                // Clear mission from FCU"},{"type":"INSERT","lineNumber":325,"content":"                                val clearAll = MissionClearAll(targetSystem = fcuSystemId, targetComponent = fcuComponentId)"},{"type":"INSERT","lineNumber":326,"content":"                                try {"},{"type":"DELETE","lineNumber":335,"oldContent":"                            missionTimerJob = null"},{"type":"MODIFY","lineNumber":337,"content":"                            missionTimerJob = null","oldContent":"                            _state.update { it.copy(missionElapsedSec = null, missionCompleted = true) }"},{"type":"INSERT","lineNumber":338,"content":"                            _state.update { it.copy(missionElapsedSec = null, missionCompleted = true) }"},{"type":"INSERT","lineNumber":377,"content":"                .collect { gps ->"},{"type":"INSERT","lineNumber":378,"content":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"INSERT","lineNumber":379,"content":"                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"INSERT","lineNumber":380,"content":"                    _state.update { it.copy(sats = sats, hdop = hdop) }"},{"type":"INSERT","lineNumber":381,"content":"                }"},{"type":"INSERT","lineNumber":382,"content":"        }"},{"type":"INSERT","lineNumber":383,"content":""},{"type":"INSERT","lineNumber":384,"content":"        // Mission progress logging: MISSION_ITEM_REACHED, MISSION_CURRENT, and mode"},{"type":"INSERT","lineNumber":385,"content":""},{"type":"INSERT","lineNumber":386,"content":""},{"type":"DELETE","lineNumber":379,"oldContent":"                .collect { gps ->"},{"type":"DELETE","lineNumber":382,"oldContent":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"DELETE","lineNumber":385,"oldContent":"                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"DELETE","lineNumber":388,"oldContent":"                    _state.update { it.copy(sats = sats, hdop = hdop) }"},{"type":"DELETE","lineNumber":391,"oldContent":"                }"},{"type":"DELETE","lineNumber":394,"oldContent":"        }"},{"type":"DELETE","lineNumber":397,"oldContent":""},{"type":"DELETE","lineNumber":400,"oldContent":"        // Mission progress logging: MISSION_ITEM_REACHED, MISSION_CURRENT, and mode"},{"type":"DELETE","lineNumber":401,"oldContent":""},{"type":"DELETE","lineNumber":402,"oldContent":""},{"type":"DELETE","lineNumber":421,"oldContent":"        val commandLong = CommandLong("},{"type":"DELETE","lineNumber":423,"oldContent":"            targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":424,"content":"        val commandLong = CommandLong("},{"type":"INSERT","lineNumber":425,"content":"            targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":456,"oldContent":"    /**"},{"type":"INSERT","lineNumber":459,"content":"    /**"},{"type":"INSERT","lineNumber":460,"content":"     * Change vehicle mode (ArduPilot: param1=1, param2=customMode)"},{"type":"INSERT","lineNumber":461,"content":"     * Waits for Heartbeat confirmation."},{"type":"DELETE","lineNumber":462,"oldContent":"     * Change vehicle mode (ArduPilot: param1=1, param2=customMode)"},{"type":"DELETE","lineNumber":464,"oldContent":"     * Waits for Heartbeat confirmation."},{"type":"DELETE","lineNumber":506,"oldContent":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, clearAll)"},{"type":"INSERT","lineNumber":509,"content":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, clearAll)"},{"type":"DELETE","lineNumber":514,"oldContent":"                    .collect { ack ->"},{"type":"DELETE","lineNumber":516,"oldContent":"                        if (ack.command.value == MISSION_CLEAR_ALL_CMD && ack.result.value == MavResult.ACCEPTED.value) {"},{"type":"DELETE","lineNumber":518,"oldContent":"                            Log.i(\"MavlinkRepo\", \"[Mission Upload] MISSION_CLEAR_ALL acknowledged by FCU\")"},{"type":"INSERT","lineNumber":517,"content":"                    .collect { ack ->"},{"type":"INSERT","lineNumber":518,"content":"                        if (ack.command.value == MISSION_CLEAR_ALL_CMD && ack.result.value == MavResult.ACCEPTED.value) {"},{"type":"INSERT","lineNumber":519,"content":"                            Log.i(\"MavlinkRepo\", \"[Mission Upload] MISSION_CLEAR_ALL acknowledged by FCU\")"},{"type":"DELETE","lineNumber":619,"oldContent":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"INSERT","lineNumber":622,"content":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"DELETE","lineNumber":624,"oldContent":"                delay(100)"},{"type":"MODIFY","lineNumber":626,"content":"                delay(100)","oldContent":"            }"},{"type":"INSERT","lineNumber":627,"content":"            }"},{"type":"DELETE","lineNumber":635,"oldContent":"                        targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":637,"content":"                        targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":645,"oldContent":"                    }"},{"type":"INSERT","lineNumber":648,"content":"                    }"},{"type":"DELETE","lineNumber":677,"oldContent":"            val perSeqMap = mutableMapOf<Int, CompletableDeferred<Unit>>()"},{"type":"DELETE","lineNumber":681,"oldContent":"                connection.mavFrame.collect { frame ->"},{"type":"INSERT","lineNumber":680,"content":"            val perSeqMap = mutableMapOf<Int, CompletableDeferred<Unit>>()"},{"type":"INSERT","lineNumber":683,"content":"                connection.mavFrame.collect { frame ->"},{"type":"DELETE","lineNumber":704,"oldContent":"            }"},{"type":"INSERT","lineNumber":707,"content":"            }"},{"type":"DELETE","lineNumber":731,"oldContent":"                }"},{"type":"INSERT","lineNumber":734,"content":"                }"},{"type":"DELETE","lineNumber":752,"oldContent":"        }"},{"type":"MODIFY","lineNumber":755,"content":"        }","oldContent":""},{"type":"INSERT","lineNumber":757,"content":""},{"type":"DELETE","lineNumber":761,"oldContent":"     */"},{"type":"INSERT","lineNumber":764,"content":"     */"},{"type":"DELETE","lineNumber":772,"oldContent":"            arm()"},{"type":"INSERT","lineNumber":775,"content":"            arm()"},{"type":"DELETE","lineNumber":782,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"INSERT","lineNumber":785,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"DELETE","lineNumber":791,"oldContent":"        // Step 3: Set mode to AUTO"},{"type":"INSERT","lineNumber":794,"content":"        // Step 3: Set mode to AUTO"},{"type":"DELETE","lineNumber":807,"oldContent":"        return true"},{"type":"DELETE","lineNumber":811,"oldContent":"    /**"},{"type":"INSERT","lineNumber":810,"content":"        return true"},{"type":"INSERT","lineNumber":813,"content":"    /**"},{"type":"DELETE","lineNumber":818,"oldContent":"            param4 = 0f,"},{"type":"DELETE","lineNumber":820,"oldContent":"            param5 = 0f,"},{"type":"DELETE","lineNumber":822,"oldContent":"            param7 = 0f"},{"type":"DELETE","lineNumber":824,"oldContent":"        )"},{"type":"DELETE","lineNumber":826,"oldContent":"        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, cmd)"},{"type":"DELETE","lineNumber":827,"oldContent":"    }"},{"type":"INSERT","lineNumber":825,"content":"            param4 = 0f,"},{"type":"INSERT","lineNumber":826,"content":"            param5 = 0f,"},{"type":"INSERT","lineNumber":828,"content":"            param7 = 0f"},{"type":"INSERT","lineNumber":829,"content":"        )"},{"type":"INSERT","lineNumber":830,"content":"        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, cmd)"},{"type":"INSERT","lineNumber":831,"content":"    }"},{"type":"DELETE","lineNumber":839,"oldContent":"    }"},{"type":"INSERT","lineNumber":843,"content":"    }"}]},{"timestamp":1758259480380,"changes":[{"type":"MODIFY","lineNumber":24,"content":"    const val LAND: UInt = 9u // Add LAND mode for explicit landing","oldContent":"    private val _state = MutableStateFlow(TelemetryState())"},{"type":"MODIFY","lineNumber":49,"content":"","oldContent":"                }"},{"type":"INSERT","lineNumber":54,"content":""},{"type":"DELETE","lineNumber":55,"oldContent":"    fun start() {"},{"type":"MODIFY","lineNumber":74,"content":"            reconnect(this) // Initial connection attempt","oldContent":"                        }"},{"type":"DELETE","lineNumber":247,"oldContent":"                    }"},{"type":"INSERT","lineNumber":248,"content":"                                latitude = lat,"},{"type":"INSERT","lineNumber":249,"content":"                                longitude = lon,"},{"type":"INSERT","lineNumber":250,"content":"                                totalDistanceMeters = if (positionHistory.isNotEmpty()) totalDistanceMeters else null"},{"type":"INSERT","lineNumber":251,"content":"                            )"},{"type":"INSERT","lineNumber":252,"content":"                        }"},{"type":"INSERT","lineNumber":253,"content":"                    }"},{"type":"DELETE","lineNumber":251,"oldContent":"                                latitude = lat,"},{"type":"DELETE","lineNumber":253,"oldContent":"                                longitude = lon,"},{"type":"DELETE","lineNumber":256,"oldContent":"                                totalDistanceMeters = if (positionHistory.isNotEmpty()) totalDistanceMeters else null"},{"type":"DELETE","lineNumber":258,"oldContent":"                            )"},{"type":"DELETE","lineNumber":261,"oldContent":"                        }"},{"type":"DELETE","lineNumber":322,"oldContent":"                                // Clear mission from FCU"},{"type":"INSERT","lineNumber":323,"content":"                                _state.update { it.copy(missionElapsedSec = null, missionCompleted = true) }"},{"type":"INSERT","lineNumber":324,"content":"                                // Clear mission from FCU"},{"type":"DELETE","lineNumber":326,"oldContent":"                                _state.update { it.copy(missionElapsedSec = null, missionCompleted = true) }"},{"type":"INSERT","lineNumber":336,"content":"                            missionTimerJob?.cancel()"},{"type":"DELETE","lineNumber":338,"oldContent":"                            missionTimerJob?.cancel()"},{"type":"DELETE","lineNumber":378,"oldContent":"        // Helper to request mission items from FCU and return as list"},{"type":"DELETE","lineNumber":380,"oldContent":"        suspend fun requestMissionItemsFromFcu(timeoutMs: Long = 5000): List<MissionItemInt> {"},{"type":"DELETE","lineNumber":383,"oldContent":"            val items = mutableListOf<MissionItemInt>()"},{"type":"DELETE","lineNumber":385,"oldContent":"            val expectedCountDeferred = CompletableDeferred<Int?>()"},{"type":"DELETE","lineNumber":388,"oldContent":"            val perSeqMap = mutableMapOf<Int, CompletableDeferred<Unit>>()"},{"type":"DELETE","lineNumber":390,"oldContent":"            val job = AppScope.launch {"},{"type":"INSERT","lineNumber":387,"content":"        // Helper to request mission items from FCU and return as list"},{"type":"INSERT","lineNumber":388,"content":"        suspend fun requestMissionItemsFromFcu(timeoutMs: Long = 5000): List<MissionItemInt> {"},{"type":"INSERT","lineNumber":389,"content":"            val items = mutableListOf<MissionItemInt>()"},{"type":"INSERT","lineNumber":390,"content":"            val expectedCountDeferred = CompletableDeferred<Int?>()"},{"type":"INSERT","lineNumber":391,"content":"            val perSeqMap = mutableMapOf<Int, CompletableDeferred<Unit>>()"},{"type":"INSERT","lineNumber":392,"content":"            val job = AppScope.launch {"},{"type":"DELETE","lineNumber":422,"oldContent":"        val commandLong = CommandLong("},{"type":"MODIFY","lineNumber":424,"content":"        val commandLong = CommandLong(","oldContent":"            targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":425,"content":"            targetSystem = fcuSystemId,"},{"type":"MODIFY","lineNumber":459,"content":"    /**","oldContent":"    /**"},{"type":"INSERT","lineNumber":461,"content":"     * Waits for Heartbeat confirmation and checks COMMAND_ACK result."},{"type":"DELETE","lineNumber":462,"oldContent":"     * Waits for Heartbeat confirmation."},{"type":"DELETE","lineNumber":464,"oldContent":"        sendCommand("},{"type":"DELETE","lineNumber":465,"oldContent":"            MavCmd.DO_SET_MODE,"},{"type":"DELETE","lineNumber":466,"oldContent":"            1f,                   // param1: MAV_MODE_FLAG_CUSTOM_MODE_ENABLED (always 1 for ArduPilot)"},{"type":"DELETE","lineNumber":467,"oldContent":"            customMode.toFloat(), // param2: custom mode (e.g., 3u for AUTO)"},{"type":"DELETE","lineNumber":468,"oldContent":"            0f, 0f, 0f, 0f, 0f"},{"type":"DELETE","lineNumber":469,"oldContent":"        )"},{"type":"DELETE","lineNumber":470,"oldContent":"        // Wait for Heartbeat to confirm mode change"},{"type":"DELETE","lineNumber":471,"oldContent":"        val timeoutMs = 5000L"},{"type":"DELETE","lineNumber":472,"oldContent":"        val start = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":479,"oldContent":"        while (System.currentTimeMillis() - start < timeoutMs) {"},{"type":"DELETE","lineNumber":480,"oldContent":"            if (state.value.mode?.contains(expectedMode, ignoreCase = true) == true) {"},{"type":"DELETE","lineNumber":481,"oldContent":"                Log.i(\"MavlinkRepo\", \"Mode changed to ${state.value.mode}\")"},{"type":"DELETE","lineNumber":482,"oldContent":"                return true"},{"type":"INSERT","lineNumber":470,"content":"        var lastAckResult: Int? = null"},{"type":"INSERT","lineNumber":471,"content":"        var lastAckText: String? = null"},{"type":"INSERT","lineNumber":472,"content":"        for (attempt in 1..2) { // Try twice if failed"},{"type":"INSERT","lineNumber":473,"content":"            sendCommand("},{"type":"INSERT","lineNumber":474,"content":"                MavCmd.DO_SET_MODE,"},{"type":"INSERT","lineNumber":475,"content":"                1f,                   // param1: MAV_MODE_FLAG_CUSTOM_MODE_ENABLED (always 1 for ArduPilot)"},{"type":"INSERT","lineNumber":476,"content":"                customMode.toFloat(), // param2: custom mode (e.g., 3u for AUTO)"},{"type":"INSERT","lineNumber":477,"content":"                0f, 0f, 0f, 0f, 0f"},{"type":"INSERT","lineNumber":478,"content":"            )"},{"type":"INSERT","lineNumber":479,"content":"            // Wait for COMMAND_ACK"},{"type":"INSERT","lineNumber":480,"content":"            val ackDeferred = CompletableDeferred<Boolean>()"},{"type":"INSERT","lineNumber":481,"content":"            val ackJob = AppScope.launch {"},{"type":"INSERT","lineNumber":482,"content":"                connection.mavFrame"},{"type":"INSERT","lineNumber":483,"content":"                    .filter { it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":484,"content":"                    .map { it.message }"},{"type":"INSERT","lineNumber":485,"content":"                    .filterIsInstance<CommandAck>()"},{"type":"INSERT","lineNumber":486,"content":"                    .collect { ack ->"},{"type":"INSERT","lineNumber":487,"content":"                        if (ack.command.value == MavCmd.DO_SET_MODE.value) {"},{"type":"INSERT","lineNumber":488,"content":"                            lastAckResult = ack.result.value"},{"type":"INSERT","lineNumber":489,"content":"                            lastAckText = ack.result.entry.toString()"},{"type":"INSERT","lineNumber":490,"content":"                            if (ack.result.value == MavResult.ACCEPTED.value) {"},{"type":"INSERT","lineNumber":491,"content":"                                ackDeferred.complete(true)"},{"type":"INSERT","lineNumber":492,"content":"                            } else {"},{"type":"INSERT","lineNumber":493,"content":"                                ackDeferred.complete(false)"},{"type":"INSERT","lineNumber":494,"content":"                            }"},{"type":"INSERT","lineNumber":495,"content":"                        }"},{"type":"INSERT","lineNumber":496,"content":"                    }"},{"type":"DELETE","lineNumber":484,"oldContent":"            delay(200)"},{"type":"INSERT","lineNumber":498,"content":"            val ackSuccess = withTimeoutOrNull(3000L) { ackDeferred.await() } ?: false"},{"type":"INSERT","lineNumber":499,"content":"            ackJob.cancel()"},{"type":"INSERT","lineNumber":500,"content":"            if (ackSuccess) {"},{"type":"INSERT","lineNumber":501,"content":"                Log.i(\"MavlinkRepo\", \"Mode change to $expectedMode accepted by FCU\")"},{"type":"INSERT","lineNumber":502,"content":"                // Wait for Heartbeat to confirm mode change"},{"type":"INSERT","lineNumber":503,"content":"                val timeoutMs = 5000L"},{"type":"INSERT","lineNumber":504,"content":"                val start = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":505,"content":"                while (System.currentTimeMillis() - start < timeoutMs) {"},{"type":"INSERT","lineNumber":506,"content":"                    if (state.value.mode?.contains(expectedMode, ignoreCase = true) == true) {"},{"type":"INSERT","lineNumber":507,"content":"                        Log.i(\"MavlinkRepo\", \"Mode changed to ${state.value.mode}\")"},{"type":"INSERT","lineNumber":508,"content":"                        return true"},{"type":"INSERT","lineNumber":509,"content":"                    }"},{"type":"INSERT","lineNumber":510,"content":"                    delay(200)"},{"type":"INSERT","lineNumber":511,"content":"                }"},{"type":"INSERT","lineNumber":512,"content":"                Log.e(\"MavlinkRepo\", \"Mode change to $expectedMode not confirmed in Heartbeat\")"},{"type":"INSERT","lineNumber":513,"content":"                return false"},{"type":"INSERT","lineNumber":514,"content":"            } else {"},{"type":"INSERT","lineNumber":515,"content":"                Log.e(\"MavlinkRepo\", \"Mode change to $expectedMode rejected by FCU: result=$lastAckText ($lastAckResult)\")"},{"type":"INSERT","lineNumber":516,"content":"                delay(1000) // Wait before retry"},{"type":"INSERT","lineNumber":517,"content":"            }"},{"type":"DELETE","lineNumber":486,"oldContent":"        Log.e(\"MavlinkRepo\", \"Mode change to ${customMode} not confirmed in Heartbeat\")"},{"type":"INSERT","lineNumber":519,"content":"        Log.e(\"MavlinkRepo\", \"Mode change to $expectedMode failed after retries. Last result: $lastAckText ($lastAckResult)\")"},{"type":"DELETE","lineNumber":508,"oldContent":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, clearAll)"},{"type":"INSERT","lineNumber":542,"content":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, clearAll)"},{"type":"DELETE","lineNumber":515,"oldContent":"                    .collect { ack ->"},{"type":"INSERT","lineNumber":549,"content":"                    .filterIsInstance<CommandAck>()"},{"type":"INSERT","lineNumber":550,"content":"                    .collect { ack ->"},{"type":"DELETE","lineNumber":519,"oldContent":"                    .filterIsInstance<CommandAck>()"},{"type":"DELETE","lineNumber":621,"oldContent":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"INSERT","lineNumber":655,"content":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"INSERT","lineNumber":658,"content":"            while (!firstRequestReceived && !ackDeferred.isCompleted && System.currentTimeMillis() - startWait < firstRequestTimeout) {"},{"type":"DELETE","lineNumber":627,"oldContent":"            while (!firstRequestReceived && !ackDeferred.isCompleted && System.currentTimeMillis() - startWait < firstRequestTimeout) {"},{"type":"DELETE","lineNumber":636,"oldContent":"                        targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":670,"content":"                        targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":647,"oldContent":"                    }"},{"type":"INSERT","lineNumber":681,"content":"                    }"},{"type":"DELETE","lineNumber":679,"oldContent":"            val perSeqMap = mutableMapOf<Int, CompletableDeferred<Unit>>()"},{"type":"INSERT","lineNumber":713,"content":"            val perSeqMap = mutableMapOf<Int, CompletableDeferred<Unit>>()"},{"type":"DELETE","lineNumber":682,"oldContent":"                connection.mavFrame.collect { frame ->"},{"type":"INSERT","lineNumber":716,"content":"                connection.mavFrame.collect { frame ->"},{"type":"DELETE","lineNumber":706,"oldContent":"            }"},{"type":"DELETE","lineNumber":708,"oldContent":"            param7 = 0f"},{"type":"INSERT","lineNumber":740,"content":"            }"},{"type":"INSERT","lineNumber":741,"content":""},{"type":"DELETE","lineNumber":733,"oldContent":"                }"},{"type":"INSERT","lineNumber":767,"content":"                }"},{"type":"DELETE","lineNumber":744,"oldContent":"            param7 = 0f"},{"type":"INSERT","lineNumber":777,"content":""},{"type":"DELETE","lineNumber":754,"oldContent":"        }"},{"type":"DELETE","lineNumber":756,"oldContent":""},{"type":"INSERT","lineNumber":788,"content":"        }"},{"type":"INSERT","lineNumber":790,"content":""},{"type":"DELETE","lineNumber":763,"oldContent":"     */"},{"type":"INSERT","lineNumber":797,"content":"     */"},{"type":"DELETE","lineNumber":773,"oldContent":"    }"},{"type":"DELETE","lineNumber":774,"oldContent":"            arm()"},{"type":"INSERT","lineNumber":806,"content":"        try {"},{"type":"INSERT","lineNumber":808,"content":"            arm()"},{"type":"DELETE","lineNumber":784,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"INSERT","lineNumber":818,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"DELETE","lineNumber":788,"oldContent":"                        // Cache last mission command for LAND detection"},{"type":"DELETE","lineNumber":789,"oldContent":"                    }"},{"type":"INSERT","lineNumber":821,"content":"            delay(500)"},{"type":"INSERT","lineNumber":822,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":793,"oldContent":"        // Step 3: Set mode to AUTO"},{"type":"INSERT","lineNumber":827,"content":"        // Step 3: Set mode to AUTO"},{"type":"DELETE","lineNumber":809,"oldContent":"        return true"},{"type":"INSERT","lineNumber":843,"content":"        return true"},{"type":"DELETE","lineNumber":812,"oldContent":"    /**"},{"type":"INSERT","lineNumber":846,"content":"    /**"},{"type":"DELETE","lineNumber":821,"oldContent":"            param4 = 0f,"},{"type":"INSERT","lineNumber":855,"content":"            param1 = 0f,"},{"type":"INSERT","lineNumber":856,"content":"            param2 = 0f,"},{"type":"INSERT","lineNumber":857,"content":"            param3 = 0f,"},{"type":"INSERT","lineNumber":858,"content":"            param4 = 0f,"},{"type":"INSERT","lineNumber":860,"content":"            param6 = 0f,"},{"type":"DELETE","lineNumber":825,"oldContent":"            param1 = 0f,"},{"type":"DELETE","lineNumber":827,"oldContent":"            param2 = 0f,"},{"type":"DELETE","lineNumber":829,"oldContent":"            param3 = 0f,"},{"type":"DELETE","lineNumber":831,"oldContent":"            param6 = 0f,"},{"type":"DELETE","lineNumber":842,"oldContent":"    }"},{"type":"INSERT","lineNumber":876,"content":"    }"}]},{"timestamp":1758259559164,"changes":[{"type":"MODIFY","lineNumber":248,"content":"                                latitude = lat,","oldContent":"                                latitude = lat,"},{"type":"DELETE","lineNumber":250,"oldContent":"                    lastMissionRunning = missionRunning"},{"type":"DELETE","lineNumber":252,"oldContent":"                }"},{"type":"DELETE","lineNumber":255,"oldContent":"        }"},{"type":"INSERT","lineNumber":254,"content":"                    lastMissionRunning = missionRunning"},{"type":"INSERT","lineNumber":255,"content":"                }"},{"type":"INSERT","lineNumber":256,"content":"        }"},{"type":"MODIFY","lineNumber":323,"content":"                                _state.update { it.copy(missionElapsedSec = null, missionCompleted = true) }","oldContent":"                                _state.update { it.copy(missionElapsedSec = null, missionCompleted = true) }"},{"type":"DELETE","lineNumber":383,"oldContent":"        // Helper to request mission items from FCU and return as list"},{"type":"INSERT","lineNumber":384,"content":"        // Mission progress logging: MISSION_ITEM_REACHED, MISSION_CURRENT, and mode"},{"type":"INSERT","lineNumber":385,"content":""},{"type":"INSERT","lineNumber":386,"content":""},{"type":"INSERT","lineNumber":387,"content":"        // Helper to request mission items from FCU and return as list"},{"type":"DELETE","lineNumber":387,"oldContent":"        // Mission progress logging: MISSION_ITEM_REACHED, MISSION_CURRENT, and mode"},{"type":"DELETE","lineNumber":390,"oldContent":""},{"type":"DELETE","lineNumber":392,"oldContent":""},{"type":"INSERT","lineNumber":423,"content":"    suspend fun sendCommand(command: MavCmd, param1: Float = 0f, param2: Float = 0f, param3: Float = 0f, param4: Float = 0f, param5: Float = 0f, param6: Float = 0f, param7: Float = 0f) {"},{"type":"DELETE","lineNumber":425,"oldContent":"    suspend fun sendCommand(command: MavCmd, param1: Float = 0f, param2: Float = 0f, param3: Float = 0f, param4: Float = 0f, param5: Float = 0f, param6: Float = 0f, param7: Float = 0f) {"},{"type":"INSERT","lineNumber":458,"content":""},{"type":"DELETE","lineNumber":459,"oldContent":"    /**"},{"type":"INSERT","lineNumber":464,"content":"        val expectedMode = when (customMode) {"},{"type":"INSERT","lineNumber":465,"content":"            3u -> \"Auto\""},{"type":"INSERT","lineNumber":466,"content":"            0u -> \"Stabilize\""},{"type":"INSERT","lineNumber":467,"content":"            5u -> \"Loiter\""},{"type":"INSERT","lineNumber":468,"content":"            else -> \"Unknown\""},{"type":"INSERT","lineNumber":469,"content":"        }"},{"type":"DELETE","lineNumber":468,"oldContent":"        val expectedMode = when (customMode) {"},{"type":"DELETE","lineNumber":470,"oldContent":"            3u -> \"Auto\""},{"type":"DELETE","lineNumber":472,"oldContent":"            0u -> \"Stabilize\""},{"type":"DELETE","lineNumber":474,"oldContent":"            5u -> \"Loiter\""},{"type":"DELETE","lineNumber":476,"oldContent":"            else -> \"Unknown\""},{"type":"DELETE","lineNumber":478,"oldContent":"        }"},{"type":"DELETE","lineNumber":484,"oldContent":"            }"},{"type":"DELETE","lineNumber":487,"oldContent":"        }"},{"type":"DELETE","lineNumber":490,"oldContent":"        return false"},{"type":"DELETE","lineNumber":491,"oldContent":"                            lastAckResult = ack.result.value"},{"type":"DELETE","lineNumber":492,"oldContent":"    }"},{"type":"INSERT","lineNumber":488,"content":"                            lastAckResult = ack.result.value?.toInt()"},{"type":"DELETE","lineNumber":494,"oldContent":""},{"type":"DELETE","lineNumber":496,"oldContent":"    /**"},{"type":"DELETE","lineNumber":498,"oldContent":"     * Uploads a mission using the MAVLink mission protocol handshake."},{"type":"DELETE","lineNumber":500,"oldContent":"     * Returns true if ACK received, false otherwise."},{"type":"DELETE","lineNumber":502,"oldContent":"     */"},{"type":"DELETE","lineNumber":504,"oldContent":"    @Suppress(\"DEPRECATION\")"},{"type":"DELETE","lineNumber":506,"oldContent":"    suspend fun uploadMissionWithAck(missionItems: List<MissionItemInt>, timeoutMs: Long = 15000): Boolean {"},{"type":"DELETE","lineNumber":508,"oldContent":"        if (!state.value.fcuDetected) {"},{"type":"DELETE","lineNumber":509,"oldContent":"            Log.e(\"MavlinkRepo\", \"FCU not detected, cannot upload mission\")"},{"type":"INSERT","lineNumber":497,"content":"            }"},{"type":"DELETE","lineNumber":511,"oldContent":"            throw IllegalStateException(\"FCU not detected\")"},{"type":"DELETE","lineNumber":513,"oldContent":"        }"},{"type":"DELETE","lineNumber":515,"oldContent":"        if (missionItems.isEmpty()) {"},{"type":"DELETE","lineNumber":517,"oldContent":"            Log.w(\"MavlinkRepo\", \"No mission items to upload\")"},{"type":"DELETE","lineNumber":519,"oldContent":"            return false"},{"type":"DELETE","lineNumber":521,"oldContent":"        }"},{"type":"DELETE","lineNumber":523,"oldContent":""},{"type":"DELETE","lineNumber":525,"oldContent":"        try {"},{"type":"DELETE","lineNumber":527,"oldContent":"            // Step 0: Clear previous mission"},{"type":"DELETE","lineNumber":529,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Upload] Sending MISSION_CLEAR_ALL...\")"},{"type":"DELETE","lineNumber":532,"oldContent":"            val clearAll = MissionClearAll(targetSystem = fcuSystemId, targetComponent = fcuComponentId)"},{"type":"DELETE","lineNumber":534,"oldContent":"            // Wait for COMMAND_ACK for MISSION_CLEAR_ALL"},{"type":"DELETE","lineNumber":536,"oldContent":"            val clearAckDeferred = CompletableDeferred<Boolean>()"},{"type":"DELETE","lineNumber":538,"oldContent":"            val clearJob = AppScope.launch {"},{"type":"DELETE","lineNumber":540,"oldContent":"                connection.mavFrame"},{"type":"DELETE","lineNumber":542,"oldContent":"                    .filter { it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":545,"oldContent":"                    .map { it.message }"},{"type":"INSERT","lineNumber":518,"content":"        }"},{"type":"INSERT","lineNumber":519,"content":"        Log.e(\"MavlinkRepo\", \"Mode change to $expectedMode failed after retries. Last result: $lastAckText ($lastAckResult)\")"},{"type":"INSERT","lineNumber":520,"content":"        return false"},{"type":"INSERT","lineNumber":521,"content":"    }"},{"type":"INSERT","lineNumber":522,"content":""},{"type":"INSERT","lineNumber":523,"content":"    /**"},{"type":"INSERT","lineNumber":524,"content":"     * Uploads a mission using the MAVLink mission protocol handshake."},{"type":"INSERT","lineNumber":525,"content":"     * Returns true if ACK received, false otherwise."},{"type":"INSERT","lineNumber":526,"content":"     */"},{"type":"INSERT","lineNumber":527,"content":"    @Suppress(\"DEPRECATION\")"},{"type":"INSERT","lineNumber":528,"content":"    suspend fun uploadMissionWithAck(missionItems: List<MissionItemInt>, timeoutMs: Long = 15000): Boolean {"},{"type":"INSERT","lineNumber":529,"content":"        if (!state.value.fcuDetected) {"},{"type":"INSERT","lineNumber":530,"content":"            Log.e(\"MavlinkRepo\", \"FCU not detected, cannot upload mission\")"},{"type":"INSERT","lineNumber":531,"content":"            throw IllegalStateException(\"FCU not detected\")"},{"type":"INSERT","lineNumber":532,"content":"        }"},{"type":"INSERT","lineNumber":533,"content":"        if (missionItems.isEmpty()) {"},{"type":"INSERT","lineNumber":534,"content":"            Log.w(\"MavlinkRepo\", \"No mission items to upload\")"},{"type":"INSERT","lineNumber":535,"content":"            return false"},{"type":"INSERT","lineNumber":536,"content":"        }"},{"type":"INSERT","lineNumber":537,"content":""},{"type":"INSERT","lineNumber":538,"content":"        try {"},{"type":"INSERT","lineNumber":539,"content":"            // Step 0: Clear previous mission"},{"type":"INSERT","lineNumber":540,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Upload] Sending MISSION_CLEAR_ALL...\")"},{"type":"INSERT","lineNumber":541,"content":"            val clearAll = MissionClearAll(targetSystem = fcuSystemId, targetComponent = fcuComponentId)"},{"type":"INSERT","lineNumber":542,"content":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, clearAll)"},{"type":"INSERT","lineNumber":543,"content":"            // Wait for COMMAND_ACK for MISSION_CLEAR_ALL"},{"type":"INSERT","lineNumber":544,"content":"            val clearAckDeferred = CompletableDeferred<Boolean>()"},{"type":"INSERT","lineNumber":545,"content":"            val clearJob = AppScope.launch {"},{"type":"INSERT","lineNumber":546,"content":"                connection.mavFrame"},{"type":"INSERT","lineNumber":547,"content":"                    .filter { it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":548,"content":"                    .map { it.message }"},{"type":"INSERT","lineNumber":549,"content":"                    .filterIsInstance<CommandAck>()"},{"type":"INSERT","lineNumber":550,"content":"                    .collect { ack ->"},{"type":"DELETE","lineNumber":549,"oldContent":"        Log.e(\"MavlinkRepo\", \"Mode change to $expectedMode failed after retries. Last result: $lastAckText ($lastAckResult)\")"},{"type":"DELETE","lineNumber":572,"oldContent":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, clearAll)"},{"type":"DELETE","lineNumber":580,"oldContent":"                    .filterIsInstance<CommandAck>()"},{"type":"DELETE","lineNumber":582,"oldContent":"                    .collect { ack ->"},{"type":"INSERT","lineNumber":655,"content":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"INSERT","lineNumber":658,"content":"            while (!firstRequestReceived && !ackDeferred.isCompleted && System.currentTimeMillis() - startWait < firstRequestTimeout) {"},{"type":"INSERT","lineNumber":670,"content":"                        targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":681,"content":"                    }"},{"type":"DELETE","lineNumber":684,"oldContent":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"DELETE","lineNumber":688,"oldContent":"            while (!firstRequestReceived && !ackDeferred.isCompleted && System.currentTimeMillis() - startWait < firstRequestTimeout) {"},{"type":"DELETE","lineNumber":701,"oldContent":"                        targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":712,"oldContent":"                    }"},{"type":"INSERT","lineNumber":713,"content":"            val perSeqMap = mutableMapOf<Int, CompletableDeferred<Unit>>()"},{"type":"INSERT","lineNumber":716,"content":"                connection.mavFrame.collect { frame ->"},{"type":"INSERT","lineNumber":740,"content":"            }"},{"type":"INSERT","lineNumber":741,"content":""},{"type":"DELETE","lineNumber":742,"oldContent":"            val perSeqMap = mutableMapOf<Int, CompletableDeferred<Unit>>()"},{"type":"DELETE","lineNumber":746,"oldContent":"                connection.mavFrame.collect { frame ->"},{"type":"DELETE","lineNumber":756,"oldContent":"            param4 = 0f,"},{"type":"DELETE","lineNumber":757,"oldContent":"            param2 = 0f,"},{"type":"DELETE","lineNumber":758,"oldContent":"            param1 = 0f,"},{"type":"DELETE","lineNumber":759,"oldContent":"            command = MavCmd.MISSION_START.wrap(),"},{"type":"INSERT","lineNumber":758,"content":"            for (seq in 0 until expectedCount) {"},{"type":"INSERT","lineNumber":759,"content":"                val seqDeferred = CompletableDeferred<Unit>()"},{"type":"INSERT","lineNumber":760,"content":"                perSeqMap[seq] = seqDeferred"},{"type":"INSERT","lineNumber":761,"content":"                try {"},{"type":"INSERT","lineNumber":767,"content":"                }"},{"type":"DELETE","lineNumber":770,"oldContent":"            }"},{"type":"DELETE","lineNumber":772,"oldContent":""},{"type":"INSERT","lineNumber":777,"content":""},{"type":"INSERT","lineNumber":788,"content":"        }"},{"type":"INSERT","lineNumber":790,"content":""},{"type":"DELETE","lineNumber":793,"oldContent":"    }"},{"type":"DELETE","lineNumber":794,"oldContent":"                }"},{"type":"DELETE","lineNumber":795,"oldContent":"                }"},{"type":"DELETE","lineNumber":796,"oldContent":"                    }"},{"type":"DELETE","lineNumber":797,"oldContent":"                        lastMissionCmd = msg.command.value"},{"type":"DELETE","lineNumber":798,"oldContent":"                    is MissionItemInt -> {"},{"type":"DELETE","lineNumber":799,"oldContent":"                        }"},{"type":"DELETE","lineNumber":800,"oldContent":"                                }"},{"type":"DELETE","lineNumber":801,"oldContent":"                                        Log.i(\"MavlinkRepo\", \"Drone disarmed after LAND.\")"},{"type":"INSERT","lineNumber":797,"content":"     */"},{"type":"INSERT","lineNumber":798,"content":"    suspend fun startMission(): Boolean {"},{"type":"INSERT","lineNumber":799,"content":"        Log.i(\"MavlinkRepo\", \"[Mission Start] Initiating mission start workflow...\")"},{"type":"INSERT","lineNumber":800,"content":"        if (!state.value.fcuDetected) {"},{"type":"INSERT","lineNumber":801,"content":"            Log.w(\"MavlinkRepo\", \"[Mission Start] Cannot start mission - FCU not detected\")"},{"type":"INSERT","lineNumber":802,"content":"            return false"},{"type":"INSERT","lineNumber":803,"content":"        }"},{"type":"INSERT","lineNumber":804,"content":""},{"type":"INSERT","lineNumber":805,"content":"        // Step 1: Arm the vehicle"},{"type":"INSERT","lineNumber":806,"content":"        try {"},{"type":"INSERT","lineNumber":808,"content":"            arm()"},{"type":"DELETE","lineNumber":804,"oldContent":""},{"type":"INSERT","lineNumber":818,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"DELETE","lineNumber":815,"oldContent":"        }"},{"type":"DELETE","lineNumber":816,"oldContent":""},{"type":"INSERT","lineNumber":821,"content":"            delay(500)"},{"type":"INSERT","lineNumber":822,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":827,"content":"        // Step 3: Set mode to AUTO"},{"type":"DELETE","lineNumber":823,"oldContent":"     */"},{"type":"DELETE","lineNumber":833,"oldContent":"        try {"},{"type":"DELETE","lineNumber":836,"oldContent":"            arm()"},{"type":"INSERT","lineNumber":843,"content":"        return true"},{"type":"INSERT","lineNumber":846,"content":"    /**"},{"type":"DELETE","lineNumber":845,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"DELETE","lineNumber":849,"oldContent":"            delay(500)"},{"type":"DELETE","lineNumber":850,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":855,"content":"            param1 = 0f,"},{"type":"INSERT","lineNumber":856,"content":"            param2 = 0f,"},{"type":"INSERT","lineNumber":857,"content":"            param3 = 0f,"},{"type":"INSERT","lineNumber":858,"content":"            param4 = 0f,"},{"type":"INSERT","lineNumber":860,"content":"            param6 = 0f,"},{"type":"DELETE","lineNumber":855,"oldContent":"        // Step 3: Set mode to AUTO"},{"type":"DELETE","lineNumber":868,"oldContent":"        return true"},{"type":"DELETE","lineNumber":870,"oldContent":"}"},{"type":"DELETE","lineNumber":872,"oldContent":"    /**"},{"type":"DELETE","lineNumber":873,"oldContent":"            param6 = 0f,"},{"type":"DELETE","lineNumber":874,"oldContent":"            param4 = 0f,"},{"type":"DELETE","lineNumber":875,"oldContent":"            param3 = 0f,"},{"type":"DELETE","lineNumber":876,"oldContent":"            param2 = 0f,"},{"type":"MODIFY","lineNumber":877,"content":"}","oldContent":"            param1 = 0f,"}]},{"timestamp":1758261332465,"changes":[{"type":"MODIFY","lineNumber":22,"content":"    const val LOITER: UInt = 5u","oldContent":"    private val gcsSystemId: UByte = 200u"},{"type":"DELETE","lineNumber":40,"oldContent":"            while (scope.isActive) {"},{"type":"DELETE","lineNumber":41,"oldContent":"                    if (connection.tryConnect(scope)) {"},{"type":"INSERT","lineNumber":40,"content":"    // Diagnostic info"},{"type":"INSERT","lineNumber":41,"content":"    private val _lastFailure = MutableStateFlow<Throwable?>(null)"},{"type":"INSERT","lineNumber":247,"content":"                                altitudeRelative = relAltM,"},{"type":"DELETE","lineNumber":248,"oldContent":"                                latitude = lat,"},{"type":"DELETE","lineNumber":252,"oldContent":"                    lastMissionRunning = missionRunning"},{"type":"INSERT","lineNumber":253,"content":"                    }"},{"type":"INSERT","lineNumber":254,"content":"                    lastMissionRunning = missionRunning"},{"type":"DELETE","lineNumber":256,"oldContent":"                    }"},{"type":"INSERT","lineNumber":322,"content":"                                // Mission ended"},{"type":"DELETE","lineNumber":323,"oldContent":"                                _state.update { it.copy(missionElapsedSec = null, missionCompleted = true) }"},{"type":"INSERT","lineNumber":383,"content":""},{"type":"INSERT","lineNumber":387,"content":"        // Helper to request mission items from FCU and return as list"},{"type":"DELETE","lineNumber":387,"oldContent":""},{"type":"DELETE","lineNumber":389,"oldContent":"        // Helper to request mission items from FCU and return as list"},{"type":"MODIFY","lineNumber":461,"content":"     * Waits for Heartbeat confirmation.","oldContent":"     * Waits for Heartbeat confirmation and checks COMMAND_ACK result."},{"type":"INSERT","lineNumber":464,"content":"        sendCommand("},{"type":"INSERT","lineNumber":465,"content":"            MavCmd.DO_SET_MODE,"},{"type":"INSERT","lineNumber":466,"content":"            1f,                   // param1: MAV_MODE_FLAG_CUSTOM_MODE_ENABLED (always 1 for ArduPilot)"},{"type":"INSERT","lineNumber":467,"content":"            customMode.toFloat(), // param2: custom mode (e.g., 3u for AUTO)"},{"type":"INSERT","lineNumber":468,"content":"            0f, 0f, 0f, 0f, 0f"},{"type":"INSERT","lineNumber":469,"content":"        )"},{"type":"INSERT","lineNumber":470,"content":"        // Wait for Heartbeat to confirm mode change"},{"type":"INSERT","lineNumber":471,"content":"        val timeoutMs = 5000L"},{"type":"INSERT","lineNumber":472,"content":"        val start = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":465,"oldContent":"        var lastAckResult: Int? = null"},{"type":"DELETE","lineNumber":467,"oldContent":"        var lastAckText: String? = null"},{"type":"DELETE","lineNumber":469,"oldContent":"        for (attempt in 1..2) { // Try twice if failed"},{"type":"DELETE","lineNumber":471,"oldContent":"            sendCommand("},{"type":"DELETE","lineNumber":474,"oldContent":"                MavCmd.DO_SET_MODE,"},{"type":"DELETE","lineNumber":475,"oldContent":"                1f,                   // param1: MAV_MODE_FLAG_CUSTOM_MODE_ENABLED (always 1 for ArduPilot)"},{"type":"DELETE","lineNumber":476,"oldContent":"                customMode.toFloat(), // param2: custom mode (e.g., 3u for AUTO)"},{"type":"DELETE","lineNumber":477,"oldContent":"                0f, 0f, 0f, 0f, 0f"},{"type":"DELETE","lineNumber":478,"oldContent":"            )"},{"type":"DELETE","lineNumber":479,"oldContent":"            // Wait for COMMAND_ACK"},{"type":"DELETE","lineNumber":480,"oldContent":"            val ackDeferred = CompletableDeferred<Boolean>()"},{"type":"DELETE","lineNumber":481,"oldContent":"            val ackJob = AppScope.launch {"},{"type":"DELETE","lineNumber":482,"oldContent":"                connection.mavFrame"},{"type":"DELETE","lineNumber":483,"oldContent":"                    .filter { it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":484,"oldContent":"                    .map { it.message }"},{"type":"DELETE","lineNumber":485,"oldContent":"                    .filterIsInstance<CommandAck>()"},{"type":"DELETE","lineNumber":486,"oldContent":"                            lastAckResult = ack.result.value?.toInt()"},{"type":"DELETE","lineNumber":487,"oldContent":"                    .collect { ack ->"},{"type":"DELETE","lineNumber":488,"oldContent":"                        if (ack.command.value == MavCmd.DO_SET_MODE.value) {"},{"type":"DELETE","lineNumber":489,"oldContent":"                            lastAckText = ack.result.entry.toString()"},{"type":"DELETE","lineNumber":490,"oldContent":"                            if (ack.result.value == MavResult.ACCEPTED.value) {"},{"type":"INSERT","lineNumber":479,"content":"        while (System.currentTimeMillis() - start < timeoutMs) {"},{"type":"INSERT","lineNumber":480,"content":"            if (state.value.mode?.contains(expectedMode, ignoreCase = true) == true) {"},{"type":"INSERT","lineNumber":481,"content":"                Log.i(\"MavlinkRepo\", \"Mode changed to ${state.value.mode}\")"},{"type":"INSERT","lineNumber":482,"content":"                return true"},{"type":"DELETE","lineNumber":492,"oldContent":"                                ackDeferred.complete(true)"},{"type":"DELETE","lineNumber":493,"oldContent":"                            } else {"},{"type":"DELETE","lineNumber":494,"oldContent":"                                ackDeferred.complete(false)"},{"type":"DELETE","lineNumber":495,"oldContent":"                            }"},{"type":"DELETE","lineNumber":496,"oldContent":"                        }"},{"type":"DELETE","lineNumber":497,"oldContent":"                    }"},{"type":"DELETE","lineNumber":498,"oldContent":"            val ackSuccess = withTimeoutOrNull(3000L) { ackDeferred.await() } ?: false"},{"type":"DELETE","lineNumber":499,"oldContent":"            ackJob.cancel()"},{"type":"DELETE","lineNumber":500,"oldContent":"            if (ackSuccess) {"},{"type":"DELETE","lineNumber":501,"oldContent":"                Log.i(\"MavlinkRepo\", \"Mode change to $expectedMode accepted by FCU\")"},{"type":"INSERT","lineNumber":484,"content":"            delay(200)"},{"type":"DELETE","lineNumber":503,"oldContent":"                // Wait for Heartbeat to confirm mode change"},{"type":"DELETE","lineNumber":504,"oldContent":"        Log.e(\"MavlinkRepo\", \"Mode change to $expectedMode failed after retries. Last result: $lastAckText ($lastAckResult)\")"},{"type":"INSERT","lineNumber":486,"content":"        Log.e(\"MavlinkRepo\", \"Mode change to ${customMode} not confirmed in Heartbeat\")"},{"type":"DELETE","lineNumber":506,"oldContent":"                val timeoutMs = 5000L"},{"type":"DELETE","lineNumber":509,"oldContent":"                val start = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":512,"oldContent":"                while (System.currentTimeMillis() - start < timeoutMs) {"},{"type":"DELETE","lineNumber":515,"oldContent":"                    if (state.value.mode?.contains(expectedMode, ignoreCase = true) == true) {"},{"type":"DELETE","lineNumber":518,"oldContent":"                        Log.i(\"MavlinkRepo\", \"Mode changed to ${state.value.mode}\")"},{"type":"DELETE","lineNumber":521,"oldContent":"                        return true"},{"type":"DELETE","lineNumber":523,"oldContent":"                    }"},{"type":"DELETE","lineNumber":526,"oldContent":"                    delay(200)"},{"type":"DELETE","lineNumber":529,"oldContent":"                }"},{"type":"DELETE","lineNumber":532,"oldContent":"                Log.e(\"MavlinkRepo\", \"Mode change to $expectedMode not confirmed in Heartbeat\")"},{"type":"DELETE","lineNumber":535,"oldContent":"                return false"},{"type":"DELETE","lineNumber":538,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":541,"oldContent":"                Log.e(\"MavlinkRepo\", \"Mode change to $expectedMode rejected by FCU: result=$lastAckText ($lastAckResult)\")"},{"type":"DELETE","lineNumber":543,"oldContent":"                delay(1000) // Wait before retry"},{"type":"DELETE","lineNumber":546,"oldContent":"            }"},{"type":"DELETE","lineNumber":548,"oldContent":"                        if (ack.command.value == MISSION_CLEAR_ALL_CMD && ack.result.value == MavResult.ACCEPTED.value) {"},{"type":"DELETE","lineNumber":550,"oldContent":"                            Log.i(\"MavlinkRepo\", \"[Mission Upload] MISSION_CLEAR_ALL acknowledged by FCU\")"},{"type":"INSERT","lineNumber":518,"content":"                        if (ack.command.value == MISSION_CLEAR_ALL_CMD && ack.result.value == MavResult.ACCEPTED.value) {"},{"type":"INSERT","lineNumber":519,"content":"                            Log.i(\"MavlinkRepo\", \"[Mission Upload] MISSION_CLEAR_ALL acknowledged by FCU\")"},{"type":"DELETE","lineNumber":658,"oldContent":"                delay(100)"},{"type":"INSERT","lineNumber":626,"content":"                delay(100)"},{"type":"INSERT","lineNumber":637,"content":"                        targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":672,"oldContent":"                        targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":648,"content":"                    }"},{"type":"DELETE","lineNumber":684,"oldContent":"                    }"},{"type":"DELETE","lineNumber":716,"oldContent":"                    when (val msg = frame.message) {"},{"type":"INSERT","lineNumber":684,"content":"                    when (val msg = frame.message) {"},{"type":"DELETE","lineNumber":740,"oldContent":"            try {"},{"type":"DELETE","lineNumber":741,"oldContent":"                val req = MissionRequestList(targetSystem = fcuSystemId, targetComponent = fcuComponentId)"},{"type":"DELETE","lineNumber":743,"oldContent":"            param7 = 0f"},{"type":"DELETE","lineNumber":745,"oldContent":"            param4 = 0f,"},{"type":"INSERT","lineNumber":709,"content":"            try {"},{"type":"INSERT","lineNumber":710,"content":"                val req = MissionRequestList(targetSystem = fcuSystemId, targetComponent = fcuComponentId)"},{"type":"INSERT","lineNumber":711,"content":"                connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, req)"},{"type":"INSERT","lineNumber":712,"content":"                Log.i(\"MavlinkRepo\", \"Sent MISSION_REQUEST_LIST to FCU\")"},{"type":"DELETE","lineNumber":750,"oldContent":"            param1 = 0f,"},{"type":"DELETE","lineNumber":751,"oldContent":"            confirmation = 0u,"},{"type":"DELETE","lineNumber":752,"oldContent":"            targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":717,"content":"            val expectedCount = withTimeoutOrNull(timeoutMs) { expectedCountDeferred.await() } ?: run {"},{"type":"INSERT","lineNumber":718,"content":"                Log.w(\"MavlinkRepo\", \"Did not receive MISSION_COUNT from FCU within timeout\")"},{"type":"INSERT","lineNumber":719,"content":"                job.cancel()"},{"type":"DELETE","lineNumber":761,"oldContent":"                    val reqItem = MissionRequestInt(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = seq.toUShort())"},{"type":"INSERT","lineNumber":729,"content":"                    val reqItem = MissionRequestInt(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = seq.toUShort())"},{"type":"INSERT","lineNumber":734,"content":"                }"},{"type":"DELETE","lineNumber":769,"oldContent":"                }"},{"type":"DELETE","lineNumber":777,"oldContent":"                perSeqMap.remove(seq)"},{"type":"INSERT","lineNumber":745,"content":"                perSeqMap.remove(seq)"},{"type":"DELETE","lineNumber":788,"oldContent":"                }"},{"type":"DELETE","lineNumber":789,"oldContent":"    /**"},{"type":"INSERT","lineNumber":756,"content":"    }"},{"type":"INSERT","lineNumber":757,"content":""},{"type":"INSERT","lineNumber":758,"content":"    /**"},{"type":"DELETE","lineNumber":793,"oldContent":""},{"type":"DELETE","lineNumber":803,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending ARM command...\")"},{"type":"DELETE","lineNumber":805,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] ARM command sent\")"},{"type":"DELETE","lineNumber":808,"oldContent":"            delay(500)"},{"type":"INSERT","lineNumber":774,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending ARM command...\")"},{"type":"INSERT","lineNumber":775,"content":"            arm()"},{"type":"INSERT","lineNumber":776,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Start] ARM command sent\")"},{"type":"INSERT","lineNumber":777,"content":"            delay(500)"},{"type":"DELETE","lineNumber":812,"oldContent":"            arm()"},{"type":"INSERT","lineNumber":785,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"INSERT","lineNumber":788,"content":"            delay(500)"},{"type":"INSERT","lineNumber":789,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":821,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"DELETE","lineNumber":825,"oldContent":"            delay(500)"},{"type":"INSERT","lineNumber":794,"content":"        // Step 3: Set mode to AUTO"},{"type":"DELETE","lineNumber":827,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":832,"oldContent":"        // Step 3: Set mode to AUTO"},{"type":"DELETE","lineNumber":843,"oldContent":"            param6 = 0f,"},{"type":"INSERT","lineNumber":810,"content":"        return true"},{"type":"INSERT","lineNumber":812,"content":""},{"type":"INSERT","lineNumber":813,"content":"    /**"},{"type":"DELETE","lineNumber":847,"oldContent":"        return true"},{"type":"DELETE","lineNumber":850,"oldContent":"    /**"},{"type":"INSERT","lineNumber":822,"content":"            param1 = 0f,"},{"type":"INSERT","lineNumber":823,"content":"            param2 = 0f,"},{"type":"INSERT","lineNumber":824,"content":"            param3 = 0f,"},{"type":"INSERT","lineNumber":825,"content":"            param4 = 0f,"},{"type":"INSERT","lineNumber":827,"content":"            param6 = 0f,"},{"type":"DELETE","lineNumber":858,"oldContent":"            param1 = 0f,"},{"type":"DELETE","lineNumber":859,"oldContent":"            param2 = 0f,"},{"type":"DELETE","lineNumber":861,"oldContent":"            param3 = 0f,"},{"type":"DELETE","lineNumber":863,"oldContent":"            param4 = 0f,"},{"type":"DELETE","lineNumber":866,"oldContent":"            param6 = 0f,"}]},{"timestamp":1758262136162,"changes":[{"type":"MODIFY","lineNumber":45,"content":"    private val connection = TcpClientMavConnection(host, port, CommonDialect).asCoroutine()","oldContent":"                        return // Exit on successful connection"},{"type":"MODIFY","lineNumber":66,"content":"                    _lastFailure.value = e","oldContent":"                            Log.i(\"MavlinkRepo\", \"Connection Active\")"},{"type":"MODIFY","lineNumber":75,"content":"            connection.streamState.collect { st ->","oldContent":"                        }"},{"type":"DELETE","lineNumber":78,"oldContent":"            }"},{"type":"DELETE","lineNumber":79,"oldContent":"        }"},{"type":"INSERT","lineNumber":78,"content":"                        if (!state.value.connected) {"},{"type":"INSERT","lineNumber":79,"content":"                            Log.i(\"MavlinkRepo\", \"Connection Active\")"},{"type":"MODIFY","lineNumber":109,"content":"                        _lastFailure.value = e","oldContent":"            mavFrameStream.collect {"},{"type":"DELETE","lineNumber":132,"oldContent":"                                    command = MavCmd.SET_MESSAGE_INTERVAL.wrap(),"},{"type":"DELETE","lineNumber":133,"oldContent":"                                    confirmation = 0u,"},{"type":"INSERT","lineNumber":132,"content":"                    if (!state.value.fcuDetected) {"},{"type":"INSERT","lineNumber":133,"content":"                        fcuSystemId = it.systemId"},{"type":"DELETE","lineNumber":143,"oldContent":"                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, cmd)"},{"type":"DELETE","lineNumber":144,"oldContent":"                                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":145,"oldContent":"                                    Log.e(\"MavlinkRepo\", \"Failed to send SET_MESSAGE_INTERVAL\", e)"},{"type":"DELETE","lineNumber":146,"oldContent":"                                    _lastFailure.value = e"},{"type":"DELETE","lineNumber":147,"oldContent":"                                }"},{"type":"DELETE","lineNumber":148,"oldContent":"                            }"},{"type":"DELETE","lineNumber":149,"oldContent":""},{"type":"DELETE","lineNumber":150,"oldContent":"                            setMessageRate(1u, 1f)   // SYS_STATUS"},{"type":"DELETE","lineNumber":151,"oldContent":"                            setMessageRate(24u, 1f)  // GPS_RAW_INT"},{"type":"DELETE","lineNumber":152,"oldContent":"                            setMessageRate(33u, 5f)  // GLOBAL_POSITION_INT"},{"type":"INSERT","lineNumber":143,"content":"                                    targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":144,"content":"                                    targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":145,"content":"                                    command = MavCmd.SET_MESSAGE_INTERVAL.wrap(),"},{"type":"INSERT","lineNumber":146,"content":"                                    confirmation = 0u,"},{"type":"INSERT","lineNumber":147,"content":"                                    param1 = messageId.toFloat(),"},{"type":"INSERT","lineNumber":148,"content":"                                    param2 = intervalUsec,"},{"type":"INSERT","lineNumber":149,"content":"                                    param3 = 0f,"},{"type":"INSERT","lineNumber":150,"content":"                                    param4 = 0f,"},{"type":"INSERT","lineNumber":151,"content":"                                    param5 = 0f,"},{"type":"INSERT","lineNumber":152,"content":"                                    param6 = 0f,"},{"type":"MODIFY","lineNumber":159,"content":"                                    _lastFailure.value = e","oldContent":""},{"type":"DELETE","lineNumber":167,"oldContent":"                .collect { hud ->"},{"type":"DELETE","lineNumber":168,"oldContent":"                    _state.update {"},{"type":"DELETE","lineNumber":169,"oldContent":"                        it.copy("},{"type":"DELETE","lineNumber":170,"oldContent":"                            altitudeMsl = hud.alt,"},{"type":"DELETE","lineNumber":171,"oldContent":"                            airspeed = hud.airspeed.takeIf { v -> v > 0f },"},{"type":"DELETE","lineNumber":172,"oldContent":"                            groundspeed = hud.groundspeed.takeIf { v -> v > 0f }"},{"type":"DELETE","lineNumber":173,"oldContent":"                        )"},{"type":"INSERT","lineNumber":167,"content":"                            setMessageRate(147u, 1f) // BATTERY_STATUS"},{"type":"INSERT","lineNumber":168,"content":"                        }"},{"type":"INSERT","lineNumber":169,"content":"                    }"},{"type":"INSERT","lineNumber":170,"content":"                }"},{"type":"INSERT","lineNumber":171,"content":"        }"},{"type":"INSERT","lineNumber":172,"content":""},{"type":"INSERT","lineNumber":173,"content":"        // Collector to log COMMAND_ACK messages for diagnostics"},{"type":"MODIFY","lineNumber":253,"content":"                    }","oldContent":"                    }"},{"type":"INSERT","lineNumber":269,"content":""},{"type":"INSERT","lineNumber":274,"content":"        var missionWasRunning = false // Track if mission was previously running"},{"type":"INSERT","lineNumber":275,"content":""},{"type":"INSERT","lineNumber":313,"content":"                    val currentlyInAutoAndArmed = mode.equals(\"Auto\", ignoreCase = true) && armed"},{"type":"INSERT","lineNumber":314,"content":""},{"type":"DELETE","lineNumber":312,"oldContent":"                        if (mode.equals(\"Auto\", ignoreCase = true) && armed && (lastMode != mode || lastArmed != armed)) {"},{"type":"INSERT","lineNumber":317,"content":"                        // Mission starting: Auto mode + armed + wasn't previously running"},{"type":"INSERT","lineNumber":318,"content":"                        if (currentlyInAutoAndArmed && !missionWasRunning) {"},{"type":"INSERT","lineNumber":323,"content":"                                missionWasRunning = true"},{"type":"INSERT","lineNumber":324,"content":""},{"type":"DELETE","lineNumber":322,"oldContent":"                                // Mission ended"},{"type":"DELETE","lineNumber":323,"oldContent":"                                _state.update { it.copy(missionElapsedSec = null, missionCompleted = true) }"},{"type":"DELETE","lineNumber":324,"oldContent":"                                // Clear mission from FCU"},{"type":"DELETE","lineNumber":325,"oldContent":"                                val clearAll = MissionClearAll(targetSystem = fcuSystemId, targetComponent = fcuComponentId)"},{"type":"DELETE","lineNumber":326,"oldContent":"                                try {"},{"type":"DELETE","lineNumber":327,"oldContent":"                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, clearAll)"},{"type":"DELETE","lineNumber":328,"oldContent":"                                    Log.i(\"MavlinkRepo\", \"Sent MISSION_CLEAR_ALL after mission completion\")"},{"type":"DELETE","lineNumber":329,"oldContent":"                                } catch (e: Exception) {"},{"type":"MODIFY","lineNumber":330,"content":"","oldContent":"                                    Log.e(\"MavlinkRepo\", \"Failed to send MISSION_CLEAR_ALL after mission completion\", e)"},{"type":"INSERT","lineNumber":331,"content":"                                // Mission ended - check if it completed naturally (disarmed) or was interrupted"},{"type":"INSERT","lineNumber":332,"content":"                                val finalArmed = state.value.armed"},{"type":"INSERT","lineNumber":333,"content":"                                val finalMode = state.value.mode"},{"type":"INSERT","lineNumber":334,"content":""},{"type":"INSERT","lineNumber":335,"content":"                                if (!finalArmed && finalMode?.equals(\"Auto\", ignoreCase = true) == true) {"},{"type":"INSERT","lineNumber":336,"content":"                                    // Mission completed naturally - drone disarmed while still in Auto mode"},{"type":"INSERT","lineNumber":337,"content":"                                    Log.i(\"MavlinkRepo\", \"Mission completed naturally - drone disarmed in Auto mode\")"},{"type":"INSERT","lineNumber":338,"content":"                                    _state.update { it.copy(missionElapsedSec = null, missionCompleted = true) }"},{"type":"INSERT","lineNumber":339,"content":""},{"type":"INSERT","lineNumber":340,"content":"                                    // Clear mission from FCU"},{"type":"INSERT","lineNumber":341,"content":"                                    val clearAll = MissionClearAll(targetSystem = fcuSystemId, targetComponent = fcuComponentId)"},{"type":"INSERT","lineNumber":342,"content":"                                    try {"},{"type":"INSERT","lineNumber":343,"content":"                                        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, clearAll)"},{"type":"INSERT","lineNumber":344,"content":"                                        Log.i(\"MavlinkRepo\", \"Sent MISSION_CLEAR_ALL after mission completion\")"},{"type":"INSERT","lineNumber":345,"content":"                                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":346,"content":"                                        Log.e(\"MavlinkRepo\", \"Failed to send MISSION_CLEAR_ALL after mission completion\", e)"},{"type":"INSERT","lineNumber":347,"content":"                                    }"},{"type":"INSERT","lineNumber":348,"content":"                                } else {"},{"type":"INSERT","lineNumber":349,"content":"                                    // Mission was interrupted (mode changed or manually disarmed)"},{"type":"INSERT","lineNumber":350,"content":"                                    Log.i(\"MavlinkRepo\", \"Mission was interrupted - mode: $finalMode, armed: $finalArmed\")"},{"type":"INSERT","lineNumber":351,"content":"                                    _state.update { it.copy(missionElapsedSec = null, missionCompleted = false) }"},{"type":"INSERT","lineNumber":353,"content":""},{"type":"INSERT","lineNumber":354,"content":"                                missionWasRunning = false"},{"type":"DELETE","lineNumber":333,"oldContent":"                        } else if ((lastMode?.equals(\"Auto\", ignoreCase = true) == true && mode != \"Auto\") ||"},{"type":"DELETE","lineNumber":334,"oldContent":"                                   (lastArmed == true && armed == false && mode.equals(\"Auto\", ignoreCase = true))) {"},{"type":"DELETE","lineNumber":335,"oldContent":"                            // Mission ended (either mode changed from Auto, or drone disarmed in Auto)"},{"type":"DELETE","lineNumber":336,"oldContent":"                            missionTimerJob?.cancel()"},{"type":"DELETE","lineNumber":337,"oldContent":"                            missionTimerJob = null"},{"type":"DELETE","lineNumber":338,"oldContent":"                            _state.update { it.copy(missionElapsedSec = null, missionCompleted = true) }"},{"type":"DELETE","lineNumber":339,"oldContent":"                            // Clear mission from FCU"},{"type":"DELETE","lineNumber":340,"oldContent":"                            val clearAll = MissionClearAll(targetSystem = fcuSystemId, targetComponent = fcuComponentId)"},{"type":"DELETE","lineNumber":341,"oldContent":"                            try {"},{"type":"DELETE","lineNumber":342,"oldContent":"                                connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, clearAll)"},{"type":"DELETE","lineNumber":343,"oldContent":"                                Log.i(\"MavlinkRepo\", \"Sent MISSION_CLEAR_ALL after mission completion\")"},{"type":"DELETE","lineNumber":344,"oldContent":"                            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":345,"oldContent":"                                Log.e(\"MavlinkRepo\", \"Failed to send MISSION_CLEAR_ALL after mission completion\", e)"},{"type":"DELETE","lineNumber":346,"oldContent":"                            }"},{"type":"INSERT","lineNumber":357,"content":""},{"type":"INSERT","lineNumber":363,"content":""},{"type":"DELETE","lineNumber":386,"oldContent":""},{"type":"DELETE","lineNumber":387,"oldContent":"        suspend fun requestMissionItemsFromFcu(timeoutMs: Long = 5000): List<MissionItemInt> {"},{"type":"INSERT","lineNumber":398,"content":"        suspend fun requestMissionItemsFromFcu(timeoutMs: Long = 5000): List<MissionItemInt> {"},{"type":"DELETE","lineNumber":457,"oldContent":"            Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to send MISSION_START command\", e)"},{"type":"INSERT","lineNumber":467,"content":"    }"},{"type":"DELETE","lineNumber":465,"oldContent":"        val expectedMode = when (customMode) {"},{"type":"DELETE","lineNumber":468,"oldContent":"            3u -> \"Auto\""},{"type":"DELETE","lineNumber":471,"oldContent":"            0u -> \"Stabilize\""},{"type":"DELETE","lineNumber":474,"oldContent":"            5u -> \"Loiter\""},{"type":"INSERT","lineNumber":483,"content":"        val expectedMode = when (customMode) {"},{"type":"INSERT","lineNumber":484,"content":"            3u -> \"Auto\""},{"type":"INSERT","lineNumber":485,"content":"            0u -> \"Stabilize\""},{"type":"INSERT","lineNumber":486,"content":"            5u -> \"Loiter\""},{"type":"DELETE","lineNumber":483,"oldContent":"            delay(200)"},{"type":"DELETE","lineNumber":484,"oldContent":"        Log.e(\"MavlinkRepo\", \"Mode change to ${customMode} not confirmed in Heartbeat\")"},{"type":"INSERT","lineNumber":494,"content":"            delay(200)"},{"type":"INSERT","lineNumber":496,"content":"        Log.e(\"MavlinkRepo\", \"Mode change to ${customMode} not confirmed in Heartbeat\")"},{"type":"DELETE","lineNumber":496,"oldContent":"                        if (ack.command.value == MISSION_CLEAR_ALL_CMD && ack.result.value == MavResult.ACCEPTED.value) {"},{"type":"DELETE","lineNumber":497,"oldContent":"                            Log.i(\"MavlinkRepo\", \"[Mission Upload] MISSION_CLEAR_ALL acknowledged by FCU\")"},{"type":"INSERT","lineNumber":528,"content":"                        if (ack.command.value == MISSION_CLEAR_ALL_CMD && ack.result.value == MavResult.ACCEPTED.value) {"},{"type":"INSERT","lineNumber":529,"content":"                            Log.i(\"MavlinkRepo\", \"[Mission Upload] MISSION_CLEAR_ALL acknowledged by FCU\")"},{"type":"DELETE","lineNumber":593,"oldContent":"                delay(100)"},{"type":"DELETE","lineNumber":605,"oldContent":"                        targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":617,"oldContent":"                    }"},{"type":"INSERT","lineNumber":636,"content":"                delay(100)"},{"type":"INSERT","lineNumber":647,"content":"                        targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":658,"content":"                    }"},{"type":"DELETE","lineNumber":652,"oldContent":"                    when (val msg = frame.message) {"},{"type":"DELETE","lineNumber":677,"oldContent":"            try {"},{"type":"DELETE","lineNumber":679,"oldContent":"                val req = MissionRequestList(targetSystem = fcuSystemId, targetComponent = fcuComponentId)"},{"type":"DELETE","lineNumber":681,"oldContent":"                connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, req)"},{"type":"DELETE","lineNumber":683,"oldContent":"                Log.i(\"MavlinkRepo\", \"Sent MISSION_REQUEST_LIST to FCU\")"},{"type":"DELETE","lineNumber":688,"oldContent":"            val expectedCount = withTimeoutOrNull(timeoutMs) { expectedCountDeferred.await() } ?: run {"},{"type":"DELETE","lineNumber":690,"oldContent":"                Log.w(\"MavlinkRepo\", \"Did not receive MISSION_COUNT from FCU within timeout\")"},{"type":"INSERT","lineNumber":694,"content":"                    when (val msg = frame.message) {"},{"type":"DELETE","lineNumber":692,"oldContent":"                job.cancel()"},{"type":"DELETE","lineNumber":703,"oldContent":"                    val reqItem = MissionRequestInt(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = seq.toUShort())"},{"type":"DELETE","lineNumber":709,"oldContent":"                }"},{"type":"DELETE","lineNumber":718,"oldContent":"                perSeqMap.remove(seq)"},{"type":"INSERT","lineNumber":719,"content":"            try {"},{"type":"INSERT","lineNumber":720,"content":"                val req = MissionRequestList(targetSystem = fcuSystemId, targetComponent = fcuComponentId)"},{"type":"INSERT","lineNumber":721,"content":"                connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, req)"},{"type":"INSERT","lineNumber":722,"content":"                Log.i(\"MavlinkRepo\", \"Sent MISSION_REQUEST_LIST to FCU\")"},{"type":"INSERT","lineNumber":727,"content":"            val expectedCount = withTimeoutOrNull(timeoutMs) { expectedCountDeferred.await() } ?: run {"},{"type":"INSERT","lineNumber":728,"content":"                Log.w(\"MavlinkRepo\", \"Did not receive MISSION_COUNT from FCU within timeout\")"},{"type":"INSERT","lineNumber":729,"content":"                job.cancel()"},{"type":"DELETE","lineNumber":726,"oldContent":"    }"},{"type":"DELETE","lineNumber":729,"oldContent":""},{"type":"DELETE","lineNumber":730,"oldContent":"    /**"},{"type":"INSERT","lineNumber":739,"content":"                    val reqItem = MissionRequestInt(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = seq.toUShort())"},{"type":"INSERT","lineNumber":744,"content":"                }"},{"type":"DELETE","lineNumber":745,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending ARM command...\")"},{"type":"DELETE","lineNumber":747,"oldContent":"            arm()"},{"type":"DELETE","lineNumber":749,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] ARM command sent\")"},{"type":"DELETE","lineNumber":751,"oldContent":"            delay(500)"},{"type":"INSERT","lineNumber":755,"content":"                perSeqMap.remove(seq)"},{"type":"DELETE","lineNumber":754,"oldContent":"            }"},{"type":"INSERT","lineNumber":757,"content":""},{"type":"DELETE","lineNumber":759,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"DELETE","lineNumber":763,"oldContent":"            delay(500)"},{"type":"DELETE","lineNumber":764,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":766,"content":"    }"},{"type":"INSERT","lineNumber":767,"content":""},{"type":"INSERT","lineNumber":768,"content":"    /**"},{"type":"DELETE","lineNumber":768,"oldContent":"        // Step 3: Set mode to AUTO"},{"type":"DELETE","lineNumber":782,"oldContent":"        return true"},{"type":"INSERT","lineNumber":784,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending ARM command...\")"},{"type":"INSERT","lineNumber":785,"content":"            arm()"},{"type":"INSERT","lineNumber":786,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Start] ARM command sent\")"},{"type":"INSERT","lineNumber":787,"content":"            delay(500)"},{"type":"DELETE","lineNumber":785,"oldContent":""},{"type":"DELETE","lineNumber":786,"oldContent":"    /**"},{"type":"INSERT","lineNumber":795,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"INSERT","lineNumber":798,"content":"            delay(500)"},{"type":"INSERT","lineNumber":799,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":795,"oldContent":"            param1 = 0f,"},{"type":"DELETE","lineNumber":797,"oldContent":"            param2 = 0f,"},{"type":"DELETE","lineNumber":799,"oldContent":"            param3 = 0f,"},{"type":"DELETE","lineNumber":801,"oldContent":"            param4 = 0f,"},{"type":"INSERT","lineNumber":804,"content":"        // Step 3: Set mode to AUTO"},{"type":"DELETE","lineNumber":803,"oldContent":"            param6 = 0f,"},{"type":"DELETE","lineNumber":814,"oldContent":"        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, cmd)"},{"type":"INSERT","lineNumber":816,"content":"            return false"},{"type":"INSERT","lineNumber":817,"content":"        }"},{"type":"INSERT","lineNumber":818,"content":""},{"type":"INSERT","lineNumber":819,"content":"        Log.i(\"MavlinkRepo\", \"[Mission Start] Mission start workflow complete. Vehicle should be in AUTO mode.\")"},{"type":"INSERT","lineNumber":820,"content":"        return true"},{"type":"DELETE","lineNumber":816,"oldContent":"        sendCommand(MavCmd.COMPONENT_ARM_DISARM, if (arm) 1f else 0f)"},{"type":"DELETE","lineNumber":817,"oldContent":"    suspend fun armDisarm(arm: Boolean) {"},{"type":"INSERT","lineNumber":822,"content":""},{"type":"INSERT","lineNumber":832,"content":"            param1 = 0f,"},{"type":"INSERT","lineNumber":833,"content":"            param2 = 0f,"},{"type":"INSERT","lineNumber":834,"content":"            param3 = 0f,"},{"type":"INSERT","lineNumber":835,"content":"            param4 = 0f,"},{"type":"INSERT","lineNumber":837,"content":"            param6 = 0f,"}]},{"timestamp":1758262348401,"changes":[{"type":"MODIFY","lineNumber":19,"content":"// MAVLink flight modes (ArduPilot values)","oldContent":"    private val port: Int"},{"type":"DELETE","lineNumber":43,"oldContent":"                try {"},{"type":"DELETE","lineNumber":44,"oldContent":"                        return // Exit on successful connection"},{"type":"INSERT","lineNumber":43,"content":""},{"type":"INSERT","lineNumber":44,"content":"    // Connection"},{"type":"MODIFY","lineNumber":60,"content":"                try {","oldContent":"        scope.launch {"},{"type":"MODIFY","lineNumber":62,"content":"                        return // Exit on successful connection","oldContent":"            connection.streamState.collect { st ->"},{"type":"MODIFY","lineNumber":65,"content":"                    Log.e(\"MavlinkRepo\", \"Connection attempt failed\", e)","oldContent":"                        if (!state.value.connected) {"},{"type":"MODIFY","lineNumber":67,"content":"                }","oldContent":"                            _state.update { it.copy(connected = true) }"},{"type":"MODIFY","lineNumber":70,"content":"        }","oldContent":"                    is StreamState.Inactive -> {"},{"type":"MODIFY","lineNumber":73,"content":"        scope.launch {","oldContent":"                            _state.update { it.copy(connected = false, fcuDetected = false) }"},{"type":"DELETE","lineNumber":76,"oldContent":"                    }"},{"type":"DELETE","lineNumber":77,"oldContent":"                }"},{"type":"INSERT","lineNumber":76,"content":"                when (st) {"},{"type":"INSERT","lineNumber":77,"content":"                    is StreamState.Active -> {"},{"type":"MODIFY","lineNumber":81,"content":"                        }","oldContent":"        // Send GCS heartbeat"},{"type":"DELETE","lineNumber":84,"oldContent":"                type = MavType.GCS.wrap(),"},{"type":"DELETE","lineNumber":85,"oldContent":"                autopilot = MavAutopilot.INVALID.wrap(),"},{"type":"INSERT","lineNumber":84,"content":"                        if (state.value.connected) {"},{"type":"INSERT","lineNumber":85,"content":"                            Log.i(\"MavlinkRepo\", \"Connection Inactive, reconnecting...\")"},{"type":"DELETE","lineNumber":102,"oldContent":""},{"type":"DELETE","lineNumber":103,"oldContent":"        // Shared message stream"},{"type":"INSERT","lineNumber":102,"content":"            )"},{"type":"INSERT","lineNumber":103,"content":"            while (isActive) {"},{"type":"MODIFY","lineNumber":111,"content":"                }","oldContent":"            }"},{"type":"DELETE","lineNumber":128,"oldContent":"                                val intervalUsec = if (hz <= 0f) 0f else (1_000_000f / hz)"},{"type":"DELETE","lineNumber":129,"oldContent":"                                val cmd = CommandLong("},{"type":"DELETE","lineNumber":130,"oldContent":"                                    targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":128,"content":"        scope.launch {"},{"type":"INSERT","lineNumber":129,"content":"            mavFrameStream"},{"type":"INSERT","lineNumber":130,"content":"                .filter { it.message is Heartbeat && (it.message as Heartbeat).type != MavType.GCS.wrap() }"},{"type":"MODIFY","lineNumber":137,"content":"","oldContent":"                                    param4 = 0f,"},{"type":"DELETE","lineNumber":141,"oldContent":"                                )"},{"type":"DELETE","lineNumber":142,"oldContent":"                                try {"},{"type":"INSERT","lineNumber":141,"content":"                                val intervalUsec = if (hz <= 0f) 0f else (1_000_000f / hz)"},{"type":"INSERT","lineNumber":142,"content":"                                val cmd = CommandLong("},{"type":"MODIFY","lineNumber":166,"content":"                            setMessageRate(74u, 5f)  // VFR_HUD","oldContent":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"MODIFY","lineNumber":175,"content":"            mavFrameStream","oldContent":"                        )"},{"type":"MODIFY","lineNumber":200,"content":"                            altitudeMsl = hud.alt,","oldContent":""},{"type":"MODIFY","lineNumber":205,"content":"                }","oldContent":"                .map { it.message }"},{"type":"MODIFY","lineNumber":211,"content":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }","oldContent":"        }"},{"type":"DELETE","lineNumber":214,"oldContent":"            mavFrameStream"},{"type":"DELETE","lineNumber":215,"oldContent":"                .filter{ frame-> state.value.fcuDetected && frame.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":216,"oldContent":"                .map{frame -> frame.message}"},{"type":"DELETE","lineNumber":217,"oldContent":"                .filterIsInstance<Heartbeat>()"},{"type":"DELETE","lineNumber":218,"oldContent":"                .collect{ hb->"},{"type":"INSERT","lineNumber":214,"content":"                .collect { gp ->"},{"type":"INSERT","lineNumber":215,"content":"                    val altAMSLm = gp.alt / 1000f"},{"type":"INSERT","lineNumber":216,"content":"                    val relAltM = gp.relativeAlt / 1000f"},{"type":"INSERT","lineNumber":217,"content":"                    val lat = gp.lat.takeIf { it != Int.MIN_VALUE }?.let { it / 10_000_000.0 }"},{"type":"INSERT","lineNumber":218,"content":"                    val lon = gp.lon.takeIf { it != Int.MIN_VALUE }?.let { it / 10_000_000.0 }"},{"type":"INSERT","lineNumber":252,"content":"                        }"},{"type":"DELETE","lineNumber":253,"oldContent":"                    }"},{"type":"DELETE","lineNumber":269,"oldContent":""},{"type":"DELETE","lineNumber":275,"oldContent":"        var missionWasRunning = false // Track if mission was previously running"},{"type":"DELETE","lineNumber":277,"oldContent":""},{"type":"DELETE","lineNumber":290,"oldContent":"                .filterIsInstance<SysStatus>()"},{"type":"DELETE","lineNumber":291,"oldContent":"                .collect { s ->"},{"type":"DELETE","lineNumber":292,"oldContent":"                    val vBatt = if (s.voltageBattery.toUInt() == 0xFFFFu) null else s.voltageBattery.toFloat() / 1000f"},{"type":"DELETE","lineNumber":293,"oldContent":"                    val pct = if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()"},{"type":"DELETE","lineNumber":294,"oldContent":"                    val SENSOR_3D_GYRO = 1u"},{"type":"DELETE","lineNumber":295,"oldContent":"                    val present = (s.onboardControlSensorsPresent.value and SENSOR_3D_GYRO) != 0u"},{"type":"DELETE","lineNumber":296,"oldContent":"                    val enabled = (s.onboardControlSensorsEnabled.value and SENSOR_3D_GYRO) != 0u"},{"type":"DELETE","lineNumber":297,"oldContent":"                    val healthy = (s.onboardControlSensorsHealth.value and SENSOR_3D_GYRO) != 0u"},{"type":"DELETE","lineNumber":298,"oldContent":"                    val armable = present && enabled && healthy"},{"type":"DELETE","lineNumber":299,"oldContent":"                    _state.update { it.copy(voltage = vBatt, batteryPercent = pct , armable = armable) }"},{"type":"INSERT","lineNumber":287,"content":"                        6u -> \"RTL\""},{"type":"INSERT","lineNumber":288,"content":"                        7u -> \"Circle\""},{"type":"INSERT","lineNumber":289,"content":"                        9u -> \"Land\""},{"type":"INSERT","lineNumber":290,"content":"                        11u -> \"Drift\""},{"type":"INSERT","lineNumber":291,"content":"                        13u -> \"Sport\""},{"type":"INSERT","lineNumber":292,"content":"                        14u -> \"Flip\""},{"type":"INSERT","lineNumber":293,"content":"                        15u -> \"AutoTune\""},{"type":"INSERT","lineNumber":294,"content":"                        16u -> \"Pos Hold\""},{"type":"INSERT","lineNumber":295,"content":"                        17u -> \"Brake\""},{"type":"INSERT","lineNumber":296,"content":"                        18u -> \"Throw\""},{"type":"DELETE","lineNumber":315,"oldContent":"                    val currentlyInAutoAndArmed = mode.equals(\"Auto\", ignoreCase = true) && armed"},{"type":"INSERT","lineNumber":312,"content":"                        if (mode.equals(\"Auto\", ignoreCase = true) && armed && (lastMode != mode || lastArmed != armed)) {"},{"type":"DELETE","lineNumber":317,"oldContent":""},{"type":"DELETE","lineNumber":321,"oldContent":"                        // Mission starting: Auto mode + armed + wasn't previously running"},{"type":"DELETE","lineNumber":323,"oldContent":"                        if (currentlyInAutoAndArmed && !missionWasRunning) {"},{"type":"DELETE","lineNumber":328,"oldContent":"                                missionWasRunning = true"},{"type":"DELETE","lineNumber":329,"oldContent":""},{"type":"DELETE","lineNumber":330,"oldContent":""},{"type":"DELETE","lineNumber":331,"oldContent":"                                // Mission ended - check if it completed naturally (disarmed) or was interrupted"},{"type":"INSERT","lineNumber":322,"content":"                                // Mission ended"},{"type":"INSERT","lineNumber":323,"content":"                                _state.update { it.copy(missionElapsedSec = null, missionCompleted = true) }"},{"type":"INSERT","lineNumber":324,"content":"                                // Clear mission from FCU"},{"type":"INSERT","lineNumber":325,"content":"                                val clearAll = MissionClearAll(targetSystem = fcuSystemId, targetComponent = fcuComponentId)"},{"type":"INSERT","lineNumber":326,"content":"                                try {"},{"type":"INSERT","lineNumber":327,"content":"                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, clearAll)"},{"type":"INSERT","lineNumber":328,"content":"                                    Log.i(\"MavlinkRepo\", \"Sent MISSION_CLEAR_ALL after mission completion\")"},{"type":"INSERT","lineNumber":329,"content":"                                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":330,"content":"                                    Log.e(\"MavlinkRepo\", \"Failed to send MISSION_CLEAR_ALL after mission completion\", e)"},{"type":"DELETE","lineNumber":333,"oldContent":"                                val finalArmed = state.value.armed"},{"type":"DELETE","lineNumber":335,"oldContent":"                                val finalMode = state.value.mode"},{"type":"DELETE","lineNumber":336,"oldContent":""},{"type":"DELETE","lineNumber":337,"oldContent":"                                if (!finalArmed && finalMode?.equals(\"Auto\", ignoreCase = true) == true) {"},{"type":"DELETE","lineNumber":338,"oldContent":"                                    // Mission completed naturally - drone disarmed while still in Auto mode"},{"type":"DELETE","lineNumber":339,"oldContent":"                                    Log.i(\"MavlinkRepo\", \"Mission completed naturally - drone disarmed in Auto mode\")"},{"type":"DELETE","lineNumber":340,"oldContent":"                                    _state.update { it.copy(missionElapsedSec = null, missionCompleted = true) }"},{"type":"DELETE","lineNumber":341,"oldContent":""},{"type":"DELETE","lineNumber":342,"oldContent":"                                    // Clear mission from FCU"},{"type":"DELETE","lineNumber":343,"oldContent":"                                    val clearAll = MissionClearAll(targetSystem = fcuSystemId, targetComponent = fcuComponentId)"},{"type":"DELETE","lineNumber":344,"oldContent":"                                    try {"},{"type":"DELETE","lineNumber":345,"oldContent":"                                        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, clearAll)"},{"type":"DELETE","lineNumber":346,"oldContent":"                                        Log.i(\"MavlinkRepo\", \"Sent MISSION_CLEAR_ALL after mission completion\")"},{"type":"DELETE","lineNumber":347,"oldContent":"                                    } catch (e: Exception) {"},{"type":"DELETE","lineNumber":348,"oldContent":"                                        Log.e(\"MavlinkRepo\", \"Failed to send MISSION_CLEAR_ALL after mission completion\", e)"},{"type":"DELETE","lineNumber":349,"oldContent":"                                    }"},{"type":"INSERT","lineNumber":333,"content":"                        } else if ((lastMode?.equals(\"Auto\", ignoreCase = true) == true && mode != \"Auto\") ||"},{"type":"INSERT","lineNumber":334,"content":"                                   (lastArmed == true && armed == false && mode.equals(\"Auto\", ignoreCase = true))) {"},{"type":"INSERT","lineNumber":335,"content":"                            // Mission ended (either mode changed from Auto, or drone disarmed in Auto)"},{"type":"INSERT","lineNumber":336,"content":"                            missionTimerJob?.cancel()"},{"type":"INSERT","lineNumber":337,"content":"                            missionTimerJob = null"},{"type":"INSERT","lineNumber":338,"content":"                            _state.update { it.copy(missionElapsedSec = null, missionCompleted = true) }"},{"type":"INSERT","lineNumber":339,"content":"                            // Clear mission from FCU"},{"type":"INSERT","lineNumber":340,"content":"                            val clearAll = MissionClearAll(targetSystem = fcuSystemId, targetComponent = fcuComponentId)"},{"type":"INSERT","lineNumber":341,"content":"                            try {"},{"type":"INSERT","lineNumber":342,"content":"                                connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, clearAll)"},{"type":"INSERT","lineNumber":343,"content":"                                Log.i(\"MavlinkRepo\", \"Sent MISSION_CLEAR_ALL after mission completion\")"},{"type":"INSERT","lineNumber":344,"content":"                            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":345,"content":"                                Log.e(\"MavlinkRepo\", \"Failed to send MISSION_CLEAR_ALL after mission completion\", e)"},{"type":"INSERT","lineNumber":346,"content":"                            }"},{"type":"DELETE","lineNumber":351,"oldContent":"                                } else {"},{"type":"DELETE","lineNumber":353,"oldContent":"                                    // Mission was interrupted (mode changed or manually disarmed)"},{"type":"DELETE","lineNumber":355,"oldContent":"                                    Log.i(\"MavlinkRepo\", \"Mission was interrupted - mode: $finalMode, armed: $finalArmed\")"},{"type":"DELETE","lineNumber":357,"oldContent":"                                    _state.update { it.copy(missionElapsedSec = null, missionCompleted = false) }"},{"type":"DELETE","lineNumber":360,"oldContent":""},{"type":"DELETE","lineNumber":362,"oldContent":"                                missionWasRunning = false"},{"type":"DELETE","lineNumber":366,"oldContent":""},{"type":"DELETE","lineNumber":373,"oldContent":""},{"type":"INSERT","lineNumber":386,"content":""},{"type":"INSERT","lineNumber":388,"content":"        suspend fun requestMissionItemsFromFcu(timeoutMs: Long = 5000): List<MissionItemInt> {"},{"type":"DELETE","lineNumber":407,"oldContent":"        suspend fun requestMissionItemsFromFcu(timeoutMs: Long = 5000): List<MissionItemInt> {"},{"type":"INSERT","lineNumber":457,"content":"    }"},{"type":"DELETE","lineNumber":475,"oldContent":"    }"},{"type":"INSERT","lineNumber":473,"content":"        val expectedMode = when (customMode) {"},{"type":"INSERT","lineNumber":474,"content":"            3u -> \"Auto\""},{"type":"INSERT","lineNumber":475,"content":"            0u -> \"Stabilize\""},{"type":"INSERT","lineNumber":476,"content":"            5u -> \"Loiter\""},{"type":"DELETE","lineNumber":489,"oldContent":"        val expectedMode = when (customMode) {"},{"type":"DELETE","lineNumber":490,"oldContent":"            3u -> \"Auto\""},{"type":"DELETE","lineNumber":491,"oldContent":"            0u -> \"Stabilize\""},{"type":"DELETE","lineNumber":493,"oldContent":"            5u -> \"Loiter\""},{"type":"INSERT","lineNumber":484,"content":"            delay(200)"},{"type":"INSERT","lineNumber":486,"content":"        Log.e(\"MavlinkRepo\", \"Mode change to ${customMode} not confirmed in Heartbeat\")"},{"type":"DELETE","lineNumber":502,"oldContent":"            delay(200)"},{"type":"DELETE","lineNumber":505,"oldContent":"        Log.e(\"MavlinkRepo\", \"Mode change to ${customMode} not confirmed in Heartbeat\")"},{"type":"INSERT","lineNumber":518,"content":"                        if (ack.command.value == MISSION_CLEAR_ALL_CMD && ack.result.value == MavResult.ACCEPTED.value) {"},{"type":"INSERT","lineNumber":519,"content":"                            Log.i(\"MavlinkRepo\", \"[Mission Upload] MISSION_CLEAR_ALL acknowledged by FCU\")"},{"type":"DELETE","lineNumber":536,"oldContent":"                        if (ack.command.value == MISSION_CLEAR_ALL_CMD && ack.result.value == MavResult.ACCEPTED.value) {"},{"type":"DELETE","lineNumber":538,"oldContent":"                            Log.i(\"MavlinkRepo\", \"[Mission Upload] MISSION_CLEAR_ALL acknowledged by FCU\")"},{"type":"DELETE","lineNumber":613,"oldContent":"    }"},{"type":"DELETE","lineNumber":614,"oldContent":"        Log.i(\"MavlinkRepo\", \"[Mission Start] Mission start workflow complete. Vehicle should be in AUTO mode.\")"},{"type":"DELETE","lineNumber":615,"oldContent":""},{"type":"DELETE","lineNumber":616,"oldContent":"            Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to set AUTO mode\", e)"},{"type":"DELETE","lineNumber":617,"oldContent":"                Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to switch to AUTO mode\")"},{"type":"DELETE","lineNumber":618,"oldContent":"        // Step 3: Set mode to AUTO"},{"type":"DELETE","lineNumber":619,"oldContent":""},{"type":"DELETE","lineNumber":620,"oldContent":"            return false"},{"type":"INSERT","lineNumber":603,"content":"                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItemInt)"},{"type":"INSERT","lineNumber":604,"content":"                                    sentSeqs.add(seq)"},{"type":"INSERT","lineNumber":605,"content":"                                    Log.i(\"MavlinkRepo\", \"Sent MISSION_ITEM_INT seq=$seq to sys=$senderSys comp=$senderComp (responding to MissionRequest)\")"},{"type":"INSERT","lineNumber":606,"content":"                                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":607,"content":"                                    Log.e(\"MavlinkRepo\", \"Failed to send mission item(seq=$seq) as MissionItemInt\", e)"},{"type":"INSERT","lineNumber":608,"content":"                                }"},{"type":"INSERT","lineNumber":609,"content":"                            }"},{"type":"INSERT","lineNumber":610,"content":"                            is MissionAck -> {"},{"type":"DELETE","lineNumber":622,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":623,"oldContent":"            delay(500)"},{"type":"DELETE","lineNumber":624,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] ARM command sent\")"},{"type":"DELETE","lineNumber":625,"oldContent":"            arm()"},{"type":"INSERT","lineNumber":612,"content":"                                if (!ackDeferred.isCompleted) ackDeferred.complete(true)"},{"type":"INSERT","lineNumber":613,"content":"                                return@collect"},{"type":"INSERT","lineNumber":614,"content":"                            }"},{"type":"INSERT","lineNumber":615,"content":"                            else -> {"},{"type":"INSERT","lineNumber":626,"content":"                delay(100)"},{"type":"DELETE","lineNumber":643,"oldContent":"                delay(100)"},{"type":"INSERT","lineNumber":637,"content":"                        targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":655,"oldContent":"                        targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":648,"content":"                    }"},{"type":"DELETE","lineNumber":666,"oldContent":"                    }"},{"type":"INSERT","lineNumber":684,"content":"                    when (val msg = frame.message) {"},{"type":"DELETE","lineNumber":696,"oldContent":"                    when (val msg = frame.message) {"},{"type":"DELETE","lineNumber":720,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":722,"oldContent":"                Log.e(\"MavlinkRepo\", \"Failed to send MISSION_REQUEST_LIST\", e)"},{"type":"DELETE","lineNumber":724,"oldContent":"            }"},{"type":"INSERT","lineNumber":713,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":714,"content":"                Log.e(\"MavlinkRepo\", \"Failed to send MISSION_REQUEST_LIST\", e)"},{"type":"INSERT","lineNumber":715,"content":"            }"},{"type":"INSERT","lineNumber":717,"content":"            val expectedCount = withTimeoutOrNull(timeoutMs) { expectedCountDeferred.await() } ?: run {"},{"type":"INSERT","lineNumber":718,"content":"                Log.w(\"MavlinkRepo\", \"Did not receive MISSION_COUNT from FCU within timeout\")"},{"type":"INSERT","lineNumber":719,"content":"                job.cancel()"},{"type":"DELETE","lineNumber":730,"oldContent":"            val expectedCount = withTimeoutOrNull(timeoutMs) { expectedCountDeferred.await() } ?: run {"},{"type":"DELETE","lineNumber":732,"oldContent":"                Log.w(\"MavlinkRepo\", \"Did not receive MISSION_COUNT from FCU within timeout\")"},{"type":"DELETE","lineNumber":734,"oldContent":"                job.cancel()"},{"type":"INSERT","lineNumber":729,"content":"                    val reqItem = MissionRequestInt(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = seq.toUShort())"},{"type":"DELETE","lineNumber":743,"oldContent":"                    val reqItem = MissionRequestInt(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = seq.toUShort())"},{"type":"INSERT","lineNumber":734,"content":"                }"},{"type":"DELETE","lineNumber":748,"oldContent":"    }"},{"type":"INSERT","lineNumber":739,"content":"                } ?: false"},{"type":"INSERT","lineNumber":740,"content":""},{"type":"INSERT","lineNumber":741,"content":"                if (!got) {"},{"type":"INSERT","lineNumber":742,"content":"                    Log.w(\"MavlinkRepo\", \"Did not receive item for seq=$seq within timeout\")"},{"type":"DELETE","lineNumber":751,"oldContent":"                    else -> {}"},{"type":"DELETE","lineNumber":752,"oldContent":"                        lastMissionCmd = msg.command.value"},{"type":"DELETE","lineNumber":753,"oldContent":"                    is MissionItemInt -> {"},{"type":"DELETE","lineNumber":754,"oldContent":""},{"type":"DELETE","lineNumber":755,"oldContent":"                                }"},{"type":"INSERT","lineNumber":746,"content":"            }"},{"type":"INSERT","lineNumber":747,"content":""},{"type":"DELETE","lineNumber":760,"oldContent":""},{"type":"DELETE","lineNumber":767,"oldContent":"     * Start the mission after uploading."},{"type":"DELETE","lineNumber":769,"oldContent":"     * Replicates the Dart/Flutter workflow:"},{"type":"INSERT","lineNumber":759,"content":"     * Start the mission after uploading."},{"type":"INSERT","lineNumber":760,"content":"     * Replicates the Dart/Flutter workflow:"},{"type":"DELETE","lineNumber":784,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":786,"oldContent":"            Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to arm vehicle\", e)"},{"type":"INSERT","lineNumber":778,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":779,"content":"            Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to arm vehicle\", e)"},{"type":"INSERT","lineNumber":785,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"INSERT","lineNumber":788,"content":"            delay(500)"},{"type":"INSERT","lineNumber":789,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":798,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"DELETE","lineNumber":800,"oldContent":"            delay(500)"},{"type":"DELETE","lineNumber":802,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":804,"oldContent":"        try {"},{"type":"INSERT","lineNumber":795,"content":"        try {"},{"type":"DELETE","lineNumber":812,"oldContent":"    }"},{"type":"DELETE","lineNumber":813,"oldContent":"        sendCommand(MavCmd.COMPONENT_ARM_DISARM, if (arm) 1f else 0f)"},{"type":"DELETE","lineNumber":814,"oldContent":"     */"},{"type":"INSERT","lineNumber":802,"content":"                return false"},{"type":"INSERT","lineNumber":803,"content":"            }"},{"type":"INSERT","lineNumber":804,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":816,"oldContent":"    }"},{"type":"DELETE","lineNumber":820,"oldContent":"                        }"},{"type":"DELETE","lineNumber":822,"oldContent":"     * Sends MISSION_START as CommandLong (param1=0, param2=0, ...)"},{"type":"INSERT","lineNumber":811,"content":"    }"},{"type":"INSERT","lineNumber":812,"content":""},{"type":"INSERT","lineNumber":813,"content":"    /**"},{"type":"INSERT","lineNumber":814,"content":"     * Sends MISSION_START as CommandLong (param1=0, param2=0, ...)"},{"type":"DELETE","lineNumber":826,"oldContent":""},{"type":"INSERT","lineNumber":822,"content":"            param1 = 0f,"},{"type":"INSERT","lineNumber":823,"content":"            param2 = 0f,"},{"type":"INSERT","lineNumber":824,"content":"            param3 = 0f,"},{"type":"INSERT","lineNumber":825,"content":"            param4 = 0f,"},{"type":"INSERT","lineNumber":827,"content":"            param6 = 0f,"},{"type":"DELETE","lineNumber":837,"oldContent":"            param1 = 0f,"},{"type":"DELETE","lineNumber":839,"oldContent":"            param2 = 0f,"},{"type":"DELETE","lineNumber":841,"oldContent":"            param3 = 0f,"},{"type":"DELETE","lineNumber":843,"oldContent":"            param4 = 0f,"},{"type":"DELETE","lineNumber":846,"oldContent":"            param6 = 0f,"}]},{"timestamp":1758274710266,"changes":[{"type":"DELETE","lineNumber":6,"oldContent":"import com.divpundir.mavlink.adapters.coroutines.trySendUnsignedV2"},{"type":"INSERT","lineNumber":8,"content":"import com.divpundir.mavlink.connection.tcp.TcpClientMavConnection"},{"type":"MODIFY","lineNumber":10,"content":"import com.divpundir.mavlink.definitions.minimal.*","oldContent":"import com.divpundir.mavlink.definitions.common.*"},{"type":"MODIFY","lineNumber":27,"content":"","oldContent":"    private var fcuSystemId: UByte = 0u"},{"type":"MODIFY","lineNumber":63,"content":"                    }","oldContent":"                when (st) {"},{"type":"DELETE","lineNumber":89,"oldContent":"            )"},{"type":"DELETE","lineNumber":90,"oldContent":"            while (isActive) {"},{"type":"DELETE","lineNumber":91,"oldContent":"                if (state.value.connected) {"},{"type":"INSERT","lineNumber":89,"content":"                    }"},{"type":"INSERT","lineNumber":90,"content":"                }"},{"type":"INSERT","lineNumber":91,"content":"            }"},{"type":"MODIFY","lineNumber":106,"content":"                        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, heartbeat)","oldContent":""},{"type":"MODIFY","lineNumber":136,"content":"                        _state.update { it.copy(fcuDetected = true) }","oldContent":"                                    param3 = 0f,"},{"type":"MODIFY","lineNumber":140,"content":"                            suspend fun setMessageRate(messageId: UInt, hz: Float) {","oldContent":"                                    param7 = 0f"},{"type":"DELETE","lineNumber":178,"oldContent":""},{"type":"DELETE","lineNumber":179,"oldContent":"        // GLOBAL_POSITION_INT"},{"type":"INSERT","lineNumber":178,"content":"                .filterIsInstance<CommandAck>()"},{"type":"INSERT","lineNumber":179,"content":"                .collect { ack ->"},{"type":"DELETE","lineNumber":208,"oldContent":"                    val currentA = if (b.currentBattery.toInt() == -1) null else b.currentBattery / 100f"},{"type":"DELETE","lineNumber":209,"oldContent":"                    _state.update { it.copy(currentA = currentA) }"},{"type":"DELETE","lineNumber":210,"oldContent":"                }"},{"type":"INSERT","lineNumber":208,"content":"        // GLOBAL_POSITION_INT"},{"type":"INSERT","lineNumber":209,"content":"        scope.launch {"},{"type":"INSERT","lineNumber":210,"content":"            mavFrameStream"},{"type":"DELETE","lineNumber":284,"oldContent":"                        6u -> \"RTL\""},{"type":"DELETE","lineNumber":286,"oldContent":"                        7u -> \"Circle\""},{"type":"MODIFY","lineNumber":287,"content":"                        6u -> \"RTL\"","oldContent":"                        9u -> \"Land\""},{"type":"INSERT","lineNumber":288,"content":"                        7u -> \"Circle\""},{"type":"INSERT","lineNumber":289,"content":"                        9u -> \"Land\""},{"type":"DELETE","lineNumber":309,"oldContent":"                        if (mode.equals(\"Auto\", ignoreCase = true) && armed && (lastMode != mode || lastArmed != armed)) {"},{"type":"INSERT","lineNumber":312,"content":"                        if (mode.equals(\"Auto\", ignoreCase = true) && armed && (lastMode != mode || lastArmed != armed)) {"},{"type":"DELETE","lineNumber":317,"oldContent":"                                // Mission ended"},{"type":"DELETE","lineNumber":319,"oldContent":"                                _state.update { it.copy(missionElapsedSec = null, missionCompleted = true) }"},{"type":"DELETE","lineNumber":320,"oldContent":"                                // Clear mission from FCU"},{"type":"DELETE","lineNumber":322,"oldContent":"                                val clearAll = MissionClearAll(targetSystem = fcuSystemId, targetComponent = fcuComponentId)"},{"type":"DELETE","lineNumber":324,"oldContent":"                                try {"},{"type":"DELETE","lineNumber":326,"oldContent":"                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, clearAll)"},{"type":"DELETE","lineNumber":328,"oldContent":"                                    Log.i(\"MavlinkRepo\", \"Sent MISSION_CLEAR_ALL after mission completion\")"},{"type":"DELETE","lineNumber":329,"oldContent":"                                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":330,"oldContent":"                                    Log.e(\"MavlinkRepo\", \"Failed to send MISSION_CLEAR_ALL after mission completion\", e)"},{"type":"DELETE","lineNumber":331,"oldContent":"                                }"},{"type":"INSERT","lineNumber":322,"content":"                                // Mission ended"},{"type":"INSERT","lineNumber":323,"content":"                                _state.update { it.copy(missionElapsedSec = null, missionCompleted = true) }"},{"type":"INSERT","lineNumber":324,"content":"                                // Do NOT clear mission from FCU here"},{"type":"INSERT","lineNumber":325,"content":"                            }"},{"type":"DELETE","lineNumber":334,"oldContent":"                            }"},{"type":"DELETE","lineNumber":339,"oldContent":"                            // Clear mission from FCU"},{"type":"DELETE","lineNumber":340,"oldContent":"                            val clearAll = MissionClearAll(targetSystem = fcuSystemId, targetComponent = fcuComponentId)"},{"type":"DELETE","lineNumber":341,"oldContent":"                            try {"},{"type":"DELETE","lineNumber":342,"oldContent":"                                connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, clearAll)"},{"type":"DELETE","lineNumber":343,"oldContent":"                                Log.i(\"MavlinkRepo\", \"Sent MISSION_CLEAR_ALL after mission completion\")"},{"type":"DELETE","lineNumber":344,"oldContent":"                            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":345,"oldContent":"                                Log.e(\"MavlinkRepo\", \"Failed to send MISSION_CLEAR_ALL after mission completion\", e)"},{"type":"DELETE","lineNumber":346,"oldContent":"                            }"},{"type":"INSERT","lineNumber":332,"content":"                            // Do NOT clear mission from FCU here"},{"type":"DELETE","lineNumber":375,"oldContent":""},{"type":"DELETE","lineNumber":378,"oldContent":"        suspend fun requestMissionItemsFromFcu(timeoutMs: Long = 5000): List<MissionItemInt> {"},{"type":"INSERT","lineNumber":372,"content":""},{"type":"INSERT","lineNumber":374,"content":"        suspend fun requestMissionItemsFromFcu(timeoutMs: Long = 5000): List<MissionItemInt> {"},{"type":"DELETE","lineNumber":447,"oldContent":"    }"},{"type":"DELETE","lineNumber":457,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] ARM command sent\")"},{"type":"INSERT","lineNumber":442,"content":"        }"},{"type":"INSERT","lineNumber":443,"content":"    }"},{"type":"DELETE","lineNumber":464,"oldContent":"        val expectedMode = when (customMode) {"},{"type":"DELETE","lineNumber":466,"oldContent":"            3u -> \"Auto\""},{"type":"DELETE","lineNumber":468,"oldContent":"            0u -> \"Stabilize\""},{"type":"DELETE","lineNumber":469,"oldContent":"            5u -> \"Loiter\""},{"type":"INSERT","lineNumber":459,"content":"        val expectedMode = when (customMode) {"},{"type":"INSERT","lineNumber":460,"content":"            3u -> \"Auto\""},{"type":"INSERT","lineNumber":461,"content":"            0u -> \"Stabilize\""},{"type":"INSERT","lineNumber":462,"content":"            5u -> \"Loiter\""},{"type":"DELETE","lineNumber":478,"oldContent":"            delay(200)"},{"type":"DELETE","lineNumber":481,"oldContent":"        Log.e(\"MavlinkRepo\", \"Mode change to ${customMode} not confirmed in Heartbeat\")"},{"type":"INSERT","lineNumber":470,"content":"            delay(200)"},{"type":"INSERT","lineNumber":472,"content":"        Log.e(\"MavlinkRepo\", \"Mode change to ${customMode} not confirmed in Heartbeat\")"},{"type":"DELETE","lineNumber":508,"oldContent":"                        if (ack.command.value == MISSION_CLEAR_ALL_CMD && ack.result.value == MavResult.ACCEPTED.value) {"},{"type":"DELETE","lineNumber":510,"oldContent":"                            Log.i(\"MavlinkRepo\", \"[Mission Upload] MISSION_CLEAR_ALL acknowledged by FCU\")"},{"type":"INSERT","lineNumber":504,"content":"                        if (ack.command.value == MISSION_CLEAR_ALL_CMD && ack.result.value == MavResult.ACCEPTED.value) {"},{"type":"INSERT","lineNumber":505,"content":"                            Log.i(\"MavlinkRepo\", \"[Mission Upload] MISSION_CLEAR_ALL acknowledged by FCU\")"},{"type":"DELETE","lineNumber":575,"oldContent":"}"},{"type":"DELETE","lineNumber":576,"oldContent":"    }"},{"type":"DELETE","lineNumber":577,"oldContent":""},{"type":"DELETE","lineNumber":578,"oldContent":"            Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to set AUTO mode\", e)"},{"type":"DELETE","lineNumber":579,"oldContent":"            val modeChanged = changeMode(MavMode.AUTO)"},{"type":"DELETE","lineNumber":580,"oldContent":""},{"type":"DELETE","lineNumber":581,"oldContent":"            return false"},{"type":"DELETE","lineNumber":582,"oldContent":"            delay(500)"},{"type":"DELETE","lineNumber":583,"oldContent":"            arm()"},{"type":"DELETE","lineNumber":584,"oldContent":"        try {"},{"type":"DELETE","lineNumber":585,"oldContent":""},{"type":"DELETE","lineNumber":586,"oldContent":"            return false"},{"type":"DELETE","lineNumber":587,"oldContent":"        if (!state.value.fcuDetected) {"},{"type":"INSERT","lineNumber":561,"content":"                                    targetSystem = senderSys.toUByte(),"},{"type":"INSERT","lineNumber":562,"content":"                                    targetComponent = senderComp.toUByte(),"},{"type":"INSERT","lineNumber":563,"content":"                                    seq = seq.toUShort()"},{"type":"INSERT","lineNumber":564,"content":"                                )"},{"type":"INSERT","lineNumber":565,"content":"                                try {"},{"type":"INSERT","lineNumber":566,"content":"                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"INSERT","lineNumber":567,"content":"                                    sentSeqs.add(seq)"},{"type":"INSERT","lineNumber":568,"content":"                                    Log.i(\"MavlinkRepo\", \"Sent MISSION_ITEM_INT seq=$seq to sys=$senderSys comp=$senderComp\")"},{"type":"INSERT","lineNumber":569,"content":"                                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":570,"content":"                                    Log.e(\"MavlinkRepo\", \"Failed to send mission item seq=$seq\", e)"},{"type":"INSERT","lineNumber":571,"content":"                                }"},{"type":"INSERT","lineNumber":572,"content":"                            }"},{"type":"INSERT","lineNumber":573,"content":"                            is MissionRequest -> {"},{"type":"DELETE","lineNumber":589,"oldContent":"    /**"},{"type":"DELETE","lineNumber":590,"oldContent":"            delay(200)"},{"type":"DELETE","lineNumber":591,"oldContent":""},{"type":"DELETE","lineNumber":592,"oldContent":"                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":575,"content":"                                firstRequestReceived = true"},{"type":"INSERT","lineNumber":576,"content":"                                val seq = msg.seq.toInt()"},{"type":"INSERT","lineNumber":577,"content":"                                if (seq < 0 || seq >= missionItems.size) {"},{"type":"INSERT","lineNumber":578,"content":"                                    Log.w(\"MavlinkRepo\", \"FC requested invalid seq=$seq (MissionRequest)\")"},{"type":"INSERT","lineNumber":579,"content":"                                    return@collect"},{"type":"INSERT","lineNumber":580,"content":"                                }"},{"type":"INSERT","lineNumber":581,"content":"                                val itemInt = missionItems[seq]"},{"type":"INSERT","lineNumber":582,"content":"                                Log.i(\"MavlinkRepo\", \"[Mission Upload] Sending waypoint seq=$seq: ${itemInt.command} lat=${itemInt.x / 1e7} lon=${itemInt.y / 1e7} alt=${itemInt.z}\")"},{"type":"INSERT","lineNumber":583,"content":"                                val missionItemInt = itemInt.copy("},{"type":"INSERT","lineNumber":584,"content":"                                    targetSystem = senderSys.toUByte(),"},{"type":"INSERT","lineNumber":585,"content":"                                    targetComponent = senderComp.toUByte(),"},{"type":"INSERT","lineNumber":586,"content":"                                    seq = seq.toUShort()"},{"type":"INSERT","lineNumber":587,"content":"                                )"},{"type":"INSERT","lineNumber":588,"content":"                                try {"},{"type":"DELETE","lineNumber":594,"oldContent":"                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, reqItem)"},{"type":"DELETE","lineNumber":596,"oldContent":"                try {"},{"type":"DELETE","lineNumber":598,"oldContent":"                val seqDeferred = CompletableDeferred<Unit>()"},{"type":"DELETE","lineNumber":600,"oldContent":"                                Log.i(\"MavlinkRepo\", \"[Mission Upload] Sending waypoint seq=$seq: ${itemInt.command} lat=${itemInt.x / 1e7} lon=${itemInt.y / 1e7} alt=${itemInt.z}\")"},{"type":"DELETE","lineNumber":602,"oldContent":"            Log.i(\"MavlinkRepo\", \"Expecting $expectedCount mission items - requesting each item\")"},{"type":"DELETE","lineNumber":604,"oldContent":"                return"},{"type":"DELETE","lineNumber":606,"oldContent":"                Log.w(\"MavlinkRepo\", \"Did not receive MISSION_COUNT from FCU within timeout\")"},{"type":"DELETE","lineNumber":608,"oldContent":"            val expectedCount = withTimeoutOrNull(timeoutMs) { expectedCountDeferred.await() } ?: run {"},{"type":"DELETE","lineNumber":609,"oldContent":"                Log.i(\"MavlinkRepo\", \"Sent MISSION_REQUEST_LIST to FCU\")"},{"type":"INSERT","lineNumber":597,"content":"                                Log.i(\"MavlinkRepo\", \"[Mission Upload] Received MISSION_ACK type=${msg.type}\")"},{"type":"DELETE","lineNumber":611,"oldContent":""},{"type":"DELETE","lineNumber":615,"oldContent":"                                Log.i(\"MavlinkRepo\", \"[Mission Upload] Received MISSION_ACK type=${msg.type}\")"},{"type":"DELETE","lineNumber":616,"oldContent":"                delay(100)"},{"type":"INSERT","lineNumber":612,"content":"                delay(100)"},{"type":"DELETE","lineNumber":628,"oldContent":"                        targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":623,"content":"                        targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":639,"oldContent":"                    }"},{"type":"INSERT","lineNumber":634,"content":"                    }"},{"type":"DELETE","lineNumber":670,"oldContent":"            command = MavCmd.MISSION_START.wrap(),"},{"type":"DELETE","lineNumber":671,"oldContent":"            targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":672,"oldContent":"    suspend fun sendMissionStartCommand() {"},{"type":"INSERT","lineNumber":656,"content":"    }"},{"type":"INSERT","lineNumber":657,"content":""},{"type":"INSERT","lineNumber":658,"content":"    suspend fun requestMissionAndLog(timeoutMs: Long = 5000) {"},{"type":"DELETE","lineNumber":674,"oldContent":"                    when (val msg = frame.message) {"},{"type":"INSERT","lineNumber":670,"content":"                    when (val msg = frame.message) {"},{"type":"DELETE","lineNumber":703,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":705,"oldContent":"                Log.e(\"MavlinkRepo\", \"Failed to send MISSION_REQUEST_LIST\", e)"},{"type":"DELETE","lineNumber":707,"oldContent":"            }"},{"type":"DELETE","lineNumber":710,"oldContent":"            val expectedCount = withTimeoutOrNull(timeoutMs) { expectedCountDeferred.await() } ?: run {"},{"type":"DELETE","lineNumber":712,"oldContent":"                Log.w(\"MavlinkRepo\", \"Did not receive MISSION_COUNT from FCU within timeout\")"},{"type":"DELETE","lineNumber":714,"oldContent":"                job.cancel()"},{"type":"INSERT","lineNumber":699,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":700,"content":"                Log.e(\"MavlinkRepo\", \"Failed to send MISSION_REQUEST_LIST\", e)"},{"type":"INSERT","lineNumber":701,"content":"            }"},{"type":"INSERT","lineNumber":703,"content":"            val expectedCount = withTimeoutOrNull(timeoutMs) { expectedCountDeferred.await() } ?: run {"},{"type":"INSERT","lineNumber":704,"content":"                Log.w(\"MavlinkRepo\", \"Did not receive MISSION_COUNT from FCU within timeout\")"},{"type":"INSERT","lineNumber":705,"content":"                job.cancel()"},{"type":"DELETE","lineNumber":722,"oldContent":"                    val reqItem = MissionRequestInt(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = seq.toUShort())"},{"type":"DELETE","lineNumber":723,"oldContent":"                }"},{"type":"INSERT","lineNumber":708,"content":""},{"type":"DELETE","lineNumber":726,"oldContent":"                }"},{"type":"DELETE","lineNumber":731,"oldContent":"                } ?: false"},{"type":"INSERT","lineNumber":715,"content":"                    val reqItem = MissionRequestInt(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = seq.toUShort())"},{"type":"DELETE","lineNumber":733,"oldContent":""},{"type":"DELETE","lineNumber":735,"oldContent":"                if (!got) {"},{"type":"DELETE","lineNumber":737,"oldContent":"                    Log.w(\"MavlinkRepo\", \"Did not receive item for seq=$seq within timeout\")"},{"type":"INSERT","lineNumber":720,"content":"                }"},{"type":"DELETE","lineNumber":741,"oldContent":"            }"},{"type":"DELETE","lineNumber":743,"oldContent":""},{"type":"INSERT","lineNumber":725,"content":"                } ?: false"},{"type":"INSERT","lineNumber":726,"content":""},{"type":"INSERT","lineNumber":727,"content":"                if (!got) {"},{"type":"INSERT","lineNumber":728,"content":"                    Log.w(\"MavlinkRepo\", \"Did not receive item for seq=$seq within timeout\")"},{"type":"INSERT","lineNumber":732,"content":"            }"},{"type":"INSERT","lineNumber":733,"content":""},{"type":"DELETE","lineNumber":750,"oldContent":"     * Start the mission after uploading."},{"type":"DELETE","lineNumber":752,"oldContent":"     * Replicates the Dart/Flutter workflow:"},{"type":"INSERT","lineNumber":745,"content":"     * Start the mission after uploading."},{"type":"INSERT","lineNumber":746,"content":"     * Replicates the Dart/Flutter workflow:"},{"type":"DELETE","lineNumber":768,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":770,"oldContent":"            Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to arm vehicle\", e)"},{"type":"DELETE","lineNumber":776,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"DELETE","lineNumber":779,"oldContent":"            delay(500)"},{"type":"DELETE","lineNumber":781,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":764,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":765,"content":"            Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to arm vehicle\", e)"},{"type":"DELETE","lineNumber":788,"oldContent":"        try {"},{"type":"INSERT","lineNumber":771,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"DELETE","lineNumber":791,"oldContent":"            param6 = 0f,"},{"type":"DELETE","lineNumber":792,"oldContent":"            Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to set AUTO mode\", e)"},{"type":"DELETE","lineNumber":793,"oldContent":"        }"},{"type":"DELETE","lineNumber":794,"oldContent":"                return false"},{"type":"DELETE","lineNumber":795,"oldContent":"            }"},{"type":"DELETE","lineNumber":796,"oldContent":"    }"},{"type":"INSERT","lineNumber":774,"content":"            delay(500)"},{"type":"INSERT","lineNumber":776,"content":"            Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to send MISSION_START command\", e)"},{"type":"INSERT","lineNumber":777,"content":"            return false"},{"type":"INSERT","lineNumber":778,"content":"        }"},{"type":"INSERT","lineNumber":779,"content":""},{"type":"INSERT","lineNumber":781,"content":"        try {"},{"type":"DELETE","lineNumber":800,"oldContent":"     */"},{"type":"INSERT","lineNumber":783,"content":"            val modeChanged = changeMode(MavMode.AUTO)"},{"type":"DELETE","lineNumber":804,"oldContent":"    }"},{"type":"DELETE","lineNumber":806,"oldContent":""},{"type":"DELETE","lineNumber":807,"oldContent":"    /**"},{"type":"DELETE","lineNumber":808,"oldContent":"     * Sends MISSION_START as CommandLong (param1=0, param2=0, ...)"},{"type":"INSERT","lineNumber":788,"content":"                return false"},{"type":"INSERT","lineNumber":789,"content":"            }"},{"type":"INSERT","lineNumber":790,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":814,"oldContent":"            param1 = 0f,"},{"type":"DELETE","lineNumber":815,"oldContent":"            param2 = 0f,"},{"type":"DELETE","lineNumber":817,"oldContent":"            param3 = 0f,"},{"type":"INSERT","lineNumber":797,"content":"    }"},{"type":"INSERT","lineNumber":798,"content":""},{"type":"INSERT","lineNumber":799,"content":"    /**"},{"type":"INSERT","lineNumber":800,"content":"     * Sends MISSION_START as CommandLong (param1=0, param2=0, ...)"},{"type":"DELETE","lineNumber":819,"oldContent":"            param4 = 0f,"},{"type":"DELETE","lineNumber":821,"oldContent":"            param6 = 0f,"},{"type":"INSERT","lineNumber":808,"content":"            param1 = 0f,"},{"type":"INSERT","lineNumber":809,"content":"            param2 = 0f,"},{"type":"INSERT","lineNumber":810,"content":"            param3 = 0f,"},{"type":"INSERT","lineNumber":811,"content":"            param4 = 0f,"},{"type":"INSERT","lineNumber":813,"content":"            param6 = 0f,"}]},{"timestamp":1758276970115,"changes":[{"type":"INSERT","lineNumber":6,"content":"import com.divpundir.mavlink.api.wrap"},{"type":"DELETE","lineNumber":8,"oldContent":"import com.divpundir.mavlink.connection.tcp.TcpClientMavConnection"},{"type":"MODIFY","lineNumber":42,"content":"    val lastFailure: StateFlow<Throwable?> = _lastFailure.asStateFlow()","oldContent":"                try {"},{"type":"MODIFY","lineNumber":59,"content":"            while (scope.isActive) {","oldContent":"        // Manage connection state + reconnects"},{"type":"MODIFY","lineNumber":64,"content":"                } catch (e: Exception) {","oldContent":"                    is StreamState.Active -> {"},{"type":"MODIFY","lineNumber":72,"content":"        // Manage connection state + reconnects","oldContent":"                            Log.i(\"MavlinkRepo\", \"Connection Inactive, reconnecting...\")"},{"type":"MODIFY","lineNumber":80,"content":"                            _state.update { it.copy(connected = true) }","oldContent":""},{"type":"MODIFY","lineNumber":88,"content":"                        }","oldContent":"                mavlinkVersion = 3u"},{"type":"DELETE","lineNumber":98,"oldContent":"                }"},{"type":"DELETE","lineNumber":99,"oldContent":"                delay(1000)"},{"type":"DELETE","lineNumber":100,"oldContent":"            }"},{"type":"DELETE","lineNumber":101,"oldContent":"        }"},{"type":"INSERT","lineNumber":98,"content":"                autopilot = MavAutopilot.INVALID.wrap(),"},{"type":"INSERT","lineNumber":99,"content":"                baseMode = emptyList<MavModeFlag>().wrap(),"},{"type":"INSERT","lineNumber":100,"content":"                customMode = 0u,"},{"type":"INSERT","lineNumber":101,"content":"                mavlinkVersion = 3u"},{"type":"MODIFY","lineNumber":104,"content":"                if (state.value.connected) {","oldContent":"        val mavFrameStream = connection.mavFrame"},{"type":"MODIFY","lineNumber":107,"content":"                    } catch (e: Exception) {","oldContent":"        // Log raw messages"},{"type":"MODIFY","lineNumber":118,"content":"            .shareIn(scope, SharingStarted.Eagerly, replay = 0)","oldContent":"                .collect {"},{"type":"MODIFY","lineNumber":127,"content":"        // Detect FCU","oldContent":"                            suspend fun setMessageRate(messageId: UInt, hz: Float) {"},{"type":"MODIFY","lineNumber":131,"content":"                .collect {","oldContent":"                                    targetComponent = fcuComponentId,"},{"type":"MODIFY","lineNumber":139,"content":"                        launch {","oldContent":"                                    param6 = 0f,"},{"type":"DELETE","lineNumber":155,"oldContent":"                        }"},{"type":"DELETE","lineNumber":156,"oldContent":"                    }"},{"type":"INSERT","lineNumber":155,"content":"                                try {"},{"type":"INSERT","lineNumber":156,"content":"                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, cmd)"},{"type":"INSERT","lineNumber":161,"content":"                            }"},{"type":"DELETE","lineNumber":162,"oldContent":""},{"type":"MODIFY","lineNumber":165,"content":"                            setMessageRate(33u, 5f)  // GLOBAL_POSITION_INT","oldContent":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"MODIFY","lineNumber":174,"content":"        scope.launch {","oldContent":"                        )"},{"type":"MODIFY","lineNumber":176,"content":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }","oldContent":"                }"},{"type":"DELETE","lineNumber":194,"oldContent":"                            latitude = lat,"},{"type":"DELETE","lineNumber":195,"oldContent":"                            longitude = lon"},{"type":"DELETE","lineNumber":196,"oldContent":"                        )"},{"type":"DELETE","lineNumber":197,"oldContent":"                    }"},{"type":"DELETE","lineNumber":198,"oldContent":"                }"},{"type":"INSERT","lineNumber":194,"content":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":195,"content":"                .map { it.message }"},{"type":"INSERT","lineNumber":196,"content":"                .filterIsInstance<VfrHud>()"},{"type":"INSERT","lineNumber":197,"content":"                .collect { hud ->"},{"type":"INSERT","lineNumber":198,"content":"                    _state.update {"},{"type":"MODIFY","lineNumber":201,"content":"                            airspeed = hud.airspeed.takeIf { v -> v > 0f },","oldContent":"        // BATTERY_STATUS"},{"type":"MODIFY","lineNumber":204,"content":"                    }","oldContent":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"MODIFY","lineNumber":206,"content":"        }","oldContent":"                .filterIsInstance<BatteryStatus>()"},{"type":"INSERT","lineNumber":285,"content":"                        4u -> \"Guided\""},{"type":"INSERT","lineNumber":286,"content":"                        5u -> \"Loiter\""},{"type":"DELETE","lineNumber":288,"oldContent":"                        9u -> \"Land\""},{"type":"DELETE","lineNumber":289,"oldContent":"                        5u -> \"Loiter\""},{"type":"MODIFY","lineNumber":312,"content":"                        if (mode.equals(\"Auto\", ignoreCase = true) && armed && (lastMode != mode || lastArmed != armed)) {","oldContent":"                        if (mode.equals(\"Auto\", ignoreCase = true) && armed && (lastMode != mode || lastArmed != armed)) {"},{"type":"INSERT","lineNumber":319,"content":"                                    elapsed += 1"},{"type":"INSERT","lineNumber":320,"content":"                                    _state.update { it.copy(missionElapsedSec = elapsed) }"},{"type":"INSERT","lineNumber":321,"content":"                                }"},{"type":"DELETE","lineNumber":321,"oldContent":"                                    elapsed += 1"},{"type":"DELETE","lineNumber":324,"oldContent":"                                    _state.update { it.copy(missionElapsedSec = elapsed) }"},{"type":"DELETE","lineNumber":325,"oldContent":"                                }"},{"type":"DELETE","lineNumber":326,"oldContent":"                            // Do NOT clear mission from FCU here"},{"type":"INSERT","lineNumber":332,"content":"                            // Do NOT clear mission from FCU here"},{"type":"DELETE","lineNumber":358,"oldContent":""},{"type":"DELETE","lineNumber":361,"oldContent":"        suspend fun requestMissionItemsFromFcu(timeoutMs: Long = 5000): List<MissionItemInt> {"},{"type":"INSERT","lineNumber":372,"content":""},{"type":"INSERT","lineNumber":374,"content":"        suspend fun requestMissionItemsFromFcu(timeoutMs: Long = 5000): List<MissionItemInt> {"},{"type":"DELETE","lineNumber":428,"oldContent":"        }"},{"type":"DELETE","lineNumber":430,"oldContent":"    }"},{"type":"INSERT","lineNumber":442,"content":"        }"},{"type":"INSERT","lineNumber":443,"content":"    }"},{"type":"DELETE","lineNumber":445,"oldContent":"        val expectedMode = when (customMode) {"},{"type":"DELETE","lineNumber":447,"oldContent":"            3u -> \"Auto\""},{"type":"DELETE","lineNumber":449,"oldContent":"            0u -> \"Stabilize\""},{"type":"DELETE","lineNumber":451,"oldContent":"            5u -> \"Loiter\""},{"type":"DELETE","lineNumber":456,"oldContent":"            delay(200)"},{"type":"MODIFY","lineNumber":459,"content":"        val expectedMode = when (customMode) {","oldContent":"        Log.e(\"MavlinkRepo\", \"Mode change to ${customMode} not confirmed in Heartbeat\")"},{"type":"INSERT","lineNumber":460,"content":"            3u -> \"Auto\""},{"type":"INSERT","lineNumber":461,"content":"            0u -> \"Stabilize\""},{"type":"INSERT","lineNumber":462,"content":"            5u -> \"Loiter\""},{"type":"INSERT","lineNumber":470,"content":"            delay(200)"},{"type":"INSERT","lineNumber":472,"content":"        Log.e(\"MavlinkRepo\", \"Mode change to ${customMode} not confirmed in Heartbeat\")"},{"type":"DELETE","lineNumber":490,"oldContent":"                        if (ack.command.value == MISSION_CLEAR_ALL_CMD && ack.result.value == MavResult.ACCEPTED.value) {"},{"type":"DELETE","lineNumber":492,"oldContent":"                            Log.i(\"MavlinkRepo\", \"[Mission Upload] MISSION_CLEAR_ALL acknowledged by FCU\")"},{"type":"INSERT","lineNumber":504,"content":"                        if (ack.command.value == MISSION_CLEAR_ALL_CMD && ack.result.value == MavResult.ACCEPTED.value) {"},{"type":"INSERT","lineNumber":505,"content":"                            Log.i(\"MavlinkRepo\", \"[Mission Upload] MISSION_CLEAR_ALL acknowledged by FCU\")"},{"type":"DELETE","lineNumber":545,"oldContent":"                perSeqMap[seq] = seqDeferred"},{"type":"DELETE","lineNumber":546,"oldContent":"            for (seq in 0 until expectedCount) {"},{"type":"INSERT","lineNumber":545,"content":"                connection.mavFrame"},{"type":"INSERT","lineNumber":546,"content":"                    .collect { frame ->"},{"type":"INSERT","lineNumber":547,"content":"                        val senderSys = frame.systemId"},{"type":"INSERT","lineNumber":548,"content":"                        val senderComp = frame.componentId"},{"type":"INSERT","lineNumber":549,"content":"                        when (val msg = frame.message) {"},{"type":"INSERT","lineNumber":550,"content":"                            is MissionRequestInt -> {"},{"type":"INSERT","lineNumber":551,"content":"                                Log.d(\"MavlinkRepo\", \"[Mission Upload] Received MissionRequestInt seq=${msg.seq}\")"},{"type":"INSERT","lineNumber":552,"content":"                                firstRequestReceived = true"},{"type":"INSERT","lineNumber":553,"content":"                                val seq = msg.seq.toInt()"},{"type":"INSERT","lineNumber":554,"content":"                                if (seq < 0 || seq >= missionItems.size) {"},{"type":"INSERT","lineNumber":555,"content":"                                    Log.w(\"MavlinkRepo\", \"FC requested invalid seq=$seq (MissionRequestInt)\")"},{"type":"INSERT","lineNumber":556,"content":"                                    return@collect"},{"type":"INSERT","lineNumber":557,"content":"                                }"},{"type":"INSERT","lineNumber":558,"content":"                                val item = missionItems[seq]"},{"type":"INSERT","lineNumber":559,"content":"                                Log.i(\"MavlinkRepo\", \"[Mission Upload] Sending waypoint seq=$seq: ${item.command} lat=${item.x / 1e7} lon=${item.y / 1e7} alt=${item.z}\")"},{"type":"INSERT","lineNumber":560,"content":"                                val missionItem = item.copy("},{"type":"DELETE","lineNumber":548,"oldContent":"            Log.i(\"MavlinkRepo\", \"Expecting $expectedCount mission items - requesting each item\")"},{"type":"DELETE","lineNumber":550,"oldContent":"                job.cancel()"},{"type":"DELETE","lineNumber":552,"oldContent":"                Log.w(\"MavlinkRepo\", \"Did not receive MISSION_COUNT from FCU within timeout\")"},{"type":"DELETE","lineNumber":554,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":556,"oldContent":"                                Log.d(\"MavlinkRepo\", \"[Mission Upload] Received MissionRequestInt seq=${msg.seq}\")"},{"type":"DELETE","lineNumber":558,"oldContent":"                connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, req)"},{"type":"DELETE","lineNumber":560,"oldContent":""},{"type":"DELETE","lineNumber":562,"oldContent":"            val expectedCountDeferred = CompletableDeferred<Int?>()"},{"type":"DELETE","lineNumber":564,"oldContent":"            val received = mutableListOf<Pair<Int, String>>()"},{"type":"DELETE","lineNumber":566,"oldContent":"        }"},{"type":"DELETE","lineNumber":568,"oldContent":"            return"},{"type":"DELETE","lineNumber":570,"oldContent":"        if (!state.value.fcuDetected) {"},{"type":"DELETE","lineNumber":572,"oldContent":"                                Log.i(\"MavlinkRepo\", \"[Mission Upload] Sending waypoint seq=$seq: ${item.command} lat=${item.x / 1e7} lon=${item.y / 1e7} alt=${item.z}\")"},{"type":"DELETE","lineNumber":573,"oldContent":"    }"},{"type":"INSERT","lineNumber":574,"content":"                                Log.d(\"MavlinkRepo\", \"[Mission Upload] Received MissionRequest seq=${msg.seq}\")"},{"type":"DELETE","lineNumber":588,"oldContent":"                                Log.d(\"MavlinkRepo\", \"[Mission Upload] Received MissionRequest seq=${msg.seq}\")"},{"type":"DELETE","lineNumber":591,"oldContent":"                                Log.i(\"MavlinkRepo\", \"[Mission Upload] Received MISSION_ACK type=${msg.type}\")"},{"type":"INSERT","lineNumber":597,"content":"                                Log.i(\"MavlinkRepo\", \"[Mission Upload] Received MISSION_ACK type=${msg.type}\")"},{"type":"DELETE","lineNumber":599,"oldContent":"                delay(100)"},{"type":"DELETE","lineNumber":609,"oldContent":"                        targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":612,"content":"                delay(100)"},{"type":"DELETE","lineNumber":620,"oldContent":"                    }"},{"type":"INSERT","lineNumber":623,"content":"                        targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":634,"content":"                    }"},{"type":"DELETE","lineNumber":642,"oldContent":"    }"},{"type":"DELETE","lineNumber":644,"oldContent":""},{"type":"DELETE","lineNumber":646,"oldContent":"    suspend fun requestMissionAndLog(timeoutMs: Long = 5000) {"},{"type":"DELETE","lineNumber":659,"oldContent":"                    when (val msg = frame.message) {"},{"type":"INSERT","lineNumber":656,"content":"    }"},{"type":"INSERT","lineNumber":657,"content":""},{"type":"INSERT","lineNumber":658,"content":"    suspend fun requestMissionAndLog(timeoutMs: Long = 5000) {"},{"type":"INSERT","lineNumber":670,"content":"                    when (val msg = frame.message) {"},{"type":"DELETE","lineNumber":685,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":687,"oldContent":"                Log.e(\"MavlinkRepo\", \"Failed to send MISSION_REQUEST_LIST\", e)"},{"type":"DELETE","lineNumber":689,"oldContent":"            }"},{"type":"DELETE","lineNumber":691,"oldContent":"    }"},{"type":"DELETE","lineNumber":692,"oldContent":"            val expectedCount = withTimeoutOrNull(timeoutMs) { expectedCountDeferred.await() } ?: run {"},{"type":"DELETE","lineNumber":693,"oldContent":"                Log.w(\"MavlinkRepo\", \"Did not receive MISSION_COUNT from FCU within timeout\")"},{"type":"DELETE","lineNumber":694,"oldContent":"            }"},{"type":"DELETE","lineNumber":695,"oldContent":"                job.cancel()"},{"type":"DELETE","lineNumber":696,"oldContent":"                }"},{"type":"DELETE","lineNumber":697,"oldContent":""},{"type":"DELETE","lineNumber":698,"oldContent":"                    else -> {}"},{"type":"INSERT","lineNumber":688,"content":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_ACK type=${msg.type}\")"},{"type":"INSERT","lineNumber":689,"content":"                        }"},{"type":"INSERT","lineNumber":690,"content":"                        else -> {}"},{"type":"INSERT","lineNumber":692,"content":"                }"},{"type":"DELETE","lineNumber":702,"oldContent":"                    val reqItem = MissionRequestInt(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = seq.toUShort())"},{"type":"INSERT","lineNumber":699,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":700,"content":"                Log.e(\"MavlinkRepo\", \"Failed to send MISSION_REQUEST_LIST\", e)"},{"type":"INSERT","lineNumber":701,"content":"            }"},{"type":"DELETE","lineNumber":708,"oldContent":"                }"},{"type":"INSERT","lineNumber":703,"content":"            val expectedCount = withTimeoutOrNull(timeoutMs) { expectedCountDeferred.await() } ?: run {"},{"type":"INSERT","lineNumber":704,"content":"                Log.w(\"MavlinkRepo\", \"Did not receive MISSION_COUNT from FCU within timeout\")"},{"type":"INSERT","lineNumber":705,"content":"                job.cancel()"},{"type":"INSERT","lineNumber":708,"content":""},{"type":"DELETE","lineNumber":712,"oldContent":"                } ?: false"},{"type":"DELETE","lineNumber":714,"oldContent":""},{"type":"DELETE","lineNumber":715,"oldContent":"                if (!got) {"},{"type":"DELETE","lineNumber":717,"oldContent":"                    Log.w(\"MavlinkRepo\", \"Did not receive item for seq=$seq within timeout\")"},{"type":"DELETE","lineNumber":721,"oldContent":"            }"},{"type":"INSERT","lineNumber":715,"content":"                    val reqItem = MissionRequestInt(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = seq.toUShort())"},{"type":"DELETE","lineNumber":723,"oldContent":""},{"type":"INSERT","lineNumber":720,"content":"                }"},{"type":"DELETE","lineNumber":731,"oldContent":"     * Start the mission after uploading."},{"type":"INSERT","lineNumber":725,"content":"                } ?: false"},{"type":"INSERT","lineNumber":726,"content":""},{"type":"INSERT","lineNumber":727,"content":"                if (!got) {"},{"type":"INSERT","lineNumber":728,"content":"                    Log.w(\"MavlinkRepo\", \"Did not receive item for seq=$seq within timeout\")"},{"type":"DELETE","lineNumber":733,"oldContent":"     * Replicates the Dart/Flutter workflow:"},{"type":"INSERT","lineNumber":732,"content":"            }"},{"type":"INSERT","lineNumber":733,"content":""},{"type":"INSERT","lineNumber":745,"content":"     * Start the mission after uploading."},{"type":"INSERT","lineNumber":746,"content":"     * Replicates the Dart/Flutter workflow:"},{"type":"DELETE","lineNumber":750,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":752,"oldContent":"            Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to arm vehicle\", e)"},{"type":"DELETE","lineNumber":757,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"DELETE","lineNumber":761,"oldContent":"            delay(500)"},{"type":"DELETE","lineNumber":764,"oldContent":"            Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to send MISSION_START command\", e)"},{"type":"DELETE","lineNumber":765,"oldContent":"            return false"},{"type":"DELETE","lineNumber":767,"oldContent":"        }"},{"type":"DELETE","lineNumber":769,"oldContent":""},{"type":"DELETE","lineNumber":771,"oldContent":"        try {"},{"type":"DELETE","lineNumber":773,"oldContent":"            val modeChanged = changeMode(MavMode.AUTO)"},{"type":"INSERT","lineNumber":764,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":765,"content":"            Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to arm vehicle\", e)"},{"type":"DELETE","lineNumber":779,"oldContent":"                return false"},{"type":"DELETE","lineNumber":780,"oldContent":"            }"},{"type":"INSERT","lineNumber":771,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"INSERT","lineNumber":773,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Start] MISSION_START command sent\")"},{"type":"INSERT","lineNumber":774,"content":"            delay(500)"},{"type":"DELETE","lineNumber":783,"oldContent":"        sendCommand(MavCmd.COMPONENT_ARM_DISARM, if (arm) 1f else 0f)"},{"type":"DELETE","lineNumber":784,"oldContent":"    }"},{"type":"DELETE","lineNumber":785,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":776,"content":"            Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to send MISSION_START command\", e)"},{"type":"INSERT","lineNumber":777,"content":"            return false"},{"type":"INSERT","lineNumber":778,"content":"        }"},{"type":"DELETE","lineNumber":788,"oldContent":"    /**"},{"type":"INSERT","lineNumber":781,"content":"        try {"},{"type":"DELETE","lineNumber":790,"oldContent":"     * Sends MISSION_START as CommandLong (param1=0, param2=0, ...)"},{"type":"INSERT","lineNumber":783,"content":"            val modeChanged = changeMode(MavMode.AUTO)"},{"type":"DELETE","lineNumber":795,"oldContent":"            param1 = 0f,"},{"type":"DELETE","lineNumber":796,"oldContent":"            param2 = 0f,"},{"type":"INSERT","lineNumber":788,"content":"                return false"},{"type":"INSERT","lineNumber":789,"content":"            }"},{"type":"INSERT","lineNumber":790,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":798,"oldContent":"            param3 = 0f,"},{"type":"DELETE","lineNumber":800,"oldContent":"            param4 = 0f,"},{"type":"DELETE","lineNumber":803,"oldContent":"            param6 = 0f,"},{"type":"INSERT","lineNumber":797,"content":"    }"},{"type":"INSERT","lineNumber":798,"content":""},{"type":"INSERT","lineNumber":799,"content":"    /**"},{"type":"INSERT","lineNumber":800,"content":"     * Sends MISSION_START as CommandLong (param1=0, param2=0, ...)"},{"type":"INSERT","lineNumber":808,"content":"            param1 = 0f,"},{"type":"INSERT","lineNumber":809,"content":"            param2 = 0f,"},{"type":"INSERT","lineNumber":810,"content":"            param3 = 0f,"},{"type":"INSERT","lineNumber":811,"content":"            param4 = 0f,"},{"type":"INSERT","lineNumber":813,"content":"            param6 = 0f,"},{"type":"MODIFY","lineNumber":818,"content":"","oldContent":"            param6 = 0f,"},{"type":"INSERT","lineNumber":819,"content":"    fun closeConnection() {"},{"type":"INSERT","lineNumber":820,"content":"        try {"},{"type":"INSERT","lineNumber":821,"content":"            // Attempt to close the TCP connection gracefully"},{"type":"INSERT","lineNumber":822,"content":"            connection.close()"},{"type":"INSERT","lineNumber":823,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":824,"content":"            Log.e(\"MavlinkRepo\", \"Error closing TCP connection\", e)"},{"type":"INSERT","lineNumber":825,"content":"        }"},{"type":"INSERT","lineNumber":826,"content":"    }"},{"type":"INSERT","lineNumber":827,"content":""},{"type":"INSERT","lineNumber":837,"content":"        return (R * c).toFloat()"},{"type":"DELETE","lineNumber":829,"oldContent":"            param4 = 0f,"},{"type":"INSERT","lineNumber":839,"content":"}"},{"type":"INSERT","lineNumber":840,"content":""},{"type":"INSERT","lineNumber":841,"content":""}]},{"timestamp":1758276991562,"changes":[{"type":"MODIFY","lineNumber":32,"content":"    private val gcsSystemId: UByte = 255u","oldContent":"    val lastFailure: StateFlow<Throwable?> = _lastFailure.asStateFlow()"},{"type":"MODIFY","lineNumber":46,"content":"","oldContent":"                } catch (e: Exception) {"},{"type":"MODIFY","lineNumber":61,"content":"                    if (connection.tryConnect(scope)) {","oldContent":"            reconnect(this) // Initial connection attempt"},{"type":"MODIFY","lineNumber":68,"content":"                delay(1000)","oldContent":"                        }"},{"type":"DELETE","lineNumber":94,"oldContent":"                    } catch (e: Exception) {"},{"type":"DELETE","lineNumber":95,"oldContent":"                        Log.e(\"MavlinkRepo\", \"Failed to send heartbeat\", e)"},{"type":"DELETE","lineNumber":96,"oldContent":"                        _lastFailure.value = e"},{"type":"INSERT","lineNumber":94,"content":"        // Send GCS heartbeat"},{"type":"INSERT","lineNumber":95,"content":"        scope.launch {"},{"type":"INSERT","lineNumber":96,"content":"            val heartbeat = Heartbeat("},{"type":"MODIFY","lineNumber":105,"content":"                    try {","oldContent":"            .shareIn(scope, SharingStarted.Eagerly, replay = 0)"},{"type":"MODIFY","lineNumber":124,"content":"            }","oldContent":""},{"type":"MODIFY","lineNumber":138,"content":"                        // Set message intervals","oldContent":"                                    param5 = 0f,"},{"type":"MODIFY","lineNumber":160,"content":"                                }","oldContent":"        // Collectors"},{"type":"MODIFY","lineNumber":177,"content":"                .map { it.message }","oldContent":"        }"},{"type":"DELETE","lineNumber":186,"oldContent":"                    val altAMSLm = gp.alt / 1000f"},{"type":"DELETE","lineNumber":187,"oldContent":"                    val relAltM = gp.relativeAlt / 1000f"},{"type":"DELETE","lineNumber":188,"oldContent":"                    val lat = gp.lat.takeIf { it != Int.MIN_VALUE }?.let { it / 10_000_000.0 }"},{"type":"DELETE","lineNumber":189,"oldContent":"                    val lon = gp.lon.takeIf { it != Int.MIN_VALUE }?.let { it / 10_000_000.0 }"},{"type":"INSERT","lineNumber":186,"content":"                        Log.i(\"MavlinkRepo\", \"COMMAND_ACK received (unable to stringify fields)\")"},{"type":"INSERT","lineNumber":187,"content":"                    }"},{"type":"INSERT","lineNumber":188,"content":"                }"},{"type":"INSERT","lineNumber":189,"content":"        }"},{"type":"MODIFY","lineNumber":199,"content":"                        it.copy(","oldContent":"        }"},{"type":"MODIFY","lineNumber":207,"content":"","oldContent":"                .collect { b ->"},{"type":"MODIFY","lineNumber":287,"content":"                        6u -> \"RTL\"","oldContent":"                        6u -> \"RTL\""},{"type":"DELETE","lineNumber":299,"oldContent":""},{"type":"DELETE","lineNumber":300,"oldContent":"        // GPS_RAW_INT"},{"type":"DELETE","lineNumber":301,"oldContent":"        scope.launch {"},{"type":"DELETE","lineNumber":302,"oldContent":"            mavFrameStream"},{"type":"INSERT","lineNumber":299,"content":"                        21u -> \"Smart_RTL\""},{"type":"INSERT","lineNumber":300,"content":"                        22u -> \"FlowHold\""},{"type":"INSERT","lineNumber":301,"content":"                        23u -> \"Follow\""},{"type":"INSERT","lineNumber":302,"content":"                        24u -> \"ZigZag\""},{"type":"INSERT","lineNumber":311,"content":"                    if (lastMode != mode || lastArmed != armed) {"},{"type":"DELETE","lineNumber":312,"oldContent":"                        if (mode.equals(\"Auto\", ignoreCase = true) && armed && (lastMode != mode || lastArmed != armed)) {"},{"type":"DELETE","lineNumber":320,"oldContent":"                                // Mission ended"},{"type":"MODIFY","lineNumber":322,"content":"                                // Mission ended","oldContent":"                                _state.update { it.copy(missionElapsedSec = null, missionCompleted = true) }"},{"type":"INSERT","lineNumber":323,"content":"                                _state.update { it.copy(missionElapsedSec = null, missionCompleted = true) }"},{"type":"MODIFY","lineNumber":332,"content":"                            // Do NOT clear mission from FCU here","oldContent":"                            // Do NOT clear mission from FCU here"},{"type":"MODIFY","lineNumber":355,"content":"        }","oldContent":"                                )"},{"type":"DELETE","lineNumber":370,"oldContent":""},{"type":"DELETE","lineNumber":373,"oldContent":"        suspend fun requestMissionItemsFromFcu(timeoutMs: Long = 5000): List<MissionItemInt> {"},{"type":"INSERT","lineNumber":372,"content":""},{"type":"INSERT","lineNumber":374,"content":"        suspend fun requestMissionItemsFromFcu(timeoutMs: Long = 5000): List<MissionItemInt> {"},{"type":"DELETE","lineNumber":440,"oldContent":"        }"},{"type":"MODIFY","lineNumber":442,"content":"        }","oldContent":"    }"},{"type":"INSERT","lineNumber":443,"content":"    }"},{"type":"DELETE","lineNumber":454,"oldContent":"        val expectedMode = when (customMode) {"},{"type":"DELETE","lineNumber":455,"oldContent":"            3u -> \"Auto\""},{"type":"DELETE","lineNumber":457,"oldContent":"            0u -> \"Stabilize\""},{"type":"MODIFY","lineNumber":459,"content":"        val expectedMode = when (customMode) {","oldContent":"            5u -> \"Loiter\""},{"type":"INSERT","lineNumber":460,"content":"            3u -> \"Auto\""},{"type":"INSERT","lineNumber":461,"content":"            0u -> \"Stabilize\""},{"type":"INSERT","lineNumber":462,"content":"            5u -> \"Loiter\""},{"type":"DELETE","lineNumber":468,"oldContent":"            delay(200)"},{"type":"DELETE","lineNumber":471,"oldContent":"        Log.e(\"MavlinkRepo\", \"Mode change to ${customMode} not confirmed in Heartbeat\")"},{"type":"INSERT","lineNumber":470,"content":"            delay(200)"},{"type":"INSERT","lineNumber":472,"content":"        Log.e(\"MavlinkRepo\", \"Mode change to ${customMode} not confirmed in Heartbeat\")"},{"type":"DELETE","lineNumber":502,"oldContent":"                        if (ack.command.value == MISSION_CLEAR_ALL_CMD && ack.result.value == MavResult.ACCEPTED.value) {"},{"type":"MODIFY","lineNumber":504,"content":"                        if (ack.command.value == MISSION_CLEAR_ALL_CMD && ack.result.value == MavResult.ACCEPTED.value) {","oldContent":"                            Log.i(\"MavlinkRepo\", \"[Mission Upload] MISSION_CLEAR_ALL acknowledged by FCU\")"},{"type":"INSERT","lineNumber":505,"content":"                            Log.i(\"MavlinkRepo\", \"[Mission Upload] MISSION_CLEAR_ALL acknowledged by FCU\")"},{"type":"INSERT","lineNumber":526,"content":"            val ackDeferred = CompletableDeferred<Boolean>()"},{"type":"INSERT","lineNumber":527,"content":"            val sentSeqs = mutableSetOf<Int>()"},{"type":"INSERT","lineNumber":528,"content":"            var firstRequestReceived = false"},{"type":"DELETE","lineNumber":527,"oldContent":"        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, cmd)"},{"type":"DELETE","lineNumber":528,"oldContent":"            param7 = 0f"},{"type":"DELETE","lineNumber":529,"oldContent":"    }"},{"type":"INSERT","lineNumber":530,"content":"            // Resend MISSION_COUNT periodically until first request or timeout"},{"type":"INSERT","lineNumber":531,"content":"            val resendJob = AppScope.launch {"},{"type":"INSERT","lineNumber":532,"content":"                while (isActive && !firstRequestReceived && !ackDeferred.isCompleted) {"},{"type":"INSERT","lineNumber":533,"content":"                    try {"},{"type":"INSERT","lineNumber":534,"content":"                        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionCount)"},{"type":"INSERT","lineNumber":535,"content":"                        Log.d(\"MavlinkRepo\", \"Resent MISSION_COUNT\")"},{"type":"INSERT","lineNumber":536,"content":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":537,"content":"                        Log.e(\"MavlinkRepo\", \"Failed to resend MISSION_COUNT\", e)"},{"type":"INSERT","lineNumber":538,"content":"                    }"},{"type":"INSERT","lineNumber":539,"content":"                    delay(700)"},{"type":"INSERT","lineNumber":540,"content":"                }"},{"type":"INSERT","lineNumber":541,"content":"            }"},{"type":"DELETE","lineNumber":531,"oldContent":"                Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to switch to AUTO mode\")"},{"type":"DELETE","lineNumber":532,"oldContent":"        // Step 3: Set mode to AUTO"},{"type":"DELETE","lineNumber":533,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":534,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":535,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] ARM command sent\")"},{"type":"DELETE","lineNumber":536,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending ARM command...\")"},{"type":"DELETE","lineNumber":537,"oldContent":"        // Step 1: Arm the vehicle"},{"type":"DELETE","lineNumber":538,"oldContent":""},{"type":"DELETE","lineNumber":539,"oldContent":"            return false"},{"type":"DELETE","lineNumber":540,"oldContent":"            Log.w(\"MavlinkRepo\", \"[Mission Start] Cannot start mission - FCU not detected\")"},{"type":"DELETE","lineNumber":541,"oldContent":"        Log.i(\"MavlinkRepo\", \"[Mission Start] Initiating mission start workflow...\")"},{"type":"DELETE","lineNumber":542,"oldContent":"    /**"},{"type":"DELETE","lineNumber":543,"oldContent":"    }"},{"type":"DELETE","lineNumber":544,"oldContent":"                perSeqMap.remove(seq)"},{"type":"INSERT","lineNumber":543,"content":"            // Collector job"},{"type":"INSERT","lineNumber":544,"content":"            val job = AppScope.launch {"},{"type":"DELETE","lineNumber":548,"oldContent":"                                    targetSystem = senderSys.toUByte(),"},{"type":"DELETE","lineNumber":551,"oldContent":"                                    targetComponent = senderComp.toUByte(),"},{"type":"DELETE","lineNumber":554,"oldContent":"                                    seq = seq.toUShort()"},{"type":"DELETE","lineNumber":557,"oldContent":"                                )"},{"type":"DELETE","lineNumber":560,"oldContent":"                                try {"},{"type":"DELETE","lineNumber":563,"oldContent":"                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"DELETE","lineNumber":566,"oldContent":"                                    sentSeqs.add(seq)"},{"type":"INSERT","lineNumber":561,"content":"                                    targetSystem = senderSys.toUByte(),"},{"type":"INSERT","lineNumber":562,"content":"                                    targetComponent = senderComp.toUByte(),"},{"type":"INSERT","lineNumber":563,"content":"                                    seq = seq.toUShort()"},{"type":"INSERT","lineNumber":564,"content":"                                )"},{"type":"INSERT","lineNumber":565,"content":"                                try {"},{"type":"INSERT","lineNumber":566,"content":"                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"INSERT","lineNumber":567,"content":"                                    sentSeqs.add(seq)"},{"type":"MODIFY","lineNumber":597,"content":"                                Log.i(\"MavlinkRepo\", \"[Mission Upload] Received MISSION_ACK type=${msg.type}\")","oldContent":"                                Log.i(\"MavlinkRepo\", \"[Mission Upload] Received MISSION_ACK type=${msg.type}\")"},{"type":"DELETE","lineNumber":610,"oldContent":"                delay(100)"},{"type":"INSERT","lineNumber":612,"content":"                delay(100)"},{"type":"DELETE","lineNumber":621,"oldContent":"                        targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":623,"content":"                        targetComponent = fcuComponentId,"},{"type":"MODIFY","lineNumber":634,"content":"                    }","oldContent":"                    }"},{"type":"DELETE","lineNumber":653,"oldContent":"    }"},{"type":"DELETE","lineNumber":655,"oldContent":""},{"type":"DELETE","lineNumber":657,"oldContent":"    suspend fun requestMissionAndLog(timeoutMs: Long = 5000) {"},{"type":"INSERT","lineNumber":656,"content":"    }"},{"type":"INSERT","lineNumber":657,"content":""},{"type":"INSERT","lineNumber":658,"content":"    suspend fun requestMissionAndLog(timeoutMs: Long = 5000) {"},{"type":"MODIFY","lineNumber":670,"content":"                    when (val msg = frame.message) {","oldContent":"                    when (val msg = frame.message) {"},{"type":"DELETE","lineNumber":673,"oldContent":"                                }"},{"type":"DELETE","lineNumber":674,"oldContent":"                                    }"},{"type":"DELETE","lineNumber":675,"oldContent":"                                    } else {"},{"type":"DELETE","lineNumber":676,"oldContent":"                                        sendCommand(MavCmd.COMPONENT_ARM_DISARM, 0f)"},{"type":"DELETE","lineNumber":677,"oldContent":"                                    if (state.value.armed) {"},{"type":"DELETE","lineNumber":678,"oldContent":"                                    }"},{"type":"DELETE","lineNumber":679,"oldContent":"                                        delay(1000)"},{"type":"DELETE","lineNumber":680,"oldContent":"                                    while (state.value.armed && waitTime < maxWait) {"},{"type":"DELETE","lineNumber":681,"oldContent":"                                    var waitTime = 0L"},{"type":"DELETE","lineNumber":682,"oldContent":"                                    // Wait for disarm (or altitude near zero)"},{"type":"INSERT","lineNumber":673,"content":"                            expectedCountDeferred.complete(msg.count.toInt())"},{"type":"INSERT","lineNumber":674,"content":"                        }"},{"type":"INSERT","lineNumber":675,"content":"                        is MissionItemInt -> {"},{"type":"INSERT","lineNumber":676,"content":"                            val lat = msg.x / 1e7"},{"type":"INSERT","lineNumber":677,"content":"                            val lon = msg.y / 1e7"},{"type":"INSERT","lineNumber":678,"content":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_ITEM_INT seq=${msg.seq} lat=$lat lon=$lon alt=${msg.z}\")"},{"type":"INSERT","lineNumber":679,"content":"                            received.add(msg.seq.toInt() to \"INT: lat=$lat lon=$lon alt=${msg.z}\")"},{"type":"INSERT","lineNumber":680,"content":"                            perSeqMap[msg.seq.toInt()]?.let { d -> if (!d.isCompleted) d.complete(Unit) }"},{"type":"INSERT","lineNumber":681,"content":"                        }"},{"type":"INSERT","lineNumber":682,"content":"                        is MissionItem -> {"},{"type":"DELETE","lineNumber":684,"oldContent":"                                launch {"},{"type":"DELETE","lineNumber":685,"oldContent":"                                Log.i(\"MavlinkRepo\", \"Last mission item reached (LAND), switching to LAND mode...\")"},{"type":"INSERT","lineNumber":684,"content":"                            received.add(msg.seq.toInt() to \"FLT: x=${msg.x} y=${msg.y} z=${msg.z}\")"},{"type":"INSERT","lineNumber":685,"content":"                            perSeqMap[msg.seq.toInt()]?.let { d -> if (!d.isCompleted) d.complete(Unit) }"},{"type":"INSERT","lineNumber":686,"content":"                        }"},{"type":"INSERT","lineNumber":687,"content":"                        is MissionAck -> {"},{"type":"DELETE","lineNumber":687,"oldContent":"                            if (lastMissionCmd == null || lastMissionCmd == MavCmd.NAV_LAND.value) {"},{"type":"DELETE","lineNumber":690,"oldContent":"                            // For now, assume last item is LAND if lastMissionCmd == MavCmd.NAV_LAND.value"},{"type":"INSERT","lineNumber":691,"content":"                    }"},{"type":"DELETE","lineNumber":692,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":693,"oldContent":"                        Log.i(\"MavlinkRepo\", \"MISSION_ITEM_REACHED seq=$reachedSeq\")"},{"type":"DELETE","lineNumber":694,"oldContent":"                Log.e(\"MavlinkRepo\", \"Failed to send MISSION_REQUEST_LIST\", e)"},{"type":"DELETE","lineNumber":696,"oldContent":"            }"},{"type":"DELETE","lineNumber":698,"oldContent":"            val expectedCount = withTimeoutOrNull(timeoutMs) { expectedCountDeferred.await() } ?: run {"},{"type":"DELETE","lineNumber":700,"oldContent":"                Log.w(\"MavlinkRepo\", \"Did not receive MISSION_COUNT from FCU within timeout\")"},{"type":"DELETE","lineNumber":702,"oldContent":"                job.cancel()"},{"type":"INSERT","lineNumber":699,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":700,"content":"                Log.e(\"MavlinkRepo\", \"Failed to send MISSION_REQUEST_LIST\", e)"},{"type":"INSERT","lineNumber":701,"content":"            }"},{"type":"DELETE","lineNumber":706,"oldContent":""},{"type":"INSERT","lineNumber":703,"content":"            val expectedCount = withTimeoutOrNull(timeoutMs) { expectedCountDeferred.await() } ?: run {"},{"type":"INSERT","lineNumber":704,"content":"                Log.w(\"MavlinkRepo\", \"Did not receive MISSION_COUNT from FCU within timeout\")"},{"type":"INSERT","lineNumber":705,"content":"                job.cancel()"},{"type":"INSERT","lineNumber":708,"content":""},{"type":"DELETE","lineNumber":711,"oldContent":"                    val reqItem = MissionRequestInt(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = seq.toUShort())"},{"type":"MODIFY","lineNumber":715,"content":"                    val reqItem = MissionRequestInt(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = seq.toUShort())","oldContent":"                }"},{"type":"DELETE","lineNumber":719,"oldContent":"                } ?: false"},{"type":"DELETE","lineNumber":721,"oldContent":""},{"type":"DELETE","lineNumber":723,"oldContent":"                if (!got) {"},{"type":"INSERT","lineNumber":720,"content":"                }"},{"type":"DELETE","lineNumber":725,"oldContent":"                    Log.w(\"MavlinkRepo\", \"Did not receive item for seq=$seq within timeout\")"},{"type":"DELETE","lineNumber":729,"oldContent":"            }"},{"type":"INSERT","lineNumber":725,"content":"                } ?: false"},{"type":"INSERT","lineNumber":726,"content":""},{"type":"INSERT","lineNumber":727,"content":"                if (!got) {"},{"type":"INSERT","lineNumber":728,"content":"                    Log.w(\"MavlinkRepo\", \"Did not receive item for seq=$seq within timeout\")"},{"type":"MODIFY","lineNumber":732,"content":"            }","oldContent":""},{"type":"INSERT","lineNumber":733,"content":""},{"type":"DELETE","lineNumber":737,"oldContent":"            Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to set AUTO mode\", e)"},{"type":"MODIFY","lineNumber":737,"content":"            Log.i(\"MavlinkRepo\", \"Mission readback complete: expected=$expectedCount items=${received.size}\")","oldContent":"                Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to switch to AUTO mode\")"},{"type":"INSERT","lineNumber":738,"content":"            received.sortedBy { it.first }.forEach { (seq, desc) -> Log.i(\"MavlinkRepo\", \"Item #$seq -> $desc\") }"},{"type":"DELETE","lineNumber":743,"oldContent":"     * Start the mission after uploading."},{"type":"MODIFY","lineNumber":745,"content":"     * Start the mission after uploading.","oldContent":"     * Replicates the Dart/Flutter workflow:"},{"type":"INSERT","lineNumber":746,"content":"     * Replicates the Dart/Flutter workflow:"},{"type":"DELETE","lineNumber":760,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":761,"oldContent":"            Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to arm vehicle\", e)"},{"type":"DELETE","lineNumber":765,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"DELETE","lineNumber":767,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] MISSION_START command sent\")"},{"type":"DELETE","lineNumber":768,"oldContent":"            delay(500)"},{"type":"DELETE","lineNumber":769,"oldContent":"                        } else {"},{"type":"DELETE","lineNumber":770,"oldContent":"                            Log.i(\"MavlinkRepo\", \"Switched to LAND mode, sending disarm...\")"},{"type":"DELETE","lineNumber":771,"oldContent":"            Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to send MISSION_START command\", e)"},{"type":"DELETE","lineNumber":772,"oldContent":"                        val changed = changeMode(MavMode.LAND)"},{"type":"INSERT","lineNumber":764,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":765,"content":"            Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to arm vehicle\", e)"},{"type":"DELETE","lineNumber":774,"oldContent":"        // Step 2: Send MISSION_START as CommandLong"},{"type":"INSERT","lineNumber":768,"content":""},{"type":"INSERT","lineNumber":769,"content":"        // Step 2: Send MISSION_START as CommandLong"},{"type":"DELETE","lineNumber":777,"oldContent":"        try {"},{"type":"INSERT","lineNumber":771,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"INSERT","lineNumber":773,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Start] MISSION_START command sent\")"},{"type":"INSERT","lineNumber":774,"content":"            delay(500)"},{"type":"DELETE","lineNumber":780,"oldContent":"            val modeChanged = changeMode(MavMode.AUTO)"},{"type":"INSERT","lineNumber":776,"content":"            Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to send MISSION_START command\", e)"},{"type":"INSERT","lineNumber":777,"content":"            return false"},{"type":"INSERT","lineNumber":778,"content":"        }"},{"type":"DELETE","lineNumber":783,"oldContent":"                return false"},{"type":"DELETE","lineNumber":784,"oldContent":"            }"},{"type":"INSERT","lineNumber":781,"content":"        try {"},{"type":"DELETE","lineNumber":786,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":783,"content":"            val modeChanged = changeMode(MavMode.AUTO)"},{"type":"DELETE","lineNumber":791,"oldContent":"    }"},{"type":"INSERT","lineNumber":788,"content":"                return false"},{"type":"INSERT","lineNumber":789,"content":"            }"},{"type":"INSERT","lineNumber":790,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":793,"oldContent":""},{"type":"DELETE","lineNumber":794,"oldContent":"    /**"},{"type":"DELETE","lineNumber":796,"oldContent":"     * Sends MISSION_START as CommandLong (param1=0, param2=0, ...)"},{"type":"INSERT","lineNumber":797,"content":"    }"},{"type":"INSERT","lineNumber":798,"content":""},{"type":"INSERT","lineNumber":799,"content":"    /**"},{"type":"INSERT","lineNumber":800,"content":"     * Sends MISSION_START as CommandLong (param1=0, param2=0, ...)"},{"type":"DELETE","lineNumber":803,"oldContent":"            param1 = 0f,"},{"type":"DELETE","lineNumber":805,"oldContent":"            param2 = 0f,"},{"type":"DELETE","lineNumber":807,"oldContent":"            param3 = 0f,"},{"type":"DELETE","lineNumber":809,"oldContent":"            param4 = 0f,"},{"type":"DELETE","lineNumber":812,"oldContent":"            param6 = 0f,"},{"type":"INSERT","lineNumber":808,"content":"            param1 = 0f,"},{"type":"INSERT","lineNumber":809,"content":"            param2 = 0f,"},{"type":"INSERT","lineNumber":810,"content":"            param3 = 0f,"},{"type":"INSERT","lineNumber":811,"content":"            param4 = 0f,"},{"type":"INSERT","lineNumber":813,"content":"            param6 = 0f,"},{"type":"DELETE","lineNumber":819,"oldContent":"    fun closeConnection() {"},{"type":"DELETE","lineNumber":820,"oldContent":"    // Haversine formula for distance in meters"},{"type":"INSERT","lineNumber":819,"content":"    suspend fun closeConnection() {"},{"type":"DELETE","lineNumber":822,"oldContent":"    private fun haversine(lat1: Double, lon1: Double, lat2: Double, lon2: Double): Float {"},{"type":"DELETE","lineNumber":824,"oldContent":"        val R = 6371000.0 // Earth radius in meters"},{"type":"DELETE","lineNumber":826,"oldContent":"        val dLat = Math.toRadians(lat2 - lat1)"},{"type":"DELETE","lineNumber":828,"oldContent":"        val dLon = Math.toRadians(lon2 - lon1)"},{"type":"DELETE","lineNumber":830,"oldContent":"    }"},{"type":"INSERT","lineNumber":827,"content":""},{"type":"INSERT","lineNumber":828,"content":"    // Haversine formula for distance in meters"},{"type":"INSERT","lineNumber":829,"content":"    private fun haversine(lat1: Double, lon1: Double, lat2: Double, lon2: Double): Float {"},{"type":"INSERT","lineNumber":830,"content":"        val R = 6371000.0 // Earth radius in meters"},{"type":"INSERT","lineNumber":831,"content":"        val dLat = Math.toRadians(lat2 - lat1)"},{"type":"INSERT","lineNumber":832,"content":"        val dLon = Math.toRadians(lon2 - lon1)"},{"type":"INSERT","lineNumber":833,"content":"        val a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +"},{"type":"INSERT","lineNumber":834,"content":"                Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2)) *"},{"type":"INSERT","lineNumber":835,"content":"                Math.sin(dLon / 2) * Math.sin(dLon / 2)"},{"type":"INSERT","lineNumber":836,"content":"        val c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))"},{"type":"INSERT","lineNumber":837,"content":"        return (R * c).toFloat()"},{"type":"DELETE","lineNumber":834,"oldContent":"            param6 = 0f,"},{"type":"INSERT","lineNumber":839,"content":"}"},{"type":"DELETE","lineNumber":836,"oldContent":"            param4 = 0f,"},{"type":"DELETE","lineNumber":837,"oldContent":"            param2 = 0f,"},{"type":"DELETE","lineNumber":839,"oldContent":""},{"type":"DELETE","lineNumber":840,"oldContent":"}"},{"type":"DELETE","lineNumber":841,"oldContent":"        return (R * c).toFloat()"}]},{"timestamp":1758277023556,"changes":[{"type":"MODIFY","lineNumber":83,"content":"                    is StreamState.Inactive -> {","oldContent":"            val heartbeat = Heartbeat("},{"type":"MODIFY","lineNumber":87,"content":"                            reconnect(this)","oldContent":"                customMode = 0u,"},{"type":"MODIFY","lineNumber":93,"content":"","oldContent":"                        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, heartbeat)"},{"type":"MODIFY","lineNumber":110,"content":"                    }","oldContent":"                Log.d(\"MavlinkRepo\", \"Frame: ${it.message.javaClass.simpleName} (sysId=${it.systemId}, compId=${it.componentId})\")"},{"type":"MODIFY","lineNumber":117,"content":"        val mavFrameStream = connection.mavFrame","oldContent":"                .filter { it.message is Heartbeat && (it.message as Heartbeat).type != MavType.GCS.wrap() }"},{"type":"MODIFY","lineNumber":120,"content":"        // Log raw messages","oldContent":"                        fcuSystemId = it.systemId"},{"type":"MODIFY","lineNumber":135,"content":"                        Log.i(\"MavlinkRepo\", \"FCU detected sysId=$fcuSystemId compId=$fcuComponentId\")","oldContent":"                                    param2 = intervalUsec,"},{"type":"MODIFY","lineNumber":154,"content":"                                )","oldContent":"                            setMessageRate(147u, 1f) // BATTERY_STATUS"},{"type":"MODIFY","lineNumber":158,"content":"                                    Log.e(\"MavlinkRepo\", \"Failed to send SET_MESSAGE_INTERVAL\", e)","oldContent":"        }"},{"type":"DELETE","lineNumber":192,"oldContent":"                            altitudeMsl = altAMSLm,"},{"type":"DELETE","lineNumber":193,"oldContent":"                            altitudeRelative = relAltM,"},{"type":"INSERT","lineNumber":192,"content":"        scope.launch {"},{"type":"INSERT","lineNumber":193,"content":"            mavFrameStream"},{"type":"MODIFY","lineNumber":203,"content":"                        )","oldContent":"            mavFrameStream"},{"type":"MODIFY","lineNumber":213,"content":"                .filterIsInstance<GlobalPositionInt>()","oldContent":"        scope.launch {"},{"type":"INSERT","lineNumber":286,"content":"                        5u -> \"Loiter\""},{"type":"DELETE","lineNumber":287,"oldContent":"                        6u -> \"RTL\""},{"type":"MODIFY","lineNumber":298,"content":"                        20u -> \"Guided_NoGPS\"","oldContent":"        }"},{"type":"DELETE","lineNumber":304,"oldContent":"                .map { it.message }"},{"type":"DELETE","lineNumber":305,"oldContent":"                .filterIsInstance<GpsRawInt>()"},{"type":"INSERT","lineNumber":304,"content":"                        26u -> \"AutoRotate\""},{"type":"INSERT","lineNumber":305,"content":"                        27u -> \"Auto_RTL\""},{"type":"INSERT","lineNumber":321,"content":"                                }"},{"type":"DELETE","lineNumber":323,"oldContent":"                                }"},{"type":"INSERT","lineNumber":331,"content":"                            _state.update { it.copy(missionElapsedSec = null, missionCompleted = true) }"},{"type":"DELETE","lineNumber":332,"oldContent":"                            // Do NOT clear mission from FCU here"},{"type":"MODIFY","lineNumber":354,"content":"                }","oldContent":"                                    missionType = MavMissionType.MISSION.wrap()"},{"type":"MODIFY","lineNumber":374,"content":"        suspend fun requestMissionItemsFromFcu(timeoutMs: Long = 5000): List<MissionItemInt> {","oldContent":"        suspend fun requestMissionItemsFromFcu(timeoutMs: Long = 5000): List<MissionItemInt> {"},{"type":"DELETE","lineNumber":389,"oldContent":"            param5 = param5,"},{"type":"DELETE","lineNumber":390,"oldContent":"            param7 = param7"},{"type":"DELETE","lineNumber":391,"oldContent":"        try {"},{"type":"DELETE","lineNumber":392,"oldContent":"               gcsSystemId,"},{"type":"DELETE","lineNumber":393,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":394,"oldContent":"            _lastFailure.value = e"},{"type":"INSERT","lineNumber":389,"content":"                    }"},{"type":"INSERT","lineNumber":390,"content":"                }"},{"type":"INSERT","lineNumber":391,"content":"            }"},{"type":"INSERT","lineNumber":392,"content":"            val req = MissionRequestList(targetSystem = fcuSystemId, targetComponent = fcuComponentId)"},{"type":"INSERT","lineNumber":393,"content":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, req)"},{"type":"INSERT","lineNumber":394,"content":"            val expectedCount = withTimeoutOrNull(timeoutMs) { expectedCountDeferred.await() } ?: 0"},{"type":"INSERT","lineNumber":441,"content":"            Log.w(\"MavlinkRepo\", \"Arm command rejected, vehicle not armable\")"},{"type":"DELETE","lineNumber":443,"oldContent":"            Log.w(\"MavlinkRepo\", \"Arm command rejected, vehicle not armable\")"},{"type":"INSERT","lineNumber":456,"content":"        // Wait for Heartbeat to confirm mode change"},{"type":"INSERT","lineNumber":457,"content":"        val timeoutMs = 5000L"},{"type":"INSERT","lineNumber":458,"content":"        val start = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":458,"oldContent":"        // Wait for Heartbeat to confirm mode change"},{"type":"DELETE","lineNumber":460,"oldContent":"        val timeoutMs = 5000L"},{"type":"DELETE","lineNumber":462,"oldContent":"        val start = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":469,"oldContent":"            delay(200)"},{"type":"DELETE","lineNumber":471,"oldContent":"        Log.e(\"MavlinkRepo\", \"Mode change to ${customMode} not confirmed in Heartbeat\")"},{"type":"INSERT","lineNumber":470,"content":"            delay(200)"},{"type":"INSERT","lineNumber":472,"content":"        Log.e(\"MavlinkRepo\", \"Mode change to ${customMode} not confirmed in Heartbeat\")"},{"type":"INSERT","lineNumber":503,"content":"                    .collect { ack ->"},{"type":"DELETE","lineNumber":505,"oldContent":"                    .collect { ack ->"},{"type":"DELETE","lineNumber":527,"oldContent":"            delay(500)"},{"type":"INSERT","lineNumber":529,"content":""},{"type":"DELETE","lineNumber":531,"oldContent":"    suspend fun startMission(): Boolean {"},{"type":"INSERT","lineNumber":542,"content":""},{"type":"DELETE","lineNumber":556,"oldContent":"                                    targetSystem = senderSys.toUByte(),"},{"type":"MODIFY","lineNumber":558,"content":"                                val item = missionItems[seq]","oldContent":"                                    targetComponent = senderComp.toUByte(),"},{"type":"INSERT","lineNumber":559,"content":"                                Log.i(\"MavlinkRepo\", \"[Mission Upload] Sending waypoint seq=$seq: ${item.command} lat=${item.x / 1e7} lon=${item.y / 1e7} alt=${item.z}\")"},{"type":"INSERT","lineNumber":560,"content":"                                val missionItem = item.copy("},{"type":"INSERT","lineNumber":561,"content":"                                    targetSystem = senderSys.toUByte(),"},{"type":"INSERT","lineNumber":562,"content":"                                    targetComponent = senderComp.toUByte(),"},{"type":"DELETE","lineNumber":562,"oldContent":"                                val item = missionItems[seq]"},{"type":"DELETE","lineNumber":564,"oldContent":"                                Log.i(\"MavlinkRepo\", \"[Mission Upload] Sending waypoint seq=$seq: ${item.command} lat=${item.x / 1e7} lon=${item.y / 1e7} alt=${item.z}\")"},{"type":"DELETE","lineNumber":567,"oldContent":"                                val missionItem = item.copy("},{"type":"INSERT","lineNumber":596,"content":"                            is MissionAck -> {"},{"type":"DELETE","lineNumber":597,"oldContent":"                                Log.i(\"MavlinkRepo\", \"[Mission Upload] Received MISSION_ACK type=${msg.type}\")"},{"type":"MODIFY","lineNumber":612,"content":"                delay(100)","oldContent":"                delay(100)"},{"type":"MODIFY","lineNumber":623,"content":"                        targetComponent = fcuComponentId,","oldContent":"                        targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":633,"content":"                        Log.e(\"MavlinkRepo\", \"Fallback: Failed to send mission item seq=$seq\", e)"},{"type":"DELETE","lineNumber":634,"oldContent":"                    }"},{"type":"MODIFY","lineNumber":639,"content":"                ackDeferred.await()","oldContent":"                return false"},{"type":"DELETE","lineNumber":642,"oldContent":"            delay(500)"},{"type":"DELETE","lineNumber":643,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Setting mode to AUTO...\")"},{"type":"DELETE","lineNumber":644,"oldContent":"        try {"},{"type":"INSERT","lineNumber":642,"content":"            job.cancel()"},{"type":"INSERT","lineNumber":643,"content":"            resendJob.cancel()"},{"type":"INSERT","lineNumber":644,"content":""},{"type":"MODIFY","lineNumber":646,"content":"                Log.i(\"MavlinkRepo\", \"[Mission Upload] Mission upload acknowledged by FCU\")","oldContent":"            Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to send MISSION_START command\", e)"},{"type":"INSERT","lineNumber":654,"content":"            return false"},{"type":"INSERT","lineNumber":655,"content":"        }"},{"type":"DELETE","lineNumber":655,"oldContent":"            Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to arm vehicle\", e)"},{"type":"DELETE","lineNumber":658,"oldContent":"     * Start the mission after uploading."},{"type":"INSERT","lineNumber":669,"content":"                connection.mavFrame.collect { frame ->"},{"type":"DELETE","lineNumber":670,"oldContent":"                    when (val msg = frame.message) {"},{"type":"MODIFY","lineNumber":688,"content":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_ACK type=${msg.type}\")","oldContent":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_ACK type=${msg.type}\")"},{"type":"DELETE","lineNumber":695,"oldContent":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":696,"content":"                val req = MissionRequestList(targetSystem = fcuSystemId, targetComponent = fcuComponentId)"},{"type":"INSERT","lineNumber":697,"content":"                connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, req)"},{"type":"INSERT","lineNumber":698,"content":"                Log.i(\"MavlinkRepo\", \"Sent MISSION_REQUEST_LIST to FCU\")"},{"type":"INSERT","lineNumber":699,"content":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":699,"oldContent":"                val req = MissionRequestList(targetSystem = fcuSystemId, targetComponent = fcuComponentId)"},{"type":"INSERT","lineNumber":702,"content":""},{"type":"DELETE","lineNumber":701,"oldContent":"                connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, req)"},{"type":"DELETE","lineNumber":703,"oldContent":"                Log.i(\"MavlinkRepo\", \"Sent MISSION_REQUEST_LIST to FCU\")"},{"type":"DELETE","lineNumber":705,"oldContent":"    }"},{"type":"INSERT","lineNumber":707,"content":"            }"},{"type":"DELETE","lineNumber":708,"oldContent":"     * Helper to arm/disarm the vehicle"},{"type":"DELETE","lineNumber":714,"oldContent":"                    val reqItem = MissionRequestInt(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = seq.toUShort())"},{"type":"DELETE","lineNumber":716,"oldContent":"                        } else {"},{"type":"DELETE","lineNumber":717,"oldContent":"                            Log.i(\"MavlinkRepo\", \"Switched to LAND mode, sending disarm...\")"},{"type":"INSERT","lineNumber":715,"content":"                    val reqItem = MissionRequestInt(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = seq.toUShort())"},{"type":"INSERT","lineNumber":716,"content":"                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, reqItem)"},{"type":"INSERT","lineNumber":717,"content":"                    Log.d(\"MavlinkRepo\", \"Sent MISSION_REQUEST_INT for seq=$seq\")"},{"type":"INSERT","lineNumber":718,"content":"                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":719,"content":"                    Log.e(\"MavlinkRepo\", \"Failed to send MISSION_REQUEST_INT seq=$seq\", e)"},{"type":"DELETE","lineNumber":719,"oldContent":"                        if (changed) {"},{"type":"DELETE","lineNumber":720,"oldContent":"                        val changed = changeMode(MavMode.LAND)"},{"type":"INSERT","lineNumber":722,"content":"                val got = withTimeoutOrNull(1500L) {"},{"type":"INSERT","lineNumber":723,"content":"                    seqDeferred.await()"},{"type":"INSERT","lineNumber":724,"content":"                    true"},{"type":"DELETE","lineNumber":724,"oldContent":"                val got = withTimeoutOrNull(1500L) {"},{"type":"DELETE","lineNumber":726,"oldContent":"                if (lastMissionSeq != null && currentMsg.seq.toInt() == lastMissionSeq && !landHandled) {"},{"type":"DELETE","lineNumber":728,"oldContent":"            .collect { currentMsg ->"},{"type":"INSERT","lineNumber":731,"content":"                perSeqMap.remove(seq)"},{"type":"DELETE","lineNumber":733,"oldContent":"                perSeqMap.remove(seq)"},{"type":"DELETE","lineNumber":734,"oldContent":"                landHandled = false // reset for new mission"},{"type":"DELETE","lineNumber":735,"oldContent":"                lastMissionSeq = countMsg.count.toInt() - 1"},{"type":"INSERT","lineNumber":734,"content":"            delay(200)"},{"type":"INSERT","lineNumber":735,"content":"            job.cancel()"},{"type":"DELETE","lineNumber":738,"oldContent":"            .map { it.message }"},{"type":"DELETE","lineNumber":739,"oldContent":"            .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":740,"oldContent":"        mavFrameStream"},{"type":"INSERT","lineNumber":738,"content":"            received.sortedBy { it.first }.forEach { (seq, desc) -> Log.i(\"MavlinkRepo\", \"Item #$seq -> $desc\") }"},{"type":"INSERT","lineNumber":739,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":740,"content":"            Log.e(\"MavlinkRepo\", \"Error during mission readback\", e)"},{"type":"INSERT","lineNumber":744,"content":"    /**"},{"type":"DELETE","lineNumber":746,"oldContent":"    /**"},{"type":"DELETE","lineNumber":762,"oldContent":"        } catch (e: Exception) {"},{"type":"MODIFY","lineNumber":764,"content":"        } catch (e: Exception) {","oldContent":"            Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to arm vehicle\", e)"},{"type":"INSERT","lineNumber":765,"content":"            Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to arm vehicle\", e)"},{"type":"INSERT","lineNumber":766,"content":"            return false"},{"type":"INSERT","lineNumber":767,"content":"        }"},{"type":"INSERT","lineNumber":770,"content":"        try {"},{"type":"INSERT","lineNumber":772,"content":"            sendMissionStartCommand()"},{"type":"DELETE","lineNumber":770,"oldContent":"            return false"},{"type":"DELETE","lineNumber":772,"oldContent":"        }"},{"type":"INSERT","lineNumber":775,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":774,"oldContent":"            param5 = 0f,"},{"type":"DELETE","lineNumber":777,"oldContent":"            param4 = 0f,"},{"type":"DELETE","lineNumber":778,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":779,"oldContent":"        try {"},{"type":"INSERT","lineNumber":781,"content":"        try {"},{"type":"INSERT","lineNumber":782,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Setting mode to AUTO...\")"},{"type":"DELETE","lineNumber":783,"oldContent":"            command = MavCmd.MISSION_START.wrap(),"},{"type":"MODIFY","lineNumber":784,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Set mode to AUTO, result=$modeChanged\")","oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"INSERT","lineNumber":785,"content":"            delay(500)"},{"type":"INSERT","lineNumber":786,"content":"            if (!modeChanged) {"},{"type":"INSERT","lineNumber":787,"content":"                Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to switch to AUTO mode\")"},{"type":"DELETE","lineNumber":786,"oldContent":"}"},{"type":"DELETE","lineNumber":788,"oldContent":"        return (R * c).toFloat()"},{"type":"DELETE","lineNumber":790,"oldContent":"        val c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))"},{"type":"MODIFY","lineNumber":791,"content":"            Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to set AUTO mode\", e)","oldContent":"        val dLon = Math.toRadians(lon2 - lon1)"},{"type":"DELETE","lineNumber":793,"oldContent":"    }"},{"type":"INSERT","lineNumber":795,"content":"        Log.i(\"MavlinkRepo\", \"[Mission Start] Mission start workflow complete. Vehicle should be in AUTO mode.\")"},{"type":"INSERT","lineNumber":796,"content":"        return true"},{"type":"INSERT","lineNumber":797,"content":"    }"},{"type":"DELETE","lineNumber":798,"oldContent":"        Log.i(\"MavlinkRepo\", \"[Mission Start] Mission start workflow complete. Vehicle should be in AUTO mode.\")"},{"type":"DELETE","lineNumber":800,"oldContent":"        return true"},{"type":"DELETE","lineNumber":805,"oldContent":"            param1 = 0f,"},{"type":"INSERT","lineNumber":806,"content":"            command = MavCmd.MISSION_START.wrap(),"},{"type":"INSERT","lineNumber":807,"content":"            confirmation = 0u,"},{"type":"INSERT","lineNumber":808,"content":"            param1 = 0f,"},{"type":"DELETE","lineNumber":809,"oldContent":"            command = MavCmd.MISSION_START.wrap(),"},{"type":"DELETE","lineNumber":811,"oldContent":"            confirmation = 0u,"},{"type":"MODIFY","lineNumber":813,"content":"            param6 = 0f,","oldContent":"            param6 = 0f,"},{"type":"MODIFY","lineNumber":819,"content":"    fun closeConnection() {","oldContent":"    suspend fun closeConnection() {"},{"type":"DELETE","lineNumber":823,"oldContent":""},{"type":"INSERT","lineNumber":824,"content":"            Log.e(\"MavlinkRepo\", \"Error closing TCP connection\", e)"},{"type":"INSERT","lineNumber":825,"content":"        }"},{"type":"INSERT","lineNumber":826,"content":"    }"},{"type":"INSERT","lineNumber":827,"content":""},{"type":"DELETE","lineNumber":827,"oldContent":"            Log.e(\"MavlinkRepo\", \"Error closing TCP connection\", e)"},{"type":"DELETE","lineNumber":830,"oldContent":"        }"},{"type":"DELETE","lineNumber":832,"oldContent":"    /**"},{"type":"DELETE","lineNumber":834,"oldContent":"    }"},{"type":"DELETE","lineNumber":837,"oldContent":""},{"type":"DELETE","lineNumber":840,"oldContent":"        return (R * c).toFloat()"},{"type":"INSERT","lineNumber":838,"content":"    }"},{"type":"INSERT","lineNumber":840,"content":""},{"type":"INSERT","lineNumber":841,"content":""}]},{"timestamp":1758277026272,"changes":[{"type":"MODIFY","lineNumber":97,"content":"                type = MavType.GCS.wrap(),","oldContent":"                    }"},{"type":"MODIFY","lineNumber":108,"content":"                        Log.e(\"MavlinkRepo\", \"Failed to send heartbeat\", e)","oldContent":"        scope.launch {"},{"type":"MODIFY","lineNumber":119,"content":"","oldContent":"                    if (!state.value.fcuDetected) {"},{"type":"MODIFY","lineNumber":121,"content":"        scope.launch {","oldContent":"                        fcuComponentId = it.componentId"},{"type":"MODIFY","lineNumber":123,"content":"                Log.d(\"MavlinkRepo\", \"Frame: ${it.message.javaClass.simpleName} (sysId=${it.systemId}, compId=${it.componentId})\")","oldContent":"                        _state.update { it.copy(fcuDetected = true) }"},{"type":"MODIFY","lineNumber":185,"content":"                    } catch (t: Throwable) {","oldContent":"                .collect { gp ->"},{"type":"DELETE","lineNumber":190,"oldContent":"                    _state.update {"},{"type":"DELETE","lineNumber":191,"oldContent":"                        it.copy("},{"type":"INSERT","lineNumber":190,"content":""},{"type":"INSERT","lineNumber":191,"content":"        // VFR_HUD"},{"type":"MODIFY","lineNumber":303,"content":"                        25u -> \"SystemID\"","oldContent":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":373,"content":"        // Helper to request mission items from FCU and return as list"},{"type":"DELETE","lineNumber":374,"oldContent":"        suspend fun requestMissionItemsFromFcu(timeoutMs: Long = 5000): List<MissionItemInt> {"},{"type":"INSERT","lineNumber":419,"content":"            param5 = param5,"},{"type":"INSERT","lineNumber":420,"content":"            param6 = param6,"},{"type":"INSERT","lineNumber":421,"content":"            param7 = param7"},{"type":"INSERT","lineNumber":422,"content":"        )"},{"type":"INSERT","lineNumber":423,"content":"        try {"},{"type":"INSERT","lineNumber":424,"content":"            connection.trySendUnsignedV2("},{"type":"INSERT","lineNumber":425,"content":"                gcsSystemId,"},{"type":"INSERT","lineNumber":426,"content":"                gcsComponentId, commandLong"},{"type":"INSERT","lineNumber":427,"content":"            )"},{"type":"INSERT","lineNumber":428,"content":"            Log.d(\"MavlinkRepo\", \"Sent COMMAND_LONG: cmd=${command} p1=$param1 p2=$param2 p3=$param3 p4=$param4 p5=$param5 p6=$param6 p7=$param7\")"},{"type":"INSERT","lineNumber":429,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":430,"content":"            Log.e(\"MavlinkRepo\", \"Failed to send command\", e)"},{"type":"INSERT","lineNumber":431,"content":"        }"},{"type":"INSERT","lineNumber":434,"content":"    suspend fun arm() {"},{"type":"INSERT","lineNumber":437,"content":"                MavCmd.COMPONENT_ARM_DISARM,"},{"type":"DELETE","lineNumber":425,"oldContent":"            Log.w(\"MavlinkRepo\", \"Arm command rejected, vehicle not armable\")"},{"type":"DELETE","lineNumber":426,"oldContent":"        }"},{"type":"DELETE","lineNumber":427,"oldContent":""},{"type":"DELETE","lineNumber":428,"oldContent":"    suspend fun disarm() {"},{"type":"DELETE","lineNumber":429,"oldContent":"            MavCmd.COMPONENT_ARM_DISARM,"},{"type":"DELETE","lineNumber":430,"oldContent":"            0f"},{"type":"DELETE","lineNumber":431,"oldContent":"    }"},{"type":"DELETE","lineNumber":432,"oldContent":""},{"type":"DELETE","lineNumber":433,"oldContent":"        sendCommand("},{"type":"DELETE","lineNumber":434,"oldContent":"            MavCmd.DO_SET_MODE,"},{"type":"DELETE","lineNumber":435,"oldContent":"            0f"},{"type":"DELETE","lineNumber":436,"oldContent":"        )"},{"type":"DELETE","lineNumber":437,"oldContent":""},{"type":"DELETE","lineNumber":438,"oldContent":"        sendCommand("},{"type":"DELETE","lineNumber":439,"oldContent":"            )"},{"type":"DELETE","lineNumber":457,"oldContent":"        val expectedMode = when (customMode) {"},{"type":"MODIFY","lineNumber":459,"content":"        val expectedMode = when (customMode) {","oldContent":"            3u -> \"Auto\""},{"type":"INSERT","lineNumber":460,"content":"            3u -> \"Auto\""},{"type":"DELETE","lineNumber":469,"oldContent":"            delay(200)"},{"type":"DELETE","lineNumber":471,"oldContent":"        Log.e(\"MavlinkRepo\", \"Mode change to ${customMode} not confirmed in Heartbeat\")"},{"type":"INSERT","lineNumber":470,"content":"            delay(200)"},{"type":"INSERT","lineNumber":472,"content":"        Log.e(\"MavlinkRepo\", \"Mode change to ${customMode} not confirmed in Heartbeat\")"},{"type":"MODIFY","lineNumber":529,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":542,"content":"","oldContent":""},{"type":"INSERT","lineNumber":557,"content":"                                }"},{"type":"DELETE","lineNumber":559,"oldContent":"                                }"},{"type":"DELETE","lineNumber":561,"oldContent":"                                    seq = seq.toUShort()"},{"type":"MODIFY","lineNumber":563,"content":"                                    seq = seq.toUShort()","oldContent":"                                )"},{"type":"INSERT","lineNumber":564,"content":"                                )"},{"type":"MODIFY","lineNumber":607,"content":"","oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":611,"content":"            while (!firstRequestReceived && !ackDeferred.isCompleted && System.currentTimeMillis() - startWait < firstRequestTimeout) {"},{"type":"DELETE","lineNumber":612,"oldContent":"                delay(100)"},{"type":"MODIFY","lineNumber":615,"content":"            if (!firstRequestReceived) {","oldContent":"                Log.e(\"MavlinkRepo\", \"Failed to send MISSION_REQUEST_LIST\", e)"},{"type":"INSERT","lineNumber":622,"content":"                        targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":623,"oldContent":"                        targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":635,"oldContent":"                        }"},{"type":"DELETE","lineNumber":636,"oldContent":"                            Log.w(\"MavlinkRepo\", \"Failed to switch to LAND mode after last mission item\")"},{"type":"DELETE","lineNumber":637,"oldContent":"                        } else {"},{"type":"DELETE","lineNumber":638,"oldContent":"                            armDisarm(false)"},{"type":"INSERT","lineNumber":635,"content":"                }"},{"type":"INSERT","lineNumber":636,"content":"            }"},{"type":"INSERT","lineNumber":637,"content":""},{"type":"INSERT","lineNumber":638,"content":"            val ackReceived = withTimeoutOrNull(timeoutMs) {"},{"type":"MODIFY","lineNumber":641,"content":"","oldContent":"                        if (changed) {"},{"type":"DELETE","lineNumber":647,"oldContent":"            .map { it.message }"},{"type":"DELETE","lineNumber":648,"oldContent":"            .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":647,"content":"                return true"},{"type":"INSERT","lineNumber":648,"content":"            } else {"},{"type":"MODIFY","lineNumber":650,"content":"                return false","oldContent":"        mavFrameStream"},{"type":"MODIFY","lineNumber":653,"content":"            Log.e(\"MavlinkRepo\", \"[Mission Upload] Mission upload failed\", e)","oldContent":"    scope.launch {"},{"type":"MODIFY","lineNumber":656,"content":"    }","oldContent":"    }"},{"type":"DELETE","lineNumber":659,"oldContent":"            .filterIsInstance<MissionCount>()"},{"type":"DELETE","lineNumber":660,"oldContent":"            .map { it.message }"},{"type":"DELETE","lineNumber":661,"oldContent":"            .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":662,"oldContent":"        mavFrameStream"},{"type":"DELETE","lineNumber":663,"oldContent":"        // Track last mission seq from MissionCount"},{"type":"DELETE","lineNumber":664,"oldContent":"        var landHandled = false"},{"type":"DELETE","lineNumber":665,"oldContent":"        var lastMissionSeq: Int? = null"},{"type":"INSERT","lineNumber":659,"content":"        if (!state.value.fcuDetected) {"},{"type":"INSERT","lineNumber":660,"content":"            Log.w(\"MavlinkRepo\", \"FCU not detected; cannot request mission\")"},{"type":"INSERT","lineNumber":661,"content":"            return"},{"type":"INSERT","lineNumber":662,"content":"        }"},{"type":"INSERT","lineNumber":663,"content":"        try {"},{"type":"INSERT","lineNumber":664,"content":"            val received = mutableListOf<Pair<Int, String>>()"},{"type":"INSERT","lineNumber":665,"content":"            val expectedCountDeferred = CompletableDeferred<Int?>()"},{"type":"DELETE","lineNumber":671,"oldContent":"                Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to switch to AUTO mode\")"},{"type":"DELETE","lineNumber":672,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Setting mode to AUTO...\")"},{"type":"INSERT","lineNumber":671,"content":"                        is MissionCount -> {"},{"type":"INSERT","lineNumber":672,"content":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_COUNT=${msg.count} from sys=${frame.systemId}\")"},{"type":"INSERT","lineNumber":687,"content":"                        is MissionAck -> {"},{"type":"DELETE","lineNumber":688,"oldContent":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_ACK type=${msg.type}\")"},{"type":"MODIFY","lineNumber":696,"content":"                val req = MissionRequestList(targetSystem = fcuSystemId, targetComponent = fcuComponentId)","oldContent":"                val req = MissionRequestList(targetSystem = fcuSystemId, targetComponent = fcuComponentId)"},{"type":"DELETE","lineNumber":698,"oldContent":"                Log.e(\"MavlinkRepo\", \"Failed to send MISSION_REQUEST_LIST\", e)"},{"type":"DELETE","lineNumber":700,"oldContent":"            }"},{"type":"DELETE","lineNumber":702,"oldContent":"            val expectedCount = withTimeoutOrNull(timeoutMs) { expectedCountDeferred.await() } ?: run {"},{"type":"INSERT","lineNumber":700,"content":"                Log.e(\"MavlinkRepo\", \"Failed to send MISSION_REQUEST_LIST\", e)"},{"type":"INSERT","lineNumber":701,"content":"            }"},{"type":"INSERT","lineNumber":703,"content":"            val expectedCount = withTimeoutOrNull(timeoutMs) { expectedCountDeferred.await() } ?: run {"},{"type":"MODIFY","lineNumber":706,"content":"                return","oldContent":"            param5 = 0f,"},{"type":"MODIFY","lineNumber":709,"content":"            Log.i(\"MavlinkRepo\", \"Expecting $expectedCount mission items - requesting each item\")","oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"MODIFY","lineNumber":715,"content":"                    val reqItem = MissionRequestInt(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = seq.toUShort())","oldContent":"                    val reqItem = MissionRequestInt(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = seq.toUShort())"},{"type":"DELETE","lineNumber":719,"oldContent":"                }"},{"type":"DELETE","lineNumber":721,"oldContent":"        // Step 3: Set mode to AUTO"},{"type":"INSERT","lineNumber":720,"content":"                }"},{"type":"INSERT","lineNumber":721,"content":""},{"type":"DELETE","lineNumber":723,"oldContent":"                } ?: false"},{"type":"MODIFY","lineNumber":725,"content":"                } ?: false","oldContent":""},{"type":"INSERT","lineNumber":726,"content":""},{"type":"DELETE","lineNumber":747,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"DELETE","lineNumber":748,"oldContent":"            arm()"},{"type":"INSERT","lineNumber":747,"content":"     * 1. Arm the vehicle"},{"type":"INSERT","lineNumber":748,"content":"     * 2. Send MISSION_START as CommandLong"},{"type":"INSERT","lineNumber":749,"content":"     * 3. Set mode to AUTO"},{"type":"DELETE","lineNumber":750,"oldContent":"     */"},{"type":"INSERT","lineNumber":763,"content":"            delay(500)"},{"type":"DELETE","lineNumber":765,"oldContent":"            delay(500)"},{"type":"MODIFY","lineNumber":768,"content":"","oldContent":""},{"type":"INSERT","lineNumber":770,"content":"        try {"},{"type":"INSERT","lineNumber":772,"content":"            sendMissionStartCommand()"},{"type":"DELETE","lineNumber":772,"oldContent":"        try {"},{"type":"DELETE","lineNumber":774,"oldContent":"            sendMissionStartCommand()"},{"type":"MODIFY","lineNumber":776,"content":"            Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to send MISSION_START command\", e)","oldContent":"            Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to send MISSION_START command\", e)"},{"type":"MODIFY","lineNumber":781,"content":"        try {","oldContent":"        try {"},{"type":"DELETE","lineNumber":786,"oldContent":"                return false"},{"type":"INSERT","lineNumber":788,"content":"                return false"},{"type":"MODIFY","lineNumber":795,"content":"        Log.i(\"MavlinkRepo\", \"[Mission Start] Mission start workflow complete. Vehicle should be in AUTO mode.\")","oldContent":"        Log.i(\"MavlinkRepo\", \"[Mission Start] Mission start workflow complete. Vehicle should be in AUTO mode.\")"},{"type":"MODIFY","lineNumber":798,"content":"","oldContent":""},{"type":"DELETE","lineNumber":801,"oldContent":"        return true"},{"type":"DELETE","lineNumber":802,"oldContent":"        // Step 3: Set mode to AUTO"},{"type":"DELETE","lineNumber":803,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":804,"oldContent":"            delay(500)"},{"type":"INSERT","lineNumber":801,"content":"     */"},{"type":"INSERT","lineNumber":802,"content":"    suspend fun sendMissionStartCommand() {"},{"type":"INSERT","lineNumber":803,"content":"        val cmd = CommandLong("},{"type":"INSERT","lineNumber":804,"content":"            targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":805,"content":"            targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":806,"oldContent":"            param6 = 0f,"},{"type":"MODIFY","lineNumber":809,"content":"            param2 = 0f,","oldContent":"            param2 = 0f,"},{"type":"INSERT","lineNumber":812,"content":"            param5 = 0f,"},{"type":"DELETE","lineNumber":813,"oldContent":"            param6 = 0f,"},{"type":"DELETE","lineNumber":814,"oldContent":"            param4 = 0f,"},{"type":"DELETE","lineNumber":815,"oldContent":"            param3 = 0f,"},{"type":"DELETE","lineNumber":816,"oldContent":"            param2 = 0f,"},{"type":"DELETE","lineNumber":817,"oldContent":"            param1 = 0f,"},{"type":"INSERT","lineNumber":814,"content":"            param7 = 0f"},{"type":"INSERT","lineNumber":815,"content":"        )"},{"type":"INSERT","lineNumber":816,"content":"        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, cmd)"},{"type":"INSERT","lineNumber":817,"content":"    }"},{"type":"MODIFY","lineNumber":824,"content":"            Log.e(\"MavlinkRepo\", \"Error closing TCP connection\", e)","oldContent":"            Log.e(\"MavlinkRepo\", \"Error closing TCP connection\", e)"},{"type":"DELETE","lineNumber":826,"oldContent":"    // Haversine formula for distance in meters"},{"type":"MODIFY","lineNumber":828,"content":"    // Haversine formula for distance in meters","oldContent":"    private fun haversine(lat1: Double, lon1: Double, lat2: Double, lon2: Double): Float {"},{"type":"INSERT","lineNumber":829,"content":"    private fun haversine(lat1: Double, lon1: Double, lat2: Double, lon2: Double): Float {"},{"type":"MODIFY","lineNumber":835,"content":"                Math.sin(dLon / 2) * Math.sin(dLon / 2)","oldContent":""},{"type":"INSERT","lineNumber":836,"content":"        val c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))"},{"type":"INSERT","lineNumber":837,"content":"        return (R * c).toFloat()"},{"type":"INSERT","lineNumber":839,"content":"}"}]},{"timestamp":1758277093146,"changes":[{"type":"DELETE","lineNumber":17,"oldContent":"import kotlin.math.absoluteValue"},{"type":"DELETE","lineNumber":82,"oldContent":"        scope.launch {"},{"type":"INSERT","lineNumber":81,"content":"                    }"},{"type":"DELETE","lineNumber":86,"oldContent":"                baseMode = emptyList<MavModeFlag>().wrap(),"},{"type":"INSERT","lineNumber":85,"content":"                            _state.update { it.copy(connected = false, fcuDetected = false) }"},{"type":"DELETE","lineNumber":92,"oldContent":"                    try {"},{"type":"INSERT","lineNumber":91,"content":"        }"},{"type":"MODIFY","lineNumber":115,"content":"        // Shared message stream","oldContent":"            mavFrameStream"},{"type":"DELETE","lineNumber":134,"oldContent":"                                    param1 = messageId.toFloat(),"},{"type":"INSERT","lineNumber":133,"content":"                        fcuComponentId = it.componentId"},{"type":"DELETE","lineNumber":153,"oldContent":"                            setMessageRate(74u, 5f)  // VFR_HUD"},{"type":"INSERT","lineNumber":152,"content":"                                    param7 = 0f"},{"type":"DELETE","lineNumber":157,"oldContent":"                }"},{"type":"INSERT","lineNumber":156,"content":"                                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":202,"oldContent":"        scope.launch {"},{"type":"INSERT","lineNumber":201,"content":"                            groundspeed = hud.groundspeed.takeIf { v -> v > 0f }"},{"type":"DELETE","lineNumber":212,"oldContent":"        //HEARTBEAT for mode, armed, armable"},{"type":"INSERT","lineNumber":211,"content":"                .map { it.message }"},{"type":"DELETE","lineNumber":297,"oldContent":"                }"},{"type":"INSERT","lineNumber":296,"content":"                        19u -> \"Avoid_ADSB\""},{"type":"DELETE","lineNumber":396,"oldContent":"            param2 = param2,"},{"type":"DELETE","lineNumber":397,"oldContent":"            param3 = param3,"},{"type":"DELETE","lineNumber":398,"oldContent":"            param5 = param5,"},{"type":"DELETE","lineNumber":399,"oldContent":"            param7 = param7"},{"type":"DELETE","lineNumber":400,"oldContent":"        try {"},{"type":"DELETE","lineNumber":401,"oldContent":"            connection.trySendUnsignedV2("},{"type":"DELETE","lineNumber":402,"oldContent":"                gcsComponentId, commandLong)"},{"type":"DELETE","lineNumber":403,"oldContent":"            Log.e(\"MavlinkRepo\", \"Failed to send command\", e)"},{"type":"DELETE","lineNumber":404,"oldContent":"            _lastFailure.value = e"},{"type":"DELETE","lineNumber":405,"oldContent":"    }"},{"type":"INSERT","lineNumber":395,"content":"                val seqDeferred = CompletableDeferred<Unit>()"},{"type":"INSERT","lineNumber":396,"content":"                perSeqMap[seq] = seqDeferred"},{"type":"INSERT","lineNumber":397,"content":"                val reqItem = MissionRequestInt(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = seq.toUShort())"},{"type":"INSERT","lineNumber":398,"content":"                connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, reqItem)"},{"type":"INSERT","lineNumber":399,"content":"                withTimeoutOrNull(1500L) { seqDeferred.await() }"},{"type":"INSERT","lineNumber":400,"content":"                perSeqMap.remove(seq)"},{"type":"INSERT","lineNumber":401,"content":"            }"},{"type":"INSERT","lineNumber":402,"content":"            delay(200)"},{"type":"INSERT","lineNumber":403,"content":"            job.cancel()"},{"type":"INSERT","lineNumber":404,"content":"            return items.sortedBy { it.seq.toInt() }"},{"type":"DELETE","lineNumber":420,"oldContent":"            Log.w(\"MavlinkRepo\", \"Arm command rejected, vehicle not armable\")"},{"type":"DELETE","lineNumber":422,"oldContent":"        }"},{"type":"DELETE","lineNumber":424,"oldContent":"    }"},{"type":"DELETE","lineNumber":426,"oldContent":""},{"type":"DELETE","lineNumber":428,"oldContent":"    suspend fun disarm() {"},{"type":"DELETE","lineNumber":430,"oldContent":"        sendCommand("},{"type":"INSERT","lineNumber":431,"content":"    }"},{"type":"INSERT","lineNumber":432,"content":""},{"type":"INSERT","lineNumber":434,"content":"        if (state.value.armable) {"},{"type":"INSERT","lineNumber":435,"content":"            sendCommand("},{"type":"DELETE","lineNumber":440,"oldContent":"        sendCommand("},{"type":"INSERT","lineNumber":437,"content":"                1f"},{"type":"INSERT","lineNumber":438,"content":"            )"},{"type":"INSERT","lineNumber":439,"content":"        } else {"},{"type":"INSERT","lineNumber":457,"content":"        val start = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":460,"oldContent":"        val start = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":469,"oldContent":"            delay(200)"},{"type":"DELETE","lineNumber":471,"oldContent":"        Log.e(\"MavlinkRepo\", \"Mode change to ${customMode} not confirmed in Heartbeat\")"},{"type":"INSERT","lineNumber":469,"content":"            delay(200)"},{"type":"INSERT","lineNumber":471,"content":"        Log.e(\"MavlinkRepo\", \"Mode change to ${customMode} not confirmed in Heartbeat\")"},{"type":"INSERT","lineNumber":510,"content":"            clearJob.cancel()"},{"type":"INSERT","lineNumber":511,"content":"            if (!clearAck) {"},{"type":"INSERT","lineNumber":512,"content":"                Log.w(\"MavlinkRepo\", \"[Mission Upload] No ACK for MISSION_CLEAR_ALL; proceeding anyway\")"},{"type":"DELETE","lineNumber":512,"oldContent":"            }"},{"type":"DELETE","lineNumber":513,"oldContent":"                val req = MissionRequestList(targetSystem = fcuSystemId, targetComponent = fcuComponentId)"},{"type":"DELETE","lineNumber":514,"oldContent":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_COUNT=${msg.count} from sys=${frame.systemId}\")"},{"type":"DELETE","lineNumber":516,"oldContent":"                connection.mavFrame.collect { frame ->"},{"type":"DELETE","lineNumber":517,"oldContent":"            }"},{"type":"DELETE","lineNumber":518,"oldContent":"                }"},{"type":"DELETE","lineNumber":519,"oldContent":"                    val missionItem = item.copy("},{"type":"DELETE","lineNumber":520,"oldContent":"                    if (sentSeqs.contains(seq)) continue"},{"type":"DELETE","lineNumber":521,"oldContent":"                                Log.i(\"MavlinkRepo\", \"[Mission Upload] Sending waypoint seq=$seq: ${item.command} lat=${item.x / 1e7} lon=${item.y / 1e7} alt=${item.z}\")"},{"type":"DELETE","lineNumber":522,"oldContent":"    }"},{"type":"DELETE","lineNumber":523,"oldContent":"        sendCommand(MavCmd.COMPONENT_ARM_DISARM, if (arm) 1f else 0f)"},{"type":"DELETE","lineNumber":524,"oldContent":"    suspend fun armDisarm(arm: Boolean) {"},{"type":"DELETE","lineNumber":525,"oldContent":"     */"},{"type":"INSERT","lineNumber":515,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Upload] Starting upload of ${missionItems.size} items...\")"},{"type":"INSERT","lineNumber":516,"content":"            // Send MissionCount"},{"type":"INSERT","lineNumber":517,"content":"            val missionCount = MissionCount("},{"type":"INSERT","lineNumber":518,"content":"                targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":519,"content":"                targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":520,"content":"                count = missionItems.size.toUShort()"},{"type":"INSERT","lineNumber":521,"content":"            )"},{"type":"INSERT","lineNumber":522,"content":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionCount)"},{"type":"INSERT","lineNumber":523,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Upload] Sent MISSION_COUNT=${missionItems.size}\")"},{"type":"INSERT","lineNumber":524,"content":""},{"type":"INSERT","lineNumber":527,"content":"            var firstRequestReceived = false"},{"type":"DELETE","lineNumber":529,"oldContent":""},{"type":"INSERT","lineNumber":540,"content":"            }"},{"type":"DELETE","lineNumber":542,"oldContent":""},{"type":"INSERT","lineNumber":561,"content":"                                    targetComponent = senderComp.toUByte(),"},{"type":"DELETE","lineNumber":564,"oldContent":"                                    targetComponent = senderComp.toUByte(),"},{"type":"DELETE","lineNumber":605,"oldContent":"            Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to set AUTO mode\", e)"},{"type":"DELETE","lineNumber":606,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Set mode to AUTO, result=$modeChanged\")"},{"type":"INSERT","lineNumber":604,"content":"                    }"},{"type":"INSERT","lineNumber":605,"content":"            }"},{"type":"DELETE","lineNumber":609,"oldContent":"        // Step 2: Send MISSION_START as CommandLong"},{"type":"DELETE","lineNumber":610,"oldContent":"                return"},{"type":"INSERT","lineNumber":608,"content":"            val firstRequestTimeout = 5000L"},{"type":"INSERT","lineNumber":609,"content":"            val startWait = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":616,"content":"                for (seq in 0 until missionItems.size) {"},{"type":"INSERT","lineNumber":617,"content":"                    if (sentSeqs.contains(seq)) continue"},{"type":"INSERT","lineNumber":618,"content":"                    val item = missionItems[seq]"},{"type":"DELETE","lineNumber":618,"oldContent":"}"},{"type":"DELETE","lineNumber":619,"oldContent":"    }"},{"type":"DELETE","lineNumber":620,"oldContent":"        )"},{"type":"DELETE","lineNumber":621,"oldContent":"            param7 = 0f"},{"type":"INSERT","lineNumber":620,"content":"                    val missionItem = item.copy("},{"type":"DELETE","lineNumber":624,"oldContent":"            arm()"},{"type":"DELETE","lineNumber":625,"oldContent":"                }"},{"type":"DELETE","lineNumber":626,"oldContent":"                connection.mavFrame.collect { frame ->"},{"type":"DELETE","lineNumber":627,"oldContent":"            val perSeqMap = mutableMapOf<Int, CompletableDeferred<Unit>>()"},{"type":"DELETE","lineNumber":628,"oldContent":"                    }"},{"type":"DELETE","lineNumber":629,"oldContent":"            }"},{"type":"DELETE","lineNumber":630,"oldContent":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"DELETE","lineNumber":631,"oldContent":"}"},{"type":"DELETE","lineNumber":632,"oldContent":"        )"},{"type":"INSERT","lineNumber":623,"content":"                        seq = seq.toUShort()"},{"type":"INSERT","lineNumber":624,"content":"                    )"},{"type":"INSERT","lineNumber":625,"content":"                    try {"},{"type":"INSERT","lineNumber":626,"content":"                        Log.d(\"MavlinkRepo\", \"Sending fallback item seq=$seq cmd=${missionItem.command} frame=${missionItem.frame} x=${missionItem.x} y=${missionItem.y} z=${missionItem.z}\")"},{"type":"INSERT","lineNumber":627,"content":"                        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"INSERT","lineNumber":628,"content":"                        sentSeqs.add(seq)"},{"type":"INSERT","lineNumber":629,"content":"                        Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_ITEM_INT seq=$seq\")"},{"type":"INSERT","lineNumber":630,"content":"                        delay(300)"},{"type":"INSERT","lineNumber":631,"content":"                    } catch (e: Exception) {"},{"type":"DELETE","lineNumber":640,"oldContent":"            val perSeqMap = mutableMapOf<Int, CompletableDeferred<Unit>>()"},{"type":"INSERT","lineNumber":639,"content":"            } ?: false"},{"type":"DELETE","lineNumber":645,"oldContent":"            param2 = 0f,"},{"type":"INSERT","lineNumber":644,"content":"            if (ackReceived) {"},{"type":"DELETE","lineNumber":649,"oldContent":"        // Step 3: Set mode to AUTO"},{"type":"INSERT","lineNumber":648,"content":"                Log.e(\"MavlinkRepo\", \"[Mission Upload] Mission upload timed out waiting for ACK\")"},{"type":"DELETE","lineNumber":651,"oldContent":"            arm()"},{"type":"DELETE","lineNumber":652,"oldContent":"                }"},{"type":"INSERT","lineNumber":650,"content":"            }"},{"type":"INSERT","lineNumber":651,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":654,"content":"        }"},{"type":"DELETE","lineNumber":656,"oldContent":"    }"},{"type":"MODIFY","lineNumber":667,"content":"            val job = AppScope.launch {","oldContent":"    // Haversine formula for distance in meters"},{"type":"DELETE","lineNumber":683,"oldContent":"            val perSeqMap = mutableMapOf<Int, CompletableDeferred<Unit>>()"},{"type":"INSERT","lineNumber":682,"content":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_ITEM seq=${msg.seq} x=${msg.x} y=${msg.y} z=${msg.z}\")"},{"type":"INSERT","lineNumber":694,"content":"            try {"},{"type":"DELETE","lineNumber":696,"oldContent":"                val req = MissionRequestList(targetSystem = fcuSystemId, targetComponent = fcuComponentId)"},{"type":"INSERT","lineNumber":698,"content":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":701,"oldContent":"            } catch (e: Exception) {"},{"type":"MODIFY","lineNumber":702,"content":"            val expectedCount = withTimeoutOrNull(timeoutMs) { expectedCountDeferred.await() } ?: run {","oldContent":"            val expectedCount = withTimeoutOrNull(timeoutMs) { expectedCountDeferred.await() } ?: run {"},{"type":"INSERT","lineNumber":713,"content":"                try {"},{"type":"DELETE","lineNumber":715,"oldContent":"                    val reqItem = MissionRequestInt(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = seq.toUShort())"},{"type":"MODIFY","lineNumber":719,"content":"                }","oldContent":"                }"},{"type":"INSERT","lineNumber":723,"content":"                    true"},{"type":"DELETE","lineNumber":726,"oldContent":"                    true"},{"type":"DELETE","lineNumber":750,"oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] Sending MISSION_START command...\")"},{"type":"INSERT","lineNumber":749,"content":"     */"},{"type":"INSERT","lineNumber":766,"content":"        }"},{"type":"DELETE","lineNumber":768,"oldContent":""},{"type":"MODIFY","lineNumber":772,"content":"            Log.i(\"MavlinkRepo\", \"[Mission Start] MISSION_START command sent\")","oldContent":"            Log.i(\"MavlinkRepo\", \"[Mission Start] MISSION_START command sent\")"},{"type":"INSERT","lineNumber":774,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":776,"oldContent":"            Log.e(\"MavlinkRepo\", \"[Mission Start] Failed to send MISSION_START command\", e)"},{"type":"INSERT","lineNumber":779,"content":"        // Step 3: Set mode to AUTO"},{"type":"DELETE","lineNumber":781,"oldContent":"        try {"},{"type":"MODIFY","lineNumber":787,"content":"                return false","oldContent":"                return false"},{"type":"INSERT","lineNumber":791,"content":"            return false"},{"type":"INSERT","lineNumber":792,"content":"        }"},{"type":"DELETE","lineNumber":793,"oldContent":"}"},{"type":"DELETE","lineNumber":795,"oldContent":"        Log.i(\"MavlinkRepo\", \"[Mission Start] Mission start workflow complete. Vehicle should be in AUTO mode.\")"},{"type":"DELETE","lineNumber":797,"oldContent":"        return (R * c).toFloat()"},{"type":"INSERT","lineNumber":796,"content":"    }"},{"type":"INSERT","lineNumber":807,"content":"            param1 = 0f,"},{"type":"DELETE","lineNumber":809,"oldContent":"            param2 = 0f,"},{"type":"DELETE","lineNumber":818,"oldContent":"        val dLon = Math.toRadians(lon2 - lon1)"},{"type":"DELETE","lineNumber":819,"oldContent":"    fun closeConnection() {"},{"type":"DELETE","lineNumber":820,"oldContent":"    private fun haversine(lat1: Double, lon1: Double, lat2: Double, lon2: Double): Float {"},{"type":"DELETE","lineNumber":822,"oldContent":""},{"type":"INSERT","lineNumber":818,"content":"    suspend fun closeConnection() {"},{"type":"INSERT","lineNumber":819,"content":"        try {"},{"type":"INSERT","lineNumber":820,"content":"            // Attempt to close the TCP connection gracefully"},{"type":"INSERT","lineNumber":821,"content":"            connection.close()"},{"type":"INSERT","lineNumber":822,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":824,"oldContent":"            Log.e(\"MavlinkRepo\", \"Error closing TCP connection\", e)"},{"type":"INSERT","lineNumber":826,"content":""},{"type":"MODIFY","lineNumber":829,"content":"        val R = 6371000.0 // Earth radius in meters","oldContent":"        return (R * c).toFloat()"},{"type":"INSERT","lineNumber":830,"content":"        val dLat = Math.toRadians(lat2 - lat1)"},{"type":"INSERT","lineNumber":831,"content":"        val dLon = Math.toRadians(lon2 - lon1)"},{"type":"INSERT","lineNumber":832,"content":"        val a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +"},{"type":"INSERT","lineNumber":833,"content":"                Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2)) *"},{"type":"INSERT","lineNumber":834,"content":"                Math.sin(dLon / 2) * Math.sin(dLon / 2)"},{"type":"INSERT","lineNumber":836,"content":"        return (R * c).toFloat()"},{"type":"INSERT","lineNumber":837,"content":"    }"},{"type":"INSERT","lineNumber":838,"content":"}"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uimain/TopNavBar.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uimain/TopNavBar.kt","baseContent":"package com.example.aerogcsclone.uimain\n\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.*\nimport androidx.compose.material3.DropdownMenu\nimport androidx.compose.material3.DropdownMenuItem\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.compose.ui.window.Popup\nimport androidx.navigation.NavHostController\nimport com.example.aerogcsclone.Telemetry.TelemetryState\nimport com.example.aerogcsclone.authentication.AuthViewModel\nimport com.example.aerogcsclone.navigation.Screen\n\n@Composable\nfun TopNavBar(\n    telemetryState: TelemetryState,\n    authViewModel: AuthViewModel,\n    navController: NavHostController\n) {\n    var menuExpanded by remember { mutableStateOf(false) }\n    var kebabMenuExpanded by remember { mutableStateOf(false) }\n    var selectedMode by remember { mutableStateOf<String?>(null) } // null by default\n\n    Box(\n        modifier = Modifier\n            .fillMaxWidth()\n            .height(70.dp)\n            .background(\n                brush = Brush.horizontalGradient(\n                    colors = listOf(Color(0xFF87CEEB), Color(0xFF4A90E2))\n                )\n            )\n            .padding(horizontal = 12.dp),\n        contentAlignment = Alignment.CenterStart\n    ) {\n        Row(\n            modifier = Modifier.fillMaxWidth(),\n            verticalAlignment = Alignment.CenterVertically\n        ) {\n            // Hamburger menu\n            Box {\n                Icon(\n                    Icons.Default.Menu,\n                    contentDescription = \"Menu\",\n                    tint = Color.White,\n                    modifier = Modifier.clickable { menuExpanded = true }\n                )\n                if (menuExpanded) {\n                    Popup(onDismissRequest = { menuExpanded = false }) {\n                        Column(\n                            modifier = Modifier\n                                .background(Color.Black.copy(alpha = 0.5f))\n                                .width(180.dp)\n                                .padding(vertical = 8.dp, horizontal = 16.dp)\n                        ) {\n                            Text(\n                                text = \"Automatic\",\n                                color = Color.White,\n                                fontSize = 22.sp,\n                                modifier = Modifier\n                                    .padding(16.dp)\n                                    .clickable {\n                                        selectedMode = \"Automatic\"\n                                        menuExpanded = false\n                                        navController.navigate(Screen.Plan.route)\n                                    }\n                            )\n                            Text(\n                                text = \"Manual\",\n                                color = Color.White,\n                                fontSize = 22.sp,\n                                modifier = Modifier\n                                    .padding(16.dp)\n                                    .clickable {\n                                        selectedMode = \"Manual\"\n                                        menuExpanded = false\n                                    }\n                            )\n                        }\n                    }\n                }\n            }\n\n            Spacer(modifier = Modifier.width(12.dp))\n\n            // Home icon\n            Icon(\n                Icons.Default.Home,\n                contentDescription = \"Home\",\n                tint = Color.White,\n                modifier = Modifier.clickable {\n                    navController.navigate(Screen.Connection.route)\n                }\n            )\n\n            Spacer(modifier = Modifier.width(16.dp))\n\n            // Title & Mode\n            Column(\n                verticalArrangement = Arrangement.Center,\n                horizontalAlignment = Alignment.Start\n            ) {\n                Spacer(modifier = Modifier.height(10.dp))\n                Text(\n                    text = \"Pavaman Aviation\",\n                    color = Color.White,\n                    fontWeight = FontWeight.Bold,\n                    fontSize = 25.sp\n                )\n                Spacer(modifier = Modifier.height(2.dp))\n                // Show selected mode only if not null\n                selectedMode?.let {\n                    Text(\n                        text = it,\n                        color = Color.White.copy(alpha = 0.7f),\n                        fontSize = 15.sp\n                    )\n                }\n            }\n\n            Spacer(modifier = Modifier.weight(1f))\n\n            // Status & telemetry\n            Row(verticalAlignment = Alignment.CenterVertically) {\n                ConnectionStatusWidget(isConnected = telemetryState.connected)\n                DividerBlock()\n                InfoBlock(Icons.Default.Flight, \"13%\")\n                DividerBlock()\n                InfoBlock(Icons.Default.BatteryFull, \"${telemetryState.batteryPercent ?: \"N/A\"}%\")\n                DividerBlock()\n                InfoBlock(Icons.Default.Gamepad, \"100%\")\n                DividerBlock()\n                InfoBlockGroup(\n                    Icons.Default.Bolt,\n                    listOf(\n                        \"${telemetryState.voltage ?: \"N/A\"} V\",\n                        \"${telemetryState.currentA ?: \"N/A\"} A\"\n                    )\n                )\n                DividerBlock()\n                InfoBlockGroup(\n                    Icons.Default.SatelliteAlt,\n                    listOf(\n                        \"${telemetryState.sats ?: \"N/A\"} sats\",\n                        \"${telemetryState.hdop ?: \"N/A\"} hdop\"\n                    )\n                )\n                DividerBlock()\n                InfoBlockGroup(\n                    Icons.Default.Sync,\n                    listOf(\"${telemetryState.mode}\", if (telemetryState.armed) \"Armed\" else \"Disarmed\")\n                )\n                DividerBlock()\n\n                // Kebab menu\n                Box {\n                    Icon(\n                        Icons.Default.MoreVert,\n                        contentDescription = \"More\",\n                        tint = Color.White,\n                        modifier = Modifier.clickable { kebabMenuExpanded = true }\n                    )\n                    DropdownMenu(\n                        expanded = kebabMenuExpanded,\n                        onDismissRequest = { kebabMenuExpanded = false }\n                    ) {\n                        DropdownMenuItem(\n                            text = { Text(\"Settings\") },\n                            onClick = { kebabMenuExpanded = false }\n                        )\n                        DropdownMenuItem(\n                            text = { Text(\"About App\") },\n                            onClick = { kebabMenuExpanded = false }\n                        )\n                        DropdownMenuItem(\n                            text = { Text(\"Logout\") },\n                            onClick = {\n                                kebabMenuExpanded = false\n                                authViewModel.signout()\n                                navController.navigate(Screen.Login.route) {\n                                    popUpTo(0)\n                                }\n                            }\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun ConnectionStatusWidget(isConnected: Boolean) {\n    val statusColor = if (isConnected) Color.Green else Color.Red\n    val statusText = if (isConnected) \"Connected\" else \"Disconnected\"\n\n    Row(verticalAlignment = Alignment.CenterVertically) {\n        Box(\n            modifier = Modifier\n                .size(10.dp)\n                .background(statusColor, shape = CircleShape)\n        )\n        Spacer(modifier = Modifier.width(4.dp))\n        Text(statusText, color = Color.White, fontSize = 12.sp)\n    }\n}\n\n@Composable\nfun DividerBlock() {\n    Box(\n        modifier = Modifier\n            .padding(horizontal = 8.dp)\n            .width(1.dp)\n            .height(30.dp)\n            .background(Color.White.copy(alpha = 0.7f))\n    )\n}\n\n@Composable\nfun InfoBlock(icon: ImageVector, value: String) {\n    Column(\n        modifier = Modifier.padding(horizontal = 6.dp),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        Icon(icon, contentDescription = null, tint = Color.White, modifier = Modifier.size(18.dp))\n        Spacer(modifier = Modifier.height(2.dp))\n        Text(value, color = Color.White, fontSize = 12.sp)\n    }\n}\n\n@Composable\nfun InfoBlockGroup(icon: ImageVector, values: List<String>) {\n    Column(\n        modifier = Modifier.padding(horizontal = 6.dp),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        Icon(icon, contentDescription = null, tint = Color.White, modifier = Modifier.size(18.dp))\n        Spacer(modifier = Modifier.height(2.dp))\n        values.forEach { value ->\n            Text(value, color = Color.White, fontSize = 12.sp)\n        }\n    }\n}\n","baseTimestamp":1757924404905},"/Dummy.lcf":{"filePath":"/Dummy.lcf","baseContent":"","baseTimestamp":1757915507465,"deltas":[{"timestamp":1757998590434,"changes":[{"type":"MODIFY","lineNumber":0,"content":"MavLinkRepo mission","oldContent":"MavLinkRepo"}]},{"timestamp":1757998597507,"changes":[{"type":"MODIFY","lineNumber":0,"content":"mode","oldContent":"MavLinkRepo mission"}]},{"timestamp":1757998603243,"changes":[{"type":"MODIFY","lineNumber":0,"content":"MavLinkRepo","oldContent":"mode"}]},{"timestamp":1758011065783,"changes":[{"type":"MODIFY","lineNumber":0,"content":"map","oldContent":"MavLinkRepo"}]},{"timestamp":1758011422221,"changes":[{"type":"MODIFY","lineNumber":0,"content":"MavLinkRepo","oldContent":"map"}]},{"timestamp":1758019427757,"changes":[{"type":"MODIFY","lineNumber":0,"content":"map","oldContent":"MavLinkRepo"}]},{"timestamp":1758019493931,"changes":[{"type":"MODIFY","lineNumber":0,"content":"MavLinkRepo","oldContent":"map"}]},{"timestamp":1758019614586,"changes":[{"type":"MODIFY","lineNumber":0,"content":"map","oldContent":"MavLinkRepo"}]},{"timestamp":1758084492800,"changes":[{"type":"MODIFY","lineNumber":0,"content":"MavLinkRepo","oldContent":"map"}]},{"timestamp":1758172836250,"changes":[{"type":"MODIFY","lineNumber":0,"content":"","oldContent":"MavLinkRepo"}]},{"timestamp":1758172842819,"changes":[{"type":"MODIFY","lineNumber":0,"content":"MavLinkRepo","oldContent":""}]},{"timestamp":1758172846084,"changes":[{"type":"MODIFY","lineNumber":0,"content":"","oldContent":"MavLinkRepo"}]},{"timestamp":1758177586874,"changes":[{"type":"MODIFY","lineNumber":0,"content":"MavLinkRepo","oldContent":""}]},{"timestamp":1758177595413,"changes":[{"type":"MODIFY","lineNumber":0,"content":"package:mine ","oldContent":"MavLinkRepo"}]},{"timestamp":1758177620537,"changes":[{"type":"MODIFY","lineNumber":0,"content":"mode","oldContent":"package:mine "}]},{"timestamp":1758177629756,"changes":[{"type":"MODIFY","lineNumber":0,"content":"MavLinkRepo","oldContent":"mode"}]},{"timestamp":1758177649007,"changes":[{"type":"MODIFY","lineNumber":0,"content":"package:mine ","oldContent":"MavLinkRepo"}]},{"timestamp":1758177837677,"changes":[{"type":"MODIFY","lineNumber":0,"content":"MavLinkRepo","oldContent":"package:mine "}]},{"timestamp":1758178186764,"changes":[{"type":"MODIFY","lineNumber":0,"content":"package:mine ","oldContent":"MavLinkRepo"}]},{"timestamp":1758188261184,"changes":[{"type":"MODIFY","lineNumber":0,"content":"map","oldContent":"package:mine "}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/Telemetry/MavMode.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/Telemetry/MavMode.kt","baseContent":"package com.example.aerogcsclone.Telemetry\n\ndata class MavMode {\n}","baseTimestamp":1758003545093,"deltas":[{"timestamp":1758003550062,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"data class MavMode {"},{"type":"DELETE","lineNumber":3,"oldContent":"}"},{"type":"INSERT","lineNumber":2,"content":"data class MavMode()"}]},{"timestamp":1758003552620,"changes":[{"type":"MODIFY","lineNumber":2,"content":"data class MavMode(val value: UInt)","oldContent":"data class MavMode()"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/Telemetry/Data.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/Telemetry/Data.kt","baseContent":"package com.example.aerogcsclone.Telemetry\n\ndata class TelemetryState(\n\n    val connected : Boolean = false,\n    val fcuDetected : Boolean = false,\n    //Altitude\n    val altitudeMsl: Float? = null,\n    val altitudeRelative: Float? = null,\n    //Speeds\n    val airspeed: Float? = null,\n    val groundspeed: Float? = null,\n    //Battery\n    val voltage: Float? = null,\n    val batteryPercent: Int? = null,\n    val currentA : Float? = null,\n    //Sat count and HDOP\n    val sats : Int? = null,\n    val hdop : Float? = null,\n    //Latitude and Longitude\n    val latitude : Double?= null,\n    val longitude : Double? = null,\n\n    val mode: String? = null,\n    val armed: Boolean = false,\n    val armable: Boolean = false,\n    // Mission timer (seconds elapsed since mission start, null if not running)\n    val missionElapsedSec: Long? = null,\n)","baseTimestamp":1758183940115,"deltas":[{"timestamp":1758185778268,"changes":[{"type":"INSERT","lineNumber":28,"content":"    val missionCompleted: Boolean = false,"}]},{"timestamp":1758187550384,"changes":[{"type":"INSERT","lineNumber":29,"content":"    val totalDistanceMeters: Float? = null"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uiconnection/ConnectionPage.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uiconnection/ConnectionPage.kt","baseContent":"package com.example.aerogcsclone.uiconnection\n\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.unit.dp\nimport androidx.navigation.NavController\nimport com.example.aerogcsclone.Telemetry.SharedViewModel\nimport com.example.aerogcsclone.navigation.Screen\nimport kotlinx.coroutines.flow.collectLatest\nimport kotlinx.coroutines.launch\n\n@Composable\nfun ConnectionPage(navController: NavController, viewModel: SharedViewModel) {\n    var isConnecting by remember { mutableStateOf(false) }\n    var errorMessage by remember { mutableStateOf(\"\") }\n    val coroutineScope = rememberCoroutineScope()\n\n    LaunchedEffect(viewModel) {\n        viewModel.isConnected.collectLatest { isConnected ->\n            if (isConnected) {\n                navController.navigate(Screen.Main.route) {\n                    popUpTo(Screen.Connection.route) { inclusive = true }\n                }\n            }\n        }\n    }\n\n    Box(\n        modifier = Modifier\n            .fillMaxSize()\n            .background(Color(0xFF535350))\n            .padding(20.dp),\n        contentAlignment = Alignment.Center\n    ) {\n        Column(\n            horizontalAlignment = Alignment.CenterHorizontally,\n            verticalArrangement = Arrangement.Center\n        ) {\n            Text(\n                \"Connect to Drone\",\n                style = MaterialTheme.typography.headlineMedium,\n                color = Color.White\n            )\n\n            Spacer(modifier = Modifier.height(20.dp))\n\n            val ipAddress by viewModel.ipAddress\n            val port by viewModel.port\n\n            OutlinedTextField(\n                value = ipAddress,\n                onValueChange = { viewModel.onIpAddressChange(it) },\n                label = { Text(\"IP Address\", color = Color.White) },\n                modifier = Modifier.fillMaxWidth(),\n                textStyle = LocalTextStyle.current.copy(color = Color.White)\n            )\n\n            Spacer(modifier = Modifier.height(12.dp))\n\n            OutlinedTextField(\n                value = port,\n                onValueChange = { viewModel.onPortChange(it) },\n                label = { Text(\"Port\", color = Color.White) },\n                modifier = Modifier.fillMaxWidth(),\n                textStyle = LocalTextStyle.current.copy(color = Color.White)\n            )\n\n\n            Spacer(modifier = Modifier.height(20.dp))\n\n            Button(\n                onClick = {\n                    isConnecting = true\n                    errorMessage = \"\"\n                    coroutineScope.launch {\n                        try {\n                            viewModel.connect()\n                        } catch (e: Exception) {\n                            errorMessage = e.message ?: \"Connection failed\"\n                            isConnecting = false\n                        }\n                    }\n                },\n                modifier = Modifier.fillMaxWidth(),\n                enabled = !isConnecting\n            ) {\n                Text(if (isConnecting) \"Connecting...\" else \"Connect\")\n            }\n\n            if (errorMessage.isNotEmpty()) {\n                Spacer(modifier = Modifier.height(10.dp))\n                Text(errorMessage, color = MaterialTheme.colorScheme.error)\n            }\n        }\n    }\n}\n","baseTimestamp":1758187312320,"deltas":[{"timestamp":1758276929204,"changes":[{"type":"INSERT","lineNumber":2,"content":"import android.widget.Toast"},{"type":"INSERT","lineNumber":10,"content":"import androidx.compose.ui.platform.LocalContext"},{"type":"INSERT","lineNumber":16,"content":"import kotlinx.coroutines.Job"},{"type":"INSERT","lineNumber":17,"content":"import kotlinx.coroutines.delay"},{"type":"INSERT","lineNumber":26,"content":"    var connectionJob by remember { mutableStateOf<Job?>(null) }"},{"type":"INSERT","lineNumber":27,"content":"    val context = LocalContext.current"},{"type":"INSERT","lineNumber":28,"content":"    var showPopup by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":33,"content":"                isConnecting = false"},{"type":"INSERT","lineNumber":34,"content":"                connectionJob?.cancel()"},{"type":"INSERT","lineNumber":42,"content":"    fun startConnection(autoRetry: Boolean = false) {"},{"type":"INSERT","lineNumber":43,"content":"        isConnecting = true"},{"type":"INSERT","lineNumber":44,"content":"        errorMessage = \"\""},{"type":"INSERT","lineNumber":45,"content":"        connectionJob?.cancel()"},{"type":"INSERT","lineNumber":46,"content":"        connectionJob = coroutineScope.launch {"},{"type":"INSERT","lineNumber":47,"content":"            var attempts = 0"},{"type":"INSERT","lineNumber":48,"content":"            val maxAttempts = if (autoRetry) 3 else 1"},{"type":"INSERT","lineNumber":49,"content":"            while (attempts < maxAttempts && !viewModel.isConnected.value) {"},{"type":"INSERT","lineNumber":50,"content":"                try {"},{"type":"INSERT","lineNumber":51,"content":"                    viewModel.connect()"},{"type":"INSERT","lineNumber":52,"content":"                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":53,"content":"                    errorMessage = e.message ?: \"Connection failed\""},{"type":"INSERT","lineNumber":54,"content":"                }"},{"type":"INSERT","lineNumber":55,"content":"                attempts++"},{"type":"INSERT","lineNumber":56,"content":"                if (!viewModel.isConnected.value && autoRetry && attempts < maxAttempts) {"},{"type":"INSERT","lineNumber":57,"content":"                    delay(5000)"},{"type":"INSERT","lineNumber":58,"content":"                }"},{"type":"INSERT","lineNumber":59,"content":"            }"},{"type":"INSERT","lineNumber":60,"content":"            if (!viewModel.isConnected.value) {"},{"type":"INSERT","lineNumber":61,"content":"                isConnecting = false"},{"type":"INSERT","lineNumber":62,"content":"                showPopup = true"},{"type":"INSERT","lineNumber":63,"content":"            }"},{"type":"INSERT","lineNumber":64,"content":"        }"},{"type":"INSERT","lineNumber":65,"content":"    }"},{"type":"INSERT","lineNumber":66,"content":""},{"type":"INSERT","lineNumber":67,"content":"    fun cancelConnection() {"},{"type":"INSERT","lineNumber":68,"content":"        connectionJob?.cancel()"},{"type":"INSERT","lineNumber":69,"content":"        isConnecting = false"},{"type":"INSERT","lineNumber":70,"content":"        errorMessage = \"\""},{"type":"INSERT","lineNumber":71,"content":"        viewModel.cancelConnection()"},{"type":"INSERT","lineNumber":72,"content":"    }"},{"type":"INSERT","lineNumber":73,"content":""},{"type":"DELETE","lineNumber":73,"oldContent":""},{"type":"INSERT","lineNumber":116,"content":"            Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {"},{"type":"INSERT","lineNumber":117,"content":"                Button("},{"type":"INSERT","lineNumber":118,"content":"                    onClick = { startConnection(autoRetry = true) },"},{"type":"INSERT","lineNumber":119,"content":"                    modifier = Modifier.weight(1f),"},{"type":"INSERT","lineNumber":120,"content":"                    enabled = !isConnecting"},{"type":"INSERT","lineNumber":121,"content":"                ) {"},{"type":"INSERT","lineNumber":122,"content":"                    Text(if (isConnecting) \"Connecting...\" else \"Connect\")"},{"type":"INSERT","lineNumber":123,"content":"                }"},{"type":"INSERT","lineNumber":124,"content":"                Spacer(modifier = Modifier.width(12.dp))"},{"type":"INSERT","lineNumber":125,"content":"                Button("},{"type":"INSERT","lineNumber":126,"content":"                    onClick = { startConnection(autoRetry = false) },"},{"type":"INSERT","lineNumber":127,"content":"                    modifier = Modifier.weight(1f),"},{"type":"INSERT","lineNumber":128,"content":"                    enabled = !isConnecting"},{"type":"INSERT","lineNumber":129,"content":"                ) {"},{"type":"INSERT","lineNumber":130,"content":"                    Text(\"Retry\")"},{"type":"INSERT","lineNumber":131,"content":"                }"},{"type":"INSERT","lineNumber":132,"content":"            }"},{"type":"INSERT","lineNumber":133,"content":""},{"type":"INSERT","lineNumber":134,"content":"            Spacer(modifier = Modifier.height(12.dp))"},{"type":"INSERT","lineNumber":135,"content":""},{"type":"DELETE","lineNumber":77,"oldContent":"                onClick = {"},{"type":"DELETE","lineNumber":78,"oldContent":"                    isConnecting = true"},{"type":"DELETE","lineNumber":79,"oldContent":"                    errorMessage = \"\""},{"type":"DELETE","lineNumber":80,"oldContent":"                    coroutineScope.launch {"},{"type":"DELETE","lineNumber":81,"oldContent":"                        try {"},{"type":"DELETE","lineNumber":82,"oldContent":"                            viewModel.connect()"},{"type":"DELETE","lineNumber":83,"oldContent":"                        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":84,"oldContent":"                            errorMessage = e.message ?: \"Connection failed\""},{"type":"DELETE","lineNumber":85,"oldContent":"                            isConnecting = false"},{"type":"DELETE","lineNumber":86,"oldContent":"                        }"},{"type":"DELETE","lineNumber":87,"oldContent":"                    }"},{"type":"DELETE","lineNumber":88,"oldContent":"                },"},{"type":"INSERT","lineNumber":137,"content":"                onClick = { cancelConnection() },"},{"type":"DELETE","lineNumber":90,"oldContent":"                enabled = !isConnecting"},{"type":"INSERT","lineNumber":139,"content":"                enabled = isConnecting"},{"type":"DELETE","lineNumber":92,"oldContent":"                Text(if (isConnecting) \"Connecting...\" else \"Connect\")"},{"type":"INSERT","lineNumber":141,"content":"                Text(\"Cancel\")"},{"type":"INSERT","lineNumber":149,"content":"        if (showPopup) {"},{"type":"INSERT","lineNumber":150,"content":"            AlertDialog("},{"type":"INSERT","lineNumber":151,"content":"                onDismissRequest = { showPopup = false },"},{"type":"INSERT","lineNumber":152,"content":"                title = { Text(\"Connection Failed\") },"},{"type":"INSERT","lineNumber":153,"content":"                text = { Text(\"Unable to connect to the drone after multiple attempts.\") },"},{"type":"INSERT","lineNumber":154,"content":"                confirmButton = {"},{"type":"INSERT","lineNumber":155,"content":"                    Button(onClick = { showPopup = false }) {"},{"type":"INSERT","lineNumber":156,"content":"                        Text(\"OK\")"},{"type":"INSERT","lineNumber":157,"content":"                    }"},{"type":"INSERT","lineNumber":158,"content":"                }"},{"type":"INSERT","lineNumber":159,"content":"            )"},{"type":"INSERT","lineNumber":160,"content":"        }"}]},{"timestamp":1758277050672,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import android.widget.Toast"},{"type":"DELETE","lineNumber":10,"oldContent":"import androidx.compose.ui.text.style.TextAlign"},{"type":"INSERT","lineNumber":14,"content":"import kotlinx.coroutines.Job"},{"type":"INSERT","lineNumber":15,"content":"import kotlinx.coroutines.delay"},{"type":"DELETE","lineNumber":18,"oldContent":"import kotlinx.coroutines.Job"},{"type":"DELETE","lineNumber":20,"oldContent":"import kotlinx.coroutines.delay"},{"type":"INSERT","lineNumber":24,"content":"    var connectionJob by remember { mutableStateOf<Job?>(null) }"},{"type":"INSERT","lineNumber":25,"content":"    var showPopup by remember { mutableStateOf(false) }"},{"type":"MODIFY","lineNumber":30,"content":"                isConnecting = false","oldContent":"    var connectionJob by remember { mutableStateOf<Job?>(null) }"},{"type":"INSERT","lineNumber":31,"content":"                connectionJob?.cancel()"},{"type":"DELETE","lineNumber":32,"oldContent":"    val context = LocalContext.current"},{"type":"DELETE","lineNumber":34,"oldContent":"    var showPopup by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":39,"content":"    fun startConnection(autoRetry: Boolean = false) {"},{"type":"INSERT","lineNumber":40,"content":"        isConnecting = true"},{"type":"INSERT","lineNumber":41,"content":"        errorMessage = \"\""},{"type":"INSERT","lineNumber":42,"content":"        connectionJob?.cancel()"},{"type":"INSERT","lineNumber":43,"content":"        connectionJob = coroutineScope.launch {"},{"type":"INSERT","lineNumber":44,"content":"            var attempts = 0"},{"type":"INSERT","lineNumber":45,"content":"            val maxAttempts = if (autoRetry) 3 else 1"},{"type":"INSERT","lineNumber":46,"content":"            while (attempts < maxAttempts && !viewModel.isConnected.value) {"},{"type":"INSERT","lineNumber":47,"content":"                try {"},{"type":"INSERT","lineNumber":48,"content":"                    viewModel.connect()"},{"type":"INSERT","lineNumber":49,"content":"                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":50,"content":"                    errorMessage = e.message ?: \"Connection failed\""},{"type":"INSERT","lineNumber":51,"content":"                }"},{"type":"INSERT","lineNumber":52,"content":"                attempts++"},{"type":"INSERT","lineNumber":53,"content":"                if (!viewModel.isConnected.value && autoRetry && attempts < maxAttempts) {"},{"type":"INSERT","lineNumber":54,"content":"                    delay(5000)"},{"type":"INSERT","lineNumber":55,"content":"                }"},{"type":"INSERT","lineNumber":56,"content":"            }"},{"type":"INSERT","lineNumber":57,"content":"            if (!viewModel.isConnected.value) {"},{"type":"INSERT","lineNumber":59,"content":"                showPopup = true"},{"type":"INSERT","lineNumber":60,"content":"            }"},{"type":"INSERT","lineNumber":61,"content":"        }"},{"type":"INSERT","lineNumber":62,"content":"    }"},{"type":"INSERT","lineNumber":63,"content":""},{"type":"INSERT","lineNumber":64,"content":"    fun cancelConnection() {"},{"type":"INSERT","lineNumber":65,"content":"        connectionJob?.cancel()"},{"type":"INSERT","lineNumber":66,"content":"        isConnecting = false"},{"type":"INSERT","lineNumber":67,"content":"        errorMessage = \"\""},{"type":"INSERT","lineNumber":68,"content":"        coroutineScope.launch {"},{"type":"INSERT","lineNumber":69,"content":"            viewModel.cancelConnection()"},{"type":"INSERT","lineNumber":70,"content":"        }"},{"type":"INSERT","lineNumber":71,"content":"    }"},{"type":"INSERT","lineNumber":72,"content":""},{"type":"DELETE","lineNumber":42,"oldContent":"                connectionJob?.cancel()"},{"type":"DELETE","lineNumber":51,"oldContent":"    fun startConnection(autoRetry: Boolean = false) {"},{"type":"DELETE","lineNumber":53,"oldContent":"        isConnecting = true"},{"type":"DELETE","lineNumber":55,"oldContent":"        errorMessage = \"\""},{"type":"DELETE","lineNumber":57,"oldContent":"        connectionJob?.cancel()"},{"type":"DELETE","lineNumber":59,"oldContent":"        connectionJob = coroutineScope.launch {"},{"type":"DELETE","lineNumber":61,"oldContent":"            var attempts = 0"},{"type":"DELETE","lineNumber":63,"oldContent":"            val maxAttempts = if (autoRetry) 3 else 1"},{"type":"DELETE","lineNumber":65,"oldContent":"            while (attempts < maxAttempts && !viewModel.isConnected.value) {"},{"type":"DELETE","lineNumber":67,"oldContent":"                try {"},{"type":"DELETE","lineNumber":69,"oldContent":"                    viewModel.connect()"},{"type":"DELETE","lineNumber":71,"oldContent":"                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":73,"oldContent":"                    errorMessage = e.message ?: \"Connection failed\""},{"type":"DELETE","lineNumber":75,"oldContent":"                }"},{"type":"DELETE","lineNumber":77,"oldContent":"                attempts++"},{"type":"DELETE","lineNumber":79,"oldContent":"                if (!viewModel.isConnected.value && autoRetry && attempts < maxAttempts) {"},{"type":"DELETE","lineNumber":81,"oldContent":"                    delay(5000)"},{"type":"DELETE","lineNumber":83,"oldContent":"                }"},{"type":"DELETE","lineNumber":85,"oldContent":"            }"},{"type":"DELETE","lineNumber":87,"oldContent":"            if (!viewModel.isConnected.value) {"},{"type":"DELETE","lineNumber":89,"oldContent":"                isConnecting = false"},{"type":"DELETE","lineNumber":91,"oldContent":"                showPopup = true"},{"type":"DELETE","lineNumber":93,"oldContent":"            }"},{"type":"DELETE","lineNumber":95,"oldContent":"        }"},{"type":"DELETE","lineNumber":97,"oldContent":"    }"},{"type":"DELETE","lineNumber":99,"oldContent":""},{"type":"DELETE","lineNumber":101,"oldContent":"    fun cancelConnection() {"},{"type":"DELETE","lineNumber":103,"oldContent":"        connectionJob?.cancel()"},{"type":"DELETE","lineNumber":105,"oldContent":"        isConnecting = false"},{"type":"DELETE","lineNumber":107,"oldContent":"        errorMessage = \"\""},{"type":"DELETE","lineNumber":109,"oldContent":"        viewModel.cancelConnection()"},{"type":"DELETE","lineNumber":111,"oldContent":"    }"},{"type":"DELETE","lineNumber":113,"oldContent":""},{"type":"INSERT","lineNumber":115,"content":"            Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {"},{"type":"INSERT","lineNumber":116,"content":"                Button("},{"type":"INSERT","lineNumber":117,"content":"                    onClick = { startConnection(autoRetry = true) },"},{"type":"INSERT","lineNumber":118,"content":"                    modifier = Modifier.weight(1f),"},{"type":"INSERT","lineNumber":119,"content":"                    enabled = !isConnecting"},{"type":"INSERT","lineNumber":120,"content":"                ) {"},{"type":"INSERT","lineNumber":121,"content":"                    Text(if (isConnecting) \"Connecting...\" else \"Connect\")"},{"type":"INSERT","lineNumber":122,"content":"                }"},{"type":"INSERT","lineNumber":123,"content":"                Spacer(modifier = Modifier.width(12.dp))"},{"type":"INSERT","lineNumber":124,"content":"                Button("},{"type":"INSERT","lineNumber":125,"content":"                    onClick = { startConnection(autoRetry = false) },"},{"type":"INSERT","lineNumber":126,"content":"                    modifier = Modifier.weight(1f),"},{"type":"INSERT","lineNumber":127,"content":"                    enabled = !isConnecting"},{"type":"INSERT","lineNumber":128,"content":"                ) {"},{"type":"INSERT","lineNumber":129,"content":"                    Text(\"Retry\")"},{"type":"INSERT","lineNumber":130,"content":"                }"},{"type":"INSERT","lineNumber":131,"content":"            }"},{"type":"INSERT","lineNumber":132,"content":""},{"type":"INSERT","lineNumber":133,"content":"            Spacer(modifier = Modifier.height(12.dp))"},{"type":"INSERT","lineNumber":134,"content":""},{"type":"INSERT","lineNumber":136,"content":"                onClick = { cancelConnection() },"},{"type":"INSERT","lineNumber":138,"content":"                enabled = isConnecting"},{"type":"INSERT","lineNumber":140,"content":"                Text(\"Cancel\")"},{"type":"INSERT","lineNumber":148,"content":"        if (showPopup) {"},{"type":"INSERT","lineNumber":149,"content":"            AlertDialog("},{"type":"INSERT","lineNumber":150,"content":"                onDismissRequest = { showPopup = false },"},{"type":"INSERT","lineNumber":151,"content":"                title = { Text(\"Connection Failed\") },"},{"type":"INSERT","lineNumber":152,"content":"                text = { Text(\"Unable to connect to the drone after multiple attempts.\") },"},{"type":"INSERT","lineNumber":153,"content":"                confirmButton = {"},{"type":"INSERT","lineNumber":154,"content":"                    Button(onClick = { showPopup = false }) {"},{"type":"INSERT","lineNumber":155,"content":"                        Text(\"OK\")"},{"type":"INSERT","lineNumber":156,"content":"                    }"},{"type":"INSERT","lineNumber":157,"content":"                }"},{"type":"INSERT","lineNumber":158,"content":"            )"},{"type":"INSERT","lineNumber":159,"content":"        }"},{"type":"DELETE","lineNumber":129,"oldContent":"        }"},{"type":"DELETE","lineNumber":130,"oldContent":"            )"},{"type":"DELETE","lineNumber":131,"oldContent":"                }"},{"type":"DELETE","lineNumber":132,"oldContent":"                    }"},{"type":"DELETE","lineNumber":133,"oldContent":"                        Text(\"OK\")"},{"type":"DELETE","lineNumber":134,"oldContent":"                    Button(onClick = { showPopup = false }) {"},{"type":"DELETE","lineNumber":135,"oldContent":"                confirmButton = {"},{"type":"DELETE","lineNumber":136,"oldContent":"                text = { Text(\"Unable to connect to the drone after multiple attempts.\") },"},{"type":"DELETE","lineNumber":137,"oldContent":"                title = { Text(\"Connection Failed\") },"},{"type":"DELETE","lineNumber":138,"oldContent":"                onDismissRequest = { showPopup = false },"},{"type":"DELETE","lineNumber":139,"oldContent":"            AlertDialog("},{"type":"DELETE","lineNumber":140,"oldContent":"        if (showPopup) {"},{"type":"DELETE","lineNumber":141,"oldContent":"                Text(\"Cancel\")"},{"type":"DELETE","lineNumber":142,"oldContent":"            Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {"},{"type":"DELETE","lineNumber":143,"oldContent":"                enabled = isConnecting"},{"type":"DELETE","lineNumber":144,"oldContent":"                Button("},{"type":"DELETE","lineNumber":145,"oldContent":"                onClick = { cancelConnection() },"},{"type":"DELETE","lineNumber":146,"oldContent":"                    onClick = { startConnection(autoRetry = true) },"},{"type":"DELETE","lineNumber":147,"oldContent":""},{"type":"DELETE","lineNumber":148,"oldContent":"                    modifier = Modifier.weight(1f),"},{"type":"DELETE","lineNumber":149,"oldContent":"            Spacer(modifier = Modifier.height(12.dp))"},{"type":"DELETE","lineNumber":150,"oldContent":"                    enabled = !isConnecting"},{"type":"DELETE","lineNumber":151,"oldContent":""},{"type":"DELETE","lineNumber":152,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":153,"oldContent":"            }"},{"type":"DELETE","lineNumber":154,"oldContent":"                    Text(if (isConnecting) \"Connecting...\" else \"Connect\")"},{"type":"DELETE","lineNumber":155,"oldContent":"                }"},{"type":"DELETE","lineNumber":156,"oldContent":"                }"},{"type":"DELETE","lineNumber":157,"oldContent":"                    Text(\"Retry\")"},{"type":"DELETE","lineNumber":158,"oldContent":"                Spacer(modifier = Modifier.width(12.dp))"},{"type":"DELETE","lineNumber":159,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":160,"oldContent":"                Button("},{"type":"DELETE","lineNumber":161,"oldContent":"                    enabled = !isConnecting"},{"type":"DELETE","lineNumber":162,"oldContent":"                    onClick = { startConnection(autoRetry = false) },"},{"type":"DELETE","lineNumber":163,"oldContent":"                    modifier = Modifier.weight(1f),"}]}]}}}