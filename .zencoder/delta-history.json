{"snapshots":{"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uimain/GcsMap.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uimain/GcsMap.kt","baseContent":"package com.example.aerogcsclone.uimain\n\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Modifier\nimport com.example.aerogcsclone.Telemetry.TelemetryState\nimport com.google.android.gms.maps.CameraUpdateFactory\nimport com.google.android.gms.maps.model.LatLng\nimport com.google.maps.android.compose.*\n\n@Composable\nfun GcsMap(telemetryState: TelemetryState) {\n    var points by remember { mutableStateOf(listOf<LatLng>()) }\n    var polygonClosed by remember { mutableStateOf(false) }\n\n    val cameraPositionState = rememberCameraPositionState()\n\n    // Update camera when telemetry changes (live location)\n    LaunchedEffect(telemetryState.latitude, telemetryState.longitude) {\n        val lat = telemetryState.latitude\n        val lon = telemetryState.longitude\n        if (lat != null && lon != null) {\n            val newPosition = LatLng(lat, lon)\n            cameraPositionState.animate(\n                update = CameraUpdateFactory.newLatLngZoom(newPosition, 16f),\n                durationMs = 1000\n            )\n        }\n    }\n\n    GoogleMap(\n        modifier = Modifier.fillMaxSize(),\n        cameraPositionState = cameraPositionState,\n        onMapClick = { latLng ->\n            if (!polygonClosed) {\n                points = points + latLng\n            }\n        }\n    ) {\n        // Live drone marker\n        val lat = telemetryState.latitude\n        val lon = telemetryState.longitude\n        if (lat != null && lon != null) {\n            Marker(\n                state = MarkerState(position = LatLng(lat, lon)),\n                title = \"Drone Location\"\n            )\n        }\n\n        // User-drawn markers\n        points.forEachIndexed { index, point ->\n            Marker(\n                state = MarkerState(position = point),\n                title = \"Marker ${index + 1}\",\n                onClick = {\n                    if (points.size > 1 && !polygonClosed) {\n                        val last = points.last()\n\n                        if (point == points.first() && points.size > 2) {\n                            points = points + point\n                            polygonClosed = true\n                        } else if (point != last) {\n                            points = points + point\n                        }\n                    }\n                    true\n                }\n            )\n        }\n\n        // Draw polyline (open or closed)\n        if (points.size > 1) {\n            Polyline(\n                points = points,\n                width = 4f\n            )\n        }\n    }\n}\n","baseTimestamp":1757909204070,"deltas":[{"timestamp":1757914278117,"changes":[{"type":"DELETE","lineNumber":11,"oldContent":"fun GcsMap(telemetryState: TelemetryState) {"},{"type":"DELETE","lineNumber":12,"oldContent":"    var points by remember { mutableStateOf(listOf<LatLng>()) }"},{"type":"INSERT","lineNumber":11,"content":"fun GcsMap("},{"type":"INSERT","lineNumber":12,"content":"    telemetryState: TelemetryState,"},{"type":"INSERT","lineNumber":13,"content":"    points: List<LatLng> = emptyList(),"},{"type":"INSERT","lineNumber":14,"content":"    onMapClick: (LatLng) -> Unit = {}"},{"type":"INSERT","lineNumber":15,"content":") {"},{"type":"INSERT","lineNumber":16,"content":"    var internalPoints by remember { mutableStateOf(points) }"},{"type":"INSERT","lineNumber":34,"content":"    // Keep internalPoints in sync when parent points change"},{"type":"INSERT","lineNumber":35,"content":"    LaunchedEffect(points) {"},{"type":"INSERT","lineNumber":36,"content":"        internalPoints = points"},{"type":"INSERT","lineNumber":37,"content":"    }"},{"type":"INSERT","lineNumber":38,"content":""},{"type":"DELETE","lineNumber":35,"oldContent":"                points = points + latLng"},{"type":"INSERT","lineNumber":44,"content":"                // Notify parent"},{"type":"INSERT","lineNumber":45,"content":"                onMapClick(latLng)"},{"type":"INSERT","lineNumber":46,"content":"                // update internal copy for immediate UI feedback"},{"type":"INSERT","lineNumber":47,"content":"                internalPoints = internalPoints + latLng"},{"type":"DELETE","lineNumber":50,"oldContent":"        points.forEachIndexed { index, point ->"},{"type":"INSERT","lineNumber":62,"content":"        internalPoints.forEachIndexed { index, point ->"},{"type":"DELETE","lineNumber":54,"oldContent":"                onClick = {"},{"type":"DELETE","lineNumber":55,"oldContent":"                    if (points.size > 1 && !polygonClosed) {"},{"type":"DELETE","lineNumber":56,"oldContent":"                        val last = points.last()"},{"type":"DELETE","lineNumber":57,"oldContent":""},{"type":"DELETE","lineNumber":58,"oldContent":"                        if (point == points.first() && points.size > 2) {"},{"type":"DELETE","lineNumber":59,"oldContent":"                            points = points + point"},{"type":"DELETE","lineNumber":60,"oldContent":"                            polygonClosed = true"},{"type":"DELETE","lineNumber":61,"oldContent":"                        } else if (point != last) {"},{"type":"DELETE","lineNumber":62,"oldContent":"                            points = points + point"},{"type":"DELETE","lineNumber":63,"oldContent":"                        }"},{"type":"DELETE","lineNumber":64,"oldContent":"                    }"},{"type":"DELETE","lineNumber":65,"oldContent":"                    true"},{"type":"DELETE","lineNumber":66,"oldContent":"                }"},{"type":"MODIFY","lineNumber":70,"content":"        if (internalPoints.size > 1) {","oldContent":"        if (points.size > 1) {"},{"type":"MODIFY","lineNumber":72,"content":"                points = internalPoints,","oldContent":"                points = points,"}]},{"timestamp":1757915700671,"changes":[{"type":"DELETE","lineNumber":11,"oldContent":"fun GcsMap("},{"type":"DELETE","lineNumber":12,"oldContent":"    telemetryState: TelemetryState,"},{"type":"DELETE","lineNumber":13,"oldContent":"    points: List<LatLng> = emptyList(),"},{"type":"INSERT","lineNumber":11,"content":"fun GcsMap(telemetryState: TelemetryState) {"},{"type":"INSERT","lineNumber":12,"content":"    var points by remember { mutableStateOf(listOf<LatLng>()) }"},{"type":"DELETE","lineNumber":15,"oldContent":"    onMapClick: (LatLng) -> Unit = {}"},{"type":"DELETE","lineNumber":17,"oldContent":") {"},{"type":"DELETE","lineNumber":19,"oldContent":"    var internalPoints by remember { mutableStateOf(points) }"},{"type":"DELETE","lineNumber":38,"oldContent":"    // Keep internalPoints in sync when parent points change"},{"type":"DELETE","lineNumber":40,"oldContent":"    LaunchedEffect(points) {"},{"type":"DELETE","lineNumber":41,"oldContent":"        internalPoints = points"},{"type":"INSERT","lineNumber":35,"content":"                points = points + latLng"},{"type":"DELETE","lineNumber":43,"oldContent":"    }"},{"type":"DELETE","lineNumber":45,"oldContent":""},{"type":"DELETE","lineNumber":52,"oldContent":"                // Notify parent"},{"type":"DELETE","lineNumber":54,"oldContent":"                onMapClick(latLng)"},{"type":"DELETE","lineNumber":56,"oldContent":"                // update internal copy for immediate UI feedback"},{"type":"DELETE","lineNumber":58,"oldContent":"                internalPoints = internalPoints + latLng"},{"type":"INSERT","lineNumber":50,"content":"        points.forEachIndexed { index, point ->"},{"type":"DELETE","lineNumber":65,"oldContent":"        internalPoints.forEachIndexed { index, point ->"},{"type":"INSERT","lineNumber":54,"content":"                onClick = {"},{"type":"INSERT","lineNumber":55,"content":"                    if (points.size > 1 && !polygonClosed) {"},{"type":"INSERT","lineNumber":56,"content":"                        val last = points.last()"},{"type":"INSERT","lineNumber":57,"content":""},{"type":"INSERT","lineNumber":58,"content":"                        if (point == points.first() && points.size > 2) {"},{"type":"INSERT","lineNumber":59,"content":"                            points = points + point"},{"type":"INSERT","lineNumber":60,"content":"                            polygonClosed = true"},{"type":"INSERT","lineNumber":61,"content":"                        } else if (point != last) {"},{"type":"INSERT","lineNumber":62,"content":"                            points = points + point"},{"type":"INSERT","lineNumber":63,"content":"                        }"},{"type":"INSERT","lineNumber":64,"content":"                    }"},{"type":"INSERT","lineNumber":65,"content":"                    true"},{"type":"INSERT","lineNumber":66,"content":"                }"},{"type":"DELETE","lineNumber":69,"oldContent":"        if (internalPoints.size > 1) {"},{"type":"INSERT","lineNumber":70,"content":"        // Draw polyline (open or closed)"},{"type":"DELETE","lineNumber":71,"oldContent":"                points = internalPoints,"},{"type":"INSERT","lineNumber":72,"content":"            Polyline("}]},{"timestamp":1757915709340,"changes":[{"type":"MODIFY","lineNumber":11,"content":"fun GcsMap(","oldContent":"fun GcsMap(telemetryState: TelemetryState) {"},{"type":"INSERT","lineNumber":12,"content":"    telemetryState: TelemetryState,"},{"type":"INSERT","lineNumber":13,"content":"    mapType: MapType"},{"type":"INSERT","lineNumber":14,"content":") {"},{"type":"DELETE","lineNumber":31,"oldContent":"                points = points + latLng"},{"type":"INSERT","lineNumber":36,"content":"        properties = MapProperties(mapType = mapType), // âœ… Map type applied"},{"type":"INSERT","lineNumber":39,"content":"                points = points + latLng"},{"type":"DELETE","lineNumber":42,"oldContent":"        points.forEachIndexed { index, point ->"},{"type":"INSERT","lineNumber":49,"content":"                title = \"Drone Location\""},{"type":"INSERT","lineNumber":50,"content":"            )"},{"type":"INSERT","lineNumber":51,"content":"        }"},{"type":"INSERT","lineNumber":52,"content":""},{"type":"INSERT","lineNumber":53,"content":"        // User-drawn markers"},{"type":"INSERT","lineNumber":54,"content":"        points.forEachIndexed { index, point ->"},{"type":"INSERT","lineNumber":55,"content":"            Marker("},{"type":"INSERT","lineNumber":56,"content":"                state = MarkerState(position = point),"},{"type":"INSERT","lineNumber":57,"content":"                title = \"Marker ${index + 1}\","},{"type":"DELETE","lineNumber":48,"oldContent":"                title = \"Drone Location\""},{"type":"DELETE","lineNumber":51,"oldContent":"            )"},{"type":"DELETE","lineNumber":54,"oldContent":"        }"},{"type":"DELETE","lineNumber":56,"oldContent":""},{"type":"DELETE","lineNumber":58,"oldContent":"        // User-drawn markers"},{"type":"DELETE","lineNumber":60,"oldContent":"            Marker("},{"type":"DELETE","lineNumber":62,"oldContent":"                state = MarkerState(position = point),"},{"type":"DELETE","lineNumber":64,"oldContent":"                title = \"Marker ${index + 1}\","},{"type":"DELETE","lineNumber":79,"oldContent":""}]},{"timestamp":1757915781162,"changes":[{"type":"MODIFY","lineNumber":13,"content":"<<<<<<< Updated upstream","oldContent":"    var points by remember { mutableStateOf(listOf<LatLng>()) }"},{"type":"MODIFY","lineNumber":16,"content":"    var points by remember { mutableStateOf(listOf<LatLng>()) }","oldContent":"    var polygonClosed by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":17,"content":"======="},{"type":"INSERT","lineNumber":18,"content":"    points: List<LatLng> = emptyList(),"},{"type":"INSERT","lineNumber":19,"content":"    onMapClick: (LatLng) -> Unit = {}"},{"type":"INSERT","lineNumber":20,"content":") {"},{"type":"INSERT","lineNumber":21,"content":"    var internalPoints by remember { mutableStateOf(points) }"},{"type":"INSERT","lineNumber":22,"content":">>>>>>> Stashed changes"},{"type":"INSERT","lineNumber":23,"content":"    var polygonClosed by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":40,"content":"    // Keep internalPoints in sync when parent points change"},{"type":"INSERT","lineNumber":41,"content":"    LaunchedEffect(points) {"},{"type":"INSERT","lineNumber":42,"content":"        internalPoints = points"},{"type":"INSERT","lineNumber":43,"content":"    }"},{"type":"INSERT","lineNumber":44,"content":""},{"type":"INSERT","lineNumber":48,"content":"        properties = MapProperties(mapType = mapType), // âœ… Map type applied"},{"type":"DELETE","lineNumber":38,"oldContent":"        properties = MapProperties(mapType = mapType), // âœ… Map type applied"},{"type":"INSERT","lineNumber":51,"content":"                // Notify parent"},{"type":"INSERT","lineNumber":52,"content":"                onMapClick(latLng)"},{"type":"INSERT","lineNumber":53,"content":"                // update internal copy for immediate UI feedback"},{"type":"INSERT","lineNumber":54,"content":"                internalPoints = internalPoints + latLng"},{"type":"DELETE","lineNumber":42,"oldContent":"                points = points + latLng"},{"type":"DELETE","lineNumber":49,"oldContent":"                onClick = {"},{"type":"DELETE","lineNumber":50,"oldContent":"                    if (points.size > 1 && !polygonClosed) {"},{"type":"DELETE","lineNumber":52,"oldContent":"                        val last = points.last()"},{"type":"DELETE","lineNumber":54,"oldContent":""},{"type":"DELETE","lineNumber":57,"oldContent":"                        if (point == points.first() && points.size > 2) {"},{"type":"DELETE","lineNumber":59,"oldContent":"                            points = points + point"},{"type":"DELETE","lineNumber":60,"oldContent":"        points.forEachIndexed { index, point ->"},{"type":"INSERT","lineNumber":69,"content":"        internalPoints.forEachIndexed { index, point ->"},{"type":"DELETE","lineNumber":62,"oldContent":"                            polygonClosed = true"},{"type":"DELETE","lineNumber":65,"oldContent":"                        } else if (point != last) {"},{"type":"DELETE","lineNumber":66,"oldContent":"                            points = points + point"},{"type":"DELETE","lineNumber":67,"oldContent":"                        }"},{"type":"DELETE","lineNumber":68,"oldContent":"                    }"},{"type":"DELETE","lineNumber":69,"oldContent":"                    true"},{"type":"DELETE","lineNumber":70,"oldContent":"                }"},{"type":"DELETE","lineNumber":75,"oldContent":"        if (points.size > 1) {"},{"type":"INSERT","lineNumber":77,"content":"        if (internalPoints.size > 1) {"},{"type":"DELETE","lineNumber":77,"oldContent":"                points = points,"},{"type":"INSERT","lineNumber":79,"content":"                points = internalPoints,"}]},{"timestamp":1757915853667,"changes":[{"type":"DELETE","lineNumber":11,"oldContent":"fun GcsMap("},{"type":"DELETE","lineNumber":12,"oldContent":"    telemetryState: TelemetryState,"},{"type":"DELETE","lineNumber":13,"oldContent":"<<<<<<< Updated upstream"},{"type":"DELETE","lineNumber":14,"oldContent":"    mapType: MapType"},{"type":"DELETE","lineNumber":15,"oldContent":"    var polygonClosed by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":11,"content":"fun GcsMap(telemetryState: TelemetryState) {"},{"type":"DELETE","lineNumber":17,"oldContent":"======="},{"type":"INSERT","lineNumber":13,"content":"    var polygonClosed by remember { mutableStateOf(false) }"},{"type":"DELETE","lineNumber":19,"oldContent":"    points: List<LatLng> = emptyList(),"},{"type":"DELETE","lineNumber":21,"oldContent":"    onMapClick: (LatLng) -> Unit = {}"},{"type":"DELETE","lineNumber":23,"oldContent":") {"},{"type":"DELETE","lineNumber":25,"oldContent":"    var internalPoints by remember { mutableStateOf(points) }"},{"type":"DELETE","lineNumber":27,"oldContent":">>>>>>> Stashed changes"},{"type":"DELETE","lineNumber":29,"oldContent":"    var polygonClosed by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":35,"content":"                points = points + latLng"},{"type":"DELETE","lineNumber":46,"oldContent":"    // Keep internalPoints in sync when parent points change"},{"type":"DELETE","lineNumber":48,"oldContent":"    LaunchedEffect(points) {"},{"type":"DELETE","lineNumber":50,"oldContent":"        internalPoints = points"},{"type":"DELETE","lineNumber":51,"oldContent":"    }"},{"type":"DELETE","lineNumber":53,"oldContent":""},{"type":"DELETE","lineNumber":58,"oldContent":"        properties = MapProperties(mapType = mapType), // âœ… Map type applied"},{"type":"DELETE","lineNumber":60,"oldContent":"                // Notify parent"},{"type":"DELETE","lineNumber":62,"oldContent":"                onMapClick(latLng)"},{"type":"DELETE","lineNumber":63,"oldContent":"                // update internal copy for immediate UI feedback"},{"type":"DELETE","lineNumber":65,"oldContent":"                internalPoints = internalPoints + latLng"},{"type":"INSERT","lineNumber":50,"content":"        points.forEachIndexed { index, point ->"},{"type":"DELETE","lineNumber":72,"oldContent":"        internalPoints.forEachIndexed { index, point ->"},{"type":"INSERT","lineNumber":54,"content":"                onClick = {"},{"type":"INSERT","lineNumber":55,"content":"                    if (points.size > 1 && !polygonClosed) {"},{"type":"INSERT","lineNumber":56,"content":"                        val last = points.last()"},{"type":"INSERT","lineNumber":57,"content":""},{"type":"INSERT","lineNumber":58,"content":"                        if (point == points.first() && points.size > 2) {"},{"type":"INSERT","lineNumber":59,"content":"                            points = points + point"},{"type":"INSERT","lineNumber":60,"content":"                            polygonClosed = true"},{"type":"INSERT","lineNumber":61,"content":"                        } else if (point != last) {"},{"type":"INSERT","lineNumber":62,"content":"                            points = points + point"},{"type":"INSERT","lineNumber":63,"content":"                        }"},{"type":"INSERT","lineNumber":64,"content":"                    }"},{"type":"INSERT","lineNumber":65,"content":"                    true"},{"type":"INSERT","lineNumber":66,"content":"                }"},{"type":"INSERT","lineNumber":71,"content":"        if (points.size > 1) {"},{"type":"DELETE","lineNumber":78,"oldContent":"        if (internalPoints.size > 1) {"},{"type":"INSERT","lineNumber":73,"content":"                points = points,"},{"type":"DELETE","lineNumber":80,"oldContent":"                points = internalPoints,"},{"type":"INSERT","lineNumber":79,"content":""}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/Telemetry/SharedViewModel.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/Telemetry/SharedViewModel.kt","baseContent":"package com.example.aerogcsclone.Telemetry\n\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.setValue\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.combine\nimport kotlinx.coroutines.launch\n\nclass SharedViewModel : ViewModel() {\n\n    var ipAddress by mutableStateOf(\"10.0.2.2\")\n    var port by mutableStateOf(\"5762\")\n\n    private var repo: MavlinkTelemetryRepository? = null\n\n    private val _telemetryState = mutableStateOf(TelemetryState())\n    val telemetryState: StateFlow<TelemetryState> = _telemetryState\n\n    val isConnected: Flow<ERROR> = telemetryState.combine(repo?.state) { state, repoState ->\n        state.connected || repoState?.connected == true\n    }\n\n\n    fun connect() {\n        viewModelScope.launch {\n            val portInt = port.toIntOrNull()\n            if (portInt != null) {\n                val newRepo = MavlinkTelemetryRepository(ipAddress, portInt)\n                repo = newRepo\n                newRepo.start()\n                newRepo.state.collect {\n                    _telemetryState.value = it\n                }\n            }\n        }\n    }\n}\n","baseTimestamp":1757400233339,"deltas":[{"timestamp":1757400239338,"changes":[{"type":"DELETE","lineNumber":7,"oldContent":"import kotlinx.coroutines.flow.Flow"},{"type":"MODIFY","lineNumber":21,"content":"    val isConnected: StateFlow<Boolean> = telemetryState.combine(repo?.state) { state, repoState ->","oldContent":"    val isConnected: Flow<ERROR> = telemetryState.combine(repo?.state) { state, repoState ->"}]},{"timestamp":1757400258744,"changes":[{"type":"INSERT","lineNumber":20,"content":""},{"type":"DELETE","lineNumber":21,"oldContent":"    val isConnected: Flow<ERROR> = telemetryState.combine(repo?.state) { state, repoState ->"},{"type":"MODIFY","lineNumber":23,"content":"    } as StateFlow<Boolean>","oldContent":"    }"}]},{"timestamp":1757400271889,"changes":[{"type":"MODIFY","lineNumber":19,"content":"    val telemetryState: StateFlow<TelemetryState> = _telemetryState as StateFlow<TelemetryState>","oldContent":"    val telemetryState: StateFlow<TelemetryState> = _telemetryState"}]},{"timestamp":1757400277822,"changes":[{"type":"INSERT","lineNumber":7,"content":"import kotlinx.coroutines.flow.Flow"},{"type":"MODIFY","lineNumber":22,"content":"    val isConnected: StateFlow<Boolean> = telemetryState.combine(repo?.state as Flow<T2>) { state, repoState ->","oldContent":"    val isConnected: StateFlow<Boolean> = telemetryState.combine(repo?.state) { state, repoState ->"}]},{"timestamp":1757400285451,"changes":[{"type":"DELETE","lineNumber":7,"oldContent":"import kotlinx.coroutines.flow.Flow"},{"type":"MODIFY","lineNumber":19,"content":"    val telemetryState: StateFlow<TelemetryState> = _telemetryState","oldContent":"    val telemetryState: StateFlow<TelemetryState> = _telemetryState as StateFlow<TelemetryState>"},{"type":"DELETE","lineNumber":23,"oldContent":"    val isConnected: StateFlow<Boolean> = telemetryState.combine(repo?.state as Flow<T2>) { state, repoState ->"},{"type":"INSERT","lineNumber":22,"content":"        state.connected || repoState?.connected == true"}]},{"timestamp":1757411797636,"changes":[{"type":"DELETE","lineNumber":7,"oldContent":"import kotlinx.coroutines.flow.StateFlow"},{"type":"MODIFY","lineNumber":7,"content":"import kotlinx.coroutines.flow.*","oldContent":"import kotlinx.coroutines.flow.combine"},{"type":"DELETE","lineNumber":18,"oldContent":"    val telemetryState: StateFlow<TelemetryState> = _telemetryState"},{"type":"DELETE","lineNumber":19,"oldContent":"    val telemetryState: StateFlow<TelemetryState> = _telemetryState as StateFlow<TelemetryState>"},{"type":"INSERT","lineNumber":17,"content":"    private val _telemetryState = MutableStateFlow(TelemetryState())"},{"type":"INSERT","lineNumber":18,"content":"    val telemetryState: StateFlow<TelemetryState> = _telemetryState.asStateFlow()"},{"type":"DELETE","lineNumber":21,"oldContent":"        state.connected || repoState?.connected == true"},{"type":"DELETE","lineNumber":22,"oldContent":"    val isConnected: StateFlow<Boolean> = telemetryState.combine(repo?.state) { state, repoState ->"},{"type":"DELETE","lineNumber":23,"oldContent":"    } as StateFlow<Boolean>"},{"type":"INSERT","lineNumber":20,"content":"    val isConnected: StateFlow<Boolean> = telemetryState"},{"type":"INSERT","lineNumber":21,"content":"        .map { it.connected }"},{"type":"INSERT","lineNumber":22,"content":"        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), false)"},{"type":"DELETE","lineNumber":25,"oldContent":""}]},{"timestamp":1757657536151,"changes":[{"type":"MODIFY","lineNumber":17,"content":"    private val _telemetryState = MutableStateFlow(TelemetryState())","oldContent":"    private val _telemetryState = MutableStateFlow(TelemetryState())"},{"type":"MODIFY","lineNumber":20,"content":"    val isConnected: StateFlow<Boolean> = telemetryState","oldContent":"    val isConnected: StateFlow<Boolean> = telemetryState"},{"type":"INSERT","lineNumber":37,"content":""},{"type":"INSERT","lineNumber":38,"content":"    fun arm() {"},{"type":"INSERT","lineNumber":39,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":40,"content":"            repo?.arm()"},{"type":"INSERT","lineNumber":41,"content":"        }"},{"type":"INSERT","lineNumber":42,"content":"    }"}]},{"timestamp":1757909141732,"changes":[{"type":"INSERT","lineNumber":7,"content":"import com.example.aerogcsclone.uimain.Geometry"},{"type":"INSERT","lineNumber":8,"content":"import com.google.android.gms.maps.model.LatLng"},{"type":"INSERT","lineNumber":14,"content":"    var waypoints by mutableStateOf(listOf<LatLng>())"},{"type":"INSERT","lineNumber":15,"content":"        private set"},{"type":"INSERT","lineNumber":16,"content":""},{"type":"INSERT","lineNumber":17,"content":"    fun addWaypoint(latLng: LatLng) {"},{"type":"INSERT","lineNumber":18,"content":"        waypoints = waypoints + latLng"},{"type":"INSERT","lineNumber":19,"content":"    }"},{"type":"INSERT","lineNumber":20,"content":""},{"type":"INSERT","lineNumber":25,"content":""},{"type":"DELETE","lineNumber":17,"oldContent":"    private val _telemetryState = MutableStateFlow(TelemetryState())"},{"type":"INSERT","lineNumber":28,"content":""},{"type":"DELETE","lineNumber":20,"oldContent":"    val isConnected: StateFlow<Boolean> = telemetryState"},{"type":"DELETE","lineNumber":38,"oldContent":"}"},{"type":"INSERT","lineNumber":48,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":49,"content":"            repo?.arm()"},{"type":"INSERT","lineNumber":50,"content":"        }"},{"type":"INSERT","lineNumber":51,"content":"    }"},{"type":"INSERT","lineNumber":53,"content":"    fun loadMission() {"},{"type":"INSERT","lineNumber":55,"content":"            repo?.loadMission(waypoints)"},{"type":"INSERT","lineNumber":56,"content":"        }"},{"type":"DELETE","lineNumber":43,"oldContent":"            repo?.arm()"},{"type":"INSERT","lineNumber":58,"content":""},{"type":"INSERT","lineNumber":59,"content":"    fun startMission() {"},{"type":"INSERT","lineNumber":60,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":61,"content":"            repo?.startMission()"},{"type":"INSERT","lineNumber":63,"content":"    }"},{"type":"INSERT","lineNumber":64,"content":""},{"type":"INSERT","lineNumber":65,"content":"    fun resetMissionLoaded() {"},{"type":"INSERT","lineNumber":66,"content":"        // This is not ideal, we should be updating the state in the repo"},{"type":"INSERT","lineNumber":67,"content":"        // and have it flow up, but for now this will do."},{"type":"INSERT","lineNumber":68,"content":"        _telemetryState.update { it.copy(missionLoaded = false) }"},{"type":"INSERT","lineNumber":69,"content":"    }"},{"type":"INSERT","lineNumber":70,"content":""},{"type":"INSERT","lineNumber":71,"content":"    fun deleteLastWaypoint() {"},{"type":"INSERT","lineNumber":72,"content":"        if (waypoints.isNotEmpty()) {"},{"type":"INSERT","lineNumber":73,"content":"            waypoints = waypoints.dropLast(1)"},{"type":"INSERT","lineNumber":74,"content":"        }"},{"type":"INSERT","lineNumber":75,"content":"    }"},{"type":"INSERT","lineNumber":76,"content":""},{"type":"INSERT","lineNumber":77,"content":"    fun clearAllWaypoints() {"},{"type":"INSERT","lineNumber":78,"content":"        waypoints = emptyList()"},{"type":"INSERT","lineNumber":79,"content":"    }"},{"type":"INSERT","lineNumber":80,"content":"}"},{"type":"INSERT","lineNumber":81,"content":""}]},{"timestamp":1757912368628,"changes":[{"type":"DELETE","lineNumber":7,"oldContent":"import com.example.aerogcsclone.uimain.Geometry"},{"type":"DELETE","lineNumber":9,"oldContent":"import com.google.android.gms.maps.model.LatLng"},{"type":"DELETE","lineNumber":16,"oldContent":"    var waypoints by mutableStateOf(listOf<LatLng>())"},{"type":"DELETE","lineNumber":18,"oldContent":"        private set"},{"type":"DELETE","lineNumber":22,"oldContent":"    fun addWaypoint(latLng: LatLng) {"},{"type":"DELETE","lineNumber":23,"oldContent":"        waypoints = waypoints + latLng"},{"type":"DELETE","lineNumber":25,"oldContent":"    }"},{"type":"DELETE","lineNumber":26,"oldContent":"    val isConnected: StateFlow<Boolean> = telemetryState"},{"type":"INSERT","lineNumber":20,"content":"    val isConnected: StateFlow<Boolean> = telemetryState"},{"type":"DELETE","lineNumber":31,"oldContent":"    fun connect() {"},{"type":"INSERT","lineNumber":24,"content":"    var missionUploaded by mutableStateOf(false)"},{"type":"INSERT","lineNumber":26,"content":"    fun connect() {"},{"type":"DELETE","lineNumber":36,"oldContent":""},{"type":"DELETE","lineNumber":48,"oldContent":""},{"type":"DELETE","lineNumber":50,"oldContent":"    }"},{"type":"INSERT","lineNumber":42,"content":"            repo?.arm()"},{"type":"DELETE","lineNumber":52,"oldContent":""},{"type":"DELETE","lineNumber":53,"oldContent":"}"},{"type":"INSERT","lineNumber":45,"content":""},{"type":"INSERT","lineNumber":46,"content":"    fun uploadMission(missionItems: List<MissionItemInt>, onResult: (Boolean, String?) -> Unit = { _, _ -> }) {"},{"type":"DELETE","lineNumber":56,"oldContent":"        waypoints = emptyList()"},{"type":"DELETE","lineNumber":57,"oldContent":"            repo?.arm()"},{"type":"DELETE","lineNumber":58,"oldContent":"    fun clearAllWaypoints() {"},{"type":"INSERT","lineNumber":48,"content":"            try {"},{"type":"INSERT","lineNumber":49,"content":"                repo?.uploadMission(missionItems)"},{"type":"INSERT","lineNumber":50,"content":"                missionUploaded = true"},{"type":"INSERT","lineNumber":51,"content":"                onResult(true, null)"},{"type":"INSERT","lineNumber":52,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":53,"content":"                missionUploaded = false"},{"type":"INSERT","lineNumber":54,"content":"                onResult(false, e.message)"},{"type":"INSERT","lineNumber":55,"content":"            }"},{"type":"DELETE","lineNumber":60,"oldContent":""},{"type":"DELETE","lineNumber":62,"oldContent":"    }"},{"type":"DELETE","lineNumber":63,"oldContent":"        }"},{"type":"DELETE","lineNumber":64,"oldContent":"    fun loadMission() {"},{"type":"DELETE","lineNumber":65,"oldContent":"            waypoints = waypoints.dropLast(1)"},{"type":"DELETE","lineNumber":66,"oldContent":"        if (waypoints.isNotEmpty()) {"},{"type":"DELETE","lineNumber":67,"oldContent":"            repo?.loadMission(waypoints)"},{"type":"DELETE","lineNumber":68,"oldContent":"    fun deleteLastWaypoint() {"},{"type":"DELETE","lineNumber":69,"oldContent":"        }"},{"type":"DELETE","lineNumber":71,"oldContent":"    }"},{"type":"DELETE","lineNumber":72,"oldContent":""},{"type":"DELETE","lineNumber":73,"oldContent":"        _telemetryState.update { it.copy(missionLoaded = false) }"},{"type":"DELETE","lineNumber":74,"oldContent":"    fun startMission() {"},{"type":"DELETE","lineNumber":75,"oldContent":"        // and have it flow up, but for now this will do."},{"type":"INSERT","lineNumber":59,"content":"    fun startMission(onResult: (Boolean, String?) -> Unit = { _, _ -> }) {"},{"type":"DELETE","lineNumber":77,"oldContent":"        // This is not ideal, we should be updating the state in the repo"},{"type":"DELETE","lineNumber":78,"oldContent":"            repo?.startMission()"},{"type":"DELETE","lineNumber":79,"oldContent":"    fun resetMissionLoaded() {"},{"type":"DELETE","lineNumber":80,"oldContent":""},{"type":"INSERT","lineNumber":61,"content":"            try {"},{"type":"INSERT","lineNumber":62,"content":"                repo?.startMission()"},{"type":"INSERT","lineNumber":63,"content":"                onResult(true, null)"},{"type":"INSERT","lineNumber":64,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":65,"content":"                onResult(false, e.message)"},{"type":"INSERT","lineNumber":66,"content":"            }"},{"type":"INSERT","lineNumber":67,"content":"        }"},{"type":"INSERT","lineNumber":69,"content":"}"},{"type":"INSERT","lineNumber":70,"content":""}]},{"timestamp":1757912432497,"changes":[{"type":"INSERT","lineNumber":7,"content":"import com.example.aerogcsclone.Telemetry.MissionItemInt"},{"type":"DELETE","lineNumber":16,"oldContent":"    val isConnected: StateFlow<Boolean> = telemetryState"},{"type":"DELETE","lineNumber":19,"oldContent":"    var missionUploaded by mutableStateOf(false)"},{"type":"MODIFY","lineNumber":21,"content":"    val isConnected: StateFlow<Boolean> = telemetryState","oldContent":"    fun connect() {"},{"type":"INSERT","lineNumber":25,"content":"    var missionUploaded by mutableStateOf(false)"},{"type":"INSERT","lineNumber":27,"content":"    fun connect() {"},{"type":"DELETE","lineNumber":35,"oldContent":"            repo?.arm()"},{"type":"DELETE","lineNumber":39,"oldContent":""},{"type":"DELETE","lineNumber":41,"oldContent":"    fun uploadMission(missionItems: List<MissionItemInt>, onResult: (Boolean, String?) -> Unit = { _, _ -> }) {"},{"type":"INSERT","lineNumber":42,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":43,"content":"            repo?.arm()"},{"type":"INSERT","lineNumber":44,"content":"        }"},{"type":"INSERT","lineNumber":45,"content":"    }"},{"type":"INSERT","lineNumber":46,"content":""},{"type":"INSERT","lineNumber":47,"content":"    fun uploadMission(missionItems: List<MissionItemInt>, onResult: (Boolean, String?) -> Unit = { _, _ -> }) {"},{"type":"INSERT","lineNumber":48,"content":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":46,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":49,"oldContent":"        }"},{"type":"DELETE","lineNumber":53,"oldContent":"    }"},{"type":"DELETE","lineNumber":55,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":56,"oldContent":"    fun startMission(onResult: (Boolean, String?) -> Unit = { _, _ -> }) {"},{"type":"DELETE","lineNumber":58,"oldContent":"            try {"},{"type":"INSERT","lineNumber":59,"content":""},{"type":"INSERT","lineNumber":60,"content":"    fun startMission(onResult: (Boolean, String?) -> Unit = { _, _ -> }) {"},{"type":"INSERT","lineNumber":61,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":62,"content":"            try {"},{"type":"INSERT","lineNumber":69,"content":"    }"},{"type":"DELETE","lineNumber":68,"oldContent":""},{"type":"DELETE","lineNumber":69,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":70,"oldContent":"    }"}]},{"timestamp":1757912527357,"changes":[{"type":"INSERT","lineNumber":7,"content":"import com.divpundir.mavlink.definitions.common.MissionItemInt"},{"type":"DELETE","lineNumber":20,"oldContent":"    val isConnected: StateFlow<Boolean> = telemetryState"},{"type":"INSERT","lineNumber":22,"content":"    val isConnected: StateFlow<Boolean> = telemetryState"},{"type":"INSERT","lineNumber":25,"content":""},{"type":"DELETE","lineNumber":26,"oldContent":""},{"type":"DELETE","lineNumber":40,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":42,"oldContent":"            repo?.arm()"},{"type":"INSERT","lineNumber":43,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":44,"content":"            repo?.arm()"},{"type":"DELETE","lineNumber":45,"oldContent":"            try {"},{"type":"DELETE","lineNumber":47,"oldContent":"                repo?.uploadMission(missionItems)"},{"type":"MODIFY","lineNumber":50,"content":"            try {","oldContent":"                missionUploaded = true"},{"type":"INSERT","lineNumber":51,"content":"                repo?.uploadMission(missionItems)"},{"type":"INSERT","lineNumber":52,"content":"                missionUploaded = true"},{"type":"DELETE","lineNumber":58,"oldContent":""},{"type":"INSERT","lineNumber":60,"content":""},{"type":"DELETE","lineNumber":61,"oldContent":"                repo?.startMission()"},{"type":"DELETE","lineNumber":63,"oldContent":"                onResult(true, null)"},{"type":"INSERT","lineNumber":64,"content":"                repo?.startMission()"},{"type":"INSERT","lineNumber":65,"content":"                onResult(true, null)"},{"type":"INSERT","lineNumber":70,"content":"    }"},{"type":"DELETE","lineNumber":71,"oldContent":"    }"}]},{"timestamp":1757912534883,"changes":[{"type":"MODIFY","lineNumber":8,"content":"//import com.example.aerogcsclone.Telemetry.MissionItemInt","oldContent":"import com.example.aerogcsclone.Telemetry.MissionItemInt"},{"type":"INSERT","lineNumber":25,"content":""},{"type":"DELETE","lineNumber":27,"oldContent":""},{"type":"MODIFY","lineNumber":43,"content":"        viewModelScope.launch {","oldContent":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":49,"content":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":51,"oldContent":"        viewModelScope.launch {"},{"type":"MODIFY","lineNumber":64,"content":"                repo?.startMission()","oldContent":"                repo?.startMission()"},{"type":"MODIFY","lineNumber":71,"content":"}","oldContent":"}"}]},{"timestamp":1757913228531,"changes":[{"type":"INSERT","lineNumber":42,"content":"    fun arm() {"},{"type":"DELETE","lineNumber":43,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":51,"oldContent":"                repo?.uploadMission(missionItems)"},{"type":"DELETE","lineNumber":52,"oldContent":"                missionUploaded = true"},{"type":"DELETE","lineNumber":53,"oldContent":"                onResult(true, null)"},{"type":"INSERT","lineNumber":51,"content":"                val success = repo?.uploadMissionWithAck(missionItems) ?: false"},{"type":"INSERT","lineNumber":52,"content":"                missionUploaded = success"},{"type":"INSERT","lineNumber":53,"content":"                if (success) {"},{"type":"INSERT","lineNumber":54,"content":"                    onResult(true, null)"},{"type":"INSERT","lineNumber":55,"content":"                } else {"},{"type":"INSERT","lineNumber":56,"content":"                    onResult(false, \"Mission upload failed or timed out\")"},{"type":"INSERT","lineNumber":57,"content":"                }"},{"type":"INSERT","lineNumber":67,"content":"            try {"},{"type":"DELETE","lineNumber":64,"oldContent":"                repo?.startMission()"},{"type":"INSERT","lineNumber":74,"content":"    }"},{"type":"DELETE","lineNumber":71,"oldContent":"}"}]},{"timestamp":1757915308318,"changes":[{"type":"INSERT","lineNumber":27,"content":"    var lastUploadedCount by mutableStateOf(0)"},{"type":"INSERT","lineNumber":55,"content":"                    lastUploadedCount = missionItems.size"},{"type":"DELETE","lineNumber":55,"oldContent":"            } catch (e: Exception) {"},{"type":"MODIFY","lineNumber":58,"content":"                    lastUploadedCount = 0","oldContent":"                missionUploaded = false"},{"type":"DELETE","lineNumber":59,"oldContent":"                onResult(false, e.message)"},{"type":"INSERT","lineNumber":61,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":62,"content":"                missionUploaded = false"},{"type":"INSERT","lineNumber":63,"content":"                lastUploadedCount = 0"},{"type":"INSERT","lineNumber":64,"content":"                onResult(false, e.message)"},{"type":"DELETE","lineNumber":67,"oldContent":"                repo?.startMission()"},{"type":"INSERT","lineNumber":71,"content":"            try {"},{"type":"INSERT","lineNumber":72,"content":"                val last = if (lastUploadedCount > 0) lastUploadedCount - 1 else 0"},{"type":"INSERT","lineNumber":73,"content":"                repo?.startMission(0, last)"},{"type":"DELETE","lineNumber":70,"oldContent":"            try {"},{"type":"INSERT","lineNumber":79,"content":"    }"},{"type":"DELETE","lineNumber":76,"oldContent":"    }"}]},{"timestamp":1757915700671,"changes":[{"type":"DELETE","lineNumber":7,"oldContent":"import com.divpundir.mavlink.definitions.common.MissionItemInt"},{"type":"DELETE","lineNumber":8,"oldContent":"//import com.example.aerogcsclone.Telemetry.MissionItemInt"},{"type":"DELETE","lineNumber":26,"oldContent":"    var missionUploaded by mutableStateOf(false)"},{"type":"DELETE","lineNumber":27,"oldContent":"    var lastUploadedCount by mutableStateOf(0)"},{"type":"DELETE","lineNumber":28,"oldContent":""},{"type":"DELETE","lineNumber":48,"oldContent":""},{"type":"DELETE","lineNumber":49,"oldContent":"    fun uploadMission(missionItems: List<MissionItemInt>, onResult: (Boolean, String?) -> Unit = { _, _ -> }) {"},{"type":"DELETE","lineNumber":50,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":51,"oldContent":"            try {"},{"type":"DELETE","lineNumber":52,"oldContent":"                val success = repo?.uploadMissionWithAck(missionItems) ?: false"},{"type":"DELETE","lineNumber":53,"oldContent":"                missionUploaded = success"},{"type":"DELETE","lineNumber":54,"oldContent":"                if (success) {"},{"type":"DELETE","lineNumber":55,"oldContent":"                    onResult(true, null)"},{"type":"DELETE","lineNumber":56,"oldContent":"                    lastUploadedCount = missionItems.size"},{"type":"DELETE","lineNumber":57,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":58,"oldContent":"                missionUploaded = false"},{"type":"DELETE","lineNumber":59,"oldContent":"                    lastUploadedCount = 0"},{"type":"DELETE","lineNumber":60,"oldContent":"                }"},{"type":"DELETE","lineNumber":61,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":62,"oldContent":"            }"},{"type":"DELETE","lineNumber":63,"oldContent":"                missionUploaded = false"},{"type":"DELETE","lineNumber":64,"oldContent":"        }"},{"type":"DELETE","lineNumber":65,"oldContent":"                lastUploadedCount = 0"},{"type":"DELETE","lineNumber":66,"oldContent":"    }"},{"type":"DELETE","lineNumber":67,"oldContent":"                onResult(false, e.message)"},{"type":"DELETE","lineNumber":68,"oldContent":""},{"type":"DELETE","lineNumber":69,"oldContent":"    fun startMission(onResult: (Boolean, String?) -> Unit = { _, _ -> }) {"},{"type":"DELETE","lineNumber":70,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":71,"oldContent":"                onResult(true, null)"},{"type":"DELETE","lineNumber":72,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":73,"oldContent":"            try {"},{"type":"DELETE","lineNumber":74,"oldContent":"                onResult(false, e.message)"},{"type":"DELETE","lineNumber":75,"oldContent":"                val last = if (lastUploadedCount > 0) lastUploadedCount - 1 else 0"},{"type":"DELETE","lineNumber":76,"oldContent":"            }"},{"type":"DELETE","lineNumber":77,"oldContent":"                repo?.startMission(0, last)"},{"type":"DELETE","lineNumber":78,"oldContent":"        }"},{"type":"DELETE","lineNumber":81,"oldContent":"    }"}]},{"timestamp":1757915781162,"changes":[{"type":"INSERT","lineNumber":7,"content":"import com.divpundir.mavlink.definitions.common.MissionItemInt"},{"type":"INSERT","lineNumber":8,"content":"//import com.example.aerogcsclone.Telemetry.MissionItemInt"},{"type":"INSERT","lineNumber":26,"content":"    var missionUploaded by mutableStateOf(false)"},{"type":"INSERT","lineNumber":27,"content":"    var lastUploadedCount by mutableStateOf(0)"},{"type":"INSERT","lineNumber":28,"content":""},{"type":"INSERT","lineNumber":48,"content":""},{"type":"INSERT","lineNumber":49,"content":"    fun uploadMission(missionItems: List<MissionItemInt>, onResult: (Boolean, String?) -> Unit = { _, _ -> }) {"},{"type":"INSERT","lineNumber":50,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":51,"content":"            try {"},{"type":"INSERT","lineNumber":52,"content":"                val success = repo?.uploadMissionWithAck(missionItems) ?: false"},{"type":"INSERT","lineNumber":53,"content":"                missionUploaded = success"},{"type":"INSERT","lineNumber":54,"content":"                if (success) {"},{"type":"INSERT","lineNumber":55,"content":"                    lastUploadedCount = missionItems.size"},{"type":"INSERT","lineNumber":56,"content":"                    onResult(true, null)"},{"type":"INSERT","lineNumber":57,"content":"                } else {"},{"type":"INSERT","lineNumber":58,"content":"                    lastUploadedCount = 0"},{"type":"INSERT","lineNumber":59,"content":"                    onResult(false, \"Mission upload failed or timed out\")"},{"type":"INSERT","lineNumber":60,"content":"                }"},{"type":"INSERT","lineNumber":61,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":62,"content":"                missionUploaded = false"},{"type":"INSERT","lineNumber":63,"content":"                lastUploadedCount = 0"},{"type":"INSERT","lineNumber":64,"content":"                onResult(false, e.message)"},{"type":"INSERT","lineNumber":65,"content":"            }"},{"type":"INSERT","lineNumber":66,"content":"        }"},{"type":"INSERT","lineNumber":67,"content":"    }"},{"type":"INSERT","lineNumber":68,"content":""},{"type":"INSERT","lineNumber":69,"content":"    fun startMission(onResult: (Boolean, String?) -> Unit = { _, _ -> }) {"},{"type":"INSERT","lineNumber":70,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":71,"content":"            try {"},{"type":"INSERT","lineNumber":72,"content":"                val last = if (lastUploadedCount > 0) lastUploadedCount - 1 else 0"},{"type":"INSERT","lineNumber":73,"content":"                repo?.startMission(0, last)"},{"type":"INSERT","lineNumber":74,"content":"                onResult(true, null)"},{"type":"INSERT","lineNumber":75,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":76,"content":"                onResult(false, e.message)"},{"type":"INSERT","lineNumber":77,"content":"            }"},{"type":"INSERT","lineNumber":78,"content":"        }"},{"type":"INSERT","lineNumber":79,"content":"    }"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uimain/MainPage.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uimain/MainPage.kt","baseContent":"package com.example.aerogcsclone.uimain\n\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.*\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.dp\nimport androidx.navigation.NavHostController\nimport com.example.aerogcsclone.Telemetry.SharedViewModel\nimport com.example.aerogcsclone.Telemetry.TelemetryState\nimport com.example.aerogcsclone.authentication.AuthViewModel\n\n@Composable\nfun MainPage(\n    telemetryViewModel: SharedViewModel,\n    authViewModel: AuthViewModel,\n    navController: NavHostController\n) {\n    val telemetryState by telemetryViewModel.telemetryState.collectAsState()\n\n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .background(MaterialTheme.colorScheme.background)\n    ) {\n        // âœ… Corrected TopNavBar call\n        TopNavBar(\n            telemetryState = telemetryState,\n            authViewModel = authViewModel,\n            navController = navController\n        )\n\n        Box(\n            modifier = Modifier\n                .weight(1f)\n                .fillMaxWidth()\n        ) {\n            // âœ… Pass telemetryState to GcsMap\n//\n            GcsMap(telemetryState = telemetryState)\n\n\n\n            StatusPanel(\n                modifier = Modifier\n                    .align(Alignment.BottomStart)\n                    .padding(12.dp),\n                telemetryState = telemetryState\n            )\n\n            FloatingButtons(\n                modifier = Modifier\n                    .align(Alignment.CenterEnd)\n                    .padding(12.dp)\n            )\n        }\n    }\n}\n\n@Composable\nfun StatusPanel(\n    modifier: Modifier = Modifier,\n    telemetryState: TelemetryState\n) {\n    Surface(\n        modifier = modifier\n            .width(500.dp)\n            .height(120.dp),\n        color = Color.Black.copy(alpha = 0.6f),\n        shape = RoundedCornerShape(8.dp)\n    ) {\n        Column(\n            modifier = Modifier.padding(10.dp),\n            verticalArrangement = Arrangement.spacedBy(8.dp)\n        ) {\n            Row(\n                horizontalArrangement = Arrangement.SpaceBetween,\n                modifier = Modifier.fillMaxWidth()\n            ) {\n                Text(\"Alt: ${telemetryState.altitudeRelative ?: \"N/A\"}\", color = Color.White)\n                Text(\"Speed: ${telemetryState.groundspeed ?: \"N/A\"}\", color = Color.White)\n                Text(\"Area: N/A\", color = Color.White)\n                Text(\"Flow: N/A\", color = Color.White)\n            }\n            Spacer(modifier = Modifier.height(8.dp))\n            Row(\n                horizontalArrangement = Arrangement.SpaceBetween,\n                modifier = Modifier.fillMaxWidth()\n            ) {\n                Text(\"Obs Alt: N/A\", color = Color.White)\n                Text(\"Time: N/A\", color = Color.White)\n                Text(\"Distance: N/A\", color = Color.White)\n                Text(\"Consumed: N/A\", color = Color.White)\n            }\n        }\n    }\n}\n\n@Composable\nfun FloatingButtons(modifier: Modifier = Modifier) {\n    Column(\n        modifier = modifier,\n        verticalArrangement = Arrangement.spacedBy(12.dp),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        FloatingActionButton(onClick = { }, containerColor = Color.Black.copy(alpha = 0.7f)) {\n            Icon(Icons.Default.PlayArrow, contentDescription = \"Start\", tint = Color.White)\n        }\n        FloatingActionButton(onClick = { }, containerColor = Color.Black.copy(alpha = 0.7f)) {\n            Icon(Icons.Default.Settings, contentDescription = \"Settings\", tint = Color.White)\n        }\n        FloatingActionButton(onClick = { }, containerColor = Color.Black.copy(alpha = 0.7f)) {\n            Icon(Icons.Default.Refresh, contentDescription = \"Refresh\", tint = Color.White)\n        }\n        FloatingActionButton(onClick = { }, containerColor = Color.Black.copy(alpha = 0.7f)) {\n            Icon(Icons.Default.Map, contentDescription = \"Map Options\", tint = Color.White)\n        }\n    }\n}","baseTimestamp":1757909204070,"deltas":[{"timestamp":1757912402740,"changes":[{"type":"INSERT","lineNumber":2,"content":"import android.widget.Toast"},{"type":"INSERT","lineNumber":15,"content":"import androidx.compose.ui.platform.LocalContext"},{"type":"INSERT","lineNumber":29,"content":"    val context = LocalContext.current"},{"type":"INSERT","lineNumber":30,"content":"    val missionUploaded = telemetryViewModel.missionUploaded"},{"type":"DELETE","lineNumber":48,"oldContent":""},{"type":"DELETE","lineNumber":49,"oldContent":""},{"type":"DELETE","lineNumber":50,"oldContent":""},{"type":"INSERT","lineNumber":64,"content":""},{"type":"INSERT","lineNumber":65,"content":"            // Start Mission button"},{"type":"INSERT","lineNumber":66,"content":"            Button("},{"type":"INSERT","lineNumber":67,"content":"                onClick = {"},{"type":"INSERT","lineNumber":68,"content":"                    telemetryViewModel.startMission { success, error ->"},{"type":"INSERT","lineNumber":69,"content":"                        if (success) {"},{"type":"INSERT","lineNumber":70,"content":"                            Toast.makeText(context, \"Mission started\", Toast.LENGTH_SHORT).show()"},{"type":"INSERT","lineNumber":71,"content":"                        } else {"},{"type":"INSERT","lineNumber":72,"content":"                            Toast.makeText(context, error ?: \"Mission start failed\", Toast.LENGTH_SHORT).show()"},{"type":"INSERT","lineNumber":73,"content":"                        }"},{"type":"INSERT","lineNumber":74,"content":"                    }"},{"type":"INSERT","lineNumber":75,"content":"                },"},{"type":"INSERT","lineNumber":76,"content":"                enabled = missionUploaded,"},{"type":"INSERT","lineNumber":77,"content":"                modifier = Modifier"},{"type":"INSERT","lineNumber":78,"content":"                    .align(Alignment.BottomEnd)"},{"type":"INSERT","lineNumber":79,"content":"                    .padding(24.dp)"},{"type":"INSERT","lineNumber":80,"content":"            ) {"},{"type":"INSERT","lineNumber":81,"content":"                Text(\"Start Mission\")"},{"type":"INSERT","lineNumber":82,"content":"            }"}]},{"timestamp":1757915700671,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import android.widget.Toast"},{"type":"DELETE","lineNumber":16,"oldContent":"import androidx.compose.ui.platform.LocalContext"},{"type":"DELETE","lineNumber":31,"oldContent":"    val context = LocalContext.current"},{"type":"DELETE","lineNumber":33,"oldContent":"    val missionUploaded = telemetryViewModel.missionUploaded"},{"type":"INSERT","lineNumber":48,"content":""},{"type":"INSERT","lineNumber":49,"content":""},{"type":"INSERT","lineNumber":50,"content":""},{"type":"DELETE","lineNumber":65,"oldContent":""},{"type":"DELETE","lineNumber":67,"oldContent":"            // Start Mission button"},{"type":"DELETE","lineNumber":69,"oldContent":"            Button("},{"type":"DELETE","lineNumber":71,"oldContent":"                onClick = {"},{"type":"DELETE","lineNumber":73,"oldContent":"                    telemetryViewModel.startMission { success, error ->"},{"type":"DELETE","lineNumber":75,"oldContent":"                        if (success) {"},{"type":"DELETE","lineNumber":77,"oldContent":"                            Toast.makeText(context, \"Mission started\", Toast.LENGTH_SHORT).show()"},{"type":"DELETE","lineNumber":79,"oldContent":"                        } else {"},{"type":"DELETE","lineNumber":81,"oldContent":"                            Toast.makeText(context, error ?: \"Mission start failed\", Toast.LENGTH_SHORT).show()"},{"type":"DELETE","lineNumber":83,"oldContent":"                        }"},{"type":"DELETE","lineNumber":85,"oldContent":"                    }"},{"type":"DELETE","lineNumber":87,"oldContent":"                },"},{"type":"DELETE","lineNumber":89,"oldContent":"                enabled = missionUploaded,"},{"type":"DELETE","lineNumber":91,"oldContent":"                modifier = Modifier"},{"type":"DELETE","lineNumber":93,"oldContent":"                    .align(Alignment.BottomEnd)"},{"type":"DELETE","lineNumber":95,"oldContent":"                    .padding(24.dp)"},{"type":"DELETE","lineNumber":97,"oldContent":"            ) {"},{"type":"DELETE","lineNumber":99,"oldContent":"                Text(\"Start Mission\")"},{"type":"DELETE","lineNumber":101,"oldContent":"            }"}]},{"timestamp":1757915709355,"changes":[{"type":"DELETE","lineNumber":8,"oldContent":"import androidx.compose.runtime.Composable"},{"type":"DELETE","lineNumber":9,"oldContent":"import androidx.compose.runtime.collectAsState"},{"type":"DELETE","lineNumber":10,"oldContent":"import androidx.compose.runtime.getValue"},{"type":"INSERT","lineNumber":8,"content":"import androidx.compose.runtime.*"},{"type":"INSERT","lineNumber":17,"content":"import com.google.maps.android.compose.MapType"},{"type":"INSERT","lineNumber":27,"content":"    // ðŸ”‘ Map type state"},{"type":"INSERT","lineNumber":28,"content":"    var mapType by remember { mutableStateOf(MapType.NORMAL) }"},{"type":"INSERT","lineNumber":29,"content":""},{"type":"DELETE","lineNumber":33,"oldContent":"        // âœ… Corrected TopNavBar call"},{"type":"DELETE","lineNumber":44,"oldContent":""},{"type":"INSERT","lineNumber":46,"content":"            // âœ… Pass telemetryState and mapType to GcsMap"},{"type":"INSERT","lineNumber":47,"content":"            GcsMap("},{"type":"INSERT","lineNumber":48,"content":"                telemetryState = telemetryState,"},{"type":"INSERT","lineNumber":49,"content":"                mapType = mapType"},{"type":"INSERT","lineNumber":50,"content":"            )"},{"type":"DELETE","lineNumber":47,"oldContent":"            // âœ… Pass telemetryState to GcsMap"},{"type":"DELETE","lineNumber":48,"oldContent":""},{"type":"DELETE","lineNumber":49,"oldContent":"//"},{"type":"DELETE","lineNumber":50,"oldContent":"            GcsMap(telemetryState = telemetryState)"},{"type":"MODIFY","lineNumber":62,"content":"                    .padding(12.dp),","oldContent":"                    .padding(12.dp)"},{"type":"INSERT","lineNumber":63,"content":"                onToggleMapType = {"},{"type":"INSERT","lineNumber":64,"content":"                    mapType = if (mapType == MapType.NORMAL) MapType.SATELLITE else MapType.NORMAL"},{"type":"INSERT","lineNumber":65,"content":"                }"},{"type":"DELETE","lineNumber":107,"oldContent":"fun FloatingButtons(modifier: Modifier = Modifier) {"},{"type":"INSERT","lineNumber":111,"content":"fun FloatingButtons("},{"type":"INSERT","lineNumber":112,"content":"    modifier: Modifier = Modifier,"},{"type":"INSERT","lineNumber":113,"content":"    onToggleMapType: () -> Unit"},{"type":"INSERT","lineNumber":114,"content":") {"},{"type":"DELETE","lineNumber":122,"oldContent":"        FloatingActionButton(onClick = { }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"INSERT","lineNumber":129,"content":"        FloatingActionButton("},{"type":"INSERT","lineNumber":130,"content":"            onClick = { onToggleMapType() },"},{"type":"INSERT","lineNumber":131,"content":"            containerColor = Color.Black.copy(alpha = 0.7f)"},{"type":"INSERT","lineNumber":132,"content":"        ) {"}]},{"timestamp":1757915781162,"changes":[{"type":"INSERT","lineNumber":2,"content":"import android.widget.Toast"},{"type":"INSERT","lineNumber":13,"content":"import androidx.compose.ui.platform.LocalContext"},{"type":"DELETE","lineNumber":15,"oldContent":"import com.google.maps.android.compose.MapType"},{"type":"INSERT","lineNumber":19,"content":"import com.google.maps.android.compose.MapType"},{"type":"DELETE","lineNumber":26,"oldContent":"    // ðŸ”‘ Map type state"},{"type":"INSERT","lineNumber":28,"content":"    val context = LocalContext.current"},{"type":"INSERT","lineNumber":29,"content":"    val missionUploaded = telemetryViewModel.missionUploaded"},{"type":"INSERT","lineNumber":31,"content":"    // ðŸ”‘ Map type state"},{"type":"DELETE","lineNumber":29,"oldContent":"    Column("},{"type":"INSERT","lineNumber":34,"content":"    Column("},{"type":"INSERT","lineNumber":50,"content":"<<<<<<< Updated upstream"},{"type":"DELETE","lineNumber":47,"oldContent":""},{"type":"INSERT","lineNumber":56,"content":""},{"type":"INSERT","lineNumber":57,"content":"======="},{"type":"INSERT","lineNumber":58,"content":"            // âœ… Pass telemetryState to GcsMap"},{"type":"INSERT","lineNumber":59,"content":"//"},{"type":"INSERT","lineNumber":60,"content":"            GcsMap(telemetryState = telemetryState)"},{"type":"INSERT","lineNumber":61,"content":">>>>>>> Stashed changes"},{"type":"DELETE","lineNumber":62,"oldContent":"                    .padding(12.dp)"},{"type":"DELETE","lineNumber":65,"oldContent":"        }"},{"type":"DELETE","lineNumber":67,"oldContent":"    }"},{"type":"INSERT","lineNumber":76,"content":"            )"},{"type":"INSERT","lineNumber":77,"content":""},{"type":"INSERT","lineNumber":78,"content":"            // Start Mission button"},{"type":"INSERT","lineNumber":79,"content":"            Button("},{"type":"INSERT","lineNumber":80,"content":"                onClick = {"},{"type":"INSERT","lineNumber":81,"content":"                    telemetryViewModel.startMission { success, error ->"},{"type":"INSERT","lineNumber":82,"content":"                        if (success) {"},{"type":"INSERT","lineNumber":83,"content":"                            Toast.makeText(context, \"Mission started\", Toast.LENGTH_SHORT).show()"},{"type":"INSERT","lineNumber":84,"content":"                        } else {"},{"type":"INSERT","lineNumber":85,"content":"                            Toast.makeText(context, error ?: \"Mission start failed\", Toast.LENGTH_SHORT).show()"},{"type":"INSERT","lineNumber":86,"content":"                        }"},{"type":"INSERT","lineNumber":87,"content":"                    }"},{"type":"INSERT","lineNumber":88,"content":"                },"},{"type":"INSERT","lineNumber":89,"content":"                enabled = missionUploaded,"},{"type":"INSERT","lineNumber":90,"content":"                modifier = Modifier"},{"type":"INSERT","lineNumber":91,"content":"                    .align(Alignment.BottomEnd)"},{"type":"INSERT","lineNumber":92,"content":"                    .padding(24.dp)"},{"type":"INSERT","lineNumber":93,"content":"            ) {"},{"type":"INSERT","lineNumber":94,"content":"                Text(\"Start Mission\")"},{"type":"INSERT","lineNumber":95,"content":"            }"},{"type":"INSERT","lineNumber":96,"content":"        }"},{"type":"INSERT","lineNumber":97,"content":"    }"},{"type":"INSERT","lineNumber":140,"content":"fun FloatingButtons("},{"type":"INSERT","lineNumber":141,"content":"    modifier: Modifier = Modifier,"},{"type":"INSERT","lineNumber":142,"content":"    onToggleMapType: () -> Unit"},{"type":"INSERT","lineNumber":143,"content":") {"},{"type":"DELETE","lineNumber":114,"oldContent":"fun FloatingButtons("},{"type":"DELETE","lineNumber":116,"oldContent":"    modifier: Modifier = Modifier,"},{"type":"DELETE","lineNumber":118,"oldContent":"    onToggleMapType: () -> Unit"},{"type":"DELETE","lineNumber":120,"oldContent":") {"},{"type":"INSERT","lineNumber":158,"content":"        FloatingActionButton("},{"type":"INSERT","lineNumber":159,"content":"            onClick = { onToggleMapType() },"},{"type":"INSERT","lineNumber":160,"content":"            containerColor = Color.Black.copy(alpha = 0.7f)"},{"type":"INSERT","lineNumber":161,"content":"        ) {"},{"type":"DELETE","lineNumber":133,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":134,"oldContent":"            containerColor = Color.Black.copy(alpha = 0.7f)"},{"type":"DELETE","lineNumber":135,"oldContent":"        FloatingActionButton("},{"type":"DELETE","lineNumber":136,"oldContent":"            onClick = { onToggleMapType() },"}]},{"timestamp":1757915821259,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import android.widget.Toast"},{"type":"MODIFY","lineNumber":8,"content":"import androidx.compose.runtime.Composable","oldContent":"import androidx.compose.runtime.*"},{"type":"INSERT","lineNumber":9,"content":"import androidx.compose.runtime.collectAsState"},{"type":"INSERT","lineNumber":10,"content":"import androidx.compose.runtime.getValue"},{"type":"DELETE","lineNumber":14,"oldContent":"import androidx.compose.ui.platform.LocalContext"},{"type":"DELETE","lineNumber":20,"oldContent":"import com.google.maps.android.compose.MapType"},{"type":"DELETE","lineNumber":29,"oldContent":"    val context = LocalContext.current"},{"type":"DELETE","lineNumber":30,"oldContent":"    var mapType by remember { mutableStateOf(MapType.NORMAL) }"},{"type":"DELETE","lineNumber":31,"oldContent":"    val missionUploaded = telemetryViewModel.missionUploaded"},{"type":"DELETE","lineNumber":32,"oldContent":""},{"type":"DELETE","lineNumber":33,"oldContent":"    // ðŸ”‘ Map type state"},{"type":"INSERT","lineNumber":28,"content":"    Column("},{"type":"DELETE","lineNumber":37,"oldContent":"    Column("},{"type":"INSERT","lineNumber":33,"content":"        // âœ… Corrected TopNavBar call"},{"type":"DELETE","lineNumber":50,"oldContent":"            // âœ… Pass telemetryState and mapType to GcsMap"},{"type":"DELETE","lineNumber":51,"oldContent":"            GcsMap("},{"type":"DELETE","lineNumber":52,"oldContent":"                telemetryState = telemetryState,"},{"type":"DELETE","lineNumber":53,"oldContent":"<<<<<<< Updated upstream"},{"type":"DELETE","lineNumber":54,"oldContent":"                mapType = mapType"},{"type":"DELETE","lineNumber":55,"oldContent":"            )"},{"type":"INSERT","lineNumber":45,"content":"            // âœ… Pass telemetryState to GcsMap"},{"type":"INSERT","lineNumber":46,"content":"//"},{"type":"INSERT","lineNumber":47,"content":"            GcsMap(telemetryState = telemetryState)"},{"type":"INSERT","lineNumber":48,"content":""},{"type":"INSERT","lineNumber":49,"content":""},{"type":"INSERT","lineNumber":50,"content":""},{"type":"DELETE","lineNumber":60,"oldContent":""},{"type":"DELETE","lineNumber":62,"oldContent":"======="},{"type":"DELETE","lineNumber":64,"oldContent":"            // âœ… Pass telemetryState to GcsMap"},{"type":"DELETE","lineNumber":66,"oldContent":"//"},{"type":"DELETE","lineNumber":68,"oldContent":"            GcsMap(telemetryState = telemetryState)"},{"type":"DELETE","lineNumber":70,"oldContent":">>>>>>> Stashed changes"},{"type":"DELETE","lineNumber":72,"oldContent":"                    .padding(12.dp),"},{"type":"DELETE","lineNumber":73,"oldContent":"                onToggleMapType = {"},{"type":"DELETE","lineNumber":74,"oldContent":"                    mapType = if (mapType == MapType.NORMAL) MapType.SATELLITE else MapType.NORMAL"},{"type":"DELETE","lineNumber":75,"oldContent":"                }"},{"type":"INSERT","lineNumber":61,"content":"                    .padding(12.dp)"},{"type":"INSERT","lineNumber":62,"content":"            )"},{"type":"INSERT","lineNumber":63,"content":"        }"},{"type":"INSERT","lineNumber":64,"content":"    }"},{"type":"DELETE","lineNumber":83,"oldContent":"            )"},{"type":"DELETE","lineNumber":85,"oldContent":""},{"type":"DELETE","lineNumber":87,"oldContent":"            // Start Mission button"},{"type":"DELETE","lineNumber":89,"oldContent":"            Button("},{"type":"DELETE","lineNumber":91,"oldContent":"                onClick = {"},{"type":"DELETE","lineNumber":93,"oldContent":"                    telemetryViewModel.startMission { success, error ->"},{"type":"DELETE","lineNumber":95,"oldContent":"                        if (success) {"},{"type":"DELETE","lineNumber":97,"oldContent":"                            Toast.makeText(context, \"Mission started\", Toast.LENGTH_SHORT).show()"},{"type":"DELETE","lineNumber":99,"oldContent":"                        } else {"},{"type":"DELETE","lineNumber":101,"oldContent":"                            Toast.makeText(context, error ?: \"Mission start failed\", Toast.LENGTH_SHORT).show()"},{"type":"DELETE","lineNumber":103,"oldContent":"                        }"},{"type":"DELETE","lineNumber":105,"oldContent":"                    }"},{"type":"DELETE","lineNumber":107,"oldContent":"                },"},{"type":"DELETE","lineNumber":109,"oldContent":"                enabled = missionUploaded,"},{"type":"DELETE","lineNumber":111,"oldContent":"                modifier = Modifier"},{"type":"DELETE","lineNumber":113,"oldContent":"                    .align(Alignment.BottomEnd)"},{"type":"DELETE","lineNumber":115,"oldContent":"                    .padding(24.dp)"},{"type":"DELETE","lineNumber":117,"oldContent":"            ) {"},{"type":"DELETE","lineNumber":119,"oldContent":"                Text(\"Start Mission\")"},{"type":"DELETE","lineNumber":122,"oldContent":"            }"},{"type":"DELETE","lineNumber":123,"oldContent":"        }"},{"type":"DELETE","lineNumber":125,"oldContent":"    }"},{"type":"INSERT","lineNumber":107,"content":"fun FloatingButtons(modifier: Modifier = Modifier) {"},{"type":"INSERT","lineNumber":122,"content":"        FloatingActionButton(onClick = { }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"DELETE","lineNumber":158,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":159,"oldContent":"            containerColor = Color.Black.copy(alpha = 0.7f)"},{"type":"DELETE","lineNumber":160,"oldContent":"            onClick = { onToggleMapType() },"},{"type":"DELETE","lineNumber":161,"oldContent":"fun FloatingButtons("},{"type":"DELETE","lineNumber":162,"oldContent":"        FloatingActionButton("},{"type":"DELETE","lineNumber":163,"oldContent":"    modifier: Modifier = Modifier,"},{"type":"DELETE","lineNumber":164,"oldContent":") {"},{"type":"DELETE","lineNumber":165,"oldContent":"    onToggleMapType: () -> Unit"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uimain/PlanScreen.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uimain/PlanScreen.kt","baseContent":"package com.example.aerogcsclone.uimain\n\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.FloatingActionButton\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Modifier\nimport androidx.navigation.NavHostController\nimport com.example.aerogcsclone.Telemetry.SharedViewModel\nimport com.example.aerogcsclone.authentication.AuthViewModel\n\n@Composable\nfun PlanScreen(\n    telemetryViewModel: SharedViewModel,\n    authViewModel: AuthViewModel,\n    navController: NavHostController\n) {\n    val telemetryState by telemetryViewModel.telemetryState.collectAsState()\n\n    Scaffold(\n        floatingActionButton = {\n            FloatingActionButton(onClick = { /* TODO */ }) {\n                Text(\"Create Plan\")\n            }\n        }\n    ) { paddingValues ->\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(paddingValues)\n        ) {\n            TopNavBar(\n                telemetryState = telemetryState,\n                authViewModel = authViewModel,\n                navController = navController\n            )\n            GcsMap(telemetryState = telemetryState)\n        }\n    }\n}","baseTimestamp":1757650088623,"deltas":[{"timestamp":1757913843381,"changes":[{"type":"INSERT","lineNumber":32,"content":") {"},{"type":"DELETE","lineNumber":33,"oldContent":"    val telemetryState by telemetryViewModel.telemetryState.collectAsState()"},{"type":"INSERT","lineNumber":145,"content":"                        onClick = { /* TODO: handle Change Mode action */ },"},{"type":"DELETE","lineNumber":146,"oldContent":"                        modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":159,"content":"                                navController.navigate(Screen.Main.route) {"},{"type":"DELETE","lineNumber":160,"oldContent":"                                    popUpTo(Screen.Plan.route) { inclusive = true }"},{"type":"INSERT","lineNumber":166,"content":"                                    Toast.LENGTH_SHORT"},{"type":"INSERT","lineNumber":167,"content":"                                ).show()"},{"type":"DELETE","lineNumber":168,"oldContent":"                                    Toast.LENGTH_SHORT"},{"type":"DELETE","lineNumber":171,"oldContent":"                                ).show()"},{"type":"DELETE","lineNumber":177,"oldContent":"                "},{"type":"DELETE","lineNumber":178,"oldContent":"                // Show waypoints for user feedback"},{"type":"INSERT","lineNumber":177,"content":"                }"},{"type":"INSERT","lineNumber":178,"content":"            }"},{"type":"INSERT","lineNumber":179,"content":"            "},{"type":"INSERT","lineNumber":181,"content":"                // Show waypoints for user feedback"},{"type":"DELETE","lineNumber":181,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"INSERT","lineNumber":184,"content":"                    waypoints.forEachIndexed { idx, wp ->"}]},{"timestamp":1757913860371,"changes":[{"type":"MODIFY","lineNumber":168,"content":"                            }","oldContent":"                            }"},{"type":"DELETE","lineNumber":178,"oldContent":"            }"},{"type":"MODIFY","lineNumber":181,"content":"                Column(modifier = Modifier.padding(16.dp)) {","oldContent":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"MODIFY","lineNumber":184,"content":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")","oldContent":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"}]},{"timestamp":1757913867598,"changes":[{"type":"INSERT","lineNumber":167,"content":"                                ).show()"},{"type":"DELETE","lineNumber":168,"oldContent":"                            }"},{"type":"MODIFY","lineNumber":181,"content":"                Column(modifier = Modifier.padding(16.dp)) {","oldContent":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"MODIFY","lineNumber":184,"content":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")","oldContent":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"}]},{"timestamp":1757913872038,"changes":[{"type":"INSERT","lineNumber":180,"content":"                // Show waypoints for user feedback"},{"type":"DELETE","lineNumber":181,"oldContent":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"INSERT","lineNumber":183,"content":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":184,"oldContent":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"},{"type":"DELETE","lineNumber":190,"oldContent":"}"},{"type":"INSERT","lineNumber":191,"content":""}]},{"timestamp":1757913880438,"changes":[{"type":"MODIFY","lineNumber":6,"content":"import androidx.compose.material3.*","oldContent":"import androidx.compose.foundation.layout.fillMaxSize"},{"type":"MODIFY","lineNumber":8,"content":"import androidx.compose.runtime.*","oldContent":"import androidx.compose.material3.FloatingActionButton"},{"type":"DELETE","lineNumber":10,"oldContent":"import androidx.compose.material3.Text"},{"type":"DELETE","lineNumber":11,"oldContent":"import androidx.compose.ui.unit.dp"},{"type":"DELETE","lineNumber":12,"oldContent":"import androidx.compose.runtime.Composable"},{"type":"DELETE","lineNumber":13,"oldContent":"import androidx.compose.runtime.collectAsState"},{"type":"INSERT","lineNumber":11,"content":"import androidx.compose.ui.unit.dp"},{"type":"INSERT","lineNumber":12,"content":"import androidx.navigation.NavHostController"},{"type":"INSERT","lineNumber":13,"content":"import com.example.aerogcsclone.Telemetry.SharedViewModel"},{"type":"INSERT","lineNumber":14,"content":"import com.example.aerogcsclone.authentication.AuthViewModel"},{"type":"INSERT","lineNumber":98,"content":"                            .size(56.dp)"},{"type":"INSERT","lineNumber":99,"content":"                    ) {"},{"type":"INSERT","lineNumber":100,"content":"                        Icon(Icons.Default.ClearAll, contentDescription = \"Clear Plan\")"},{"type":"INSERT","lineNumber":101,"content":"                    }"},{"type":"DELETE","lineNumber":99,"oldContent":"                    Text(\"Upload Mission\")"},{"type":"DELETE","lineNumber":100,"oldContent":"                        .fillMaxWidth()"},{"type":"DELETE","lineNumber":101,"oldContent":"                        .padding(top = 16.dp)"},{"type":"DELETE","lineNumber":102,"oldContent":"                    },"},{"type":"MODIFY","lineNumber":103,"content":"","oldContent":"                        }"},{"type":"DELETE","lineNumber":152,"oldContent":"                                    popUpTo(Screen.Plan.route) { inclusive = true }"},{"type":"DELETE","lineNumber":153,"oldContent":"                                Toast.makeText(context, \"Mission uploaded\", Toast.LENGTH_SHORT).show()"},{"type":"INSERT","lineNumber":152,"content":"                // Upload Mission button"},{"type":"INSERT","lineNumber":153,"content":"                Button("},{"type":"MODIFY","lineNumber":172,"content":"                    modifier = Modifier","oldContent":"                // Show waypoints for user feedback"},{"type":"INSERT","lineNumber":173,"content":"                        .padding(top = 16.dp)"},{"type":"INSERT","lineNumber":174,"content":"                        .fillMaxWidth()"},{"type":"INSERT","lineNumber":175,"content":"                ) {"},{"type":"DELETE","lineNumber":174,"oldContent":"                    enabled = waypoints.isNotEmpty(),"},{"type":"DELETE","lineNumber":175,"oldContent":"                            } else {"},{"type":"DELETE","lineNumber":176,"oldContent":"                    Text(\"Upload Mission (${waypoints.size})\")"},{"type":"INSERT","lineNumber":190,"content":"}"},{"type":"DELETE","lineNumber":191,"oldContent":""}]},{"timestamp":1757913894119,"changes":[{"type":"INSERT","lineNumber":10,"content":"import androidx.compose.ui.Modifier"},{"type":"DELETE","lineNumber":14,"oldContent":"import androidx.compose.runtime.getValue"},{"type":"DELETE","lineNumber":19,"oldContent":""},{"type":"DELETE","lineNumber":20,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":21,"oldContent":"    telemetryViewModel: SharedViewModel,"},{"type":"INSERT","lineNumber":19,"content":"import androidx.compose.material.icons.filled.Delete"},{"type":"INSERT","lineNumber":20,"content":"import androidx.compose.material.icons.filled.ClearAll"},{"type":"INSERT","lineNumber":21,"content":"import androidx.compose.material.icons.filled.Menu"},{"type":"MODIFY","lineNumber":35,"content":"","oldContent":"        Column("},{"type":"MODIFY","lineNumber":79,"content":"                    ) {","oldContent":"                        telemetryViewModel.uploadMission(sampleMissionItems) { success, error ->"},{"type":"MODIFY","lineNumber":97,"content":"                            .padding(bottom = 12.dp)","oldContent":""},{"type":"DELETE","lineNumber":99,"oldContent":"                navController = navController"},{"type":"INSERT","lineNumber":102,"content":"                }"},{"type":"DELETE","lineNumber":117,"oldContent":"                }"},{"type":"DELETE","lineNumber":118,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":119,"oldContent":"                        .padding(top = 16.dp)"},{"type":"DELETE","lineNumber":120,"oldContent":"                    modifier = Modifier"},{"type":"DELETE","lineNumber":121,"oldContent":"                        }"},{"type":"DELETE","lineNumber":122,"oldContent":"                                Toast.makeText(context, error ?: \"Mission upload failed\", Toast.LENGTH_SHORT).show()"},{"type":"DELETE","lineNumber":123,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":124,"oldContent":"                    verticalArrangement = Arrangement.spacedBy(12.dp)"},{"type":"DELETE","lineNumber":125,"oldContent":"                        .align(Alignment.TopStart)"},{"type":"DELETE","lineNumber":126,"oldContent":"                Column("},{"type":"INSERT","lineNumber":117,"content":"                .padding(paddingValues)"},{"type":"INSERT","lineNumber":118,"content":"        ) {"},{"type":"INSERT","lineNumber":119,"content":"            // Top navigation bar"},{"type":"INSERT","lineNumber":120,"content":"            TopNavBar("},{"type":"INSERT","lineNumber":121,"content":"                telemetryState = telemetryState,"},{"type":"INSERT","lineNumber":122,"content":"                authViewModel = authViewModel,"},{"type":"INSERT","lineNumber":123,"content":"                navController = navController"},{"type":"INSERT","lineNumber":124,"content":"            )"},{"type":"INSERT","lineNumber":125,"content":""},{"type":"INSERT","lineNumber":126,"content":"            Box(modifier = Modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":134,"oldContent":"                            if (success) {"},{"type":"DELETE","lineNumber":135,"oldContent":"                        telemetryViewModel.uploadMission(sampleMissionItems) { success, error ->"},{"type":"INSERT","lineNumber":134,"content":"                        .padding(start = 16.dp, top = 72.dp), // push below TopNavBar"},{"type":"INSERT","lineNumber":135,"content":"                    verticalArrangement = Arrangement.spacedBy(12.dp)"},{"type":"INSERT","lineNumber":136,"content":"                ) {"},{"type":"INSERT","lineNumber":137,"content":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":137,"oldContent":"                    modifier = Modifier"},{"type":"DELETE","lineNumber":138,"oldContent":"                    },"},{"type":"DELETE","lineNumber":174,"oldContent":"                    Text(\"Upload Mission (${waypoints.size})\")"},{"type":"DELETE","lineNumber":177,"oldContent":"                }"},{"type":"INSERT","lineNumber":176,"content":"                    Text(\"Upload Mission (${waypoints.size})\")"},{"type":"INSERT","lineNumber":177,"content":"                };"},{"type":"INSERT","lineNumber":178,"content":"                "},{"type":"DELETE","lineNumber":185,"oldContent":""},{"type":"INSERT","lineNumber":186,"content":"                    }"},{"type":"INSERT","lineNumber":187,"content":"                }"},{"type":"INSERT","lineNumber":188,"content":"            }"},{"type":"INSERT","lineNumber":189,"content":"        }"},{"type":"DELETE","lineNumber":187,"oldContent":""},{"type":"DELETE","lineNumber":188,"oldContent":""},{"type":"INSERT","lineNumber":192,"content":""}]},{"timestamp":1757913896538,"changes":[{"type":"MODIFY","lineNumber":3,"content":"import android.widget.Toast","oldContent":"import androidx.compose.foundation.layout.Column"},{"type":"MODIFY","lineNumber":15,"content":"import androidx.compose.material.icons.Icons","oldContent":"import com.example.aerogcsclone.authentication.AuthViewModel"},{"type":"INSERT","lineNumber":25,"content":"import com.example.aerogcsclone.navigation.Screen"},{"type":"DELETE","lineNumber":26,"oldContent":""},{"type":"MODIFY","lineNumber":34,"content":"    val context = LocalContext.current","oldContent":"                .fillMaxSize()"},{"type":"MODIFY","lineNumber":36,"content":"    // Example mission items (replace with actual user input)","oldContent":"        ) {"},{"type":"MODIFY","lineNumber":102,"content":"                }","oldContent":"                }"},{"type":"DELETE","lineNumber":106,"oldContent":"                                }"},{"type":"DELETE","lineNumber":107,"oldContent":"                                    popUpTo(Screen.Plan.route) { inclusive = true }"},{"type":"DELETE","lineNumber":108,"oldContent":"                                Toast.makeText(context, \"Mission uploaded\", Toast.LENGTH_SHORT).show()"},{"type":"DELETE","lineNumber":109,"oldContent":"                            if (success) {"},{"type":"INSERT","lineNumber":106,"content":"                    onClick = { showPlanActions = !showPlanActions },"},{"type":"INSERT","lineNumber":107,"content":"                    modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":108,"content":"                ) {"},{"type":"INSERT","lineNumber":109,"content":"                    Icon(Icons.Default.Menu, contentDescription = \"Create Plan\")"},{"type":"DELETE","lineNumber":127,"oldContent":"                    }"},{"type":"DELETE","lineNumber":128,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":129,"oldContent":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"INSERT","lineNumber":127,"content":"                // Map background"},{"type":"INSERT","lineNumber":128,"content":"                GcsMap(telemetryState = telemetryState)"},{"type":"INSERT","lineNumber":129,"content":""},{"type":"DELETE","lineNumber":137,"oldContent":"                            } else {"},{"type":"INSERT","lineNumber":138,"content":"                        onClick = { telemetryViewModel.arm() },"},{"type":"MODIFY","lineNumber":176,"content":"                    Text(\"Upload Mission (${waypoints.size})\")","oldContent":"                    Text(\"Upload Mission (${waypoints.size})\")"},{"type":"DELETE","lineNumber":178,"oldContent":"                "},{"type":"MODIFY","lineNumber":188,"content":"        }","oldContent":"}"},{"type":"INSERT","lineNumber":189,"content":"    }"},{"type":"INSERT","lineNumber":190,"content":"}"},{"type":"INSERT","lineNumber":191,"content":""}]},{"timestamp":1757913901156,"changes":[{"type":"DELETE","lineNumber":17,"oldContent":"import com.example.aerogcsclone.authentication.AuthViewModel"},{"type":"DELETE","lineNumber":18,"oldContent":""},{"type":"INSERT","lineNumber":17,"content":"import androidx.compose.material.icons.filled.FlightTakeoff"},{"type":"INSERT","lineNumber":18,"content":"import androidx.compose.material.icons.filled.Add"},{"type":"MODIFY","lineNumber":23,"content":"import com.divpundir.mavlink.definitions.common.MissionItemInt","oldContent":"    navController: NavHostController"},{"type":"MODIFY","lineNumber":27,"content":"@Composable","oldContent":"    Scaffold("},{"type":"MODIFY","lineNumber":40,"content":"    var showPlanActions by remember { mutableStateOf(false) }","oldContent":"        ) {"},{"type":"INSERT","lineNumber":101,"content":"                    }"},{"type":"DELETE","lineNumber":102,"oldContent":"                }"},{"type":"DELETE","lineNumber":104,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":105,"oldContent":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleMedium)"},{"type":"INSERT","lineNumber":104,"content":"                // Main Create Plan button"},{"type":"INSERT","lineNumber":105,"content":"                FloatingActionButton("},{"type":"DELETE","lineNumber":110,"oldContent":"                    enabled = waypoints.isNotEmpty(),"},{"type":"MODIFY","lineNumber":110,"content":"                }","oldContent":"                                }"},{"type":"INSERT","lineNumber":111,"content":"            }"},{"type":"DELETE","lineNumber":113,"oldContent":"                                    popUpTo(Screen.Plan.route) { inclusive = true }"},{"type":"DELETE","lineNumber":114,"oldContent":"                        telemetryViewModel.uploadMission(waypoints) { success, error ->"},{"type":"DELETE","lineNumber":115,"oldContent":"                Column("},{"type":"DELETE","lineNumber":116,"oldContent":"                // Left-side floating buttons (below TopNavBar)"},{"type":"INSERT","lineNumber":113,"content":"    ) { paddingValues ->"},{"type":"INSERT","lineNumber":114,"content":"        Column("},{"type":"INSERT","lineNumber":115,"content":"            modifier = Modifier"},{"type":"INSERT","lineNumber":116,"content":"                .fillMaxSize()"},{"type":"MODIFY","lineNumber":138,"content":"                        onClick = { telemetryViewModel.arm() },","oldContent":"                        onClick = { telemetryViewModel.arm() },"},{"type":"MODIFY","lineNumber":161,"content":"                                }","oldContent":""},{"type":"INSERT","lineNumber":175,"content":"                ) {"},{"type":"DELETE","lineNumber":176,"oldContent":"                    Text(\"Upload Mission (${waypoints.size})\")"},{"type":"MODIFY","lineNumber":179,"content":"","oldContent":"            "},{"type":"MODIFY","lineNumber":182,"content":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleMedium)","oldContent":""},{"type":"MODIFY","lineNumber":184,"content":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")","oldContent":"}"},{"type":"INSERT","lineNumber":186,"content":"                }"},{"type":"INSERT","lineNumber":187,"content":"            }"},{"type":"DELETE","lineNumber":187,"oldContent":"        }"},{"type":"DELETE","lineNumber":189,"oldContent":""},{"type":"INSERT","lineNumber":191,"content":""}]},{"timestamp":1757913954843,"changes":[{"type":"MODIFY","lineNumber":16,"content":"import androidx.compose.material.icons.filled.Build","oldContent":"import com.example.aerogcsclone.authentication.AuthViewModel"},{"type":"MODIFY","lineNumber":22,"content":"import androidx.compose.ui.platform.LocalContext","oldContent":"    navController: NavHostController"},{"type":"MODIFY","lineNumber":41,"content":"","oldContent":"                authViewModel = authViewModel,"},{"type":"MODIFY","lineNumber":111,"content":"            }","oldContent":"                    enabled = waypoints.isNotEmpty(),"},{"type":"INSERT","lineNumber":137,"content":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":138,"oldContent":"                        onClick = { telemetryViewModel.arm() },"},{"type":"DELETE","lineNumber":177,"oldContent":"                };"},{"type":"DELETE","lineNumber":178,"oldContent":"            "},{"type":"INSERT","lineNumber":177,"content":"                }"},{"type":"DELETE","lineNumber":181,"oldContent":""},{"type":"INSERT","lineNumber":180,"content":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"DELETE","lineNumber":183,"oldContent":""},{"type":"INSERT","lineNumber":182,"content":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"MODIFY","lineNumber":187,"content":"        }","oldContent":"                }"},{"type":"DELETE","lineNumber":190,"oldContent":""},{"type":"INSERT","lineNumber":189,"content":"}"}]},{"timestamp":1757914008068,"changes":[{"type":"MODIFY","lineNumber":24,"content":"//import com.example.aerogcsclone.Telemetry.MissionItemInt","oldContent":"    val telemetryState by telemetryViewModel.telemetryState.collectAsState()"},{"type":"DELETE","lineNumber":38,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":39,"oldContent":"                telemetryState = telemetryState,"},{"type":"INSERT","lineNumber":38,"content":""},{"type":"INSERT","lineNumber":39,"content":"    // State to toggle plan action buttons"},{"type":"DELETE","lineNumber":51,"oldContent":"            frame = 3u, // MAV_FRAME_GLOBAL_RELATIVE_ALT_INT"},{"type":"DELETE","lineNumber":52,"oldContent":"            command = 16u, // MAV_CMD_NAV_WAYPOINT"},{"type":"INSERT","lineNumber":51,"content":"            frame = com.divpundir.mavlink.api.MavEnumValue.of(com.divpundir.mavlink.definitions.common.MavFrame.GLOBAL_RELATIVE_ALT_INT),"},{"type":"INSERT","lineNumber":52,"content":"            command = com.divpundir.mavlink.api.MavEnumValue.of(com.divpundir.mavlink.definitions.common.MavCmd.NAV_WAYPOINT), // MAV_CMD_NAV_WAYPOINT"},{"type":"DELETE","lineNumber":179,"oldContent":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"DELETE","lineNumber":181,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"INSERT","lineNumber":180,"content":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"INSERT","lineNumber":182,"content":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":186,"oldContent":"        }"},{"type":"MODIFY","lineNumber":187,"content":"        }","oldContent":"}"},{"type":"INSERT","lineNumber":189,"content":"}"}]},{"timestamp":1757914035561,"changes":[{"type":"DELETE","lineNumber":42,"oldContent":"            )"},{"type":"DELETE","lineNumber":43,"oldContent":"        }"},{"type":"DELETE","lineNumber":44,"oldContent":"}"},{"type":"DELETE","lineNumber":45,"oldContent":"                    }"},{"type":"DELETE","lineNumber":46,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":47,"oldContent":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"INSERT","lineNumber":42,"content":"    // Mutable list to store waypoints"},{"type":"INSERT","lineNumber":43,"content":"    val waypoints = remember { mutableStateListOf<MissionItemInt>() }"},{"type":"DELETE","lineNumber":49,"oldContent":"                    enabled = waypoints.isNotEmpty(),"},{"type":"DELETE","lineNumber":50,"oldContent":"                                }"},{"type":"INSERT","lineNumber":45,"content":"    // Helper to create a dummy waypoint (replace with real input logic)"},{"type":"INSERT","lineNumber":46,"content":"    fun createDummyWaypoint(seq: Int): MissionItemInt {"},{"type":"INSERT","lineNumber":47,"content":"        return MissionItemInt("},{"type":"INSERT","lineNumber":48,"content":"            targetSystem = telemetryState.fcuDetected.let { if (it) 1u else 0u }, // Use 1u for demo"},{"type":"INSERT","lineNumber":49,"content":"            targetComponent = 0u,"},{"type":"INSERT","lineNumber":50,"content":"            seq = seq.toUShort(),"},{"type":"MODIFY","lineNumber":53,"content":"            current = if (seq == 0) 1u else 0u,","oldContent":"        }"},{"type":"DELETE","lineNumber":76,"oldContent":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"DELETE","lineNumber":77,"oldContent":"                // Show waypoints for user feedback"},{"type":"DELETE","lineNumber":78,"oldContent":"                    Text(\"Upload Mission (${waypoints.size})\")"},{"type":"INSERT","lineNumber":76,"content":"                        modifier = Modifier"},{"type":"INSERT","lineNumber":77,"content":"                            .padding(bottom = 12.dp)"},{"type":"INSERT","lineNumber":78,"content":"                            .size(56.dp)"},{"type":"DELETE","lineNumber":81,"oldContent":"                        telemetryViewModel.uploadMission(waypoints) { success, error ->"},{"type":"DELETE","lineNumber":82,"oldContent":"                Column("},{"type":"DELETE","lineNumber":83,"oldContent":"        }"},{"type":"INSERT","lineNumber":81,"content":"                    }"},{"type":"INSERT","lineNumber":82,"content":""},{"type":"INSERT","lineNumber":83,"content":"                    FloatingActionButton("},{"type":"MODIFY","lineNumber":85,"content":"                            if (waypoints.isNotEmpty()) waypoints.removeAt(waypoints.lastIndex)","oldContent":"                            if (waypoints.isNotEmpty()) waypoints.removeLast()"},{"type":"DELETE","lineNumber":92,"oldContent":"        }"},{"type":"DELETE","lineNumber":93,"oldContent":"            }"},{"type":"DELETE","lineNumber":96,"oldContent":"                    Text(\"Upload Mission (${waypoints.size})\")"},{"type":"INSERT","lineNumber":94,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":95,"content":"                        onClick = { waypoints.clear() },"},{"type":"INSERT","lineNumber":96,"content":"                        modifier = Modifier"},{"type":"MODIFY","lineNumber":130,"content":"                // Left-side floating buttons (below TopNavBar)","oldContent":"                                Toast.makeText(context, \"Mission uploaded\", Toast.LENGTH_SHORT).show()"},{"type":"DELETE","lineNumber":132,"oldContent":"                            if (success) {"},{"type":"DELETE","lineNumber":133,"oldContent":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleMedium)"},{"type":"INSERT","lineNumber":132,"content":"                    modifier = Modifier"},{"type":"INSERT","lineNumber":133,"content":"                        .align(Alignment.TopStart)"},{"type":"DELETE","lineNumber":147,"oldContent":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleMedium)"},{"type":"DELETE","lineNumber":148,"oldContent":""},{"type":"DELETE","lineNumber":149,"oldContent":"            }"},{"type":"INSERT","lineNumber":147,"content":"                    ) {"},{"type":"INSERT","lineNumber":148,"content":"                        Icon(Icons.Default.Build, contentDescription = \"Change Mode\")"},{"type":"INSERT","lineNumber":149,"content":"                    }"},{"type":"MODIFY","lineNumber":151,"content":"","oldContent":"                                ).show()"},{"type":"DELETE","lineNumber":155,"oldContent":"                                    context,"},{"type":"DELETE","lineNumber":156,"oldContent":"                                navController.navigate(Screen.Main.route) {"},{"type":"INSERT","lineNumber":155,"content":"                        telemetryViewModel.uploadMission(waypoints) { success, error ->"},{"type":"INSERT","lineNumber":156,"content":"                            if (success) {"},{"type":"MODIFY","lineNumber":158,"content":"                                    .show()","oldContent":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleMedium)"},{"type":"MODIFY","lineNumber":160,"content":"                                    popUpTo(Screen.Plan.route) { inclusive = true }","oldContent":""},{"type":"DELETE","lineNumber":162,"oldContent":"                    },"},{"type":"DELETE","lineNumber":163,"oldContent":"                        }"},{"type":"DELETE","lineNumber":164,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":165,"oldContent":"                // Show waypoints for user feedback"},{"type":"INSERT","lineNumber":162,"content":"                            } else {"},{"type":"INSERT","lineNumber":163,"content":"                                Toast.makeText("},{"type":"INSERT","lineNumber":164,"content":"                                    context,"},{"type":"INSERT","lineNumber":165,"content":"                                    error ?: \"Mission upload failed\","},{"type":"DELETE","lineNumber":168,"oldContent":"            "},{"type":"DELETE","lineNumber":169,"oldContent":"            }"},{"type":"DELETE","lineNumber":170,"oldContent":""},{"type":"DELETE","lineNumber":171,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"INSERT","lineNumber":168,"content":"                            }"},{"type":"INSERT","lineNumber":169,"content":"                        }"},{"type":"INSERT","lineNumber":170,"content":"                    },"},{"type":"INSERT","lineNumber":171,"content":"                    enabled = waypoints.isNotEmpty(),"},{"type":"INSERT","lineNumber":179,"content":"                // Show waypoints for user feedback"},{"type":"DELETE","lineNumber":180,"oldContent":"                    }"},{"type":"MODIFY","lineNumber":182,"content":"                    waypoints.forEachIndexed { idx, wp ->","oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"MODIFY","lineNumber":184,"content":"                    }","oldContent":"            }"},{"type":"INSERT","lineNumber":186,"content":"            }"},{"type":"INSERT","lineNumber":188,"content":"    }"},{"type":"INSERT","lineNumber":189,"content":"}"}]},{"timestamp":1757914323829,"changes":[{"type":"DELETE","lineNumber":23,"oldContent":"import com.divpundir.mavlink.definitions.common.MissionItemInt"},{"type":"DELETE","lineNumber":24,"oldContent":"//import com.example.aerogcsclone.Telemetry.MissionItemInt"},{"type":"DELETE","lineNumber":25,"oldContent":"import com.example.aerogcsclone.navigation.Screen"},{"type":"DELETE","lineNumber":26,"oldContent":"        floatingActionButton = {"},{"type":"INSERT","lineNumber":23,"content":"import com.google.android.gms.maps.model.LatLng"},{"type":"INSERT","lineNumber":24,"content":"import com.divpundir.mavlink.api.MavEnumValue"},{"type":"INSERT","lineNumber":25,"content":"import com.divpundir.mavlink.definitions.common.MavFrame"},{"type":"INSERT","lineNumber":26,"content":"import com.divpundir.mavlink.definitions.common.MavCmd"},{"type":"INSERT","lineNumber":27,"content":""},{"type":"DELETE","lineNumber":36,"oldContent":"    // Example mission items (replace with actual user input)"},{"type":"DELETE","lineNumber":37,"oldContent":"    val sampleMissionItems = listOf<MissionItemInt>() // TODO: Populate with real waypoints"},{"type":"DELETE","lineNumber":38,"oldContent":""},{"type":"DELETE","lineNumber":42,"oldContent":"    // Mutable list to store waypoints"},{"type":"DELETE","lineNumber":43,"oldContent":"    val waypoints = remember { mutableStateListOf<MissionItemInt>() }"},{"type":"DELETE","lineNumber":44,"oldContent":"    // Helper to create a dummy waypoint (replace with real input logic)"},{"type":"DELETE","lineNumber":45,"oldContent":"    fun createDummyWaypoint(seq: Int): MissionItemInt {"},{"type":"DELETE","lineNumber":46,"oldContent":"        return MissionItemInt("},{"type":"DELETE","lineNumber":47,"oldContent":"            targetSystem = telemetryState.fcuDetected.let { if (it) 1u else 0u }, // Use 1u for demo"},{"type":"DELETE","lineNumber":48,"oldContent":"                    Text(\"Upload Mission (${waypoints.size})\")"},{"type":"INSERT","lineNumber":40,"content":"    // Mutable list to store map points (LatLng) and mission items"},{"type":"INSERT","lineNumber":41,"content":"    val points = remember { mutableStateListOf<LatLng>() }"},{"type":"INSERT","lineNumber":42,"content":"    val waypoints = remember { mutableStateListOf<com.divpundir.mavlink.definitions.common.MissionItemInt>() }"},{"type":"INSERT","lineNumber":43,"content":""},{"type":"INSERT","lineNumber":44,"content":"    // Handler when user taps on map: add marker and corresponding mission item"},{"type":"INSERT","lineNumber":45,"content":"    val onMapClick: (LatLng) -> Unit = { latLng ->"},{"type":"INSERT","lineNumber":46,"content":"        points.add(latLng)"},{"type":"INSERT","lineNumber":47,"content":"        // build MissionItemInt"},{"type":"INSERT","lineNumber":48,"content":"        val seq = waypoints.size"},{"type":"INSERT","lineNumber":49,"content":"        val missionItem = com.divpundir.mavlink.definitions.common.MissionItemInt("},{"type":"INSERT","lineNumber":50,"content":"            targetSystem = 0u,"},{"type":"DELETE","lineNumber":51,"oldContent":"            frame = com.divpundir.mavlink.api.MavEnumValue.of(com.divpundir.mavlink.definitions.common.MavFrame.GLOBAL_RELATIVE_ALT_INT),"},{"type":"DELETE","lineNumber":52,"oldContent":"            command = com.divpundir.mavlink.api.MavEnumValue.of(com.divpundir.mavlink.definitions.common.MavCmd.NAV_WAYPOINT), // MAV_CMD_NAV_WAYPOINT"},{"type":"MODIFY","lineNumber":53,"content":"            frame = MavEnumValue.of(MavFrame.GLOBAL_RELATIVE_ALT_INT),","oldContent":"            current = if (seq == 0) 1u else 0u,"},{"type":"INSERT","lineNumber":54,"content":"            command = MavEnumValue.of(MavCmd.NAV_WAYPOINT),"},{"type":"INSERT","lineNumber":55,"content":"            current = 0u,"},{"type":"DELETE","lineNumber":55,"oldContent":"            param1 = 0f, // Hold time"},{"type":"DELETE","lineNumber":56,"oldContent":"            param2 = 0f, // Acceptance radius"},{"type":"DELETE","lineNumber":57,"oldContent":"            param3 = 0f, // Pass radius"},{"type":"DELETE","lineNumber":58,"oldContent":"            param4 = 0f, // Yaw"},{"type":"DELETE","lineNumber":59,"oldContent":"            x = (19.0760 * 1e7).toInt(), // Example lat"},{"type":"DELETE","lineNumber":60,"oldContent":"            y = (72.8777 * 1e7).toInt(), // Example lon"},{"type":"DELETE","lineNumber":61,"oldContent":"            z = 10f // Example alt"},{"type":"INSERT","lineNumber":57,"content":"            param1 = 0f,"},{"type":"INSERT","lineNumber":58,"content":"            param2 = 0f,"},{"type":"INSERT","lineNumber":59,"content":"            param3 = 0f,"},{"type":"INSERT","lineNumber":60,"content":"            param4 = 0f,"},{"type":"INSERT","lineNumber":61,"content":"            x = (latLng.latitude * 1e7).toInt(),"},{"type":"INSERT","lineNumber":62,"content":"            y = (latLng.longitude * 1e7).toInt(),"},{"type":"INSERT","lineNumber":63,"content":"            z = 10f"},{"type":"INSERT","lineNumber":65,"content":"        waypoints.add(missionItem)"},{"type":"DELETE","lineNumber":68,"oldContent":"                    ) {"},{"type":"DELETE","lineNumber":69,"oldContent":"                            .padding(bottom = 12.dp)"},{"type":"DELETE","lineNumber":70,"oldContent":"                        Icon(Icons.Default.Add, contentDescription = \"Add Waypoints\")"},{"type":"DELETE","lineNumber":71,"oldContent":"        }"},{"type":"DELETE","lineNumber":72,"oldContent":"            }"},{"type":"DELETE","lineNumber":73,"oldContent":"                }"},{"type":"DELETE","lineNumber":74,"oldContent":"                    }"},{"type":"DELETE","lineNumber":75,"oldContent":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"},{"type":"INSERT","lineNumber":71,"content":"                horizontalAlignment = Alignment.End"},{"type":"INSERT","lineNumber":72,"content":"            ) {"},{"type":"INSERT","lineNumber":73,"content":"                // Extra buttons shown above \"Create Plan\""},{"type":"INSERT","lineNumber":74,"content":"                if (showPlanActions) {"},{"type":"INSERT","lineNumber":75,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":76,"content":"                        onClick = {"},{"type":"INSERT","lineNumber":77,"content":"                            if (waypoints.isNotEmpty()) {"},{"type":"INSERT","lineNumber":78,"content":"                                waypoints.removeAt(waypoints.lastIndex)"},{"type":"INSERT","lineNumber":79,"content":"                                points.removeAt(points.lastIndex)"},{"type":"INSERT","lineNumber":80,"content":"                            }"},{"type":"INSERT","lineNumber":81,"content":"                        },"},{"type":"DELETE","lineNumber":80,"oldContent":"                        Icon(Icons.Default.Add, contentDescription = \"Add Waypoints\")"},{"type":"INSERT","lineNumber":86,"content":"                        Icon(Icons.Default.Delete, contentDescription = \"Delete Waypoints\")"},{"type":"DELETE","lineNumber":84,"oldContent":"                        onClick = {"},{"type":"DELETE","lineNumber":85,"oldContent":"                            if (waypoints.isNotEmpty()) waypoints.removeAt(waypoints.lastIndex)"},{"type":"DELETE","lineNumber":86,"oldContent":"}"},{"type":"DELETE","lineNumber":87,"oldContent":"    }"},{"type":"DELETE","lineNumber":88,"oldContent":"                            .padding(bottom = 12.dp)"},{"type":"DELETE","lineNumber":89,"oldContent":"                            .size(56.dp)"},{"type":"DELETE","lineNumber":90,"oldContent":"                    ) {"},{"type":"DELETE","lineNumber":91,"oldContent":"                        Icon(Icons.Default.Delete, contentDescription = \"Delete Waypoints\")"},{"type":"DELETE","lineNumber":92,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":93,"oldContent":"                        telemetryViewModel.uploadMission(waypoints) { success, error ->"},{"type":"DELETE","lineNumber":94,"oldContent":"                        onClick = { waypoints.clear() },"},{"type":"DELETE","lineNumber":95,"oldContent":"                Column("},{"type":"INSERT","lineNumber":90,"content":"                        onClick = { waypoints.clear(); points.clear() },"},{"type":"DELETE","lineNumber":112,"oldContent":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleMedium)"},{"type":"INSERT","lineNumber":107,"content":"        }"},{"type":"DELETE","lineNumber":127,"oldContent":"                // Map background"},{"type":"DELETE","lineNumber":128,"oldContent":"                GcsMap(telemetryState = telemetryState)"},{"type":"INSERT","lineNumber":122,"content":"                // Map background - pass points and onMapClick callback"},{"type":"INSERT","lineNumber":123,"content":"                GcsMap(telemetryState = telemetryState, points = points, onMapClick = onMapClick)"},{"type":"DELETE","lineNumber":131,"oldContent":"                    ) {"},{"type":"INSERT","lineNumber":126,"content":"                Column("},{"type":"DELETE","lineNumber":139,"oldContent":"                                    Toast.LENGTH_SHORT"},{"type":"INSERT","lineNumber":134,"content":"                        modifier = Modifier.size(56.dp)"},{"type":"DELETE","lineNumber":144,"oldContent":"                                    .show()"},{"type":"INSERT","lineNumber":139,"content":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":150,"oldContent":"                    },"},{"type":"INSERT","lineNumber":145,"content":"                }"},{"type":"DELETE","lineNumber":154,"oldContent":"                // Show waypoints for user feedback"},{"type":"INSERT","lineNumber":149,"content":"                    onClick = {"},{"type":"DELETE","lineNumber":157,"oldContent":"                }"},{"type":"INSERT","lineNumber":152,"content":"                                Toast.makeText(context, \"Mission uploaded\", Toast.LENGTH_SHORT)"},{"type":"DELETE","lineNumber":166,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":167,"oldContent":"                        .fillMaxWidth()"},{"type":"INSERT","lineNumber":161,"content":"                                    Toast.LENGTH_SHORT"},{"type":"INSERT","lineNumber":162,"content":"                                ).show()"},{"type":"DELETE","lineNumber":172,"oldContent":"                }"},{"type":"DELETE","lineNumber":173,"oldContent":"                    }"},{"type":"DELETE","lineNumber":174,"oldContent":"                };"},{"type":"INSERT","lineNumber":167,"content":"                    modifier = Modifier"},{"type":"INSERT","lineNumber":168,"content":"                        .padding(top = 16.dp)"},{"type":"INSERT","lineNumber":169,"content":"                        .fillMaxWidth()"},{"type":"INSERT","lineNumber":176,"content":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleMedium)"},{"type":"DELETE","lineNumber":182,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":183,"oldContent":"}"},{"type":"INSERT","lineNumber":178,"content":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"},{"type":"INSERT","lineNumber":180,"content":"                }"},{"type":"INSERT","lineNumber":182,"content":"        }"},{"type":"INSERT","lineNumber":183,"content":"    }"},{"type":"INSERT","lineNumber":184,"content":"}"}]},{"timestamp":1757914366169,"changes":[{"type":"INSERT","lineNumber":27,"content":"import com.example.aerogcsclone.navigation.Screen"},{"type":"DELETE","lineNumber":38,"oldContent":"    // Mutable list to store map points (LatLng) and mission items"},{"type":"DELETE","lineNumber":40,"oldContent":"    val points = remember { mutableStateListOf<LatLng>() }"},{"type":"INSERT","lineNumber":41,"content":"    // Mutable list to store map points (LatLng) and mission items"},{"type":"INSERT","lineNumber":42,"content":"    val points = remember { mutableStateListOf<LatLng>() }"},{"type":"DELETE","lineNumber":50,"oldContent":"            targetComponent = 0u,"},{"type":"INSERT","lineNumber":52,"content":"            targetComponent = 0u,"},{"type":"DELETE","lineNumber":55,"oldContent":"            autocontinue = 1u,"},{"type":"INSERT","lineNumber":57,"content":"            autocontinue = 1u,"},{"type":"DELETE","lineNumber":63,"oldContent":"            Column("},{"type":"DELETE","lineNumber":65,"oldContent":"        floatingActionButton = {"},{"type":"DELETE","lineNumber":66,"oldContent":""},{"type":"INSERT","lineNumber":65,"content":"        )"},{"type":"INSERT","lineNumber":67,"content":"    }"},{"type":"INSERT","lineNumber":68,"content":""},{"type":"DELETE","lineNumber":77,"oldContent":"                        modifier = Modifier"},{"type":"DELETE","lineNumber":79,"oldContent":"                            .padding(bottom = 12.dp)"},{"type":"DELETE","lineNumber":81,"oldContent":"                            .size(56.dp)"},{"type":"MODIFY","lineNumber":83,"content":"                        modifier = Modifier","oldContent":"                    ) {"},{"type":"INSERT","lineNumber":84,"content":"                            .padding(bottom = 12.dp)"},{"type":"INSERT","lineNumber":85,"content":"                            .size(56.dp)"},{"type":"INSERT","lineNumber":86,"content":"                    ) {"},{"type":"INSERT","lineNumber":87,"content":"                        Icon(Icons.Default.Delete, contentDescription = \"Delete Waypoints\")"},{"type":"DELETE","lineNumber":89,"oldContent":"                        Icon(Icons.Default.Delete, contentDescription = \"Delete Waypoints\")"},{"type":"DELETE","lineNumber":102,"oldContent":"        }"},{"type":"INSERT","lineNumber":108,"content":"        }"},{"type":"DELETE","lineNumber":117,"oldContent":"                // Map background - pass points and onMapClick callback"},{"type":"DELETE","lineNumber":119,"oldContent":"                GcsMap(telemetryState = telemetryState, points = points, onMapClick = onMapClick)"},{"type":"MODIFY","lineNumber":123,"content":"                // Map background - pass points and onMapClick callback","oldContent":"                Column("},{"type":"INSERT","lineNumber":124,"content":"                GcsMap(telemetryState = telemetryState, points = points, onMapClick = onMapClick)"},{"type":"INSERT","lineNumber":127,"content":"                Column("},{"type":"DELETE","lineNumber":129,"oldContent":"                        modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":135,"content":"                        modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":136,"content":"                    ) {"},{"type":"INSERT","lineNumber":137,"content":"                        Icon(Icons.Default.FlightTakeoff, contentDescription = \"Arm\")"},{"type":"INSERT","lineNumber":138,"content":"                    }"},{"type":"INSERT","lineNumber":139,"content":""},{"type":"DELETE","lineNumber":136,"oldContent":"            "},{"type":"DELETE","lineNumber":137,"oldContent":"            }"},{"type":"DELETE","lineNumber":138,"oldContent":"                }"},{"type":"DELETE","lineNumber":139,"oldContent":"                                ).show()"},{"type":"DELETE","lineNumber":140,"oldContent":"                }"},{"type":"MODIFY","lineNumber":142,"content":"                        modifier = Modifier.size(56.dp)","oldContent":"                                navController.navigate(Screen.Main.route) {"},{"type":"DELETE","lineNumber":145,"oldContent":"                    onClick = {"},{"type":"INSERT","lineNumber":146,"content":"                }"},{"type":"DELETE","lineNumber":148,"oldContent":"                                Toast.makeText(context, \"Mission uploaded\", Toast.LENGTH_SHORT)"},{"type":"INSERT","lineNumber":150,"content":"                    onClick = {"},{"type":"INSERT","lineNumber":153,"content":"                                Toast.makeText(context, \"Mission uploaded\", Toast.LENGTH_SHORT)"},{"type":"DELETE","lineNumber":154,"oldContent":"                    }"},{"type":"INSERT","lineNumber":155,"content":"                                navController.navigate(Screen.Main.route) {"},{"type":"DELETE","lineNumber":156,"oldContent":"                                    Toast.LENGTH_SHORT"},{"type":"DELETE","lineNumber":158,"oldContent":"                                ).show()"},{"type":"DELETE","lineNumber":163,"oldContent":"                    modifier = Modifier"},{"type":"DELETE","lineNumber":164,"oldContent":"                        .padding(top = 16.dp)"},{"type":"INSERT","lineNumber":162,"content":"                                    Toast.LENGTH_SHORT"},{"type":"INSERT","lineNumber":163,"content":"                                ).show()"},{"type":"DELETE","lineNumber":166,"oldContent":"                        .fillMaxWidth()"},{"type":"DELETE","lineNumber":170,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":171,"oldContent":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleMedium)"},{"type":"INSERT","lineNumber":168,"content":"                    modifier = Modifier"},{"type":"INSERT","lineNumber":169,"content":"                        .padding(top = 16.dp)"},{"type":"INSERT","lineNumber":170,"content":"                        .fillMaxWidth()"},{"type":"INSERT","lineNumber":171,"content":"                ) {"},{"type":"INSERT","lineNumber":172,"content":"                    Text(\"Upload Mission (${waypoints.size})\")"},{"type":"INSERT","lineNumber":173,"content":"                }"},{"type":"INSERT","lineNumber":174,"content":""},{"type":"INSERT","lineNumber":175,"content":"                // Show waypoints for user feedback"},{"type":"DELETE","lineNumber":173,"oldContent":"}"},{"type":"INSERT","lineNumber":177,"content":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleMedium)"},{"type":"INSERT","lineNumber":178,"content":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":175,"oldContent":"    }"},{"type":"DELETE","lineNumber":176,"oldContent":"                // Show waypoints for user feedback"},{"type":"INSERT","lineNumber":180,"content":"                    }"},{"type":"DELETE","lineNumber":179,"oldContent":"}"},{"type":"INSERT","lineNumber":184,"content":"    }"},{"type":"INSERT","lineNumber":185,"content":"}"}]},{"timestamp":1757914694128,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import android.os.Build"},{"type":"DELETE","lineNumber":4,"oldContent":"import androidx.annotation.RequiresApi"},{"type":"MODIFY","lineNumber":39,"content":"    // Mutable list to store map points (LatLng) and mission items","oldContent":"    // Mutable list to store map points (LatLng) and mission items"},{"type":"DELETE","lineNumber":54,"oldContent":"            frame = MavEnumValue.of(MavFrame.GLOBAL_RELATIVE_ALT_INT),"},{"type":"DELETE","lineNumber":55,"oldContent":"            command = MavEnumValue.of(MavCmd.NAV_WAYPOINT),"},{"type":"INSERT","lineNumber":52,"content":"            frame = 3u, // GLOBAL_RELATIVE_ALT_INT"},{"type":"INSERT","lineNumber":53,"content":"            command = 16u, // MAV_CMD_NAV_WAYPOINT"},{"type":"MODIFY","lineNumber":65,"content":"    }","oldContent":"    }"},{"type":"INSERT","lineNumber":79,"content":"                            }"},{"type":"INSERT","lineNumber":80,"content":"                        },"},{"type":"DELETE","lineNumber":83,"oldContent":"                            }"},{"type":"DELETE","lineNumber":85,"oldContent":"                        },"},{"type":"MODIFY","lineNumber":86,"content":"                    }","oldContent":"                    }"},{"type":"INSERT","lineNumber":120,"content":"            Box(modifier = Modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":124,"oldContent":"            Box(modifier = Modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":136,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":141,"oldContent":"        }"},{"type":"INSERT","lineNumber":138,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":139,"content":"                        onClick = { /* TODO: handle Change Mode action */ },"},{"type":"MODIFY","lineNumber":144,"content":"                }","oldContent":"                }"},{"type":"DELETE","lineNumber":148,"oldContent":""},{"type":"INSERT","lineNumber":146,"content":"                // Upload Mission button"},{"type":"INSERT","lineNumber":147,"content":"                Button("},{"type":"DELETE","lineNumber":150,"oldContent":"}"},{"type":"DELETE","lineNumber":157,"oldContent":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"INSERT","lineNumber":155,"content":"                                }"},{"type":"MODIFY","lineNumber":160,"content":"                                    Toast.LENGTH_SHORT","oldContent":"                                    Toast.LENGTH_SHORT"},{"type":"DELETE","lineNumber":166,"oldContent":"                    modifier = Modifier"},{"type":"INSERT","lineNumber":165,"content":"                    enabled = waypoints.isNotEmpty(),"},{"type":"INSERT","lineNumber":166,"content":"                    modifier = Modifier"},{"type":"DELETE","lineNumber":169,"oldContent":"}"},{"type":"DELETE","lineNumber":173,"oldContent":"}"},{"type":"DELETE","lineNumber":176,"oldContent":"                    }"},{"type":"INSERT","lineNumber":174,"content":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"INSERT","lineNumber":175,"content":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleMedium)"},{"type":"INSERT","lineNumber":176,"content":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"INSERT","lineNumber":177,"content":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"},{"type":"INSERT","lineNumber":178,"content":"                    }"},{"type":"INSERT","lineNumber":179,"content":"                }"},{"type":"INSERT","lineNumber":180,"content":"            }"},{"type":"INSERT","lineNumber":181,"content":"        }"},{"type":"INSERT","lineNumber":182,"content":"    }"},{"type":"INSERT","lineNumber":183,"content":"}"}]},{"timestamp":1757914866576,"changes":[{"type":"DELETE","lineNumber":37,"oldContent":"    // Mutable list to store map points (LatLng) and mission items"},{"type":"DELETE","lineNumber":38,"oldContent":"    // Mutable list to store map points (LatLng) and mission items"},{"type":"INSERT","lineNumber":37,"content":"    var showPlanActions by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":39,"content":"    // Mutable list to store map points (LatLng) and mission items"},{"type":"DELETE","lineNumber":50,"oldContent":"            frame = 3u, // GLOBAL_RELATIVE_ALT_INT"},{"type":"MODIFY","lineNumber":52,"content":"            frame = MavEnumValue.of(MavFrame.GLOBAL_RELATIVE_ALT_INT),","oldContent":"            command = 16u, // MAV_CMD_NAV_WAYPOINT"},{"type":"INSERT","lineNumber":53,"content":"            command = MavEnumValue.of(MavCmd.NAV_WAYPOINT),"},{"type":"DELETE","lineNumber":63,"oldContent":"    }"},{"type":"DELETE","lineNumber":64,"oldContent":"    }"},{"type":"INSERT","lineNumber":63,"content":"        )"},{"type":"INSERT","lineNumber":65,"content":"    }"},{"type":"DELETE","lineNumber":77,"oldContent":"                            }"},{"type":"MODIFY","lineNumber":79,"content":"                            }","oldContent":"                        },"},{"type":"INSERT","lineNumber":80,"content":"                        },"},{"type":"DELETE","lineNumber":84,"oldContent":"                    }"},{"type":"DELETE","lineNumber":85,"oldContent":"                    }"},{"type":"INSERT","lineNumber":84,"content":"                    ) {"},{"type":"INSERT","lineNumber":86,"content":"                    }"},{"type":"DELETE","lineNumber":118,"oldContent":"            Box(modifier = Modifier.fillMaxSize()) {"},{"type":"INSERT","lineNumber":120,"content":"            Box(modifier = Modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":135,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":137,"oldContent":"                        onClick = { /* TODO: handle Change Mode action */ },"},{"type":"INSERT","lineNumber":138,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":139,"content":"                        onClick = { /* TODO: handle Change Mode action */ },"},{"type":"INSERT","lineNumber":142,"content":"                        Icon(Icons.Default.Build, contentDescription = \"Change Mode\")"},{"type":"INSERT","lineNumber":143,"content":"                    }"},{"type":"DELETE","lineNumber":143,"oldContent":"                }"},{"type":"INSERT","lineNumber":145,"content":""},{"type":"DELETE","lineNumber":145,"oldContent":"                    }"},{"type":"DELETE","lineNumber":147,"oldContent":""},{"type":"DELETE","lineNumber":153,"oldContent":"                                }"},{"type":"INSERT","lineNumber":155,"content":"                                }"},{"type":"MODIFY","lineNumber":157,"content":"                                Toast.makeText(","oldContent":"}"},{"type":"INSERT","lineNumber":158,"content":"                                    context,"},{"type":"INSERT","lineNumber":159,"content":"                                    error ?: \"Mission upload failed\","},{"type":"DELETE","lineNumber":159,"oldContent":"                                    Toast.LENGTH_SHORT"},{"type":"DELETE","lineNumber":160,"oldContent":"        }"},{"type":"MODIFY","lineNumber":162,"content":"                            }","oldContent":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleMedium)"},{"type":"INSERT","lineNumber":163,"content":"                        }"},{"type":"INSERT","lineNumber":164,"content":"                    },"},{"type":"DELETE","lineNumber":164,"oldContent":"}"},{"type":"DELETE","lineNumber":166,"oldContent":"    }"},{"type":"DELETE","lineNumber":171,"oldContent":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"INSERT","lineNumber":172,"content":""},{"type":"INSERT","lineNumber":173,"content":"                // Show waypoints for user feedback"},{"type":"INSERT","lineNumber":174,"content":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"DELETE","lineNumber":174,"oldContent":"}"},{"type":"DELETE","lineNumber":177,"oldContent":"        }"},{"type":"MODIFY","lineNumber":180,"content":"            }","oldContent":"            }"},{"type":"INSERT","lineNumber":181,"content":"        }"},{"type":"INSERT","lineNumber":182,"content":"    }"},{"type":"INSERT","lineNumber":183,"content":"}"}]},{"timestamp":1757914889686,"changes":[{"type":"DELETE","lineNumber":16,"oldContent":"import androidx.compose.material.icons.filled.Add"},{"type":"MODIFY","lineNumber":38,"content":"    // Mutable list to store map points (LatLng) and mission items","oldContent":"    // Mutable list to store map points (LatLng) and mission items"},{"type":"INSERT","lineNumber":50,"content":"            seq = seq.toUShort(),"},{"type":"DELETE","lineNumber":53,"oldContent":"            seq = seq.toUShort(),"},{"type":"MODIFY","lineNumber":64,"content":"    }","oldContent":"    }"},{"type":"DELETE","lineNumber":67,"oldContent":"                    }"},{"type":"DELETE","lineNumber":68,"oldContent":"                    ) {"},{"type":"DELETE","lineNumber":69,"oldContent":"                        onClick = { /* TODO: handle Change Mode action */ },"},{"type":"INSERT","lineNumber":66,"content":"    Scaffold("},{"type":"INSERT","lineNumber":67,"content":"        floatingActionButton = {"},{"type":"INSERT","lineNumber":68,"content":"            Column("},{"type":"INSERT","lineNumber":77,"content":"                                points.removeAt(points.lastIndex)"},{"type":"DELETE","lineNumber":80,"oldContent":"                                points.removeAt(points.lastIndex)"},{"type":"MODIFY","lineNumber":85,"content":"                    }","oldContent":"                    }"},{"type":"MODIFY","lineNumber":119,"content":"            Box(modifier = Modifier.fillMaxSize()) {","oldContent":"            Box(modifier = Modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":128,"oldContent":"}"},{"type":"DELETE","lineNumber":129,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":130,"oldContent":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"INSERT","lineNumber":127,"content":"                        .padding(start = 16.dp, top = 72.dp), // push below TopNavBar"},{"type":"INSERT","lineNumber":128,"content":"                    verticalArrangement = Arrangement.spacedBy(12.dp)"},{"type":"INSERT","lineNumber":129,"content":"                ) {"},{"type":"DELETE","lineNumber":132,"oldContent":"                }"},{"type":"INSERT","lineNumber":131,"content":"                        onClick = { telemetryViewModel.arm() },"},{"type":"DELETE","lineNumber":136,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":138,"oldContent":"                        onClick = { /* TODO: handle Change Mode action */ },"},{"type":"INSERT","lineNumber":137,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":138,"content":"                        onClick = { /* TODO: handle Change Mode action */ },"},{"type":"DELETE","lineNumber":143,"oldContent":"                }"},{"type":"DELETE","lineNumber":145,"oldContent":"                // Upload Mission button"},{"type":"INSERT","lineNumber":143,"content":"                }"},{"type":"INSERT","lineNumber":145,"content":"                // Upload Mission button"},{"type":"DELETE","lineNumber":150,"oldContent":"}"},{"type":"INSERT","lineNumber":149,"content":"                            if (success) {"},{"type":"DELETE","lineNumber":152,"oldContent":"        }"},{"type":"INSERT","lineNumber":151,"content":"                                    .show()"},{"type":"INSERT","lineNumber":153,"content":"                                    popUpTo(Screen.Plan.route) { inclusive = true }"},{"type":"DELETE","lineNumber":155,"oldContent":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"},{"type":"DELETE","lineNumber":156,"oldContent":"                        .fillMaxWidth()"},{"type":"INSERT","lineNumber":155,"content":"                            } else {"},{"type":"MODIFY","lineNumber":159,"content":"                                    Toast.LENGTH_SHORT","oldContent":"                                    Toast.LENGTH_SHORT"},{"type":"MODIFY","lineNumber":164,"content":"                    enabled = waypoints.isNotEmpty(),","oldContent":"                    enabled = waypoints.isNotEmpty(),"},{"type":"DELETE","lineNumber":170,"oldContent":"}"},{"type":"INSERT","lineNumber":169,"content":"                    Text(\"Upload Mission (${waypoints.size})\")"},{"type":"INSERT","lineNumber":170,"content":"                }"},{"type":"DELETE","lineNumber":172,"oldContent":"        }"},{"type":"MODIFY","lineNumber":174,"content":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleMedium)","oldContent":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleMedium)"},{"type":"DELETE","lineNumber":178,"oldContent":"}"},{"type":"DELETE","lineNumber":179,"oldContent":"    }"},{"type":"INSERT","lineNumber":177,"content":"                    }"},{"type":"INSERT","lineNumber":178,"content":"                }"},{"type":"INSERT","lineNumber":180,"content":"        }"},{"type":"INSERT","lineNumber":181,"content":"    }"},{"type":"INSERT","lineNumber":182,"content":"}"}]},{"timestamp":1757915700674,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import android.widget.Toast"},{"type":"INSERT","lineNumber":15,"content":"import androidx.compose.material.icons.filled.Add"},{"type":"DELETE","lineNumber":19,"oldContent":"import androidx.compose.ui.platform.LocalContext"},{"type":"DELETE","lineNumber":20,"oldContent":"import com.google.android.gms.maps.model.LatLng"},{"type":"DELETE","lineNumber":21,"oldContent":"import com.divpundir.mavlink.api.MavEnumValue"},{"type":"DELETE","lineNumber":22,"oldContent":"import com.divpundir.mavlink.definitions.common.MavFrame"},{"type":"DELETE","lineNumber":23,"oldContent":"import com.divpundir.mavlink.definitions.common.MavCmd"},{"type":"DELETE","lineNumber":24,"oldContent":"import com.example.aerogcsclone.navigation.Screen"},{"type":"DELETE","lineNumber":33,"oldContent":"    val context = LocalContext.current"},{"type":"DELETE","lineNumber":37,"oldContent":"    // Mutable list to store map points (LatLng) and mission items"},{"type":"DELETE","lineNumber":39,"oldContent":"    val points = remember { mutableStateListOf<LatLng>() }"},{"type":"DELETE","lineNumber":40,"oldContent":"    val waypoints = remember { mutableStateListOf<com.divpundir.mavlink.definitions.common.MissionItemInt>() }"},{"type":"DELETE","lineNumber":41,"oldContent":""},{"type":"DELETE","lineNumber":42,"oldContent":"    // Handler when user taps on map: add marker and corresponding mission item"},{"type":"DELETE","lineNumber":43,"oldContent":"    val onMapClick: (LatLng) -> Unit = { latLng ->"},{"type":"DELETE","lineNumber":44,"oldContent":"        points.add(latLng)"},{"type":"DELETE","lineNumber":45,"oldContent":"        // build MissionItemInt"},{"type":"DELETE","lineNumber":46,"oldContent":"        val seq = waypoints.size"},{"type":"DELETE","lineNumber":47,"oldContent":"        val missionItem = com.divpundir.mavlink.definitions.common.MissionItemInt("},{"type":"DELETE","lineNumber":48,"oldContent":"            targetSystem = 0u,"},{"type":"DELETE","lineNumber":49,"oldContent":"            seq = seq.toUShort(),"},{"type":"DELETE","lineNumber":50,"oldContent":"            targetComponent = 0u,"},{"type":"DELETE","lineNumber":51,"oldContent":"            frame = MavEnumValue.of(MavFrame.GLOBAL_RELATIVE_ALT_INT),"},{"type":"DELETE","lineNumber":52,"oldContent":"            command = MavEnumValue.of(MavCmd.NAV_WAYPOINT),"},{"type":"DELETE","lineNumber":53,"oldContent":"            current = 0u,"},{"type":"DELETE","lineNumber":54,"oldContent":"            autocontinue = 1u,"},{"type":"DELETE","lineNumber":55,"oldContent":"            param1 = 0f,"},{"type":"DELETE","lineNumber":56,"oldContent":"            param2 = 0f,"},{"type":"DELETE","lineNumber":57,"oldContent":"            param3 = 0f,"},{"type":"DELETE","lineNumber":58,"oldContent":"            param4 = 0f,"},{"type":"DELETE","lineNumber":59,"oldContent":"            x = (latLng.latitude * 1e7).toInt(),"},{"type":"DELETE","lineNumber":60,"oldContent":"            y = (latLng.longitude * 1e7).toInt(),"},{"type":"DELETE","lineNumber":61,"oldContent":"            z = 10f"},{"type":"DELETE","lineNumber":62,"oldContent":"        )"},{"type":"DELETE","lineNumber":63,"oldContent":"    }"},{"type":"DELETE","lineNumber":64,"oldContent":"        waypoints.add(missionItem)"},{"type":"DELETE","lineNumber":66,"oldContent":""},{"type":"DELETE","lineNumber":74,"oldContent":"                        onClick = {"},{"type":"DELETE","lineNumber":75,"oldContent":"                            if (waypoints.isNotEmpty()) {"},{"type":"DELETE","lineNumber":76,"oldContent":"                                points.removeAt(points.lastIndex)"},{"type":"DELETE","lineNumber":77,"oldContent":"                                waypoints.removeAt(waypoints.lastIndex)"},{"type":"DELETE","lineNumber":78,"oldContent":"                            }"},{"type":"DELETE","lineNumber":79,"oldContent":"                        },"},{"type":"INSERT","lineNumber":39,"content":"                        onClick = { /* TODO: Add Waypoints */ },"},{"type":"INSERT","lineNumber":44,"content":"                        Icon(Icons.Default.Add, contentDescription = \"Add Waypoints\")"},{"type":"INSERT","lineNumber":46,"content":""},{"type":"INSERT","lineNumber":47,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":48,"content":"                        onClick = { /* TODO: Delete Waypoints */ },"},{"type":"INSERT","lineNumber":49,"content":"                        modifier = Modifier"},{"type":"INSERT","lineNumber":50,"content":"                            .padding(bottom = 12.dp)"},{"type":"INSERT","lineNumber":51,"content":"                            .size(56.dp)"},{"type":"INSERT","lineNumber":52,"content":"                    ) {"},{"type":"INSERT","lineNumber":54,"content":"                    }"},{"type":"DELETE","lineNumber":88,"oldContent":"                        onClick = { waypoints.clear(); points.clear() },"},{"type":"INSERT","lineNumber":57,"content":"                        onClick = { /* TODO: Clear Plan */ },"},{"type":"INSERT","lineNumber":83,"content":"                telemetryState = telemetryState,"},{"type":"INSERT","lineNumber":84,"content":"                authViewModel = authViewModel,"},{"type":"INSERT","lineNumber":85,"content":"                navController = navController"},{"type":"INSERT","lineNumber":86,"content":"            )"},{"type":"DELETE","lineNumber":115,"oldContent":"}"},{"type":"DELETE","lineNumber":116,"oldContent":"    }"},{"type":"DELETE","lineNumber":117,"oldContent":"                        onClick = { telemetryViewModel.arm() },"},{"type":"INSERT","lineNumber":89,"content":"                // Map background"},{"type":"INSERT","lineNumber":90,"content":"                GcsMap(telemetryState = telemetryState)"},{"type":"DELETE","lineNumber":120,"oldContent":"                // Map background - pass points and onMapClick callback"},{"type":"DELETE","lineNumber":121,"oldContent":"                GcsMap(telemetryState = telemetryState, points = points, onMapClick = onMapClick)"},{"type":"DELETE","lineNumber":122,"oldContent":"            }"},{"type":"DELETE","lineNumber":126,"oldContent":"                        .padding(start = 16.dp, top = 72.dp), // push below TopNavBar"},{"type":"INSERT","lineNumber":96,"content":"                        .padding(start = 16.dp, top = 72.dp), // push below TopNavBar"},{"type":"INSERT","lineNumber":99,"content":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":131,"oldContent":"}"},{"type":"DELETE","lineNumber":135,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":137,"oldContent":"                        onClick = { /* TODO: handle Change Mode action */ },"},{"type":"INSERT","lineNumber":106,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":107,"content":"                        onClick = { /* TODO: handle Change Mode action */ },"},{"type":"DELETE","lineNumber":142,"oldContent":"                }"},{"type":"DELETE","lineNumber":144,"oldContent":"                // Upload Mission button"},{"type":"DELETE","lineNumber":145,"oldContent":""},{"type":"DELETE","lineNumber":146,"oldContent":"                Button("},{"type":"DELETE","lineNumber":147,"oldContent":"                    onClick = {"},{"type":"DELETE","lineNumber":148,"oldContent":"                            if (success) {"},{"type":"DELETE","lineNumber":149,"oldContent":"    }"},{"type":"DELETE","lineNumber":150,"oldContent":"                                    .show()"},{"type":"DELETE","lineNumber":151,"oldContent":"                                Toast.makeText(context, \"Mission uploaded\", Toast.LENGTH_SHORT)"},{"type":"DELETE","lineNumber":152,"oldContent":"                                    popUpTo(Screen.Plan.route) { inclusive = true }"},{"type":"DELETE","lineNumber":153,"oldContent":"                                navController.navigate(Screen.Main.route) {"},{"type":"DELETE","lineNumber":154,"oldContent":"                                }"},{"type":"DELETE","lineNumber":155,"oldContent":"                            } else {"},{"type":"DELETE","lineNumber":156,"oldContent":"                                Toast.makeText("},{"type":"DELETE","lineNumber":157,"oldContent":"                                    context,"},{"type":"DELETE","lineNumber":158,"oldContent":"                                    Toast.LENGTH_SHORT"},{"type":"DELETE","lineNumber":159,"oldContent":"                                    error ?: \"Mission upload failed\","},{"type":"DELETE","lineNumber":160,"oldContent":"                                ).show()"},{"type":"DELETE","lineNumber":161,"oldContent":"                            }"},{"type":"DELETE","lineNumber":162,"oldContent":"                        }"},{"type":"DELETE","lineNumber":163,"oldContent":"                    enabled = waypoints.isNotEmpty(),"},{"type":"DELETE","lineNumber":164,"oldContent":"                    },"},{"type":"DELETE","lineNumber":165,"oldContent":"                    modifier = Modifier"},{"type":"DELETE","lineNumber":166,"oldContent":"                        .padding(top = 16.dp)"},{"type":"DELETE","lineNumber":167,"oldContent":"                        .fillMaxWidth()"},{"type":"DELETE","lineNumber":168,"oldContent":"                    Text(\"Upload Mission (${waypoints.size})\")"},{"type":"DELETE","lineNumber":169,"oldContent":"}"},{"type":"DELETE","lineNumber":171,"oldContent":""},{"type":"DELETE","lineNumber":172,"oldContent":"                // Show waypoints for user feedback"},{"type":"DELETE","lineNumber":173,"oldContent":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleMedium)"},{"type":"DELETE","lineNumber":174,"oldContent":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"DELETE","lineNumber":175,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":176,"oldContent":"                    }"},{"type":"DELETE","lineNumber":177,"oldContent":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"},{"type":"DELETE","lineNumber":178,"oldContent":"                }"},{"type":"INSERT","lineNumber":113,"content":"            }"},{"type":"DELETE","lineNumber":180,"oldContent":"}"},{"type":"INSERT","lineNumber":116,"content":"}"},{"type":"INSERT","lineNumber":117,"content":""}]},{"timestamp":1757915709360,"changes":[{"type":"DELETE","lineNumber":13,"oldContent":"import androidx.compose.material.icons.filled.Build"},{"type":"DELETE","lineNumber":14,"oldContent":"import androidx.compose.material.icons.filled.Add"},{"type":"DELETE","lineNumber":15,"oldContent":"import androidx.compose.material.icons.filled.FlightTakeoff"},{"type":"DELETE","lineNumber":16,"oldContent":"import androidx.compose.material.icons.filled.Delete"},{"type":"DELETE","lineNumber":17,"oldContent":"import androidx.compose.material.icons.filled.ClearAll"},{"type":"DELETE","lineNumber":18,"oldContent":"import androidx.compose.material.icons.filled.Menu"},{"type":"INSERT","lineNumber":13,"content":"import androidx.compose.material.icons.filled.*"},{"type":"INSERT","lineNumber":14,"content":"import com.google.maps.android.compose.MapType"},{"type":"DELETE","lineNumber":31,"oldContent":"                        onClick = { /* TODO: Add Waypoints */ },"},{"type":"DELETE","lineNumber":32,"oldContent":"                        Icon(Icons.Default.Add, contentDescription = \"Add Waypoints\")"},{"type":"INSERT","lineNumber":27,"content":"    // âœ… Map type state (same as in MainPage)"},{"type":"INSERT","lineNumber":28,"content":"    var mapType by remember { mutableStateOf(MapType.NORMAL) }"},{"type":"DELETE","lineNumber":34,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":35,"oldContent":"                        onClick = { /* TODO: Delete Waypoints */ },"},{"type":"DELETE","lineNumber":36,"oldContent":"                        modifier = Modifier"},{"type":"DELETE","lineNumber":37,"oldContent":"                            .padding(bottom = 12.dp)"},{"type":"DELETE","lineNumber":38,"oldContent":"                            .size(56.dp)"},{"type":"DELETE","lineNumber":39,"oldContent":"                    ) {"},{"type":"DELETE","lineNumber":40,"oldContent":"                    }"},{"type":"DELETE","lineNumber":41,"oldContent":"                        onClick = { /* TODO: Clear Plan */ },"},{"type":"INSERT","lineNumber":38,"content":"                        onClick = { /* TODO: Add Waypoints */ },"},{"type":"DELETE","lineNumber":53,"oldContent":"                telemetryState = telemetryState,"},{"type":"DELETE","lineNumber":55,"oldContent":"                authViewModel = authViewModel,"},{"type":"INSERT","lineNumber":43,"content":"                        Icon(Icons.Default.Add, contentDescription = \"Add Waypoints\")"},{"type":"DELETE","lineNumber":57,"oldContent":"                navController = navController"},{"type":"DELETE","lineNumber":58,"oldContent":"                        Icon(Icons.Default.Delete, contentDescription = \"Delete Waypoints\")"},{"type":"DELETE","lineNumber":59,"oldContent":"            )"},{"type":"DELETE","lineNumber":62,"oldContent":"                // Map background"},{"type":"INSERT","lineNumber":47,"content":"                        onClick = { /* TODO: Delete Waypoints */ },"},{"type":"DELETE","lineNumber":64,"oldContent":"                GcsMap(telemetryState = telemetryState)"},{"type":"INSERT","lineNumber":52,"content":"                        Icon(Icons.Default.Delete, contentDescription = \"Delete Waypoints\")"},{"type":"INSERT","lineNumber":53,"content":"                    }"},{"type":"INSERT","lineNumber":55,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":56,"content":"                        onClick = { /* TODO: Clear Plan */ },"},{"type":"INSERT","lineNumber":57,"content":"                        modifier = Modifier"},{"type":"INSERT","lineNumber":58,"content":"                            .padding(bottom = 12.dp)"},{"type":"INSERT","lineNumber":59,"content":"                            .size(56.dp)"},{"type":"INSERT","lineNumber":60,"content":"                    ) {"},{"type":"INSERT","lineNumber":61,"content":"                        Icon(Icons.Default.ClearAll, contentDescription = \"Clear Plan\")"},{"type":"DELETE","lineNumber":71,"oldContent":"                        .padding(start = 16.dp, top = 72.dp), // push below TopNavBar"},{"type":"DELETE","lineNumber":72,"oldContent":"            }"},{"type":"INSERT","lineNumber":64,"content":""},{"type":"DELETE","lineNumber":75,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":83,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":85,"oldContent":"                        onClick = { /* TODO: handle Change Mode action */ },"},{"type":"DELETE","lineNumber":92,"oldContent":"            }"},{"type":"INSERT","lineNumber":81,"content":"            TopNavBar("},{"type":"INSERT","lineNumber":82,"content":"                telemetryState = telemetryState,"},{"type":"INSERT","lineNumber":83,"content":"                authViewModel = authViewModel,"},{"type":"INSERT","lineNumber":84,"content":"                navController = navController"},{"type":"INSERT","lineNumber":85,"content":"            )"},{"type":"DELETE","lineNumber":94,"oldContent":"}"},{"type":"DELETE","lineNumber":95,"oldContent":"}"},{"type":"DELETE","lineNumber":96,"oldContent":""},{"type":"DELETE","lineNumber":98,"oldContent":"                GcsMap(telemetryState = telemetryState)"},{"type":"INSERT","lineNumber":88,"content":"                // âœ… Pass selected mapType to GcsMap"},{"type":"INSERT","lineNumber":89,"content":"                GcsMap(telemetryState = telemetryState, mapType = mapType)"},{"type":"INSERT","lineNumber":90,"content":""},{"type":"INSERT","lineNumber":95,"content":"                        .padding(start = 16.dp, top = 72.dp), // push below TopNavBar"},{"type":"INSERT","lineNumber":98,"content":"                    // âœ… Map toggle button ABOVE Arm button"},{"type":"INSERT","lineNumber":99,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":100,"content":"                        onClick = {"},{"type":"INSERT","lineNumber":101,"content":"                            mapType = if (mapType == MapType.NORMAL) MapType.SATELLITE else MapType.NORMAL"},{"type":"INSERT","lineNumber":102,"content":"                        },"},{"type":"INSERT","lineNumber":103,"content":"                        modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":104,"content":"                    ) {"},{"type":"INSERT","lineNumber":105,"content":"                        Icon(Icons.Default.Map, contentDescription = \"Toggle Map Type\")"},{"type":"INSERT","lineNumber":106,"content":"                    }"},{"type":"INSERT","lineNumber":107,"content":""},{"type":"INSERT","lineNumber":108,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":115,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":116,"content":"                        onClick = { /* TODO: handle Change Mode action */ },"},{"type":"INSERT","lineNumber":122,"content":"            }"},{"type":"INSERT","lineNumber":124,"content":"    }"},{"type":"INSERT","lineNumber":125,"content":"}"},{"type":"INSERT","lineNumber":126,"content":""}]},{"timestamp":1757915781167,"changes":[{"type":"MODIFY","lineNumber":2,"content":"import android.widget.Toast","oldContent":"import androidx.compose.material3.FloatingActionButton"},{"type":"INSERT","lineNumber":3,"content":"import androidx.compose.foundation.layout.*"},{"type":"MODIFY","lineNumber":7,"content":"import androidx.compose.ui.Alignment","oldContent":"import androidx.compose.runtime.collectAsState"},{"type":"INSERT","lineNumber":14,"content":"<<<<<<< Updated upstream"},{"type":"INSERT","lineNumber":17,"content":"======="},{"type":"INSERT","lineNumber":18,"content":"import androidx.compose.material.icons.filled.Build"},{"type":"INSERT","lineNumber":19,"content":"import androidx.compose.material.icons.filled.FlightTakeoff"},{"type":"INSERT","lineNumber":20,"content":"import androidx.compose.material.icons.filled.Delete"},{"type":"INSERT","lineNumber":21,"content":"import androidx.compose.material.icons.filled.ClearAll"},{"type":"INSERT","lineNumber":22,"content":"import androidx.compose.material.icons.filled.Menu"},{"type":"INSERT","lineNumber":23,"content":"import androidx.compose.ui.platform.LocalContext"},{"type":"INSERT","lineNumber":24,"content":"import com.google.android.gms.maps.model.LatLng"},{"type":"INSERT","lineNumber":25,"content":"import com.divpundir.mavlink.api.MavEnumValue"},{"type":"INSERT","lineNumber":26,"content":"import com.divpundir.mavlink.definitions.common.MavFrame"},{"type":"INSERT","lineNumber":27,"content":"import com.divpundir.mavlink.definitions.common.MavCmd"},{"type":"INSERT","lineNumber":28,"content":"import com.example.aerogcsclone.navigation.Screen"},{"type":"INSERT","lineNumber":29,"content":">>>>>>> Stashed changes"},{"type":"DELETE","lineNumber":18,"oldContent":"        }"},{"type":"DELETE","lineNumber":19,"oldContent":"        Column("},{"type":"DELETE","lineNumber":20,"oldContent":"            modifier = Modifier"},{"type":"INSERT","lineNumber":33,"content":"    telemetryViewModel: SharedViewModel,"},{"type":"INSERT","lineNumber":34,"content":"    authViewModel: AuthViewModel,"},{"type":"INSERT","lineNumber":35,"content":"    navController: NavHostController"},{"type":"DELETE","lineNumber":23,"oldContent":"    // âœ… Map type state (same as in MainPage)"},{"type":"INSERT","lineNumber":38,"content":"    val context = LocalContext.current"},{"type":"DELETE","lineNumber":25,"oldContent":"    var mapType by remember { mutableStateOf(MapType.NORMAL) }"},{"type":"INSERT","lineNumber":43,"content":"<<<<<<< Updated upstream"},{"type":"INSERT","lineNumber":44,"content":"    // âœ… Map type state (same as in MainPage)"},{"type":"INSERT","lineNumber":45,"content":"    var mapType by remember { mutableStateOf(MapType.NORMAL) }"},{"type":"INSERT","lineNumber":46,"content":"======="},{"type":"INSERT","lineNumber":47,"content":"    // Mutable list to store map points (LatLng) and mission items"},{"type":"INSERT","lineNumber":48,"content":"    val points = remember { mutableStateListOf<LatLng>() }"},{"type":"INSERT","lineNumber":49,"content":"    val waypoints = remember { mutableStateListOf<com.divpundir.mavlink.definitions.common.MissionItemInt>() }"},{"type":"DELETE","lineNumber":30,"oldContent":"                        onClick = { /* TODO: Add Waypoints */ },"},{"type":"INSERT","lineNumber":51,"content":"    // Handler when user taps on map: add marker and corresponding mission item"},{"type":"INSERT","lineNumber":52,"content":"    val onMapClick: (LatLng) -> Unit = { latLng ->"},{"type":"INSERT","lineNumber":53,"content":"        points.add(latLng)"},{"type":"INSERT","lineNumber":54,"content":"        // build MissionItemInt"},{"type":"INSERT","lineNumber":55,"content":"        val seq = waypoints.size"},{"type":"INSERT","lineNumber":56,"content":"        val missionItem = com.divpundir.mavlink.definitions.common.MissionItemInt("},{"type":"INSERT","lineNumber":57,"content":"            targetSystem = 0u,"},{"type":"INSERT","lineNumber":58,"content":"            targetComponent = 0u,"},{"type":"INSERT","lineNumber":59,"content":"            seq = seq.toUShort(),"},{"type":"INSERT","lineNumber":60,"content":"            frame = MavEnumValue.of(MavFrame.GLOBAL_RELATIVE_ALT_INT),"},{"type":"INSERT","lineNumber":61,"content":"            command = MavEnumValue.of(MavCmd.NAV_WAYPOINT),"},{"type":"INSERT","lineNumber":62,"content":"            current = 0u,"},{"type":"INSERT","lineNumber":63,"content":"            autocontinue = 1u,"},{"type":"INSERT","lineNumber":64,"content":"            param1 = 0f,"},{"type":"INSERT","lineNumber":65,"content":"            param2 = 0f,"},{"type":"INSERT","lineNumber":66,"content":"            param3 = 0f,"},{"type":"INSERT","lineNumber":67,"content":"            param4 = 0f,"},{"type":"INSERT","lineNumber":68,"content":"            x = (latLng.latitude * 1e7).toInt(),"},{"type":"INSERT","lineNumber":69,"content":"            y = (latLng.longitude * 1e7).toInt(),"},{"type":"INSERT","lineNumber":70,"content":"            z = 10f"},{"type":"INSERT","lineNumber":71,"content":"        )"},{"type":"INSERT","lineNumber":72,"content":"        waypoints.add(missionItem)"},{"type":"INSERT","lineNumber":73,"content":"    }"},{"type":"INSERT","lineNumber":74,"content":">>>>>>> Stashed changes"},{"type":"INSERT","lineNumber":75,"content":""},{"type":"DELETE","lineNumber":32,"oldContent":"                        Icon(Icons.Default.Add, contentDescription = \"Add Waypoints\")"},{"type":"DELETE","lineNumber":37,"oldContent":"                        onClick = { /* TODO: Delete Waypoints */ },"},{"type":"INSERT","lineNumber":84,"content":"                        onClick = {"},{"type":"INSERT","lineNumber":85,"content":"                            if (waypoints.isNotEmpty()) {"},{"type":"INSERT","lineNumber":86,"content":"                                waypoints.removeAt(waypoints.lastIndex)"},{"type":"INSERT","lineNumber":87,"content":"                                points.removeAt(points.lastIndex)"},{"type":"INSERT","lineNumber":88,"content":"                            }"},{"type":"INSERT","lineNumber":89,"content":"                        },"},{"type":"DELETE","lineNumber":43,"oldContent":"                        Icon(Icons.Default.Delete, contentDescription = \"Delete Waypoints\")"},{"type":"DELETE","lineNumber":45,"oldContent":"                    }"},{"type":"DELETE","lineNumber":47,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":48,"oldContent":"                        onClick = { /* TODO: Clear Plan */ },"},{"type":"INSERT","lineNumber":94,"content":"                        Icon(Icons.Default.Delete, contentDescription = \"Delete Waypoints\")"},{"type":"INSERT","lineNumber":96,"content":""},{"type":"INSERT","lineNumber":97,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":98,"content":"                        onClick = { waypoints.clear(); points.clear() },"},{"type":"DELETE","lineNumber":54,"oldContent":""},{"type":"DELETE","lineNumber":56,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":57,"oldContent":"                        modifier = Modifier"},{"type":"DELETE","lineNumber":58,"oldContent":""},{"type":"DELETE","lineNumber":59,"oldContent":"                            .padding(bottom = 12.dp)"},{"type":"DELETE","lineNumber":60,"oldContent":"                };"},{"type":"DELETE","lineNumber":61,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":62,"oldContent":"                ) {"},{"type":"INSERT","lineNumber":106,"content":""},{"type":"DELETE","lineNumber":72,"oldContent":"            TopNavBar("},{"type":"DELETE","lineNumber":74,"oldContent":"                telemetryState = telemetryState,"},{"type":"DELETE","lineNumber":76,"oldContent":"                authViewModel = authViewModel,"},{"type":"DELETE","lineNumber":77,"oldContent":"                navController = navController"},{"type":"DELETE","lineNumber":79,"oldContent":"            )"},{"type":"DELETE","lineNumber":82,"oldContent":"                // âœ… Pass selected mapType to GcsMap"},{"type":"INSERT","lineNumber":120,"content":"                .padding(paddingValues)"},{"type":"INSERT","lineNumber":121,"content":"        ) {"},{"type":"INSERT","lineNumber":122,"content":"            // Top navigation bar"},{"type":"INSERT","lineNumber":123,"content":"            TopNavBar("},{"type":"INSERT","lineNumber":124,"content":"                telemetryState = telemetryState,"},{"type":"INSERT","lineNumber":125,"content":"                authViewModel = authViewModel,"},{"type":"INSERT","lineNumber":126,"content":"                navController = navController"},{"type":"INSERT","lineNumber":127,"content":"            )"},{"type":"INSERT","lineNumber":128,"content":""},{"type":"INSERT","lineNumber":129,"content":"            Box(modifier = Modifier.fillMaxSize()) {"},{"type":"INSERT","lineNumber":130,"content":"<<<<<<< Updated upstream"},{"type":"INSERT","lineNumber":131,"content":"                // âœ… Pass selected mapType to GcsMap"},{"type":"DELETE","lineNumber":85,"oldContent":"                        onClick = { telemetryViewModel.arm() },"},{"type":"INSERT","lineNumber":133,"content":"======="},{"type":"INSERT","lineNumber":134,"content":"                // Map background - pass points and onMapClick callback"},{"type":"INSERT","lineNumber":135,"content":"                GcsMap(telemetryState = telemetryState, points = points, onMapClick = onMapClick)"},{"type":"INSERT","lineNumber":136,"content":">>>>>>> Stashed changes"},{"type":"DELETE","lineNumber":87,"oldContent":""},{"type":"DELETE","lineNumber":88,"oldContent":"                GcsMap(telemetryState = telemetryState)"},{"type":"DELETE","lineNumber":89,"oldContent":"                // Map background"},{"type":"INSERT","lineNumber":138,"content":"                // Left-side floating buttons (below TopNavBar)"},{"type":"INSERT","lineNumber":139,"content":"                Column("},{"type":"INSERT","lineNumber":140,"content":"                    modifier = Modifier"},{"type":"INSERT","lineNumber":141,"content":"                        .align(Alignment.TopStart)"},{"type":"DELETE","lineNumber":91,"oldContent":"            Box(modifier = Modifier.fillMaxSize()) {"},{"type":"INSERT","lineNumber":143,"content":"                    verticalArrangement = Arrangement.spacedBy(12.dp)"},{"type":"INSERT","lineNumber":144,"content":"                ) {"},{"type":"DELETE","lineNumber":94,"oldContent":"                // Left-side floating buttons (below TopNavBar)"},{"type":"DELETE","lineNumber":96,"oldContent":"                Column("},{"type":"DELETE","lineNumber":98,"oldContent":"                    modifier = Modifier"},{"type":"DELETE","lineNumber":100,"oldContent":"                        .align(Alignment.TopStart)"},{"type":"DELETE","lineNumber":102,"oldContent":"                    verticalArrangement = Arrangement.spacedBy(12.dp)"},{"type":"DELETE","lineNumber":104,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":106,"oldContent":"                        onClick = { telemetryViewModel.arm() },"},{"type":"DELETE","lineNumber":108,"oldContent":"                        modifier = Modifier.size(56.dp)"},{"type":"DELETE","lineNumber":110,"oldContent":"                    ) {"},{"type":"INSERT","lineNumber":156,"content":"                        onClick = { telemetryViewModel.arm() },"},{"type":"INSERT","lineNumber":157,"content":"                        modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":158,"content":"                    ) {"},{"type":"INSERT","lineNumber":162,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":163,"content":"                        onClick = { /* TODO: handle Change Mode action */ },"},{"type":"DELETE","lineNumber":119,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":121,"oldContent":"                        onClick = { /* TODO: handle Change Mode action */ },"},{"type":"DELETE","lineNumber":123,"oldContent":"}"},{"type":"DELETE","lineNumber":124,"oldContent":"    }"},{"type":"INSERT","lineNumber":170,"content":"                // Upload Mission button"},{"type":"INSERT","lineNumber":171,"content":"                Button("},{"type":"INSERT","lineNumber":172,"content":"                    onClick = {"},{"type":"INSERT","lineNumber":173,"content":"                        telemetryViewModel.uploadMission(waypoints) { success, error ->"},{"type":"INSERT","lineNumber":174,"content":"                            if (success) {"},{"type":"INSERT","lineNumber":175,"content":"                                Toast.makeText(context, \"Mission uploaded\", Toast.LENGTH_SHORT)"},{"type":"INSERT","lineNumber":176,"content":"                                    .show()"},{"type":"INSERT","lineNumber":177,"content":"                                navController.navigate(Screen.Main.route) {"},{"type":"INSERT","lineNumber":178,"content":"                                    popUpTo(Screen.Plan.route) { inclusive = true }"},{"type":"INSERT","lineNumber":179,"content":"                                }"},{"type":"INSERT","lineNumber":180,"content":"                            } else {"},{"type":"INSERT","lineNumber":181,"content":"                                Toast.makeText("},{"type":"INSERT","lineNumber":182,"content":"                                    context,"},{"type":"INSERT","lineNumber":183,"content":"                                    error ?: \"Mission upload failed\","},{"type":"INSERT","lineNumber":184,"content":"                                    Toast.LENGTH_SHORT"},{"type":"INSERT","lineNumber":185,"content":"                                ).show()"},{"type":"INSERT","lineNumber":186,"content":"                            }"},{"type":"INSERT","lineNumber":187,"content":"                        }"},{"type":"INSERT","lineNumber":188,"content":"                    },"},{"type":"INSERT","lineNumber":189,"content":"                    enabled = waypoints.isNotEmpty(),"},{"type":"INSERT","lineNumber":190,"content":"                    modifier = Modifier"},{"type":"INSERT","lineNumber":191,"content":"                        .padding(top = 16.dp)"},{"type":"INSERT","lineNumber":192,"content":"                        .fillMaxWidth()"},{"type":"INSERT","lineNumber":193,"content":"                ) {"},{"type":"INSERT","lineNumber":194,"content":"                    Text(\"Upload Mission (${waypoints.size})\")"},{"type":"INSERT","lineNumber":195,"content":"                }"},{"type":"INSERT","lineNumber":196,"content":""},{"type":"INSERT","lineNumber":197,"content":"                // Show waypoints for user feedback"},{"type":"INSERT","lineNumber":198,"content":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"INSERT","lineNumber":199,"content":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleMedium)"},{"type":"INSERT","lineNumber":200,"content":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"INSERT","lineNumber":201,"content":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"},{"type":"INSERT","lineNumber":202,"content":"                    }"},{"type":"INSERT","lineNumber":203,"content":"                }"},{"type":"INSERT","lineNumber":205,"content":"        }"},{"type":"INSERT","lineNumber":206,"content":"    }"},{"type":"INSERT","lineNumber":207,"content":"}"}]},{"timestamp":1757915832887,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import android.widget.Toast"},{"type":"MODIFY","lineNumber":7,"content":"import androidx.compose.ui.Modifier","oldContent":"import androidx.compose.runtime.collectAsState"},{"type":"DELETE","lineNumber":14,"oldContent":"import androidx.compose.material.icons.filled.*"},{"type":"DELETE","lineNumber":15,"oldContent":"<<<<<<< Updated upstream"},{"type":"DELETE","lineNumber":16,"oldContent":"import com.google.maps.android.compose.MapType"},{"type":"DELETE","lineNumber":17,"oldContent":""},{"type":"DELETE","lineNumber":18,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":19,"oldContent":"======="},{"type":"DELETE","lineNumber":20,"oldContent":"            }"},{"type":"INSERT","lineNumber":15,"content":"import androidx.compose.material.icons.filled.Add"},{"type":"DELETE","lineNumber":25,"oldContent":") {"},{"type":"DELETE","lineNumber":27,"oldContent":"            modifier = Modifier"},{"type":"DELETE","lineNumber":28,"oldContent":"import androidx.compose.ui.platform.LocalContext"},{"type":"DELETE","lineNumber":29,"oldContent":"import com.google.android.gms.maps.model.LatLng"},{"type":"DELETE","lineNumber":31,"oldContent":"import com.divpundir.mavlink.api.MavEnumValue"},{"type":"DELETE","lineNumber":32,"oldContent":"import com.divpundir.mavlink.definitions.common.MavFrame"},{"type":"INSERT","lineNumber":20,"content":"@Composable"},{"type":"INSERT","lineNumber":21,"content":"fun PlanScreen("},{"type":"INSERT","lineNumber":22,"content":"    telemetryViewModel: SharedViewModel,"},{"type":"INSERT","lineNumber":23,"content":"    authViewModel: AuthViewModel,"},{"type":"INSERT","lineNumber":24,"content":"    navController: NavHostController"},{"type":"INSERT","lineNumber":25,"content":") {"},{"type":"INSERT","lineNumber":26,"content":"    val telemetryState by telemetryViewModel.telemetryState.collectAsState()"},{"type":"INSERT","lineNumber":27,"content":""},{"type":"DELETE","lineNumber":34,"oldContent":"import com.divpundir.mavlink.definitions.common.MavCmd"},{"type":"DELETE","lineNumber":36,"oldContent":"import com.example.aerogcsclone.navigation.Screen"},{"type":"DELETE","lineNumber":38,"oldContent":">>>>>>> Stashed changes"},{"type":"DELETE","lineNumber":39,"oldContent":""},{"type":"DELETE","lineNumber":41,"oldContent":"    telemetryViewModel: SharedViewModel,"},{"type":"DELETE","lineNumber":43,"oldContent":"    authViewModel: AuthViewModel,"},{"type":"DELETE","lineNumber":45,"oldContent":"    navController: NavHostController"},{"type":"DELETE","lineNumber":48,"oldContent":"    val context = LocalContext.current"},{"type":"INSERT","lineNumber":39,"content":"                        onClick = { /* TODO: Add Waypoints */ },"},{"type":"DELETE","lineNumber":54,"oldContent":"<<<<<<< Updated upstream"},{"type":"DELETE","lineNumber":55,"oldContent":"    // âœ… Map type state (same as in MainPage)"},{"type":"DELETE","lineNumber":57,"oldContent":"    var mapType by remember { mutableStateOf(MapType.NORMAL) }"},{"type":"DELETE","lineNumber":58,"oldContent":"======="},{"type":"DELETE","lineNumber":60,"oldContent":"    // Mutable list to store map points (LatLng) and mission items"},{"type":"DELETE","lineNumber":61,"oldContent":"    val points = remember { mutableStateListOf<LatLng>() }"},{"type":"DELETE","lineNumber":62,"oldContent":"    val waypoints = remember { mutableStateListOf<com.divpundir.mavlink.definitions.common.MissionItemInt>() }"},{"type":"INSERT","lineNumber":44,"content":"                        Icon(Icons.Default.Add, contentDescription = \"Add Waypoints\")"},{"type":"INSERT","lineNumber":46,"content":""},{"type":"INSERT","lineNumber":47,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":48,"content":"                        onClick = { /* TODO: Delete Waypoints */ },"},{"type":"DELETE","lineNumber":65,"oldContent":"    // Handler when user taps on map: add marker and corresponding mission item"},{"type":"DELETE","lineNumber":67,"oldContent":"    val onMapClick: (LatLng) -> Unit = { latLng ->"},{"type":"DELETE","lineNumber":69,"oldContent":"        points.add(latLng)"},{"type":"DELETE","lineNumber":71,"oldContent":"        // build MissionItemInt"},{"type":"DELETE","lineNumber":72,"oldContent":"        val seq = waypoints.size"},{"type":"INSERT","lineNumber":53,"content":"                        Icon(Icons.Default.Delete, contentDescription = \"Delete Waypoints\")"},{"type":"INSERT","lineNumber":54,"content":"                    }"},{"type":"INSERT","lineNumber":55,"content":""},{"type":"INSERT","lineNumber":56,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":57,"content":"                        onClick = { /* TODO: Clear Plan */ },"},{"type":"INSERT","lineNumber":58,"content":"                        modifier = Modifier"},{"type":"INSERT","lineNumber":59,"content":"                            .padding(bottom = 12.dp)"},{"type":"INSERT","lineNumber":60,"content":"                            .size(56.dp)"},{"type":"INSERT","lineNumber":61,"content":"                    ) {"},{"type":"DELETE","lineNumber":74,"oldContent":"        val missionItem = com.divpundir.mavlink.definitions.common.MissionItemInt("},{"type":"DELETE","lineNumber":75,"oldContent":"            targetSystem = 0u,"},{"type":"DELETE","lineNumber":76,"oldContent":"            targetComponent = 0u,"},{"type":"DELETE","lineNumber":77,"oldContent":"            seq = seq.toUShort(),"},{"type":"DELETE","lineNumber":78,"oldContent":"            frame = MavEnumValue.of(MavFrame.GLOBAL_RELATIVE_ALT_INT),"},{"type":"DELETE","lineNumber":79,"oldContent":"            command = MavEnumValue.of(MavCmd.NAV_WAYPOINT),"},{"type":"DELETE","lineNumber":80,"oldContent":"            current = 0u,"},{"type":"DELETE","lineNumber":81,"oldContent":"            autocontinue = 1u,"},{"type":"DELETE","lineNumber":83,"oldContent":"            param1 = 0f,"},{"type":"DELETE","lineNumber":84,"oldContent":"                        onClick = { telemetryViewModel.arm() },"},{"type":"DELETE","lineNumber":85,"oldContent":"            param2 = 0f,"},{"type":"INSERT","lineNumber":64,"content":"                }"},{"type":"INSERT","lineNumber":65,"content":""},{"type":"DELETE","lineNumber":87,"oldContent":"            param3 = 0f,"},{"type":"DELETE","lineNumber":89,"oldContent":"            param4 = 0f,"},{"type":"DELETE","lineNumber":91,"oldContent":"            x = (latLng.latitude * 1e7).toInt(),"},{"type":"DELETE","lineNumber":93,"oldContent":"            y = (latLng.longitude * 1e7).toInt(),"},{"type":"DELETE","lineNumber":94,"oldContent":""},{"type":"DELETE","lineNumber":95,"oldContent":"            z = 10f"},{"type":"DELETE","lineNumber":96,"oldContent":"            }"},{"type":"DELETE","lineNumber":97,"oldContent":"        )"},{"type":"INSERT","lineNumber":70,"content":"                ) {"},{"type":"INSERT","lineNumber":71,"content":"                    Icon(Icons.Default.Menu, contentDescription = \"Create Plan\")"},{"type":"DELETE","lineNumber":99,"oldContent":"        waypoints.add(missionItem)"},{"type":"DELETE","lineNumber":100,"oldContent":"    }"},{"type":"DELETE","lineNumber":102,"oldContent":">>>>>>> Stashed changes"},{"type":"DELETE","lineNumber":103,"oldContent":""},{"type":"DELETE","lineNumber":107,"oldContent":"}"},{"type":"DELETE","lineNumber":108,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":109,"oldContent":"                        onClick = {"},{"type":"DELETE","lineNumber":110,"oldContent":"                GcsMap(telemetryState = telemetryState, mapType = mapType)"},{"type":"DELETE","lineNumber":111,"oldContent":"                            if (waypoints.isNotEmpty()) {"},{"type":"DELETE","lineNumber":112,"oldContent":"                                waypoints.removeAt(waypoints.lastIndex)"},{"type":"DELETE","lineNumber":113,"oldContent":""},{"type":"DELETE","lineNumber":114,"oldContent":"                                points.removeAt(points.lastIndex)"},{"type":"DELETE","lineNumber":115,"oldContent":"                            }"},{"type":"DELETE","lineNumber":116,"oldContent":"                        },"},{"type":"DELETE","lineNumber":117,"oldContent":"                        .padding(start = 16.dp, top = 72.dp), // push below TopNavBar"},{"type":"DELETE","lineNumber":118,"oldContent":"                    // âœ… Map toggle button ABOVE Arm button"},{"type":"DELETE","lineNumber":119,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":120,"oldContent":"                        Icon(Icons.Default.Delete, contentDescription = \"Delete Waypoints\")"},{"type":"DELETE","lineNumber":121,"oldContent":"                        onClick = {"},{"type":"DELETE","lineNumber":122,"oldContent":""},{"type":"DELETE","lineNumber":123,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":124,"oldContent":"                            mapType = if (mapType == MapType.NORMAL) MapType.SATELLITE else MapType.NORMAL"},{"type":"DELETE","lineNumber":125,"oldContent":"                        onClick = { waypoints.clear(); points.clear() },"},{"type":"DELETE","lineNumber":126,"oldContent":"                        },"},{"type":"DELETE","lineNumber":127,"oldContent":"                        modifier = Modifier.size(56.dp)"},{"type":"DELETE","lineNumber":128,"oldContent":"                    ) {"},{"type":"DELETE","lineNumber":129,"oldContent":"                        Icon(Icons.Default.Map, contentDescription = \"Toggle Map Type\")"},{"type":"DELETE","lineNumber":130,"oldContent":""},{"type":"DELETE","lineNumber":131,"oldContent":"                    }"},{"type":"DELETE","lineNumber":132,"oldContent":""},{"type":"DELETE","lineNumber":133,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":134,"oldContent":"                        Icon(Icons.Default.FlightTakeoff, contentDescription = \"Arm\")"},{"type":"DELETE","lineNumber":135,"oldContent":"                    }"},{"type":"DELETE","lineNumber":136,"oldContent":""},{"type":"DELETE","lineNumber":137,"oldContent":"                        modifier = Modifier.size(56.dp)"},{"type":"DELETE","lineNumber":138,"oldContent":"                        .padding(top = 16.dp)"},{"type":"DELETE","lineNumber":139,"oldContent":"                        Icon(Icons.Default.Build, contentDescription = \"Change Mode\")"},{"type":"DELETE","lineNumber":140,"oldContent":"                    }"},{"type":"INSERT","lineNumber":77,"content":"            modifier = Modifier"},{"type":"INSERT","lineNumber":78,"content":"                .fillMaxSize()"},{"type":"DELETE","lineNumber":142,"oldContent":"                }"},{"type":"DELETE","lineNumber":145,"oldContent":""},{"type":"DELETE","lineNumber":149,"oldContent":"            }"},{"type":"DELETE","lineNumber":151,"oldContent":"}"},{"type":"DELETE","lineNumber":153,"oldContent":"    }"},{"type":"DELETE","lineNumber":155,"oldContent":"        }"},{"type":"DELETE","lineNumber":157,"oldContent":"                }"},{"type":"DELETE","lineNumber":158,"oldContent":"<<<<<<< Updated upstream"},{"type":"DELETE","lineNumber":159,"oldContent":"                    }"},{"type":"DELETE","lineNumber":160,"oldContent":"                // âœ… Pass selected mapType to GcsMap"},{"type":"DELETE","lineNumber":161,"oldContent":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"},{"type":"DELETE","lineNumber":162,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":163,"oldContent":"======="},{"type":"DELETE","lineNumber":164,"oldContent":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleMedium)"},{"type":"DELETE","lineNumber":165,"oldContent":"                // Map background - pass points and onMapClick callback"},{"type":"DELETE","lineNumber":166,"oldContent":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"DELETE","lineNumber":167,"oldContent":"                GcsMap(telemetryState = telemetryState, points = points, onMapClick = onMapClick)"},{"type":"DELETE","lineNumber":168,"oldContent":"                // Show waypoints for user feedback"},{"type":"DELETE","lineNumber":169,"oldContent":">>>>>>> Stashed changes"},{"type":"INSERT","lineNumber":89,"content":"                // Map background"},{"type":"INSERT","lineNumber":90,"content":"                GcsMap(telemetryState = telemetryState)"},{"type":"DELETE","lineNumber":171,"oldContent":"                }"},{"type":"DELETE","lineNumber":173,"oldContent":"                    Text(\"Upload Mission (${waypoints.size})\")"},{"type":"DELETE","lineNumber":175,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":177,"oldContent":"                        .fillMaxWidth()"},{"type":"DELETE","lineNumber":179,"oldContent":"                        .padding(top = 16.dp)"},{"type":"DELETE","lineNumber":180,"oldContent":"                    modifier = Modifier"},{"type":"INSERT","lineNumber":96,"content":"                        .padding(start = 16.dp, top = 72.dp), // push below TopNavBar"},{"type":"DELETE","lineNumber":182,"oldContent":"                    enabled = waypoints.isNotEmpty(),"},{"type":"DELETE","lineNumber":184,"oldContent":"                    },"},{"type":"DELETE","lineNumber":185,"oldContent":"                        }"},{"type":"DELETE","lineNumber":186,"oldContent":"                            }"},{"type":"DELETE","lineNumber":187,"oldContent":"                                ).show()"},{"type":"DELETE","lineNumber":188,"oldContent":"                                    Toast.LENGTH_SHORT"},{"type":"DELETE","lineNumber":189,"oldContent":"                                    error ?: \"Mission upload failed\","},{"type":"DELETE","lineNumber":190,"oldContent":"                                    context,"},{"type":"DELETE","lineNumber":191,"oldContent":"                                Toast.makeText("},{"type":"DELETE","lineNumber":192,"oldContent":"                            } else {"},{"type":"DELETE","lineNumber":193,"oldContent":"                                }"},{"type":"DELETE","lineNumber":194,"oldContent":"                                    popUpTo(Screen.Plan.route) { inclusive = true }"},{"type":"DELETE","lineNumber":195,"oldContent":"                                navController.navigate(Screen.Main.route) {"},{"type":"INSERT","lineNumber":99,"content":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":197,"oldContent":"                                    .show()"},{"type":"DELETE","lineNumber":199,"oldContent":"                                Toast.makeText(context, \"Mission uploaded\", Toast.LENGTH_SHORT)"},{"type":"DELETE","lineNumber":201,"oldContent":"                            if (success) {"},{"type":"DELETE","lineNumber":202,"oldContent":"                        telemetryViewModel.uploadMission(waypoints) { success, error ->"},{"type":"DELETE","lineNumber":203,"oldContent":"                    onClick = {"},{"type":"DELETE","lineNumber":204,"oldContent":"                Button("},{"type":"INSERT","lineNumber":103,"content":"                        Icon(Icons.Default.FlightTakeoff, contentDescription = \"Arm\")"},{"type":"INSERT","lineNumber":104,"content":"                    }"},{"type":"INSERT","lineNumber":105,"content":""},{"type":"DELETE","lineNumber":206,"oldContent":"                // Upload Mission button"},{"type":"INSERT","lineNumber":108,"content":"                        modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":109,"content":"                    ) {"},{"type":"INSERT","lineNumber":110,"content":"                        Icon(Icons.Default.Build, contentDescription = \"Change Mode\")"},{"type":"INSERT","lineNumber":111,"content":"                    }"},{"type":"INSERT","lineNumber":112,"content":"                }"},{"type":"INSERT","lineNumber":113,"content":"            }"},{"type":"INSERT","lineNumber":114,"content":"        }"},{"type":"INSERT","lineNumber":115,"content":"    }"},{"type":"INSERT","lineNumber":116,"content":"}"},{"type":"INSERT","lineNumber":117,"content":""}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/Telemetry/TelemetryRepository.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/Telemetry/TelemetryRepository.kt","baseContent":"package com.example.aerogcsclone.Telemetry\n\nimport android.util.Log\nimport com.divpundir.mavlink.adapters.coroutines.asCoroutine\nimport com.divpundir.mavlink.adapters.coroutines.tryConnect\nimport com.divpundir.mavlink.adapters.coroutines.trySendUnsignedV2\nimport com.divpundir.mavlink.api.wrap\nimport com.divpundir.mavlink.connection.StreamState\nimport com.divpundir.mavlink.connection.tcp.TcpClientMavConnection\nimport com.divpundir.mavlink.definitions.common.*\nimport com.divpundir.mavlink.definitions.minimal.*\nimport com.google.android.gms.maps.model.LatLng\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.flow.*\nimport kotlinx.coroutines.isActive\nimport kotlinx.coroutines.launch\n\nclass MavlinkTelemetryRepository(\n    private val host: String,\n    private val port: Int\n) {\n    private var mission by mutableStateOf<List<LatLng>>(emptyList())\n    private val gcsSystemId: UByte = 200u\n    private val gcsComponentId: UByte = 1u\n    private val _state = MutableStateFlow(TelemetryState())\n    val state: StateFlow<TelemetryState> = _state.asStateFlow()\n\n    private var fcuSystemId: UByte = 0u\n    private var fcuComponentId: UByte = 0u\n\n    // Diagnostic info\n    private val _lastFailure = MutableStateFlow<Throwable?>(null)\n    val lastFailure: StateFlow<Throwable?> = _lastFailure.asStateFlow()\n\n    // Connection\n    private val connection = TcpClientMavConnection(host, port, CommonDialect).asCoroutine()\n\n    fun start() {\n        val scope = AppScope\n\n        suspend fun reconnect(scope: kotlinx.coroutines.CoroutineScope) {\n            while (scope.isActive) {\n                try {\n                    if (connection.tryConnect(scope)) {\n                        return // Exit on successful connection\n                    }\n                } catch (e: Exception) {\n                    Log.e(\"MavlinkRepo\", \"Connection attempt failed\", e)\n                    _lastFailure.value = e\n                }\n                delay(1000)\n            }\n        }\n\n        // Manage connection state + reconnects\n        scope.launch {\n            reconnect(this) // Initial connection attempt\n            connection.streamState.collect { st ->\n                when (st) {\n                    is StreamState.Active -> {\n                        if (!state.value.connected) {\n                            Log.i(\"MavlinkRepo\", \"Connection Active\")\n                            _state.update { it.copy(connected = true) }\n                        }\n                    }\n                    is StreamState.Inactive -> {\n                        if (state.value.connected) {\n                            Log.i(\"MavlinkRepo\", \"Connection Inactive, reconnecting...\")\n                            _state.update { it.copy(connected = false, fcuDetected = false) }\n                            reconnect(this)\n                        }\n                    }\n                }\n            }\n        }\n\n        // Send GCS heartbeat\n        scope.launch {\n            val heartbeat = Heartbeat(\n                type = MavType.GCS.wrap(),\n                autopilot = MavAutopilot.INVALID.wrap(),\n                baseMode = emptyList<MavModeFlag>().wrap(),\n                customMode = 0u,\n                mavlinkVersion = 3u\n            )\n            while (isActive) {\n                if (state.value.connected) {\n                    try {\n                        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, heartbeat)\n                    } catch (e: Exception) {\n                        Log.e(\"MavlinkRepo\", \"Failed to send heartbeat\", e)\n                        _lastFailure.value = e\n                    }\n                }\n                delay(1000)\n            }\n        }\n\n        // Shared message stream\n        val mavFrameStream = connection.mavFrame\n            .shareIn(scope, SharingStarted.Eagerly, replay = 0)\n\n        // Log raw messages\n        scope.launch {\n            mavFrameStream.collect {\n                Log.d(\"MavlinkRepo\", \"Frame: ${it.message.javaClass.simpleName} (sysId=${it.systemId}, compId=${it.componentId})\")\n            }\n        }\n\n        // Detect FCU\n        scope.launch {\n            mavFrameStream\n                .filter { it.message is Heartbeat && (it.message as Heartbeat).type != MavType.GCS.wrap() }\n                .collect {\n                    if (!state.value.fcuDetected) {\n                        fcuSystemId = it.systemId\n                        fcuComponentId = it.componentId\n                        Log.i(\"MavlinkRepo\", \"FCU detected sysId=$fcuSystemId compId=$fcuComponentId\")\n                        _state.update { it.copy(fcuDetected = true) }\n\n                        // Set message intervals\n                        launch {\n                            suspend fun setMessageRate(messageId: UInt, hz: Float) {\n                                val intervalUsec = if (hz <= 0f) 0f else (1_000_000f / hz)\n                                val cmd = CommandLong(\n                                    targetSystem = fcuSystemId,\n                                    targetComponent = fcuComponentId,\n                                    command = MavCmd.SET_MESSAGE_INTERVAL.wrap(),\n                                    confirmation = 0u,\n                                    param1 = messageId.toFloat(),\n                                    param2 = intervalUsec,\n                                    param3 = 0f,\n                                    param4 = 0f,\n                                    param5 = 0f,\n                                    param6 = 0f,\n                                    param7 = 0f\n                                )\n                                try {\n                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, cmd)\n                                } catch (e: Exception) {\n                                    Log.e(\"MavlinkRepo\", \"Failed to send SET_MESSAGE_INTERVAL\", e)\n                                    _lastFailure.value = e\n                                }\n                            }\n\n                            setMessageRate(1u, 1f)   // SYS_STATUS\n                            setMessageRate(24u, 1f)  // GPS_RAW_INT\n                            setMessageRate(33u, 5f)  // GLOBAL_POSITION_INT\n                            setMessageRate(74u, 5f)  // VFR_HUD\n                            setMessageRate(147u, 1f) // BATTERY_STATUS\n                        }\n                    }\n                }\n        }\n\n        // Collectors\n\n        // VFR_HUD\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .filterIsInstance<VfrHud>()\n                .collect { hud ->\n                    _state.update {\n                        it.copy(\n                            altitudeMsl = hud.alt,\n                            airspeed = hud.airspeed.takeIf { v -> v > 0f },\n                            groundspeed = hud.groundspeed.takeIf { v -> v > 0f }\n                        )\n                    }\n                }\n        }\n\n        // GLOBAL_POSITION_INT\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .filterIsInstance<GlobalPositionInt>()\n                .collect { gp ->\n                    val altAMSLm = gp.alt / 1000f\n                    val relAltM = gp.relativeAlt / 1000f\n                    val lat = gp.lat.takeIf { it != Int.MIN_VALUE }?.let { it / 10_000_000.0 }\n                    val lon = gp.lon.takeIf { it != Int.MIN_VALUE }?.let { it / 10_000_000.0 }\n                    _state.update {\n                        it.copy(\n                            altitudeMsl = altAMSLm,\n                            altitudeRelative = relAltM,\n                            latitude = lat,\n                            longitude = lon\n                        )\n                    }\n                }\n        }\n\n        // BATTERY_STATUS\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .filterIsInstance<BatteryStatus>()\n                .collect { b ->\n                    val currentA = if (b.currentBattery.toInt() == -1) null else b.currentBattery / 100f\n                    _state.update { it.copy(currentA = currentA) }\n                }\n        }\n        //HEARTBEAT for mode, armed, armable\n        scope.launch {\n            mavFrameStream\n                .filter{ frame-> state.value.fcuDetected && frame.systemId == fcuSystemId }\n                .map{frame -> frame.message}\n                .filterIsInstance<Heartbeat>()\n                .collect{ hb->\n                    val armed = (hb.baseMode.value and MavModeFlag.SAFETY_ARMED.value )!= 0u\n                    val mode = when (hb.customMode) {\n                        0u -> \"Stabilize\"\n                        1u -> \"Acro\"\n                        2u -> \"Alt Hold\"\n                        3u -> \"Auto\"\n                        4u -> \"Guided\"\n                        5u -> \"Loiter\"\n                        6u -> \"RTL\"\n                        7u -> \"Circle\"\n                        9u -> \"Land\"\n                        11u -> \"Drift\"\n                        13u -> \"Sport\"\n                        14u -> \"Flip\"\n                        15u -> \"AutoTune\"\n                        16u -> \"Pos Hold\"\n                        17u -> \"Brake\"\n                        18u -> \"Throw\"\n                        19u -> \"Avoid_ADSB\"\n                        20u -> \"Guided_NoGPS\"\n                        21u -> \"Smart_RTL\"\n                        22u -> \"FlowHold\"\n                        23u -> \"Follow\"\n                        24u -> \"ZigZag\"\n                        25u -> \"SystemID\"\n                        26u -> \"AutoRotate\"\n                        27u -> \"Auto_RTL\"\n                        else -> \"Unknown\"\n                    }\n                    _state.update { it.copy(armed=armed , mode = mode)}\n                }\n        }\n        // SYS_STATUS\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .filterIsInstance<SysStatus>()\n                .collect { s ->\n                    val vBatt = if (s.voltageBattery.toUInt() == 0xFFFFu) null else s.voltageBattery.toFloat() / 1000f\n                    val pct = if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()\n                    val SENSOR_3D_GYRO = 1u\n                    val present = (s.onboardControlSensorsPresent.value and SENSOR_3D_GYRO) != 0u\n                    val enabled = (s.onboardControlSensorsEnabled.value and SENSOR_3D_GYRO) != 0u\n                    val healthy = (s.onboardControlSensorsHealth.value and SENSOR_3D_GYRO) != 0u\n                    val armable = present && enabled && healthy\n                    _state.update { it.copy(voltage = vBatt, batteryPercent = pct , armable = armable) }\n                }\n        }\n\n        // GPS_RAW_INT\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .filterIsInstance<GpsRawInt>()\n                .collect { gps ->\n                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }\n                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f\n                    _state.update { it.copy(sats = sats, hdop = hdop) }\n                }\n        }\n\n        // Mission handling\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .collect { message ->\n                    when (message) {\n                        is MissionRequest -> {\n                            val seq = message.seq.toInt()\n                            if (seq < mission.size) {\n                                val waypoint = mission[seq]\n                                val missionItem = MissionItemInt(\n                                    targetSystem = fcuSystemId,\n                                    targetComponent = fcuComponentId,\n                                    seq = seq.toUShort(),\n                                    frame = MavFrame.GLOBAL_RELATIVE_ALT.wrap(),\n                                    command = MavCmd.NAV_WAYPOINT.wrap(),\n                                    current = if (seq == 0) 1u else 0u,\n                                    autocontinue = 1u,\n                                    param1 = 0f,\n                                    param2 = 0f,\n                                    param3 = 0f,\n                                    param4 = 0f,\n                                    x = (waypoint.latitude * 1e7).toInt(),\n                                    y = (waypoint.longitude * 1e7).toInt(),\n                                    z = 100f, // Default altitude\n                                    missionType = MavMissionType.MISSION.wrap()\n                                )\n                                try {\n                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)\n                                } catch (e: Exception) {\n                                    Log.e(\"MavlinkRepo\", \"Failed to send mission item\", e)\n                                    _lastFailure.value = e\n                                }\n                            }\n                        }\n                        is MissionAck -> {\n                            Log.i(\"MavlinkRepo\", \"Mission upload acknowledged with result: ${message.type.value}\")\n                            if (message.type == MavMissionResult.MAV_MISSION_ACCEPTED.wrap()) {\n                                _state.update { it.copy(missionLoaded = true) }\n                            }\n                        }\n                    }\n                }\n        }\n    }\n\n    suspend fun sendCommand(command: MavCmd, param1: Float = 0f, param2: Float = 0f, param3: Float = 0f, param4: Float = 0f, param5: Float = 0f, param6: Float = 0f, param7: Float = 0f) {\n        val commandLong = CommandLong(\n            targetSystem = fcuSystemId,\n            targetComponent = fcuComponentId,\n            command = command.wrap(),\n            confirmation = 0u,\n            param1 = param1,\n            param2 = param2,\n            param3 = param3,\n            param4 = param4,\n            param5 = param5,\n            param6 = param6,\n            param7 = param7\n        )\n        try {\n            connection.trySendUnsignedV2(\n               gcsSystemId,\n                gcsComponentId, commandLong)\n        } catch (e: Exception) {\n            Log.e(\"MavlinkRepo\", \"Failed to send command\", e)\n            _lastFailure.value = e\n        }\n    }\n\n    suspend fun arm() {\n        if (state.value.armable) {\n            sendCommand(\n                MavCmd.COMPONENT_ARM_DISARM,\n                1f\n            )\n        } else {\n            Log.w(\"MavlinkRepo\", \"Arm command rejected, vehicle not armable\")\n        }\n    }\n\n    suspend fun disarm() {\n        sendCommand(\n            MavCmd.COMPONENT_ARM_DISARM,\n            0f\n        )\n    }\n\n    suspend fun changeMode(mode: MavMode) {\n        sendCommand(\n            MavCmd.DO_SET_MODE,\n            mode.value.toFloat(),\n            0f\n        )\n    }\n\n    suspend fun takeoff(altitude: Float) {\n        sendCommand(\n            MavCmd.NAV_TAKEOFF,\n            -1f,\n            0f,\n            0f,\n            0f,\n            0f,\n            0f,\n            altitude\n        )\n    }\n\n    suspend fun land() {\n        sendCommand(MavCmd.NAV_LAND)\n    }\n\n    suspend fun loadMission(waypoints: List<LatLng>) {\n        mission = waypoints\n        val missionCount = MissionCount(\n            targetSystem = fcuSystemId,\n            targetComponent = fcuComponentId,\n            count = mission.size.toUShort(),\n            missionType = MavMissionType.MISSION.wrap()\n        )\n        try {\n            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionCount)\n        } catch (e: Exception) {\n            Log.e(\"MavlinkRepo\", \"Failed to send mission count\", e)\n            _lastFailure.value = e\n        }\n    }\n\n    suspend fun startMission() {\n        sendCommand(MavCmd.MISSION_START)\n    }\n}\n","baseTimestamp":1757909141732,"deltas":[{"timestamp":1757912767382,"changes":[{"type":"MODIFY","lineNumber":379,"content":"            changeMode(mode = MavMode.AUTO) // Auto mode/ Auto mode","oldContent":"            changeMode(MavMode.AUTO) // Auto mode/ Auto mode"}]},{"timestamp":1757912777062,"changes":[{"type":"MODIFY","lineNumber":379,"content":"            changeMode(mode = MavMode.AUTO) ","oldContent":"            changeMode(mode = MavMode.AUTO) // Auto mode/ Auto mode"}]},{"timestamp":1757912853167,"changes":[{"type":"INSERT","lineNumber":16,"content":"// MAVLink flight modes (ArduPilot values)"},{"type":"INSERT","lineNumber":17,"content":"object MavMode {"},{"type":"INSERT","lineNumber":18,"content":"    val AUTO: UInt = 3u"},{"type":"INSERT","lineNumber":19,"content":"    // Add other modes as needed"},{"type":"INSERT","lineNumber":20,"content":"}"},{"type":"INSERT","lineNumber":21,"content":""}]},{"timestamp":1757912881953,"changes":[{"type":"DELETE","lineNumber":17,"oldContent":"class MavlinkTelemetryRepository("},{"type":"DELETE","lineNumber":19,"oldContent":"    private val host: String,"},{"type":"DELETE","lineNumber":21,"oldContent":"    private val port: Int"},{"type":"DELETE","lineNumber":23,"oldContent":") {"},{"type":"DELETE","lineNumber":25,"oldContent":"    private val gcsSystemId: UByte = 200u"},{"type":"INSERT","lineNumber":22,"content":"class MavlinkTelemetryRepository("},{"type":"INSERT","lineNumber":23,"content":"    private val host: String,"},{"type":"INSERT","lineNumber":24,"content":"    private val port: Int"},{"type":"INSERT","lineNumber":25,"content":") {"},{"type":"INSERT","lineNumber":26,"content":"    private val gcsSystemId: UByte = 200u"},{"type":"MODIFY","lineNumber":324,"content":"    suspend fun changeMode(mode: UInt) {","oldContent":"    suspend fun changeMode(mode: MavMode) {"},{"type":"MODIFY","lineNumber":327,"content":"            mode.toFloat(),","oldContent":"            mode.value.toFloat(),"},{"type":"MODIFY","lineNumber":385,"content":"            changeMode(MavMode.AUTO)","oldContent":"            changeMode(mode = MavMode.AUTO) "}]},{"timestamp":1757913214588,"changes":[{"type":"DELETE","lineNumber":19,"oldContent":"class MavlinkTelemetryRepository("},{"type":"INSERT","lineNumber":20,"content":"}"},{"type":"INSERT","lineNumber":21,"content":""},{"type":"INSERT","lineNumber":22,"content":"class MavlinkTelemetryRepository("},{"type":"DELETE","lineNumber":23,"oldContent":"}"},{"type":"DELETE","lineNumber":26,"oldContent":""},{"type":"INSERT","lineNumber":379,"content":"    /**"},{"type":"INSERT","lineNumber":380,"content":"     * Uploads a mission using the MAVLink mission protocol handshake."},{"type":"INSERT","lineNumber":381,"content":"     * Returns true if ACK received, false otherwise."},{"type":"INSERT","lineNumber":382,"content":"     */"},{"type":"INSERT","lineNumber":383,"content":"    suspend fun uploadMissionWithAck(missionItems: List<MissionItemInt>, timeoutMs: Long = 10000): Boolean {"},{"type":"INSERT","lineNumber":384,"content":"        if (!state.value.fcuDetected) {"},{"type":"INSERT","lineNumber":385,"content":"            Log.e(\"MavlinkRepo\", \"FCU not detected, cannot upload mission\")"},{"type":"INSERT","lineNumber":386,"content":"            throw IllegalStateException(\"FCU not detected\")"},{"type":"INSERT","lineNumber":387,"content":"        }"},{"type":"INSERT","lineNumber":388,"content":"        try {"},{"type":"INSERT","lineNumber":389,"content":"            // Send MissionCount"},{"type":"INSERT","lineNumber":390,"content":"            val missionCount = MissionCount("},{"type":"INSERT","lineNumber":391,"content":"                targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":392,"content":"                targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":393,"content":"                count = missionItems.size.toUShort()"},{"type":"INSERT","lineNumber":394,"content":"            )"},{"type":"INSERT","lineNumber":395,"content":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionCount)"},{"type":"INSERT","lineNumber":396,"content":""},{"type":"INSERT","lineNumber":397,"content":"            // Listen for requests and ACK"},{"type":"INSERT","lineNumber":398,"content":"            val frameStream = connection.mavFrame.shareIn(AppScope, SharingStarted.Eagerly, replay = 0)"},{"type":"INSERT","lineNumber":399,"content":"            val itemMap = missionItems.withIndex().associate { it.index to it.value }"},{"type":"INSERT","lineNumber":400,"content":"            var ackReceived = false"},{"type":"INSERT","lineNumber":401,"content":"            val startTime = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":402,"content":"            val requestedSeqs = mutableSetOf<Int>()"},{"type":"INSERT","lineNumber":403,"content":""},{"type":"INSERT","lineNumber":404,"content":"            frameStream"},{"type":"INSERT","lineNumber":405,"content":"                .filter { it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":406,"content":"                .collect { frame ->"},{"type":"INSERT","lineNumber":407,"content":"                    when (val msg = frame.message) {"},{"type":"INSERT","lineNumber":408,"content":"                        is MissionRequestInt -> {"},{"type":"INSERT","lineNumber":409,"content":"                            val seq = msg.seq.toInt()"},{"type":"INSERT","lineNumber":410,"content":"                            val item = itemMap[seq]"},{"type":"INSERT","lineNumber":411,"content":"                            if (item != null && !requestedSeqs.contains(seq)) {"},{"type":"INSERT","lineNumber":412,"content":"                                val missionItem = item.copy("},{"type":"INSERT","lineNumber":413,"content":"                                    targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":414,"content":"                                    targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":415,"content":"                                    seq = seq.toUShort()"},{"type":"INSERT","lineNumber":416,"content":"                                )"},{"type":"INSERT","lineNumber":417,"content":"                                connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"INSERT","lineNumber":418,"content":"                                requestedSeqs.add(seq)"},{"type":"INSERT","lineNumber":419,"content":"                                Log.i(\"MavlinkRepo\", \"Sent MissionItemInt seq=$seq\")"},{"type":"INSERT","lineNumber":420,"content":"                            }"},{"type":"INSERT","lineNumber":421,"content":"                        }"},{"type":"INSERT","lineNumber":422,"content":"                        is MissionAck -> {"},{"type":"INSERT","lineNumber":423,"content":"                            Log.i(\"MavlinkRepo\", \"Mission ACK received\")"},{"type":"INSERT","lineNumber":424,"content":"                            ackReceived = true"},{"type":"INSERT","lineNumber":425,"content":"                            return@collect"},{"type":"INSERT","lineNumber":426,"content":"                        }"},{"type":"INSERT","lineNumber":427,"content":"                    }"},{"type":"INSERT","lineNumber":428,"content":"                    // Timeout"},{"type":"INSERT","lineNumber":429,"content":"                    if (System.currentTimeMillis() - startTime > timeoutMs) {"},{"type":"INSERT","lineNumber":430,"content":"                        Log.e(\"MavlinkRepo\", \"Mission upload timed out\")"},{"type":"INSERT","lineNumber":431,"content":"                        return false"},{"type":"INSERT","lineNumber":432,"content":"                    }"},{"type":"INSERT","lineNumber":433,"content":"                }"},{"type":"INSERT","lineNumber":434,"content":"            return ackReceived"},{"type":"INSERT","lineNumber":435,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":436,"content":"            Log.e(\"MavlinkRepo\", \"Mission upload failed\", e)"},{"type":"INSERT","lineNumber":437,"content":"            _lastFailure.value = e"},{"type":"INSERT","lineNumber":438,"content":"            return false"},{"type":"INSERT","lineNumber":439,"content":"        }"},{"type":"INSERT","lineNumber":440,"content":"    }"},{"type":"INSERT","lineNumber":441,"content":""}]},{"timestamp":1757913283297,"changes":[{"type":"MODIFY","lineNumber":20,"content":"}","oldContent":"}"},{"type":"MODIFY","lineNumber":23,"content":"    private val host: String,","oldContent":"    private val host: String,"},{"type":"DELETE","lineNumber":380,"oldContent":"    suspend fun startMission() {"},{"type":"DELETE","lineNumber":382,"oldContent":"        if (!state.value.fcuDetected) {"},{"type":"DELETE","lineNumber":384,"oldContent":"            Log.e(\"MavlinkRepo\", \"FCU not detected, cannot start mission\")"},{"type":"DELETE","lineNumber":386,"oldContent":"            throw IllegalStateException(\"FCU not detected\")"},{"type":"DELETE","lineNumber":388,"oldContent":"        }"},{"type":"DELETE","lineNumber":390,"oldContent":"        try {"},{"type":"DELETE","lineNumber":392,"oldContent":"            changeMode(MavMode.AUTO)"},{"type":"DELETE","lineNumber":394,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":396,"oldContent":"            Log.e(\"MavlinkRepo\", \"Start mission failed\", e)"},{"type":"DELETE","lineNumber":398,"oldContent":"            _lastFailure.value = e"},{"type":"DELETE","lineNumber":400,"oldContent":"            throw e"},{"type":"DELETE","lineNumber":402,"oldContent":"        }"},{"type":"DELETE","lineNumber":404,"oldContent":"    }"},{"type":"DELETE","lineNumber":406,"oldContent":""},{"type":"DELETE","lineNumber":408,"oldContent":""},{"type":"DELETE","lineNumber":410,"oldContent":"}"},{"type":"DELETE","lineNumber":413,"oldContent":""},{"type":"DELETE","lineNumber":414,"oldContent":""},{"type":"DELETE","lineNumber":416,"oldContent":"    }"},{"type":"DELETE","lineNumber":418,"oldContent":"        }"},{"type":"DELETE","lineNumber":420,"oldContent":"            return false"},{"type":"DELETE","lineNumber":422,"oldContent":"            _lastFailure.value = e"},{"type":"DELETE","lineNumber":424,"oldContent":"            Log.e(\"MavlinkRepo\", \"Mission upload failed\", e)"},{"type":"DELETE","lineNumber":426,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":428,"oldContent":"            return ackReceived"},{"type":"DELETE","lineNumber":430,"oldContent":"                }"},{"type":"DELETE","lineNumber":432,"oldContent":"                    }"},{"type":"DELETE","lineNumber":434,"oldContent":"                        return false"},{"type":"DELETE","lineNumber":436,"oldContent":"                        Log.e(\"MavlinkRepo\", \"Mission upload timed out\")"},{"type":"DELETE","lineNumber":438,"oldContent":"                    if (System.currentTimeMillis() - startTime > timeoutMs) {"},{"type":"DELETE","lineNumber":440,"oldContent":"                    // Timeout"},{"type":"DELETE","lineNumber":442,"oldContent":"                    }"},{"type":"DELETE","lineNumber":444,"oldContent":"                        }"},{"type":"DELETE","lineNumber":446,"oldContent":"                            return@collect"},{"type":"DELETE","lineNumber":448,"oldContent":"                            ackReceived = true"},{"type":"DELETE","lineNumber":450,"oldContent":"                            Log.i(\"MavlinkRepo\", \"Mission ACK received\")"},{"type":"DELETE","lineNumber":452,"oldContent":"                        is MissionAck -> {"},{"type":"DELETE","lineNumber":454,"oldContent":"                        }"},{"type":"DELETE","lineNumber":456,"oldContent":"                            }"},{"type":"INSERT","lineNumber":420,"content":"                            }"},{"type":"INSERT","lineNumber":421,"content":"                        }"},{"type":"INSERT","lineNumber":422,"content":"                        is MissionAck -> {"},{"type":"INSERT","lineNumber":423,"content":"                            Log.i(\"MavlinkRepo\", \"Mission ACK received\")"},{"type":"INSERT","lineNumber":424,"content":"                            ackReceived = true"},{"type":"INSERT","lineNumber":425,"content":"                            return@collect"},{"type":"INSERT","lineNumber":426,"content":"                        }"},{"type":"INSERT","lineNumber":427,"content":"                    }"},{"type":"INSERT","lineNumber":428,"content":"                    // Timeout"},{"type":"INSERT","lineNumber":429,"content":"                    if (System.currentTimeMillis() - startTime > timeoutMs) {"},{"type":"INSERT","lineNumber":430,"content":"                        Log.e(\"MavlinkRepo\", \"Mission upload timed out\")"},{"type":"INSERT","lineNumber":431,"content":"                        return@collect false"},{"type":"INSERT","lineNumber":432,"content":"                    }"},{"type":"INSERT","lineNumber":433,"content":"                }"},{"type":"INSERT","lineNumber":434,"content":"            return ackReceived"},{"type":"INSERT","lineNumber":435,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":436,"content":"            Log.e(\"MavlinkRepo\", \"Mission upload failed\", e)"},{"type":"INSERT","lineNumber":437,"content":"            _lastFailure.value = e"},{"type":"INSERT","lineNumber":438,"content":"            return false"},{"type":"INSERT","lineNumber":439,"content":"        }"},{"type":"INSERT","lineNumber":440,"content":"    }"},{"type":"INSERT","lineNumber":441,"content":""},{"type":"INSERT","lineNumber":442,"content":"    suspend fun startMission() {"},{"type":"INSERT","lineNumber":443,"content":"        if (!state.value.fcuDetected) {"},{"type":"INSERT","lineNumber":444,"content":"            Log.e(\"MavlinkRepo\", \"FCU not detected, cannot start mission\")"},{"type":"INSERT","lineNumber":445,"content":"            throw IllegalStateException(\"FCU not detected\")"},{"type":"INSERT","lineNumber":446,"content":"        }"},{"type":"INSERT","lineNumber":447,"content":"        try {"},{"type":"INSERT","lineNumber":448,"content":"            changeMode(MavMode.AUTO)"},{"type":"INSERT","lineNumber":449,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":450,"content":"            Log.e(\"MavlinkRepo\", \"Start mission failed\", e)"},{"type":"INSERT","lineNumber":451,"content":"            _lastFailure.value = e"},{"type":"INSERT","lineNumber":452,"content":"            throw e"},{"type":"INSERT","lineNumber":453,"content":"        }"},{"type":"INSERT","lineNumber":454,"content":"    }"},{"type":"INSERT","lineNumber":455,"content":""},{"type":"INSERT","lineNumber":456,"content":""},{"type":"INSERT","lineNumber":457,"content":"}"},{"type":"INSERT","lineNumber":458,"content":""}]},{"timestamp":1757913304293,"changes":[{"type":"INSERT","lineNumber":19,"content":"    // Add other modes as needed"},{"type":"DELETE","lineNumber":20,"oldContent":"}"},{"type":"INSERT","lineNumber":22,"content":"class MavlinkTelemetryRepository("},{"type":"DELETE","lineNumber":23,"oldContent":"    private val host: String,"},{"type":"INSERT","lineNumber":400,"content":"            var ackReceived = false"},{"type":"INSERT","lineNumber":401,"content":"            val startTime = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":402,"content":"            val requestedSeqs = mutableSetOf<Int>()"},{"type":"INSERT","lineNumber":403,"content":""},{"type":"INSERT","lineNumber":404,"content":"            frameStream"},{"type":"INSERT","lineNumber":405,"content":"                .filter { it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":406,"content":"                .collect { frame ->"},{"type":"INSERT","lineNumber":407,"content":"                    when (val msg = frame.message) {"},{"type":"INSERT","lineNumber":408,"content":"                        is MissionRequestInt -> {"},{"type":"INSERT","lineNumber":409,"content":"                            val seq = msg.seq.toInt()"},{"type":"INSERT","lineNumber":410,"content":"                            val item = itemMap[seq]"},{"type":"INSERT","lineNumber":411,"content":"                            if (item != null && !requestedSeqs.contains(seq)) {"},{"type":"INSERT","lineNumber":412,"content":"                                val missionItem = item.copy("},{"type":"INSERT","lineNumber":413,"content":"                                    targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":414,"content":"                                    targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":415,"content":"                                    seq = seq.toUShort()"},{"type":"INSERT","lineNumber":416,"content":"                                )"},{"type":"INSERT","lineNumber":417,"content":"                                connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"INSERT","lineNumber":418,"content":"                                requestedSeqs.add(seq)"},{"type":"INSERT","lineNumber":419,"content":"                                Log.i(\"MavlinkRepo\", \"Sent MissionItemInt seq=$seq\")"},{"type":"DELETE","lineNumber":402,"oldContent":"            var ackReceived = false"},{"type":"DELETE","lineNumber":405,"oldContent":"            val startTime = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":408,"oldContent":"            val requestedSeqs = mutableSetOf<Int>()"},{"type":"DELETE","lineNumber":411,"oldContent":""},{"type":"DELETE","lineNumber":414,"oldContent":"            frameStream"},{"type":"DELETE","lineNumber":416,"oldContent":"                        return@collect false"},{"type":"DELETE","lineNumber":417,"oldContent":"                .filter { it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":431,"content":"                        return false"},{"type":"DELETE","lineNumber":420,"oldContent":"                .collect { frame ->"},{"type":"DELETE","lineNumber":423,"oldContent":"                    when (val msg = frame.message) {"},{"type":"DELETE","lineNumber":426,"oldContent":"                        is MissionRequestInt -> {"},{"type":"DELETE","lineNumber":429,"oldContent":"                            val seq = msg.seq.toInt()"},{"type":"DELETE","lineNumber":432,"oldContent":"                            val item = itemMap[seq]"},{"type":"DELETE","lineNumber":435,"oldContent":"                            if (item != null && !requestedSeqs.contains(seq)) {"},{"type":"DELETE","lineNumber":438,"oldContent":"                                val missionItem = item.copy("},{"type":"DELETE","lineNumber":441,"oldContent":"                                    targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":444,"oldContent":"                                    targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":447,"oldContent":"                                    seq = seq.toUShort()"},{"type":"DELETE","lineNumber":450,"oldContent":"                                )"},{"type":"DELETE","lineNumber":453,"oldContent":"                                connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"DELETE","lineNumber":456,"oldContent":"                                requestedSeqs.add(seq)"},{"type":"DELETE","lineNumber":458,"oldContent":"                                Log.i(\"MavlinkRepo\", \"Sent MissionItemInt seq=$seq\")"}]},{"timestamp":1757913314463,"changes":[{"type":"DELETE","lineNumber":401,"oldContent":"                            }"},{"type":"DELETE","lineNumber":403,"oldContent":"                        }"},{"type":"DELETE","lineNumber":406,"oldContent":"                        is MissionAck -> {"},{"type":"DELETE","lineNumber":408,"oldContent":"                            Log.i(\"MavlinkRepo\", \"Mission ACK received\")"},{"type":"DELETE","lineNumber":411,"oldContent":"                            ackReceived = true"},{"type":"DELETE","lineNumber":413,"oldContent":"                            return@collect"},{"type":"DELETE","lineNumber":416,"oldContent":"                        }"},{"type":"DELETE","lineNumber":418,"oldContent":"                    }"},{"type":"DELETE","lineNumber":421,"oldContent":"                    // Timeout"},{"type":"DELETE","lineNumber":423,"oldContent":"                    if (System.currentTimeMillis() - startTime > timeoutMs) {"},{"type":"DELETE","lineNumber":426,"oldContent":"                        Log.e(\"MavlinkRepo\", \"Mission upload timed out\")"},{"type":"DELETE","lineNumber":430,"oldContent":"                    }"},{"type":"INSERT","lineNumber":420,"content":"                            }"},{"type":"INSERT","lineNumber":421,"content":"                        }"},{"type":"INSERT","lineNumber":422,"content":"                        is MissionAck -> {"},{"type":"INSERT","lineNumber":423,"content":"                            Log.i(\"MavlinkRepo\", \"Mission ACK received\")"},{"type":"INSERT","lineNumber":424,"content":"                            ackReceived = true"},{"type":"INSERT","lineNumber":425,"content":"                            return@collect"},{"type":"INSERT","lineNumber":426,"content":"                        }"},{"type":"INSERT","lineNumber":427,"content":"                    }"},{"type":"INSERT","lineNumber":428,"content":"                    // Timeout"},{"type":"INSERT","lineNumber":429,"content":"                    if (System.currentTimeMillis() - startTime > timeoutMs) {"},{"type":"INSERT","lineNumber":430,"content":"                        Log.e(\"MavlinkRepo\", \"Mission upload timed out\")"},{"type":"INSERT","lineNumber":431,"content":"                        return@collect"},{"type":"INSERT","lineNumber":432,"content":"                    }"},{"type":"DELETE","lineNumber":440,"oldContent":"                        return false"}]},{"timestamp":1757914372174,"changes":[{"type":"INSERT","lineNumber":389,"content":"            if (missionItems.isEmpty()) {"},{"type":"INSERT","lineNumber":390,"content":"                Log.w(\"MavlinkRepo\", \"No mission items to upload\")"},{"type":"INSERT","lineNumber":391,"content":"                return false"},{"type":"INSERT","lineNumber":392,"content":"            }"},{"type":"INSERT","lineNumber":393,"content":""},{"type":"INSERT","lineNumber":401,"content":"            Log.i(\"MavlinkRepo\", \"Sent MISSION_COUNT=${missionItems.size}\")"},{"type":"DELETE","lineNumber":397,"oldContent":"            // Listen for requests and ACK"},{"type":"DELETE","lineNumber":398,"oldContent":"            val frameStream = connection.mavFrame.shareIn(AppScope, SharingStarted.Eagerly, replay = 0)"},{"type":"DELETE","lineNumber":399,"oldContent":"            val itemMap = missionItems.withIndex().associate { it.index to it.value }"},{"type":"DELETE","lineNumber":400,"oldContent":"            var ackReceived = false"},{"type":"DELETE","lineNumber":401,"oldContent":"            val startTime = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":402,"oldContent":"            val requestedSeqs = mutableSetOf<Int>()"},{"type":"INSERT","lineNumber":403,"content":"            // Flow of frames from FC"},{"type":"INSERT","lineNumber":404,"content":"            val frameFlow = connection.mavFrame"},{"type":"DELETE","lineNumber":404,"oldContent":"            frameStream"},{"type":"DELETE","lineNumber":405,"oldContent":"                .filter { it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":406,"oldContent":"                .collect { frame ->"},{"type":"DELETE","lineNumber":407,"oldContent":"                    when (val msg = frame.message) {"},{"type":"DELETE","lineNumber":408,"oldContent":"                        is MissionRequestInt -> {"},{"type":"DELETE","lineNumber":409,"oldContent":"                            val seq = msg.seq.toInt()"},{"type":"DELETE","lineNumber":410,"oldContent":"                            val item = itemMap[seq]"},{"type":"DELETE","lineNumber":411,"oldContent":"                            if (item != null && !requestedSeqs.contains(seq)) {"},{"type":"DELETE","lineNumber":412,"oldContent":"                            }"},{"type":"DELETE","lineNumber":413,"oldContent":"                                val missionItem = item.copy("},{"type":"DELETE","lineNumber":414,"oldContent":"                        }"},{"type":"DELETE","lineNumber":415,"oldContent":"                        is MissionAck -> {"},{"type":"DELETE","lineNumber":416,"oldContent":"                                    targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":417,"oldContent":"                            Log.i(\"MavlinkRepo\", \"Mission ACK received\")"},{"type":"DELETE","lineNumber":418,"oldContent":"                            ackReceived = true"},{"type":"DELETE","lineNumber":419,"oldContent":"                                    targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":420,"oldContent":"                            return@collect"},{"type":"DELETE","lineNumber":421,"oldContent":"                                    seq = seq.toUShort()"},{"type":"DELETE","lineNumber":422,"oldContent":"                        }"},{"type":"DELETE","lineNumber":423,"oldContent":"                    }"},{"type":"DELETE","lineNumber":424,"oldContent":"                                )"},{"type":"DELETE","lineNumber":425,"oldContent":"                    // Timeout"},{"type":"DELETE","lineNumber":426,"oldContent":"                                connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"DELETE","lineNumber":427,"oldContent":"                    if (System.currentTimeMillis() - startTime > timeoutMs) {"},{"type":"DELETE","lineNumber":428,"oldContent":"                                requestedSeqs.add(seq)"},{"type":"DELETE","lineNumber":429,"oldContent":"                        Log.e(\"MavlinkRepo\", \"Mission upload timed out\")"},{"type":"DELETE","lineNumber":430,"oldContent":"                        return@collect"},{"type":"DELETE","lineNumber":431,"oldContent":"                                Log.i(\"MavlinkRepo\", \"Sent MissionItemInt seq=$seq\")"},{"type":"DELETE","lineNumber":432,"oldContent":"                    }"},{"type":"INSERT","lineNumber":406,"content":"            // per-item timeout (split total timeout)"},{"type":"INSERT","lineNumber":407,"content":"            val perItemTimeout = (timeoutMs / (missionItems.size + 1)).coerceAtLeast(1000L)"},{"type":"INSERT","lineNumber":408,"content":""},{"type":"INSERT","lineNumber":409,"content":"            // For each sequence, wait for MissionRequestInt for that seq and respond"},{"type":"INSERT","lineNumber":410,"content":"            for (seq in 0 until missionItems.size) {"},{"type":"INSERT","lineNumber":411,"content":"                val requested = withTimeoutOrNull(perItemTimeout) {"},{"type":"INSERT","lineNumber":412,"content":"                    frameFlow"},{"type":"INSERT","lineNumber":413,"content":"                        .filter { it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":414,"content":"                        .map { it.message }"},{"type":"INSERT","lineNumber":415,"content":"                        .filterIsInstance<MissionRequestInt>()"},{"type":"INSERT","lineNumber":416,"content":"                        .first { it.seq.toInt() == seq }"},{"type":"DELETE","lineNumber":434,"oldContent":"            return ackReceived"},{"type":"INSERT","lineNumber":418,"content":""},{"type":"INSERT","lineNumber":419,"content":"                if (requested == null) {"},{"type":"INSERT","lineNumber":420,"content":"                    Log.e(\"MavlinkRepo\", \"Timeout waiting for MISSION_REQUEST_INT seq=$seq\")"},{"type":"INSERT","lineNumber":421,"content":"                    return false"},{"type":"INSERT","lineNumber":422,"content":"                }"},{"type":"INSERT","lineNumber":423,"content":""},{"type":"INSERT","lineNumber":424,"content":"                val item = missionItems.getOrNull(seq)"},{"type":"INSERT","lineNumber":425,"content":"                if (item == null) {"},{"type":"INSERT","lineNumber":426,"content":"                    Log.e(\"MavlinkRepo\", \"Requested seq $seq not found in missionItems\")"},{"type":"INSERT","lineNumber":427,"content":"                    return false"},{"type":"INSERT","lineNumber":428,"content":"                }"},{"type":"INSERT","lineNumber":429,"content":""},{"type":"INSERT","lineNumber":430,"content":"                // Ensure target system/component and seq set correctly"},{"type":"INSERT","lineNumber":431,"content":"                val missionItem = item.copy("},{"type":"INSERT","lineNumber":432,"content":"                    targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":433,"content":"                    targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":434,"content":"                    seq = seq.toUShort()"},{"type":"INSERT","lineNumber":435,"content":"                )"},{"type":"INSERT","lineNumber":436,"content":""},{"type":"INSERT","lineNumber":437,"content":"                connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"INSERT","lineNumber":438,"content":"                Log.i(\"MavlinkRepo\", \"Sent MISSION_ITEM_INT seq=$seq\")"},{"type":"INSERT","lineNumber":439,"content":"                // small delay to avoid flooding"},{"type":"INSERT","lineNumber":440,"content":"                delay(100)"},{"type":"INSERT","lineNumber":441,"content":"            }"},{"type":"INSERT","lineNumber":442,"content":""},{"type":"INSERT","lineNumber":443,"content":"            // Wait for MISSION_ACK"},{"type":"INSERT","lineNumber":444,"content":"            val ackTimeout = perItemTimeout"},{"type":"INSERT","lineNumber":445,"content":"            val ack = withTimeoutOrNull(ackTimeout) {"},{"type":"INSERT","lineNumber":446,"content":"                frameFlow"},{"type":"INSERT","lineNumber":447,"content":"                    .filter { it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":448,"content":"                    .map { it.message }"},{"type":"INSERT","lineNumber":449,"content":"                    .filterIsInstance<MissionAck>()"},{"type":"INSERT","lineNumber":450,"content":"                    .first()"},{"type":"INSERT","lineNumber":451,"content":"            }"},{"type":"INSERT","lineNumber":452,"content":""},{"type":"INSERT","lineNumber":453,"content":"            if (ack == null) {"},{"type":"INSERT","lineNumber":454,"content":"                Log.e(\"MavlinkRepo\", \"Missed MISSION_ACK after sending items\")"},{"type":"INSERT","lineNumber":455,"content":"                return false"},{"type":"INSERT","lineNumber":456,"content":"            }"},{"type":"INSERT","lineNumber":457,"content":""},{"type":"INSERT","lineNumber":458,"content":"            Log.i(\"MavlinkRepo\", \"Mission upload acknowledged by FCU\")"},{"type":"INSERT","lineNumber":459,"content":"            return true"}]},{"timestamp":1757914396663,"changes":[{"type":"INSERT","lineNumber":15,"content":"import kotlinx.coroutines.withTimeoutOrNull"},{"type":"DELETE","lineNumber":390,"oldContent":"            // Send MissionCount"},{"type":"DELETE","lineNumber":392,"oldContent":"            val missionCount = MissionCount("},{"type":"DELETE","lineNumber":394,"oldContent":"                targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":396,"oldContent":"                targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":395,"content":"            // Send MissionCount"},{"type":"INSERT","lineNumber":396,"content":"            val missionCount = MissionCount("},{"type":"INSERT","lineNumber":397,"content":"                targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":398,"content":"                targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":401,"oldContent":""},{"type":"MODIFY","lineNumber":404,"content":"            // Flow of frames from FC","oldContent":"            // Flow of frames from FC"},{"type":"INSERT","lineNumber":406,"content":""},{"type":"INSERT","lineNumber":418,"content":"                }"},{"type":"DELETE","lineNumber":433,"oldContent":"                }"},{"type":"DELETE","lineNumber":436,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":438,"oldContent":"            Log.e(\"MavlinkRepo\", \"Mission upload failed\", e)"},{"type":"DELETE","lineNumber":440,"oldContent":"            _lastFailure.value = e"},{"type":"DELETE","lineNumber":442,"oldContent":"            return false"},{"type":"DELETE","lineNumber":444,"oldContent":"        }"},{"type":"DELETE","lineNumber":446,"oldContent":"    }"},{"type":"DELETE","lineNumber":449,"oldContent":""},{"type":"DELETE","lineNumber":450,"oldContent":"    suspend fun startMission() {"},{"type":"DELETE","lineNumber":452,"oldContent":"        if (!state.value.fcuDetected) {"},{"type":"DELETE","lineNumber":454,"oldContent":"            Log.e(\"MavlinkRepo\", \"FCU not detected, cannot start mission\")"},{"type":"DELETE","lineNumber":456,"oldContent":"            throw IllegalStateException(\"FCU not detected\")"},{"type":"DELETE","lineNumber":458,"oldContent":"        }"},{"type":"DELETE","lineNumber":460,"oldContent":"        try {"},{"type":"DELETE","lineNumber":462,"oldContent":"            changeMode(MavMode.AUTO)"},{"type":"DELETE","lineNumber":464,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":466,"oldContent":"            Log.e(\"MavlinkRepo\", \"Start mission failed\", e)"},{"type":"DELETE","lineNumber":468,"oldContent":"            _lastFailure.value = e"},{"type":"DELETE","lineNumber":470,"oldContent":"            throw e"},{"type":"DELETE","lineNumber":472,"oldContent":"        }"},{"type":"DELETE","lineNumber":474,"oldContent":"    }"},{"type":"DELETE","lineNumber":476,"oldContent":""},{"type":"INSERT","lineNumber":459,"content":"            Log.i(\"MavlinkRepo\", \"Mission upload acknowledged by FCU\")"},{"type":"INSERT","lineNumber":460,"content":"            return true"},{"type":"INSERT","lineNumber":461,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":462,"content":"            Log.e(\"MavlinkRepo\", \"Mission upload failed\", e)"},{"type":"INSERT","lineNumber":463,"content":"            _lastFailure.value = e"},{"type":"INSERT","lineNumber":464,"content":"            return false"},{"type":"INSERT","lineNumber":465,"content":"        }"},{"type":"INSERT","lineNumber":466,"content":"    }"},{"type":"INSERT","lineNumber":468,"content":"    suspend fun startMission() {"},{"type":"INSERT","lineNumber":469,"content":"        if (!state.value.fcuDetected) {"},{"type":"INSERT","lineNumber":470,"content":"            Log.e(\"MavlinkRepo\", \"FCU not detected, cannot start mission\")"},{"type":"INSERT","lineNumber":471,"content":"            throw IllegalStateException(\"FCU not detected\")"},{"type":"INSERT","lineNumber":472,"content":"        }"},{"type":"INSERT","lineNumber":473,"content":"        try {"},{"type":"INSERT","lineNumber":474,"content":"            changeMode(MavMode.AUTO)"},{"type":"INSERT","lineNumber":475,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":476,"content":"            Log.e(\"MavlinkRepo\", \"Start mission failed\", e)"},{"type":"INSERT","lineNumber":477,"content":"            _lastFailure.value = e"},{"type":"INSERT","lineNumber":478,"content":"            throw e"},{"type":"INSERT","lineNumber":479,"content":"        }"},{"type":"INSERT","lineNumber":480,"content":"    }"},{"type":"INSERT","lineNumber":481,"content":""},{"type":"INSERT","lineNumber":482,"content":""},{"type":"DELETE","lineNumber":481,"oldContent":"            Log.i(\"MavlinkRepo\", \"Mission upload acknowledged by FCU\")"},{"type":"DELETE","lineNumber":483,"oldContent":"            return true"}]},{"timestamp":1757914427995,"changes":[{"type":"INSERT","lineNumber":11,"content":"import kotlinx.coroutines.CompletableDeferred"},{"type":"INSERT","lineNumber":16,"content":"import kotlinx.coroutines.withTimeout"},{"type":"DELETE","lineNumber":384,"oldContent":"    suspend fun uploadMissionWithAck(missionItems: List<MissionItemInt>, timeoutMs: Long = 10000): Boolean {"},{"type":"INSERT","lineNumber":386,"content":"    suspend fun uploadMissionWithAck(missionItems: List<MissionItemInt>, timeoutMs: Long = 15000): Boolean {"},{"type":"INSERT","lineNumber":391,"content":"        if (missionItems.isEmpty()) {"},{"type":"INSERT","lineNumber":392,"content":"            Log.w(\"MavlinkRepo\", \"No mission items to upload\")"},{"type":"INSERT","lineNumber":393,"content":"            return false"},{"type":"INSERT","lineNumber":394,"content":"        }"},{"type":"INSERT","lineNumber":395,"content":""},{"type":"DELETE","lineNumber":390,"oldContent":"            if (missionItems.isEmpty()) {"},{"type":"DELETE","lineNumber":391,"oldContent":"                Log.w(\"MavlinkRepo\", \"No mission items to upload\")"},{"type":"DELETE","lineNumber":392,"oldContent":"                return false"},{"type":"DELETE","lineNumber":394,"oldContent":"            }"},{"type":"DELETE","lineNumber":397,"oldContent":""},{"type":"DELETE","lineNumber":403,"oldContent":"            // Flow of frames from FC"},{"type":"DELETE","lineNumber":404,"oldContent":"            // Flow of frames from FC"},{"type":"DELETE","lineNumber":405,"oldContent":"            val frameFlow = connection.mavFrame"},{"type":"DELETE","lineNumber":407,"oldContent":"            // per-item timeout (split total timeout)"},{"type":"DELETE","lineNumber":408,"oldContent":"            val perItemTimeout = (timeoutMs / (missionItems.size + 1)).coerceAtLeast(1000L)"},{"type":"INSERT","lineNumber":406,"content":"            val ackDeferred = CompletableDeferred<Boolean>()"},{"type":"INSERT","lineNumber":407,"content":"            val sentSeqs = mutableSetOf<Int>()"},{"type":"DELETE","lineNumber":410,"oldContent":"            // For each sequence, wait for MissionRequestInt for that seq and respond"},{"type":"DELETE","lineNumber":411,"oldContent":"            for (seq in 0 until missionItems.size) {"},{"type":"DELETE","lineNumber":412,"oldContent":"                val requested = withTimeoutOrNull(perItemTimeout) {"},{"type":"DELETE","lineNumber":413,"oldContent":"                    frameFlow"},{"type":"DELETE","lineNumber":414,"oldContent":"                        .filter { it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":415,"oldContent":"                        .map { it.message }"},{"type":"DELETE","lineNumber":416,"oldContent":"                        .filterIsInstance<MissionRequestInt>()"},{"type":"DELETE","lineNumber":417,"oldContent":"                        .first { it.seq.toInt() == seq }"},{"type":"INSERT","lineNumber":409,"content":"            // Collector job"},{"type":"INSERT","lineNumber":410,"content":"            val job = AppScope.launch {"},{"type":"INSERT","lineNumber":411,"content":"                connection.mavFrame"},{"type":"INSERT","lineNumber":412,"content":"                    .filter { it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":413,"content":"                    .collect { frame ->"},{"type":"INSERT","lineNumber":414,"content":"                        when (val msg = frame.message) {"},{"type":"INSERT","lineNumber":415,"content":"                            is MissionRequestInt -> {"},{"type":"INSERT","lineNumber":416,"content":"                                val seq = msg.seq.toInt()"},{"type":"INSERT","lineNumber":417,"content":"                                if (seq < 0 || seq >= missionItems.size) {"},{"type":"INSERT","lineNumber":418,"content":"                                    Log.w(\"MavlinkRepo\", \"FC requested invalid seq=$seq\")"},{"type":"INSERT","lineNumber":419,"content":"                                    return@collect"},{"type":"INSERT","lineNumber":420,"content":"                                }"},{"type":"INSERT","lineNumber":421,"content":"                                if (sentSeqs.contains(seq)) {"},{"type":"INSERT","lineNumber":422,"content":"                                    Log.i(\"MavlinkRepo\", \"Already sent seq=$seq, ignoring\")"},{"type":"INSERT","lineNumber":423,"content":"                                    return@collect"},{"type":"INSERT","lineNumber":424,"content":"                                }"},{"type":"INSERT","lineNumber":425,"content":"                                val item = missionItems[seq]"},{"type":"INSERT","lineNumber":426,"content":"                                val missionItem = item.copy("},{"type":"INSERT","lineNumber":427,"content":"                                    targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":428,"content":"                                    targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":429,"content":"                                    seq = seq.toUShort()"},{"type":"INSERT","lineNumber":430,"content":"                                )"},{"type":"INSERT","lineNumber":431,"content":"                                try {"},{"type":"INSERT","lineNumber":432,"content":"                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"INSERT","lineNumber":433,"content":"                                    sentSeqs.add(seq)"},{"type":"INSERT","lineNumber":434,"content":"                                    Log.i(\"MavlinkRepo\", \"Sent MISSION_ITEM_INT seq=$seq\")"},{"type":"INSERT","lineNumber":435,"content":"                                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":436,"content":"                                    Log.e(\"MavlinkRepo\", \"Failed to send mission item seq=$seq\", e)"},{"type":"INSERT","lineNumber":437,"content":"                                }"},{"type":"INSERT","lineNumber":438,"content":"                            }"},{"type":"INSERT","lineNumber":439,"content":"                            is MissionAck -> {"},{"type":"INSERT","lineNumber":440,"content":"                                Log.i(\"MavlinkRepo\", \"Received MISSION_ACK: ${msg.type}\")"},{"type":"INSERT","lineNumber":441,"content":"                                if (!ackDeferred.isCompleted) ackDeferred.complete(true)"},{"type":"INSERT","lineNumber":442,"content":"                                return@collect"},{"type":"INSERT","lineNumber":443,"content":"                            }"},{"type":"INSERT","lineNumber":444,"content":"                            else -> {"},{"type":"INSERT","lineNumber":445,"content":"                                // ignore other messages"},{"type":"INSERT","lineNumber":446,"content":"                            }"},{"type":"INSERT","lineNumber":447,"content":"                        }"},{"type":"INSERT","lineNumber":448,"content":"                    }"},{"type":"INSERT","lineNumber":449,"content":"            }"},{"type":"DELETE","lineNumber":419,"oldContent":"                }"},{"type":"DELETE","lineNumber":420,"oldContent":"                if (requested == null) {"},{"type":"DELETE","lineNumber":421,"oldContent":"                    Log.e(\"MavlinkRepo\", \"Timeout waiting for MISSION_REQUEST_INT seq=$seq\")"},{"type":"DELETE","lineNumber":422,"oldContent":"                    return false"},{"type":"DELETE","lineNumber":423,"oldContent":"                }"},{"type":"INSERT","lineNumber":451,"content":"            // Wait for ACK with timeout"},{"type":"INSERT","lineNumber":452,"content":"            val ackReceived = withTimeoutOrNull(timeoutMs) {"},{"type":"INSERT","lineNumber":453,"content":"                ackDeferred.await()"},{"type":"INSERT","lineNumber":454,"content":"            } ?: false"},{"type":"DELETE","lineNumber":425,"oldContent":"                val item = missionItems.getOrNull(seq)"},{"type":"DELETE","lineNumber":426,"oldContent":"                if (item == null) {"},{"type":"DELETE","lineNumber":427,"oldContent":"                    Log.e(\"MavlinkRepo\", \"Requested seq $seq not found in missionItems\")"},{"type":"DELETE","lineNumber":428,"oldContent":"                    return false"},{"type":"DELETE","lineNumber":429,"oldContent":"                }"},{"type":"INSERT","lineNumber":456,"content":"            // cancel collector job"},{"type":"INSERT","lineNumber":457,"content":"            job.cancel()"},{"type":"DELETE","lineNumber":431,"oldContent":"                // Ensure target system/component and seq set correctly"},{"type":"DELETE","lineNumber":432,"oldContent":"                val missionItem = item.copy("},{"type":"DELETE","lineNumber":433,"oldContent":"                    targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":434,"oldContent":"                    targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":435,"oldContent":"                    seq = seq.toUShort()"},{"type":"DELETE","lineNumber":436,"oldContent":"                )"},{"type":"DELETE","lineNumber":437,"oldContent":""},{"type":"DELETE","lineNumber":438,"oldContent":"                connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"DELETE","lineNumber":439,"oldContent":"                Log.i(\"MavlinkRepo\", \"Sent MISSION_ITEM_INT seq=$seq\")"},{"type":"DELETE","lineNumber":440,"oldContent":"                // small delay to avoid flooding"},{"type":"DELETE","lineNumber":441,"oldContent":"                delay(100)"},{"type":"INSERT","lineNumber":459,"content":"            if (ackReceived) {"},{"type":"INSERT","lineNumber":460,"content":"                Log.i(\"MavlinkRepo\", \"Mission upload acknowledged by FCU\")"},{"type":"INSERT","lineNumber":461,"content":"                return true"},{"type":"INSERT","lineNumber":462,"content":"            } else {"},{"type":"INSERT","lineNumber":463,"content":"                Log.e(\"MavlinkRepo\", \"Mission upload timed out waiting for ACK\")"},{"type":"INSERT","lineNumber":464,"content":"                return false"},{"type":"DELETE","lineNumber":443,"oldContent":""},{"type":"DELETE","lineNumber":444,"oldContent":"            // Wait for MISSION_ACK"},{"type":"DELETE","lineNumber":445,"oldContent":"            val ackTimeout = perItemTimeout"},{"type":"DELETE","lineNumber":446,"oldContent":"            val ack = withTimeoutOrNull(ackTimeout) {"},{"type":"DELETE","lineNumber":447,"oldContent":"                frameFlow"},{"type":"DELETE","lineNumber":448,"oldContent":"            Log.i(\"MavlinkRepo\", \"Mission upload acknowledged by FCU\")"},{"type":"DELETE","lineNumber":449,"oldContent":"                    .filter { it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":450,"oldContent":"            return true"},{"type":"DELETE","lineNumber":452,"oldContent":"                    .map { it.message }"},{"type":"DELETE","lineNumber":455,"oldContent":"                    .filterIsInstance<MissionAck>()"},{"type":"DELETE","lineNumber":458,"oldContent":"                    .first()"},{"type":"DELETE","lineNumber":460,"oldContent":"            }"},{"type":"INSERT","lineNumber":472,"content":""},{"type":"DELETE","lineNumber":463,"oldContent":""},{"type":"DELETE","lineNumber":466,"oldContent":"            if (ack == null) {"},{"type":"DELETE","lineNumber":469,"oldContent":"                Log.e(\"MavlinkRepo\", \"Missed MISSION_ACK after sending items\")"},{"type":"DELETE","lineNumber":472,"oldContent":"                return false"},{"type":"DELETE","lineNumber":475,"oldContent":"            }"},{"type":"DELETE","lineNumber":477,"oldContent":""},{"type":"DELETE","lineNumber":479,"oldContent":""},{"type":"DELETE","lineNumber":481,"oldContent":"}"},{"type":"INSERT","lineNumber":488,"content":"}"}]},{"timestamp":1757914472989,"changes":[{"type":"MODIFY","lineNumber":17,"content":"import kotlinx.coroutines.withTimeoutOrNull","oldContent":"import kotlinx.coroutines.withTimeoutOrNull"},{"type":"MODIFY","lineNumber":387,"content":"        if (!state.value.fcuDetected) {","oldContent":"        if (!state.value.fcuDetected) {"},{"type":"DELETE","lineNumber":391,"oldContent":"        try {"},{"type":"DELETE","lineNumber":395,"oldContent":"            // Send MissionCount"},{"type":"INSERT","lineNumber":396,"content":"        try {"},{"type":"INSERT","lineNumber":397,"content":"            // Send MissionCount"},{"type":"MODIFY","lineNumber":406,"content":"            val ackDeferred = CompletableDeferred<Boolean>()","oldContent":"            val ackDeferred = CompletableDeferred<Boolean>()"},{"type":"MODIFY","lineNumber":409,"content":"            // Collector job","oldContent":"            // Collector job"},{"type":"DELETE","lineNumber":418,"oldContent":"                                    Log.w(\"MavlinkRepo\", \"FC requested invalid seq=$seq\")"},{"type":"DELETE","lineNumber":419,"oldContent":""},{"type":"INSERT","lineNumber":418,"content":"                                    Log.w(\"MavlinkRepo\", \"FC requested invalid seq=$seq (MissionRequestInt)\")"},{"type":"DELETE","lineNumber":426,"oldContent":""},{"type":"DELETE","lineNumber":433,"oldContent":""},{"type":"INSERT","lineNumber":439,"content":"                            is MissionRequest -> {"},{"type":"INSERT","lineNumber":440,"content":"                                // Some FC use non-int mission items; respond with MissionItem (float) converted"},{"type":"INSERT","lineNumber":441,"content":"                                val seq = msg.seq.toInt()"},{"type":"INSERT","lineNumber":442,"content":"                                if (seq < 0 || seq >= missionItems.size) {"},{"type":"INSERT","lineNumber":443,"content":"                                    Log.w(\"MavlinkRepo\", \"FC requested invalid seq=$seq (MissionRequest)\")"},{"type":"INSERT","lineNumber":444,"content":"                                    return@collect"},{"type":"INSERT","lineNumber":445,"content":"                                }"},{"type":"INSERT","lineNumber":446,"content":"                                if (sentSeqs.contains(seq)) {"},{"type":"INSERT","lineNumber":447,"content":"                                    Log.i(\"MavlinkRepo\", \"Already sent seq=$seq, ignoring\")"},{"type":"INSERT","lineNumber":448,"content":"                                    return@collect"},{"type":"INSERT","lineNumber":449,"content":"                                }"},{"type":"INSERT","lineNumber":450,"content":"                                val itemInt = missionItems[seq]"},{"type":"INSERT","lineNumber":451,"content":"                                // Convert MissionItemInt -> MissionItem"},{"type":"INSERT","lineNumber":452,"content":"                                val missionItem = MissionItem("},{"type":"INSERT","lineNumber":453,"content":"                                    targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":454,"content":"                                    targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":455,"content":"                                    seq = seq.toUShort(),"},{"type":"INSERT","lineNumber":456,"content":"                                    frame = itemInt.frame,"},{"type":"INSERT","lineNumber":457,"content":"                                    command = itemInt.command,"},{"type":"INSERT","lineNumber":458,"content":"                                    current = itemInt.current,"},{"type":"INSERT","lineNumber":459,"content":"                                    autocontinue = itemInt.autocontinue,"},{"type":"INSERT","lineNumber":460,"content":"                                    param1 = itemInt.param1,"},{"type":"INSERT","lineNumber":461,"content":"                                    param2 = itemInt.param2,"},{"type":"INSERT","lineNumber":462,"content":"                                    param3 = itemInt.param3,"},{"type":"INSERT","lineNumber":463,"content":"                                    param4 = itemInt.param4,"},{"type":"INSERT","lineNumber":464,"content":"                                    x = (itemInt.x / 1e7f).toFloat(),"},{"type":"INSERT","lineNumber":465,"content":"                                    y = (itemInt.y / 1e7f).toFloat(),"},{"type":"INSERT","lineNumber":466,"content":"                                    z = itemInt.z"},{"type":"INSERT","lineNumber":467,"content":"                                )"},{"type":"INSERT","lineNumber":468,"content":"                                try {"},{"type":"INSERT","lineNumber":469,"content":"                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"INSERT","lineNumber":470,"content":"                                    sentSeqs.add(seq)"},{"type":"INSERT","lineNumber":471,"content":"                                    Log.i(\"MavlinkRepo\", \"Sent MISSION_ITEM seq=$seq (converted from INT)\")"},{"type":"INSERT","lineNumber":472,"content":"                                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":473,"content":"                                    Log.e(\"MavlinkRepo\", \"Failed to send mission item(seq=$seq) as MissionItem\", e)"},{"type":"INSERT","lineNumber":474,"content":"                                }"},{"type":"INSERT","lineNumber":475,"content":"                            }"},{"type":"DELETE","lineNumber":446,"oldContent":"            }"},{"type":"INSERT","lineNumber":487,"content":""},{"type":"DELETE","lineNumber":455,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":458,"oldContent":"            Log.e(\"MavlinkRepo\", \"Mission upload failed\", e)"},{"type":"DELETE","lineNumber":460,"oldContent":"            _lastFailure.value = e"},{"type":"INSERT","lineNumber":492,"content":""},{"type":"DELETE","lineNumber":462,"oldContent":"            return false"},{"type":"DELETE","lineNumber":464,"oldContent":"        }"},{"type":"INSERT","lineNumber":495,"content":""},{"type":"DELETE","lineNumber":466,"oldContent":"    }"},{"type":"DELETE","lineNumber":469,"oldContent":"    suspend fun startMission() {"},{"type":"DELETE","lineNumber":471,"oldContent":"        if (!state.value.fcuDetected) {"},{"type":"INSERT","lineNumber":502,"content":"            }"},{"type":"INSERT","lineNumber":503,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":504,"content":"            Log.e(\"MavlinkRepo\", \"Mission upload failed\", e)"},{"type":"INSERT","lineNumber":505,"content":"            _lastFailure.value = e"},{"type":"INSERT","lineNumber":506,"content":"            return false"},{"type":"INSERT","lineNumber":507,"content":"        }"},{"type":"INSERT","lineNumber":508,"content":"    }"},{"type":"INSERT","lineNumber":509,"content":""},{"type":"INSERT","lineNumber":510,"content":"    suspend fun startMission() {"},{"type":"INSERT","lineNumber":511,"content":"        if (!state.value.fcuDetected) {"},{"type":"DELETE","lineNumber":480,"oldContent":""},{"type":"DELETE","lineNumber":488,"oldContent":""},{"type":"INSERT","lineNumber":526,"content":""}]},{"timestamp":1757914526544,"changes":[{"type":"DELETE","lineNumber":12,"oldContent":"import com.google.android.gms.maps.model.LatLng"},{"type":"DELETE","lineNumber":16,"oldContent":"import kotlinx.coroutines.withTimeoutOrNull"},{"type":"MODIFY","lineNumber":16,"content":"import kotlinx.coroutines.withTimeout","oldContent":"import kotlinx.coroutines.withTimeoutOrNull"},{"type":"INSERT","lineNumber":17,"content":"import kotlinx.coroutines.withTimeoutOrNull"},{"type":"INSERT","lineNumber":18,"content":""},{"type":"DELETE","lineNumber":30,"oldContent":"    private var mission by mutableStateOf<List<LatLng>>(emptyList())"},{"type":"DELETE","lineNumber":31,"oldContent":"    private val gcsSystemId: UByte = 200u"},{"type":"DELETE","lineNumber":285,"oldContent":""},{"type":"DELETE","lineNumber":286,"oldContent":"        // Mission handling"},{"type":"DELETE","lineNumber":287,"oldContent":"        scope.launch {"},{"type":"DELETE","lineNumber":288,"oldContent":"            mavFrameStream"},{"type":"DELETE","lineNumber":289,"oldContent":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":290,"oldContent":"                .map { it.message }"},{"type":"DELETE","lineNumber":291,"oldContent":"                .collect { message ->"},{"type":"DELETE","lineNumber":292,"oldContent":"                    when (message) {"},{"type":"DELETE","lineNumber":293,"oldContent":"                        is MissionRequest -> {"},{"type":"DELETE","lineNumber":294,"oldContent":"                            val seq = message.seq.toInt()"},{"type":"DELETE","lineNumber":295,"oldContent":"                            if (seq < mission.size) {"},{"type":"DELETE","lineNumber":296,"oldContent":"                                val waypoint = mission[seq]"},{"type":"DELETE","lineNumber":297,"oldContent":"                                val missionItem = MissionItemInt("},{"type":"DELETE","lineNumber":298,"oldContent":"                                    targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":299,"oldContent":"                                    targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":300,"oldContent":"                                    seq = seq.toUShort(),"},{"type":"DELETE","lineNumber":301,"oldContent":"                                    frame = MavFrame.GLOBAL_RELATIVE_ALT.wrap(),"},{"type":"DELETE","lineNumber":302,"oldContent":"                                    command = MavCmd.NAV_WAYPOINT.wrap(),"},{"type":"DELETE","lineNumber":303,"oldContent":"                                    current = if (seq == 0) 1u else 0u,"},{"type":"DELETE","lineNumber":304,"oldContent":"                                    param1 = 0f,"},{"type":"DELETE","lineNumber":305,"oldContent":"                                    param3 = 0f,"},{"type":"DELETE","lineNumber":306,"oldContent":"                                    x = (waypoint.latitude * 1e7).toInt(),"},{"type":"DELETE","lineNumber":307,"oldContent":"                                    z = 100f, // Default altitude"},{"type":"DELETE","lineNumber":308,"oldContent":"                                )"},{"type":"DELETE","lineNumber":309,"oldContent":"                                try {"},{"type":"DELETE","lineNumber":310,"oldContent":"                                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":311,"oldContent":"                                    _lastFailure.value = e"},{"type":"DELETE","lineNumber":312,"oldContent":"                            }"},{"type":"DELETE","lineNumber":313,"oldContent":"                        is MissionAck -> {"},{"type":"DELETE","lineNumber":314,"oldContent":"                            if (message.type == MavMissionResult.MAV_MISSION_ACCEPTED.wrap()) {"},{"type":"DELETE","lineNumber":315,"oldContent":"                            }"},{"type":"DELETE","lineNumber":316,"oldContent":"                        }"},{"type":"DELETE","lineNumber":317,"oldContent":"                }"},{"type":"INSERT","lineNumber":284,"content":""},{"type":"INSERT","lineNumber":286,"content":"        val commandLong = CommandLong("},{"type":"INSERT","lineNumber":288,"content":"            targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":290,"content":"            confirmation = 0u,"},{"type":"INSERT","lineNumber":292,"content":"            param2 = param2,"},{"type":"INSERT","lineNumber":294,"content":"            param4 = param4,"},{"type":"INSERT","lineNumber":296,"content":"            param6 = param6,"},{"type":"INSERT","lineNumber":298,"content":"        )"},{"type":"DELETE","lineNumber":327,"oldContent":"    suspend fun changeMode(mode: UInt) {"},{"type":"INSERT","lineNumber":300,"content":"            connection.trySendUnsignedV2("},{"type":"INSERT","lineNumber":301,"content":"               gcsSystemId,"},{"type":"DELETE","lineNumber":330,"oldContent":"            mode.toFloat(),"},{"type":"INSERT","lineNumber":304,"content":"            Log.e(\"MavlinkRepo\", \"Failed to send command\", e)"},{"type":"INSERT","lineNumber":305,"content":"            _lastFailure.value = e"},{"type":"INSERT","lineNumber":307,"content":"    }"},{"type":"INSERT","lineNumber":308,"content":""},{"type":"INSERT","lineNumber":309,"content":"    suspend fun arm() {"},{"type":"INSERT","lineNumber":310,"content":"        if (state.value.armable) {"},{"type":"INSERT","lineNumber":311,"content":"            sendCommand("},{"type":"INSERT","lineNumber":312,"content":"                MavCmd.COMPONENT_ARM_DISARM,"},{"type":"INSERT","lineNumber":313,"content":"                1f"},{"type":"INSERT","lineNumber":314,"content":"            )"},{"type":"INSERT","lineNumber":315,"content":"        } else {"},{"type":"INSERT","lineNumber":316,"content":"            Log.w(\"MavlinkRepo\", \"Arm command rejected, vehicle not armable\")"},{"type":"INSERT","lineNumber":317,"content":"        }"},{"type":"INSERT","lineNumber":318,"content":"    }"},{"type":"INSERT","lineNumber":319,"content":""},{"type":"INSERT","lineNumber":320,"content":"    suspend fun disarm() {"},{"type":"INSERT","lineNumber":321,"content":"        sendCommand("},{"type":"INSERT","lineNumber":322,"content":"            MavCmd.COMPONENT_ARM_DISARM,"},{"type":"INSERT","lineNumber":323,"content":"            0f"},{"type":"INSERT","lineNumber":327,"content":"    suspend fun changeMode(mode: UInt) {"},{"type":"INSERT","lineNumber":328,"content":"        sendCommand("},{"type":"INSERT","lineNumber":329,"content":"            MavCmd.DO_SET_MODE,"},{"type":"INSERT","lineNumber":330,"content":"            mode.toFloat(),"},{"type":"INSERT","lineNumber":331,"content":"            0f"},{"type":"INSERT","lineNumber":332,"content":"        )"},{"type":"INSERT","lineNumber":333,"content":"    }"},{"type":"INSERT","lineNumber":334,"content":""},{"type":"DELETE","lineNumber":380,"oldContent":"        )"},{"type":"INSERT","lineNumber":381,"content":""},{"type":"INSERT","lineNumber":386,"content":"    suspend fun uploadMissionWithAck(missionItems: List<MissionItemInt>, timeoutMs: Long = 15000): Boolean {"},{"type":"DELETE","lineNumber":387,"oldContent":"        if (!state.value.fcuDetected) {"},{"type":"DELETE","lineNumber":394,"oldContent":"        try {"},{"type":"MODIFY","lineNumber":396,"content":"        try {","oldContent":"            // Send MissionCount"},{"type":"INSERT","lineNumber":397,"content":"            // Send MissionCount"},{"type":"INSERT","lineNumber":405,"content":""},{"type":"DELETE","lineNumber":406,"oldContent":"            val ackDeferred = CompletableDeferred<Boolean>()"},{"type":"INSERT","lineNumber":408,"content":"            var firstRequestReceived = false"},{"type":"INSERT","lineNumber":409,"content":""},{"type":"INSERT","lineNumber":410,"content":"            // Resend MISSION_COUNT periodically until first request or timeout"},{"type":"INSERT","lineNumber":411,"content":"            val resendJob = AppScope.launch {"},{"type":"INSERT","lineNumber":412,"content":"                while (isActive && !firstRequestReceived && !ackDeferred.isCompleted) {"},{"type":"INSERT","lineNumber":413,"content":"                    try {"},{"type":"INSERT","lineNumber":414,"content":"                        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionCount)"},{"type":"INSERT","lineNumber":415,"content":"                        Log.d(\"MavlinkRepo\", \"Resent MISSION_COUNT\")"},{"type":"INSERT","lineNumber":416,"content":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":417,"content":"                        Log.e(\"MavlinkRepo\", \"Failed to resend MISSION_COUNT\", e)"},{"type":"INSERT","lineNumber":418,"content":"                    }"},{"type":"INSERT","lineNumber":419,"content":"                    kotlinx.coroutines.delay(700)"},{"type":"INSERT","lineNumber":420,"content":"                }"},{"type":"INSERT","lineNumber":421,"content":"            }"},{"type":"INSERT","lineNumber":422,"content":""},{"type":"DELETE","lineNumber":409,"oldContent":"            // Collector job"},{"type":"INSERT","lineNumber":430,"content":"                                firstRequestReceived = true"},{"type":"DELETE","lineNumber":436,"oldContent":"                            is MissionRequest -> {"},{"type":"DELETE","lineNumber":438,"oldContent":"                                // Some FC use non-int mission items; respond with MissionItem (float) converted"},{"type":"DELETE","lineNumber":440,"oldContent":"                                val seq = msg.seq.toInt()"},{"type":"INSERT","lineNumber":454,"content":"                            is MissionRequest -> {"},{"type":"INSERT","lineNumber":455,"content":"                                firstRequestReceived = true"},{"type":"INSERT","lineNumber":456,"content":"                                // Some FC use non-int mission items; respond with MissionItem (float) converted"},{"type":"INSERT","lineNumber":457,"content":"                                val seq = msg.seq.toInt()"},{"type":"DELETE","lineNumber":443,"oldContent":"                            is MissionAck -> {"},{"type":"DELETE","lineNumber":445,"oldContent":"                                Log.i(\"MavlinkRepo\", \"Received MISSION_ACK: ${msg.type}\")"},{"type":"DELETE","lineNumber":447,"oldContent":"                                if (!ackDeferred.isCompleted) ackDeferred.complete(true)"},{"type":"DELETE","lineNumber":449,"oldContent":"                                return@collect"},{"type":"DELETE","lineNumber":452,"oldContent":"                            }"},{"type":"DELETE","lineNumber":454,"oldContent":"                            else -> {"},{"type":"DELETE","lineNumber":456,"oldContent":"                                // ignore other messages"},{"type":"DELETE","lineNumber":458,"oldContent":"                            }"},{"type":"DELETE","lineNumber":460,"oldContent":"                        }"},{"type":"DELETE","lineNumber":462,"oldContent":"                    }"},{"type":"DELETE","lineNumber":464,"oldContent":"            }"},{"type":"DELETE","lineNumber":466,"oldContent":"            // Wait for ACK with timeout"},{"type":"DELETE","lineNumber":469,"oldContent":"            val ackReceived = withTimeoutOrNull(timeoutMs) {"},{"type":"DELETE","lineNumber":471,"oldContent":"                ackDeferred.await()"},{"type":"DELETE","lineNumber":474,"oldContent":"            } ?: false"},{"type":"DELETE","lineNumber":477,"oldContent":"            // cancel collector job"},{"type":"DELETE","lineNumber":480,"oldContent":"            job.cancel()"},{"type":"DELETE","lineNumber":483,"oldContent":"            if (ackReceived) {"},{"type":"DELETE","lineNumber":486,"oldContent":"                Log.i(\"MavlinkRepo\", \"Mission upload acknowledged by FCU\")"},{"type":"DELETE","lineNumber":488,"oldContent":"                return true"},{"type":"DELETE","lineNumber":491,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":494,"oldContent":"                Log.e(\"MavlinkRepo\", \"Mission upload timed out waiting for ACK\")"},{"type":"DELETE","lineNumber":496,"oldContent":"                return false"},{"type":"DELETE","lineNumber":498,"oldContent":"            Log.e(\"MavlinkRepo\", \"FCU not detected, cannot start mission\")"},{"type":"DELETE","lineNumber":500,"oldContent":"            throw IllegalStateException(\"FCU not detected\")"},{"type":"DELETE","lineNumber":501,"oldContent":"        }"},{"type":"DELETE","lineNumber":502,"oldContent":"        try {"},{"type":"DELETE","lineNumber":503,"oldContent":"            changeMode(MavMode.AUTO)"},{"type":"DELETE","lineNumber":504,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":505,"oldContent":"            Log.e(\"MavlinkRepo\", \"Start mission failed\", e)"},{"type":"DELETE","lineNumber":506,"oldContent":"            _lastFailure.value = e"},{"type":"DELETE","lineNumber":507,"oldContent":"            throw e"},{"type":"DELETE","lineNumber":508,"oldContent":"        }"},{"type":"DELETE","lineNumber":509,"oldContent":"    }"},{"type":"DELETE","lineNumber":510,"oldContent":""},{"type":"DELETE","lineNumber":511,"oldContent":""},{"type":"DELETE","lineNumber":512,"oldContent":""},{"type":"DELETE","lineNumber":513,"oldContent":"                                Log.i(\"MavlinkRepo\", \"Sent MissionItemInt seq=$seq\")"},{"type":"DELETE","lineNumber":514,"oldContent":"    }"},{"type":"INSERT","lineNumber":492,"content":"                            is MissionAck -> {"},{"type":"INSERT","lineNumber":493,"content":"                                Log.i(\"MavlinkRepo\", \"Received MISSION_ACK: ${msg.type}\")"},{"type":"INSERT","lineNumber":494,"content":"                                if (!ackDeferred.isCompleted) ackDeferred.complete(true)"},{"type":"INSERT","lineNumber":495,"content":"                                return@collect"},{"type":"DELETE","lineNumber":516,"oldContent":""},{"type":"DELETE","lineNumber":517,"oldContent":"}"},{"type":"DELETE","lineNumber":518,"oldContent":"        }"},{"type":"INSERT","lineNumber":497,"content":"                            else -> {"},{"type":"INSERT","lineNumber":498,"content":"                                // ignore other messages"},{"type":"INSERT","lineNumber":499,"content":"                            }"},{"type":"INSERT","lineNumber":501,"content":"                    }"},{"type":"INSERT","lineNumber":502,"content":"            }"},{"type":"DELETE","lineNumber":521,"oldContent":"            return false"},{"type":"DELETE","lineNumber":522,"oldContent":"                        is MissionAck -> {"},{"type":"DELETE","lineNumber":523,"oldContent":"            _lastFailure.value = e"},{"type":"DELETE","lineNumber":524,"oldContent":"                            Log.i(\"MavlinkRepo\", \"Mission ACK received\")"},{"type":"DELETE","lineNumber":525,"oldContent":"            Log.e(\"MavlinkRepo\", \"Mission upload failed\", e)"},{"type":"DELETE","lineNumber":526,"oldContent":"                            ackReceived = true"},{"type":"DELETE","lineNumber":527,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":504,"content":"            // Wait for ACK with timeout"},{"type":"INSERT","lineNumber":505,"content":"            val ackReceived = withTimeoutOrNull(timeoutMs) {"},{"type":"INSERT","lineNumber":506,"content":"                ackDeferred.await()"},{"type":"INSERT","lineNumber":507,"content":"            } ?: false"},{"type":"INSERT","lineNumber":508,"content":""},{"type":"INSERT","lineNumber":509,"content":"            // cancel collector and resend jobs"},{"type":"INSERT","lineNumber":510,"content":"            job.cancel()"},{"type":"INSERT","lineNumber":511,"content":"            resendJob.cancel()"},{"type":"INSERT","lineNumber":512,"content":""},{"type":"INSERT","lineNumber":513,"content":"            if (ackReceived) {"},{"type":"INSERT","lineNumber":514,"content":"                Log.i(\"MavlinkRepo\", \"Mission upload acknowledged by FCU\")"},{"type":"INSERT","lineNumber":515,"content":"                return true"},{"type":"INSERT","lineNumber":516,"content":"            } else {"},{"type":"INSERT","lineNumber":517,"content":"                Log.e(\"MavlinkRepo\", \"Mission upload timed out waiting for ACK\")"},{"type":"INSERT","lineNumber":518,"content":"                return false"},{"type":"DELETE","lineNumber":529,"oldContent":"                            return@collect"},{"type":"DELETE","lineNumber":531,"oldContent":"            return ackReceived"},{"type":"DELETE","lineNumber":533,"oldContent":"                        }"},{"type":"DELETE","lineNumber":535,"oldContent":"                }"},{"type":"DELETE","lineNumber":537,"oldContent":"                    }"},{"type":"DELETE","lineNumber":539,"oldContent":"                    }"},{"type":"DELETE","lineNumber":541,"oldContent":"                    // Timeout"},{"type":"DELETE","lineNumber":543,"oldContent":"                        return false"},{"type":"DELETE","lineNumber":545,"oldContent":"                    if (System.currentTimeMillis() - startTime > timeoutMs) {"},{"type":"DELETE","lineNumber":547,"oldContent":"                        Log.e(\"MavlinkRepo\", \"Mission upload timed out\")"},{"type":"INSERT","lineNumber":529,"content":"            Log.e(\"MavlinkRepo\", \"FCU not detected, cannot start mission\")"},{"type":"INSERT","lineNumber":530,"content":"            throw IllegalStateException(\"FCU not detected\")"},{"type":"INSERT","lineNumber":531,"content":"        }"},{"type":"INSERT","lineNumber":532,"content":"        try {"},{"type":"INSERT","lineNumber":533,"content":"            changeMode(MavMode.AUTO)"},{"type":"INSERT","lineNumber":534,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":535,"content":"            Log.e(\"MavlinkRepo\", \"Start mission failed\", e)"},{"type":"INSERT","lineNumber":536,"content":"            _lastFailure.value = e"},{"type":"INSERT","lineNumber":537,"content":"            throw e"},{"type":"INSERT","lineNumber":538,"content":"        }"},{"type":"INSERT","lineNumber":539,"content":"    }"},{"type":"INSERT","lineNumber":541,"content":""},{"type":"INSERT","lineNumber":542,"content":"}"},{"type":"INSERT","lineNumber":543,"content":""}]},{"timestamp":1757914598107,"changes":[{"type":"INSERT","lineNumber":15,"content":"import kotlinx.coroutines.launch"},{"type":"DELETE","lineNumber":18,"oldContent":"import kotlinx.coroutines.launch"},{"type":"DELETE","lineNumber":282,"oldContent":""},{"type":"INSERT","lineNumber":283,"content":"    }"},{"type":"INSERT","lineNumber":284,"content":""},{"type":"INSERT","lineNumber":285,"content":"    suspend fun sendCommand(command: MavCmd, param1: Float = 0f, param2: Float = 0f, param3: Float = 0f, param4: Float = 0f, param5: Float = 0f, param6: Float = 0f, param7: Float = 0f) {"},{"type":"INSERT","lineNumber":287,"content":"            targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":289,"content":"            command = command.wrap(),"},{"type":"INSERT","lineNumber":291,"content":"            param1 = param1,"},{"type":"INSERT","lineNumber":293,"content":"            param3 = param3,"},{"type":"INSERT","lineNumber":295,"content":"            param5 = param5,"},{"type":"INSERT","lineNumber":297,"content":"            param7 = param7"},{"type":"INSERT","lineNumber":299,"content":"        try {"},{"type":"INSERT","lineNumber":302,"content":"                gcsComponentId, commandLong)"},{"type":"INSERT","lineNumber":303,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":306,"content":"        }"},{"type":"DELETE","lineNumber":307,"oldContent":"                                    _lastFailure.value = e"},{"type":"DELETE","lineNumber":309,"oldContent":"                                }"},{"type":"DELETE","lineNumber":311,"oldContent":"                            }"},{"type":"DELETE","lineNumber":313,"oldContent":"                        }"},{"type":"DELETE","lineNumber":315,"oldContent":"                        is MissionAck -> {"},{"type":"DELETE","lineNumber":317,"oldContent":"                            Log.i(\"MavlinkRepo\", \"Mission upload acknowledged with result: ${message.type.value}\")"},{"type":"DELETE","lineNumber":318,"oldContent":"                            if (message.type == MavMissionResult.MAV_MISSION_ACCEPTED.wrap()) {"},{"type":"DELETE","lineNumber":319,"oldContent":"                                _state.update { it.copy(missionLoaded = true) }"},{"type":"DELETE","lineNumber":320,"oldContent":"                            }"},{"type":"INSERT","lineNumber":324,"content":"        )"},{"type":"INSERT","lineNumber":325,"content":"    }"},{"type":"INSERT","lineNumber":326,"content":""},{"type":"DELETE","lineNumber":323,"oldContent":"                    }"},{"type":"DELETE","lineNumber":325,"oldContent":"                }"},{"type":"DELETE","lineNumber":328,"oldContent":"        val commandLong = CommandLong("},{"type":"DELETE","lineNumber":330,"oldContent":"        )"},{"type":"DELETE","lineNumber":332,"oldContent":"    }"},{"type":"DELETE","lineNumber":334,"oldContent":""},{"type":"DELETE","lineNumber":370,"oldContent":"    suspend fun arm() {"},{"type":"DELETE","lineNumber":371,"oldContent":"        if (state.value.armable) {"},{"type":"DELETE","lineNumber":372,"oldContent":"                MavCmd.COMPONENT_ARM_DISARM,"},{"type":"DELETE","lineNumber":373,"oldContent":"                1f"},{"type":"DELETE","lineNumber":374,"oldContent":"        } else {"},{"type":"INSERT","lineNumber":370,"content":"                    seq = index.toUShort()"},{"type":"INSERT","lineNumber":371,"content":"                )"},{"type":"INSERT","lineNumber":372,"content":"                connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"INSERT","lineNumber":373,"content":"                delay(50) // Small delay for reliability"},{"type":"INSERT","lineNumber":374,"content":"            }"},{"type":"MODIFY","lineNumber":376,"content":"            Log.e(\"MavlinkRepo\", \"Mission upload failed\", e)","oldContent":"        }"},{"type":"MODIFY","lineNumber":378,"content":"            throw e","oldContent":""},{"type":"INSERT","lineNumber":380,"content":"    }"},{"type":"DELETE","lineNumber":381,"oldContent":"            MavCmd.COMPONENT_ARM_DISARM,"},{"type":"INSERT","lineNumber":395,"content":""},{"type":"DELETE","lineNumber":397,"oldContent":""},{"type":"DELETE","lineNumber":409,"oldContent":"            // Collector job"},{"type":"DELETE","lineNumber":412,"oldContent":"            val job = AppScope.launch {"},{"type":"DELETE","lineNumber":414,"oldContent":"                connection.mavFrame"},{"type":"DELETE","lineNumber":416,"oldContent":"                    .filter { it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":418,"oldContent":"                    .collect { frame ->"},{"type":"DELETE","lineNumber":420,"oldContent":"                        when (val msg = frame.message) {"},{"type":"DELETE","lineNumber":422,"oldContent":"                            is MissionRequestInt -> {"},{"type":"DELETE","lineNumber":424,"oldContent":"                                val seq = msg.seq.toInt()"},{"type":"DELETE","lineNumber":426,"oldContent":"                                if (seq < 0 || seq >= missionItems.size) {"},{"type":"DELETE","lineNumber":428,"oldContent":"                                    Log.w(\"MavlinkRepo\", \"FC requested invalid seq=$seq (MissionRequestInt)\")"},{"type":"DELETE","lineNumber":430,"oldContent":"                                    return@collect"},{"type":"DELETE","lineNumber":432,"oldContent":"                                }"},{"type":"DELETE","lineNumber":434,"oldContent":"                                if (sentSeqs.contains(seq)) {"},{"type":"INSERT","lineNumber":423,"content":"            // Collector job"},{"type":"INSERT","lineNumber":424,"content":"            val job = AppScope.launch {"},{"type":"INSERT","lineNumber":425,"content":"                connection.mavFrame"},{"type":"INSERT","lineNumber":426,"content":"                    //.filter { it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":427,"content":"                    .collect { frame ->"},{"type":"INSERT","lineNumber":428,"content":"                        val senderSys = frame.systemId"},{"type":"INSERT","lineNumber":429,"content":"                        val senderComp = frame.componentId"},{"type":"INSERT","lineNumber":430,"content":"                        when (val msg = frame.message) {"},{"type":"INSERT","lineNumber":431,"content":"                            is MissionRequestInt -> {"},{"type":"INSERT","lineNumber":432,"content":"                                Log.d(\"MavlinkRepo\", \"Received MissionRequestInt from sys=$senderSys comp=$senderComp seq=${msg.seq}\")"},{"type":"INSERT","lineNumber":433,"content":"                                firstRequestReceived = true"},{"type":"INSERT","lineNumber":434,"content":"                                val seq = msg.seq.toInt()"},{"type":"INSERT","lineNumber":435,"content":"                                if (seq < 0 || seq >= missionItems.size) {"},{"type":"INSERT","lineNumber":436,"content":"                                    Log.w(\"MavlinkRepo\", \"FC requested invalid seq=$seq (MissionRequestInt)\")"},{"type":"INSERT","lineNumber":437,"content":"                                    return@collect"},{"type":"INSERT","lineNumber":438,"content":"                                }"},{"type":"INSERT","lineNumber":439,"content":"                                if (sentSeqs.contains(seq)) {"},{"type":"DELETE","lineNumber":441,"oldContent":"                                    targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":442,"oldContent":"                                    targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":445,"content":"                                    targetSystem = senderSys.toUByte(),"},{"type":"INSERT","lineNumber":446,"content":"                                    targetComponent = senderComp.toUByte(),"},{"type":"DELETE","lineNumber":444,"oldContent":"                                firstRequestReceived = true"},{"type":"DELETE","lineNumber":449,"oldContent":"                                    Log.i(\"MavlinkRepo\", \"Sent MISSION_ITEM_INT seq=$seq\")"},{"type":"INSERT","lineNumber":452,"content":"                                    Log.i(\"MavlinkRepo\", \"Sent MISSION_ITEM_INT seq=$seq to sys=$senderSys comp=$senderComp\")"},{"type":"INSERT","lineNumber":457,"content":"                            is MissionRequest -> {"},{"type":"INSERT","lineNumber":458,"content":"                                Log.d(\"MavlinkRepo\", \"Received MissionRequest (float) from sys=$senderSys comp=$senderComp seq=${msg.seq}\")"},{"type":"INSERT","lineNumber":459,"content":"                                firstRequestReceived = true"},{"type":"INSERT","lineNumber":460,"content":"                                val seq = msg.seq.toInt()"},{"type":"DELETE","lineNumber":461,"oldContent":"                            is MissionRequest -> {"},{"type":"DELETE","lineNumber":462,"oldContent":"                                firstRequestReceived = true"},{"type":"DELETE","lineNumber":464,"oldContent":"                                // Some FC use non-int mission items; respond with MissionItem (float) converted"},{"type":"DELETE","lineNumber":465,"oldContent":"                                val seq = msg.seq.toInt()"},{"type":"DELETE","lineNumber":467,"oldContent":"                                // Convert MissionItemInt -> MissionItem"},{"type":"DELETE","lineNumber":469,"oldContent":"                                    targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":470,"oldContent":"                                    targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":471,"content":"                                    targetSystem = senderSys.toUByte(),"},{"type":"INSERT","lineNumber":472,"content":"                                    targetComponent = senderComp.toUByte(),"},{"type":"DELETE","lineNumber":487,"oldContent":"                            is MissionAck -> {"},{"type":"DELETE","lineNumber":488,"oldContent":"                                    Log.i(\"MavlinkRepo\", \"Sent MISSION_ITEM seq=$seq (converted from INT)\")"},{"type":"MODIFY","lineNumber":489,"content":"                                    Log.i(\"MavlinkRepo\", \"Sent MISSION_ITEM seq=$seq (converted) to sys=$senderSys comp=$senderComp\")","oldContent":"                                Log.i(\"MavlinkRepo\", \"Received MISSION_ACK: ${msg.type}\")"},{"type":"INSERT","lineNumber":491,"content":"                                    Log.e(\"MavlinkRepo\", \"Failed to send mission item(seq=$seq) as MissionItem\", e)"},{"type":"INSERT","lineNumber":492,"content":"                                }"},{"type":"INSERT","lineNumber":493,"content":"                            }"},{"type":"INSERT","lineNumber":494,"content":"                            is MissionAck -> {"},{"type":"INSERT","lineNumber":495,"content":"                                Log.i(\"MavlinkRepo\", \"Received MISSION_ACK from sys=$senderSys comp=$senderComp: ${msg.type}\")"},{"type":"DELETE","lineNumber":493,"oldContent":"                                    Log.e(\"MavlinkRepo\", \"Failed to send mission item(seq=$seq) as MissionItem\", e)"},{"type":"INSERT","lineNumber":498,"content":"                            }"},{"type":"DELETE","lineNumber":495,"oldContent":"                                }"},{"type":"DELETE","lineNumber":498,"oldContent":"                            }"},{"type":"INSERT","lineNumber":502,"content":"                        }"},{"type":"INSERT","lineNumber":505,"content":""},{"type":"DELETE","lineNumber":513,"oldContent":"                            }"},{"type":"DELETE","lineNumber":517,"oldContent":"                        }"},{"type":"DELETE","lineNumber":518,"oldContent":""},{"type":"INSERT","lineNumber":522,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":523,"content":"            Log.e(\"MavlinkRepo\", \"Mission upload failed\", e)"},{"type":"INSERT","lineNumber":524,"content":"            _lastFailure.value = e"},{"type":"INSERT","lineNumber":525,"content":"            return false"},{"type":"INSERT","lineNumber":526,"content":"        }"},{"type":"INSERT","lineNumber":527,"content":"    }"},{"type":"INSERT","lineNumber":528,"content":""},{"type":"INSERT","lineNumber":529,"content":"    suspend fun startMission() {"},{"type":"INSERT","lineNumber":530,"content":"        if (!state.value.fcuDetected) {"},{"type":"DELETE","lineNumber":522,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":525,"oldContent":"            Log.e(\"MavlinkRepo\", \"Mission upload failed\", e)"},{"type":"DELETE","lineNumber":528,"oldContent":"            _lastFailure.value = e"},{"type":"DELETE","lineNumber":531,"oldContent":"            return false"},{"type":"DELETE","lineNumber":534,"oldContent":"        }"},{"type":"DELETE","lineNumber":536,"oldContent":"    }"},{"type":"INSERT","lineNumber":543,"content":""},{"type":"DELETE","lineNumber":540,"oldContent":""},{"type":"DELETE","lineNumber":541,"oldContent":"    suspend fun startMission() {"},{"type":"DELETE","lineNumber":542,"oldContent":"        if (!state.value.fcuDetected) {"},{"type":"DELETE","lineNumber":543,"oldContent":""}]},{"timestamp":1757914748085,"changes":[{"type":"MODIFY","lineNumber":283,"content":"    }","oldContent":"    }"},{"type":"MODIFY","lineNumber":286,"content":"        val commandLong = CommandLong(","oldContent":"        val commandLong = CommandLong("},{"type":"INSERT","lineNumber":287,"content":"            targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":289,"content":"            command = command.wrap(),"},{"type":"DELETE","lineNumber":289,"oldContent":"            targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":291,"content":"            param1 = param1,"},{"type":"INSERT","lineNumber":293,"content":"            param3 = param3,"},{"type":"DELETE","lineNumber":292,"oldContent":"            command = command.wrap(),"},{"type":"INSERT","lineNumber":295,"content":"            param5 = param5,"},{"type":"INSERT","lineNumber":297,"content":"            param7 = param7"},{"type":"DELETE","lineNumber":295,"oldContent":"            param1 = param1,"},{"type":"INSERT","lineNumber":299,"content":"        try {"},{"type":"DELETE","lineNumber":298,"oldContent":"            param3 = param3,"},{"type":"INSERT","lineNumber":302,"content":"                gcsComponentId, commandLong)"},{"type":"INSERT","lineNumber":303,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":301,"oldContent":"            param5 = param5,"},{"type":"INSERT","lineNumber":306,"content":"        }"},{"type":"DELETE","lineNumber":304,"oldContent":"            param7 = param7"},{"type":"DELETE","lineNumber":307,"oldContent":"        try {"},{"type":"DELETE","lineNumber":311,"oldContent":"                gcsComponentId, commandLong)"},{"type":"DELETE","lineNumber":313,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":317,"oldContent":"        }"},{"type":"DELETE","lineNumber":324,"oldContent":"    suspend fun changeMode(mode: UInt) {"},{"type":"DELETE","lineNumber":325,"oldContent":"        sendCommand("},{"type":"MODIFY","lineNumber":327,"content":"    suspend fun changeMode(mode: UInt) {","oldContent":"            MavCmd.DO_SET_MODE,"},{"type":"INSERT","lineNumber":328,"content":"        sendCommand("},{"type":"INSERT","lineNumber":329,"content":"            MavCmd.DO_SET_MODE,"},{"type":"DELETE","lineNumber":337,"oldContent":"            targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":338,"oldContent":"            targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":339,"oldContent":"            confirmation = 0u,"},{"type":"DELETE","lineNumber":340,"oldContent":"            param2 = param2,"},{"type":"DELETE","lineNumber":341,"oldContent":"            param4 = param4,"},{"type":"DELETE","lineNumber":342,"oldContent":"            param6 = param6,"},{"type":"DELETE","lineNumber":343,"oldContent":"            param7 = param7"},{"type":"DELETE","lineNumber":344,"oldContent":"        try {"},{"type":"DELETE","lineNumber":345,"oldContent":"               gcsSystemId,"},{"type":"DELETE","lineNumber":346,"oldContent":"                gcsComponentId, commandLong)"},{"type":"DELETE","lineNumber":347,"oldContent":"            Log.e(\"MavlinkRepo\", \"Failed to send command\", e)"},{"type":"DELETE","lineNumber":348,"oldContent":"        }"},{"type":"INSERT","lineNumber":337,"content":"            MavCmd.NAV_TAKEOFF,"},{"type":"INSERT","lineNumber":338,"content":"            -1f,"},{"type":"INSERT","lineNumber":339,"content":"            0f,"},{"type":"INSERT","lineNumber":340,"content":"            0f,"},{"type":"INSERT","lineNumber":341,"content":"            0f,"},{"type":"INSERT","lineNumber":342,"content":"            0f,"},{"type":"INSERT","lineNumber":343,"content":"            0f,"},{"type":"INSERT","lineNumber":344,"content":"            altitude"},{"type":"INSERT","lineNumber":345,"content":"        )"},{"type":"DELETE","lineNumber":350,"oldContent":"    suspend fun arm() {"},{"type":"INSERT","lineNumber":348,"content":"    suspend fun land() {"},{"type":"INSERT","lineNumber":349,"content":"        sendCommand(MavCmd.NAV_LAND)"},{"type":"INSERT","lineNumber":350,"content":"    }"},{"type":"INSERT","lineNumber":351,"content":""},{"type":"DELETE","lineNumber":416,"oldContent":"            // Collector job"},{"type":"INSERT","lineNumber":417,"content":"                        Log.e(\"MavlinkRepo\", \"Failed to resend MISSION_COUNT\", e)"},{"type":"INSERT","lineNumber":418,"content":"                    }"},{"type":"INSERT","lineNumber":419,"content":"                    kotlinx.coroutines.delay(700)"},{"type":"INSERT","lineNumber":420,"content":"                }"},{"type":"INSERT","lineNumber":421,"content":"            }"},{"type":"INSERT","lineNumber":422,"content":""},{"type":"INSERT","lineNumber":423,"content":"            // Collector job"},{"type":"DELETE","lineNumber":420,"oldContent":"                        Log.e(\"MavlinkRepo\", \"Failed to resend MISSION_COUNT\", e)"},{"type":"DELETE","lineNumber":423,"oldContent":"                    }"},{"type":"DELETE","lineNumber":426,"oldContent":"                    kotlinx.coroutines.delay(700)"},{"type":"DELETE","lineNumber":429,"oldContent":"                }"},{"type":"DELETE","lineNumber":432,"oldContent":"            }"},{"type":"DELETE","lineNumber":435,"oldContent":""},{"type":"DELETE","lineNumber":437,"oldContent":"                                    Log.i(\"MavlinkRepo\", \"Already sent seq=$seq, ignoring\")"},{"type":"DELETE","lineNumber":439,"oldContent":"                                    return@collect"},{"type":"DELETE","lineNumber":441,"oldContent":"                                }"},{"type":"INSERT","lineNumber":440,"content":"                                    Log.i(\"MavlinkRepo\", \"Already sent seq=$seq, ignoring\")"},{"type":"INSERT","lineNumber":441,"content":"                                    return@collect"},{"type":"INSERT","lineNumber":442,"content":"                                }"},{"type":"DELETE","lineNumber":445,"oldContent":"                                    seq = seq.toUShort()"},{"type":"MODIFY","lineNumber":447,"content":"                                    seq = seq.toUShort()","oldContent":"                                )"},{"type":"INSERT","lineNumber":448,"content":"                                )"},{"type":"INSERT","lineNumber":452,"content":"                                    Log.i(\"MavlinkRepo\", \"Sent MISSION_ITEM_INT seq=$seq to sys=$senderSys comp=$senderComp\")"},{"type":"DELETE","lineNumber":454,"oldContent":"                                    Log.i(\"MavlinkRepo\", \"Sent MISSION_ITEM_INT seq=$seq to sys=$senderSys comp=$senderComp\")"},{"type":"INSERT","lineNumber":457,"content":"                            is MissionRequest -> {"},{"type":"INSERT","lineNumber":458,"content":"                                Log.d(\"MavlinkRepo\", \"Received MissionRequest (float) from sys=$senderSys comp=$senderComp seq=${msg.seq}\")"},{"type":"INSERT","lineNumber":459,"content":"                                firstRequestReceived = true"},{"type":"INSERT","lineNumber":460,"content":"                                val seq = msg.seq.toInt()"},{"type":"DELETE","lineNumber":460,"oldContent":"                            is MissionRequest -> {"},{"type":"DELETE","lineNumber":462,"oldContent":"                                Log.d(\"MavlinkRepo\", \"Received MissionRequest (float) from sys=$senderSys comp=$senderComp seq=${msg.seq}\")"},{"type":"DELETE","lineNumber":464,"oldContent":"                                firstRequestReceived = true"},{"type":"DELETE","lineNumber":466,"oldContent":"                                val seq = msg.seq.toInt()"},{"type":"MODIFY","lineNumber":473,"content":"                                    seq = seq.toUShort(),","oldContent":"                                    seq = seq.toUShort(),"},{"type":"DELETE","lineNumber":492,"oldContent":"                                if (!ackDeferred.isCompleted) ackDeferred.complete(true)"},{"type":"DELETE","lineNumber":494,"oldContent":"                                return@collect"},{"type":"DELETE","lineNumber":497,"oldContent":"                            else -> {"},{"type":"INSERT","lineNumber":496,"content":"                                if (!ackDeferred.isCompleted) ackDeferred.complete(true)"},{"type":"INSERT","lineNumber":497,"content":"                                return@collect"},{"type":"INSERT","lineNumber":498,"content":"                            }"},{"type":"INSERT","lineNumber":499,"content":"                            else -> {"},{"type":"MODIFY","lineNumber":502,"content":"                        }","oldContent":"                            }"},{"type":"INSERT","lineNumber":505,"content":""},{"type":"INSERT","lineNumber":506,"content":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"INSERT","lineNumber":507,"content":"            val firstRequestTimeout = 2500L"},{"type":"INSERT","lineNumber":508,"content":"            val startWait = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":509,"content":"            while (!firstRequestReceived && !ackDeferred.isCompleted && System.currentTimeMillis() - startWait < firstRequestTimeout) {"},{"type":"INSERT","lineNumber":510,"content":"                delay(100)"},{"type":"INSERT","lineNumber":511,"content":"            }"},{"type":"INSERT","lineNumber":512,"content":""},{"type":"INSERT","lineNumber":513,"content":"            if (!firstRequestReceived) {"},{"type":"INSERT","lineNumber":514,"content":"                Log.w(\"MavlinkRepo\", \"No MissionRequest received within $firstRequestTimeout ms; falling back to send all items\")"},{"type":"INSERT","lineNumber":515,"content":"                // Send all items sequentially"},{"type":"INSERT","lineNumber":516,"content":"                for (seq in 0 until missionItems.size) {"},{"type":"INSERT","lineNumber":517,"content":"                    if (sentSeqs.contains(seq)) continue"},{"type":"INSERT","lineNumber":518,"content":"                    val item = missionItems[seq]"},{"type":"INSERT","lineNumber":519,"content":"                    val missionItem = item.copy("},{"type":"INSERT","lineNumber":520,"content":"                        targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":521,"content":"                        targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":522,"content":"                        seq = seq.toUShort()"},{"type":"INSERT","lineNumber":523,"content":"                    )"},{"type":"INSERT","lineNumber":524,"content":"                    try {"},{"type":"INSERT","lineNumber":525,"content":"                        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"INSERT","lineNumber":526,"content":"                        sentSeqs.add(seq)"},{"type":"INSERT","lineNumber":527,"content":"                        Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_ITEM_INT seq=$seq\")"},{"type":"INSERT","lineNumber":528,"content":"                        delay(100)"},{"type":"INSERT","lineNumber":529,"content":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":530,"content":"                        Log.e(\"MavlinkRepo\", \"Fallback: Failed to send mission item seq=$seq\", e)"},{"type":"INSERT","lineNumber":531,"content":"                    }"},{"type":"INSERT","lineNumber":532,"content":"                }"},{"type":"INSERT","lineNumber":533,"content":"            }"},{"type":"INSERT","lineNumber":534,"content":""},{"type":"DELETE","lineNumber":505,"oldContent":"                        }"},{"type":"DELETE","lineNumber":510,"oldContent":""},{"type":"DELETE","lineNumber":522,"oldContent":"            Log.e(\"MavlinkRepo\", \"FCU not detected, cannot start mission\")"},{"type":"DELETE","lineNumber":523,"oldContent":"            throw IllegalStateException(\"FCU not detected\")"},{"type":"DELETE","lineNumber":526,"oldContent":"        }"},{"type":"DELETE","lineNumber":528,"oldContent":"        try {"},{"type":"DELETE","lineNumber":531,"oldContent":"            changeMode(MavMode.AUTO)"},{"type":"DELETE","lineNumber":533,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":536,"oldContent":"            Log.e(\"MavlinkRepo\", \"Start mission failed\", e)"},{"type":"INSERT","lineNumber":560,"content":"            Log.e(\"MavlinkRepo\", \"FCU not detected, cannot start mission\")"},{"type":"INSERT","lineNumber":561,"content":"            throw IllegalStateException(\"FCU not detected\")"},{"type":"INSERT","lineNumber":562,"content":"        }"},{"type":"INSERT","lineNumber":563,"content":"        try {"},{"type":"INSERT","lineNumber":564,"content":"            changeMode(MavMode.AUTO)"},{"type":"INSERT","lineNumber":565,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":566,"content":"            Log.e(\"MavlinkRepo\", \"Start mission failed\", e)"},{"type":"INSERT","lineNumber":572,"content":""},{"type":"DELETE","lineNumber":545,"oldContent":""}]},{"timestamp":1757914799960,"changes":[{"type":"INSERT","lineNumber":282,"content":"        }"},{"type":"DELETE","lineNumber":283,"oldContent":"    }"},{"type":"INSERT","lineNumber":285,"content":"    suspend fun sendCommand(command: MavCmd, param1: Float = 0f, param2: Float = 0f, param3: Float = 0f, param4: Float = 0f, param5: Float = 0f, param6: Float = 0f, param7: Float = 0f) {"},{"type":"DELETE","lineNumber":286,"oldContent":"        val commandLong = CommandLong("},{"type":"DELETE","lineNumber":289,"oldContent":"            confirmation = 0u,"},{"type":"DELETE","lineNumber":291,"oldContent":"            param2 = param2,"},{"type":"INSERT","lineNumber":290,"content":"            confirmation = 0u,"},{"type":"MODIFY","lineNumber":292,"content":"            param2 = param2,","oldContent":"            param4 = param4,"},{"type":"INSERT","lineNumber":294,"content":"            param4 = param4,"},{"type":"INSERT","lineNumber":295,"content":"            param5 = param5,"},{"type":"INSERT","lineNumber":297,"content":"            param7 = param7"},{"type":"DELETE","lineNumber":297,"oldContent":"            param5 = param5,"},{"type":"INSERT","lineNumber":299,"content":"        try {"},{"type":"DELETE","lineNumber":299,"oldContent":"            param7 = param7"},{"type":"DELETE","lineNumber":301,"oldContent":"        try {"},{"type":"INSERT","lineNumber":302,"content":"                gcsComponentId, commandLong)"},{"type":"INSERT","lineNumber":303,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":304,"oldContent":"                gcsComponentId, commandLong)"},{"type":"INSERT","lineNumber":306,"content":"        }"},{"type":"DELETE","lineNumber":306,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":309,"oldContent":"        }"},{"type":"INSERT","lineNumber":325,"content":"    }"},{"type":"INSERT","lineNumber":326,"content":""},{"type":"DELETE","lineNumber":327,"oldContent":"    }"},{"type":"DELETE","lineNumber":329,"oldContent":""},{"type":"INSERT","lineNumber":346,"content":"    }"},{"type":"INSERT","lineNumber":347,"content":""},{"type":"DELETE","lineNumber":348,"oldContent":"               gcsSystemId,"},{"type":"DELETE","lineNumber":351,"oldContent":""},{"type":"DELETE","lineNumber":363,"oldContent":"            sendCommand("},{"type":"DELETE","lineNumber":364,"oldContent":"                1f"},{"type":"DELETE","lineNumber":366,"oldContent":"            Log.w(\"MavlinkRepo\", \"Arm command rejected, vehicle not armable\")"},{"type":"DELETE","lineNumber":367,"oldContent":"        }"},{"type":"DELETE","lineNumber":368,"oldContent":""},{"type":"DELETE","lineNumber":369,"oldContent":"        sendCommand("},{"type":"INSERT","lineNumber":364,"content":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionCount)"},{"type":"INSERT","lineNumber":365,"content":"            // Send each MissionItemInt"},{"type":"INSERT","lineNumber":366,"content":"            missionItems.forEachIndexed { index, item ->"},{"type":"INSERT","lineNumber":367,"content":"                val missionItem = item.copy("},{"type":"INSERT","lineNumber":368,"content":"                    targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":369,"content":"                    targetComponent = fcuComponentId,"},{"type":"MODIFY","lineNumber":375,"content":"        } catch (e: Exception) {","oldContent":"    suspend fun changeMode(mode: MavMode) {"},{"type":"MODIFY","lineNumber":417,"content":"                        Log.e(\"MavlinkRepo\", \"Failed to resend MISSION_COUNT\", e)","oldContent":"                        Log.e(\"MavlinkRepo\", \"Failed to resend MISSION_COUNT\", e)"},{"type":"DELETE","lineNumber":419,"oldContent":"            val job = AppScope.launch {"},{"type":"DELETE","lineNumber":421,"oldContent":"                connection.mavFrame"},{"type":"DELETE","lineNumber":424,"oldContent":"                    //.filter { it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":426,"oldContent":"                    .collect { frame ->"},{"type":"INSERT","lineNumber":424,"content":"            val job = AppScope.launch {"},{"type":"INSERT","lineNumber":425,"content":"                connection.mavFrame"},{"type":"INSERT","lineNumber":426,"content":"                    //.filter { it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":427,"content":"                    .collect { frame ->"},{"type":"DELETE","lineNumber":438,"oldContent":"                                    Log.i(\"MavlinkRepo\", \"Already sent seq=$seq, ignoring\")"},{"type":"INSERT","lineNumber":439,"content":"                                if (sentSeqs.contains(seq)) {"},{"type":"INSERT","lineNumber":440,"content":"                                    Log.i(\"MavlinkRepo\", \"Already sent seq=$seq, ignoring\")"},{"type":"DELETE","lineNumber":442,"oldContent":"                                if (sentSeqs.contains(seq)) {"},{"type":"INSERT","lineNumber":446,"content":"                                    targetComponent = senderComp.toUByte(),"},{"type":"DELETE","lineNumber":448,"oldContent":"                                    targetComponent = senderComp.toUByte(),"},{"type":"DELETE","lineNumber":458,"oldContent":"                                if (seq < 0 || seq >= missionItems.size) {"},{"type":"DELETE","lineNumber":460,"oldContent":"                                    Log.w(\"MavlinkRepo\", \"FC requested invalid seq=$seq (MissionRequest)\")"},{"type":"DELETE","lineNumber":462,"oldContent":"                                    return@collect"},{"type":"INSERT","lineNumber":461,"content":"                                if (seq < 0 || seq >= missionItems.size) {"},{"type":"INSERT","lineNumber":462,"content":"                                    Log.w(\"MavlinkRepo\", \"FC requested invalid seq=$seq (MissionRequest)\")"},{"type":"INSERT","lineNumber":463,"content":"                                    return@collect"},{"type":"INSERT","lineNumber":472,"content":"                                    targetComponent = senderComp.toUByte(),"},{"type":"DELETE","lineNumber":473,"oldContent":"                                    seq = seq.toUShort(),"},{"type":"DELETE","lineNumber":494,"oldContent":"                                if (!ackDeferred.isCompleted) ackDeferred.complete(true)"},{"type":"INSERT","lineNumber":495,"content":"                                Log.i(\"MavlinkRepo\", \"Received MISSION_ACK from sys=$senderSys comp=$senderComp: ${msg.type}\")"},{"type":"INSERT","lineNumber":496,"content":"                                if (!ackDeferred.isCompleted) ackDeferred.complete(true)"},{"type":"DELETE","lineNumber":498,"oldContent":"                                Log.i(\"MavlinkRepo\", \"Received MISSION_ACK from sys=$senderSys comp=$senderComp: ${msg.type}\")"},{"type":"MODIFY","lineNumber":503,"content":"                    }","oldContent":"                            }"},{"type":"DELETE","lineNumber":505,"oldContent":"            // Wait for ACK with timeout"},{"type":"DELETE","lineNumber":508,"oldContent":"            val ackReceived = withTimeoutOrNull(timeoutMs) {"},{"type":"DELETE","lineNumber":510,"oldContent":"                ackDeferred.await()"},{"type":"DELETE","lineNumber":512,"oldContent":"            } ?: false"},{"type":"DELETE","lineNumber":514,"oldContent":""},{"type":"DELETE","lineNumber":517,"oldContent":"            // cancel collector and resend jobs"},{"type":"DELETE","lineNumber":519,"oldContent":"            job.cancel()"},{"type":"DELETE","lineNumber":521,"oldContent":"            resendJob.cancel()"},{"type":"DELETE","lineNumber":523,"oldContent":""},{"type":"DELETE","lineNumber":525,"oldContent":"            if (ackReceived) {"},{"type":"DELETE","lineNumber":527,"oldContent":"                Log.i(\"MavlinkRepo\", \"Mission upload acknowledged by FCU\")"},{"type":"DELETE","lineNumber":529,"oldContent":"                return true"},{"type":"DELETE","lineNumber":531,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":533,"oldContent":"                Log.e(\"MavlinkRepo\", \"Mission upload timed out waiting for ACK\")"},{"type":"DELETE","lineNumber":535,"oldContent":"                return false"},{"type":"DELETE","lineNumber":537,"oldContent":"            }"},{"type":"DELETE","lineNumber":541,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":543,"oldContent":"            Log.e(\"MavlinkRepo\", \"Mission upload failed\", e)"},{"type":"DELETE","lineNumber":546,"oldContent":"            _lastFailure.value = e"},{"type":"DELETE","lineNumber":549,"oldContent":"            return false"},{"type":"DELETE","lineNumber":551,"oldContent":"        }"},{"type":"DELETE","lineNumber":554,"oldContent":"    }"},{"type":"INSERT","lineNumber":535,"content":"            // Wait for ACK with timeout"},{"type":"INSERT","lineNumber":536,"content":"            val ackReceived = withTimeoutOrNull(timeoutMs) {"},{"type":"INSERT","lineNumber":537,"content":"                ackDeferred.await()"},{"type":"INSERT","lineNumber":538,"content":"            } ?: false"},{"type":"INSERT","lineNumber":540,"content":"            // cancel collector and resend jobs"},{"type":"INSERT","lineNumber":541,"content":"            job.cancel()"},{"type":"INSERT","lineNumber":542,"content":"            resendJob.cancel()"},{"type":"INSERT","lineNumber":543,"content":""},{"type":"INSERT","lineNumber":544,"content":"            if (ackReceived) {"},{"type":"INSERT","lineNumber":545,"content":"                Log.i(\"MavlinkRepo\", \"Mission upload acknowledged by FCU\")"},{"type":"INSERT","lineNumber":546,"content":"                return true"},{"type":"INSERT","lineNumber":547,"content":"            } else {"},{"type":"INSERT","lineNumber":548,"content":"                Log.e(\"MavlinkRepo\", \"Mission upload timed out waiting for ACK\")"},{"type":"INSERT","lineNumber":549,"content":"                return false"},{"type":"INSERT","lineNumber":550,"content":"            }"},{"type":"INSERT","lineNumber":551,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":552,"content":"            Log.e(\"MavlinkRepo\", \"Mission upload failed\", e)"},{"type":"INSERT","lineNumber":553,"content":"            _lastFailure.value = e"},{"type":"INSERT","lineNumber":554,"content":"            return false"},{"type":"INSERT","lineNumber":555,"content":"        }"},{"type":"INSERT","lineNumber":556,"content":"    }"},{"type":"INSERT","lineNumber":557,"content":""},{"type":"INSERT","lineNumber":560,"content":"            Log.e(\"MavlinkRepo\", \"FCU not detected, cannot start mission\")"},{"type":"INSERT","lineNumber":561,"content":"            throw IllegalStateException(\"FCU not detected\")"},{"type":"INSERT","lineNumber":562,"content":"        }"},{"type":"INSERT","lineNumber":563,"content":"        try {"},{"type":"INSERT","lineNumber":564,"content":"            // Try switching to AUTO mode first"},{"type":"INSERT","lineNumber":565,"content":"            changeMode(MavMode.AUTO)"},{"type":"INSERT","lineNumber":566,"content":""},{"type":"INSERT","lineNumber":567,"content":"            // Also send MISSION_START command to be explicit (some firmwares require it)"},{"type":"INSERT","lineNumber":568,"content":"            try {"},{"type":"INSERT","lineNumber":569,"content":"                sendCommand(MavCmd.MISSION_START, 0f, 0f, 0f, 0f, 0f, 0f, 0f)"},{"type":"INSERT","lineNumber":570,"content":"                Log.i(\"MavlinkRepo\", \"Sent MISSION_START command\")"},{"type":"INSERT","lineNumber":571,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":572,"content":"                Log.w(\"MavlinkRepo\", \"Failed to send MISSION_START command, mode change may still work\", e)"},{"type":"INSERT","lineNumber":573,"content":"            }"},{"type":"INSERT","lineNumber":574,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":575,"content":"            Log.e(\"MavlinkRepo\", \"Start mission failed\", e)"},{"type":"INSERT","lineNumber":581,"content":""},{"type":"DELETE","lineNumber":567,"oldContent":""},{"type":"DELETE","lineNumber":568,"oldContent":"            Log.e(\"MavlinkRepo\", \"Start mission failed\", e)"},{"type":"DELETE","lineNumber":569,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":570,"oldContent":"            changeMode(MavMode.AUTO)"},{"type":"DELETE","lineNumber":571,"oldContent":"        try {"},{"type":"DELETE","lineNumber":572,"oldContent":"        }"},{"type":"DELETE","lineNumber":573,"oldContent":"            throw IllegalStateException(\"FCU not detected\")"},{"type":"DELETE","lineNumber":574,"oldContent":"            Log.e(\"MavlinkRepo\", \"FCU not detected, cannot start mission\")"}]},{"timestamp":1757915272356,"changes":[{"type":"MODIFY","lineNumber":290,"content":"            confirmation = 0u,","oldContent":"            confirmation = 0u,"},{"type":"INSERT","lineNumber":291,"content":"            param1 = param1,"},{"type":"DELETE","lineNumber":292,"oldContent":"            param4 = param4,"},{"type":"MODIFY","lineNumber":294,"content":"            param4 = param4,","oldContent":"            param4 = param4,"},{"type":"DELETE","lineNumber":297,"oldContent":"        )"},{"type":"DELETE","lineNumber":299,"oldContent":"            connection.trySendUnsignedV2("},{"type":"INSERT","lineNumber":298,"content":"        )"},{"type":"INSERT","lineNumber":300,"content":"            connection.trySendUnsignedV2("},{"type":"MODIFY","lineNumber":304,"content":"            Log.e(\"MavlinkRepo\", \"Failed to send command\", e)","oldContent":"            Log.e(\"MavlinkRepo\", \"Failed to send command\", e)"},{"type":"MODIFY","lineNumber":307,"content":"    }","oldContent":"    }"},{"type":"MODIFY","lineNumber":327,"content":"    suspend fun changeMode(mode: UInt) {","oldContent":"    suspend fun changeMode(mode: UInt) {"},{"type":"DELETE","lineNumber":335,"oldContent":"        val commandLong = CommandLong("},{"type":"DELETE","lineNumber":336,"oldContent":"            targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":335,"content":"    suspend fun takeoff(altitude: Float) {"},{"type":"INSERT","lineNumber":336,"content":"        sendCommand("},{"type":"MODIFY","lineNumber":348,"content":"    suspend fun land() {","oldContent":"    suspend fun land() {"},{"type":"DELETE","lineNumber":352,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":353,"oldContent":"            _lastFailure.value = e"},{"type":"DELETE","lineNumber":354,"oldContent":"    }"},{"type":"DELETE","lineNumber":355,"oldContent":"    suspend fun arm() {"},{"type":"DELETE","lineNumber":356,"oldContent":"        if (state.value.armable) {"},{"type":"INSERT","lineNumber":352,"content":"    suspend fun uploadMission(missionItems: List<MissionItemInt>) {"},{"type":"INSERT","lineNumber":353,"content":"        if (!state.value.fcuDetected) {"},{"type":"INSERT","lineNumber":354,"content":"            Log.e(\"MavlinkRepo\", \"FCU not detected, cannot upload mission\")"},{"type":"INSERT","lineNumber":355,"content":"            throw IllegalStateException(\"FCU not detected\")"},{"type":"INSERT","lineNumber":356,"content":"        }"},{"type":"INSERT","lineNumber":363,"content":"            )"},{"type":"DELETE","lineNumber":365,"oldContent":"        }"},{"type":"MODIFY","lineNumber":379,"content":"        }","oldContent":"            0f"},{"type":"INSERT","lineNumber":416,"content":"                    } catch (e: Exception) {"},{"type":"DELETE","lineNumber":417,"oldContent":"                        Log.e(\"MavlinkRepo\", \"Failed to resend MISSION_COUNT\", e)"},{"type":"INSERT","lineNumber":422,"content":""},{"type":"INSERT","lineNumber":423,"content":"            // Collector job"},{"type":"DELETE","lineNumber":424,"oldContent":""},{"type":"DELETE","lineNumber":427,"oldContent":"            // Collector job"},{"type":"MODIFY","lineNumber":439,"content":"                                if (sentSeqs.contains(seq)) {","oldContent":"                                if (sentSeqs.contains(seq)) {"},{"type":"DELETE","lineNumber":459,"oldContent":"                                if (seq < 0 || seq >= missionItems.size) {"},{"type":"INSERT","lineNumber":460,"content":"                                val seq = msg.seq.toInt()"},{"type":"INSERT","lineNumber":461,"content":"                                if (seq < 0 || seq >= missionItems.size) {"},{"type":"DELETE","lineNumber":463,"oldContent":"                                val seq = msg.seq.toInt()"},{"type":"MODIFY","lineNumber":470,"content":"                                // Send MissionItemInt even if FC sent MissionRequest (float) because many FCs expect INT","oldContent":"                                val missionItem = MissionItem("},{"type":"INSERT","lineNumber":471,"content":"                                val missionItemInt = itemInt.copy("},{"type":"DELETE","lineNumber":473,"oldContent":"                                    seq = seq.toUShort(),"},{"type":"DELETE","lineNumber":474,"oldContent":"                                    frame = itemInt.frame,"},{"type":"DELETE","lineNumber":475,"oldContent":"                                    command = itemInt.command,"},{"type":"DELETE","lineNumber":476,"oldContent":"                                    current = itemInt.current,"},{"type":"DELETE","lineNumber":477,"oldContent":"                                    autocontinue = itemInt.autocontinue,"},{"type":"DELETE","lineNumber":478,"oldContent":"                                    param1 = itemInt.param1,"},{"type":"DELETE","lineNumber":479,"oldContent":"                                    param2 = itemInt.param2,"},{"type":"DELETE","lineNumber":480,"oldContent":"                                    param3 = itemInt.param3,"},{"type":"DELETE","lineNumber":481,"oldContent":"                                    param4 = itemInt.param4,"},{"type":"DELETE","lineNumber":482,"oldContent":"                                    x = (itemInt.x / 1e7f).toFloat(),"},{"type":"DELETE","lineNumber":483,"oldContent":"                                    y = (itemInt.y / 1e7f).toFloat(),"},{"type":"DELETE","lineNumber":484,"oldContent":"                                    z = itemInt.z"},{"type":"INSERT","lineNumber":474,"content":"                                    seq = seq.toUShort()"},{"type":"DELETE","lineNumber":487,"oldContent":"                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"INSERT","lineNumber":477,"content":"                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItemInt)"},{"type":"DELETE","lineNumber":489,"oldContent":"                                    Log.i(\"MavlinkRepo\", \"Sent MISSION_ITEM seq=$seq (converted) to sys=$senderSys comp=$senderComp\")"},{"type":"INSERT","lineNumber":479,"content":"                                    Log.i(\"MavlinkRepo\", \"Sent MISSION_ITEM_INT seq=$seq to sys=$senderSys comp=$senderComp (responding to MissionRequest)\")"},{"type":"DELETE","lineNumber":491,"oldContent":"                                    Log.e(\"MavlinkRepo\", \"Failed to send mission item(seq=$seq) as MissionItem\", e)"},{"type":"INSERT","lineNumber":481,"content":"                                    Log.e(\"MavlinkRepo\", \"Failed to send mission item(seq=$seq) as MissionItemInt\", e)"},{"type":"DELETE","lineNumber":494,"oldContent":"                                Log.i(\"MavlinkRepo\", \"Received MISSION_ACK from sys=$senderSys comp=$senderComp: ${msg.type}\")"},{"type":"INSERT","lineNumber":485,"content":"                                Log.i(\"MavlinkRepo\", \"Received MISSION_ACK from sys=$senderSys comp=$senderComp: ${msg.type}\")"},{"type":"DELETE","lineNumber":502,"oldContent":"                            }"},{"type":"INSERT","lineNumber":492,"content":"                        }"},{"type":"INSERT","lineNumber":511,"content":"                        targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":512,"content":"                        seq = seq.toUShort()"},{"type":"INSERT","lineNumber":513,"content":"                    )"},{"type":"INSERT","lineNumber":514,"content":"                    try {"},{"type":"INSERT","lineNumber":515,"content":"                        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"INSERT","lineNumber":516,"content":"                        sentSeqs.add(seq)"},{"type":"INSERT","lineNumber":517,"content":"                        Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_ITEM_INT seq=$seq\")"},{"type":"INSERT","lineNumber":518,"content":"                        delay(100)"},{"type":"INSERT","lineNumber":519,"content":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":520,"content":"                        Log.e(\"MavlinkRepo\", \"Fallback: Failed to send mission item seq=$seq\", e)"},{"type":"INSERT","lineNumber":521,"content":"                    }"},{"type":"INSERT","lineNumber":522,"content":"                }"},{"type":"INSERT","lineNumber":523,"content":"            }"},{"type":"INSERT","lineNumber":524,"content":""},{"type":"DELETE","lineNumber":523,"oldContent":"                        targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":526,"oldContent":"                        seq = seq.toUShort()"},{"type":"DELETE","lineNumber":527,"oldContent":"                    )"},{"type":"INSERT","lineNumber":529,"content":""},{"type":"DELETE","lineNumber":529,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":532,"oldContent":"                        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"DELETE","lineNumber":535,"oldContent":"                        sentSeqs.add(seq)"},{"type":"DELETE","lineNumber":537,"oldContent":"                        Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_ITEM_INT seq=$seq\")"},{"type":"DELETE","lineNumber":540,"oldContent":"                        delay(100)"},{"type":"DELETE","lineNumber":542,"oldContent":"                    } catch (e: Exception) {"},{"type":"DELETE","lineNumber":545,"oldContent":"                        Log.e(\"MavlinkRepo\", \"Fallback: Failed to send mission item seq=$seq\", e)"},{"type":"DELETE","lineNumber":548,"oldContent":"                    }"},{"type":"DELETE","lineNumber":550,"oldContent":"                }"},{"type":"DELETE","lineNumber":553,"oldContent":"            }"},{"type":"DELETE","lineNumber":556,"oldContent":""},{"type":"DELETE","lineNumber":557,"oldContent":""},{"type":"DELETE","lineNumber":561,"oldContent":"            _lastFailure.value = e"},{"type":"DELETE","lineNumber":563,"oldContent":"            throw e"},{"type":"DELETE","lineNumber":565,"oldContent":"        }"},{"type":"DELETE","lineNumber":567,"oldContent":"    }"},{"type":"DELETE","lineNumber":569,"oldContent":""},{"type":"DELETE","lineNumber":571,"oldContent":"}"},{"type":"DELETE","lineNumber":573,"oldContent":""},{"type":"INSERT","lineNumber":566,"content":"            _lastFailure.value = e"},{"type":"INSERT","lineNumber":567,"content":"            throw e"},{"type":"INSERT","lineNumber":568,"content":"        }"},{"type":"INSERT","lineNumber":569,"content":"    }"},{"type":"INSERT","lineNumber":571,"content":""},{"type":"INSERT","lineNumber":572,"content":"}"},{"type":"INSERT","lineNumber":573,"content":""}]},{"timestamp":1757915355533,"changes":[{"type":"INSERT","lineNumber":289,"content":"            command = command.wrap(),"},{"type":"DELETE","lineNumber":290,"oldContent":"            confirmation = 0u,"},{"type":"INSERT","lineNumber":293,"content":"            param3 = param3,"},{"type":"DELETE","lineNumber":294,"oldContent":"            param4 = param4,"},{"type":"DELETE","lineNumber":297,"oldContent":"        )"},{"type":"DELETE","lineNumber":299,"oldContent":"            connection.trySendUnsignedV2("},{"type":"INSERT","lineNumber":298,"content":"        )"},{"type":"INSERT","lineNumber":300,"content":"            connection.trySendUnsignedV2("},{"type":"INSERT","lineNumber":303,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":304,"oldContent":"            Log.e(\"MavlinkRepo\", \"Failed to send command\", e)"},{"type":"INSERT","lineNumber":306,"content":"        }"},{"type":"DELETE","lineNumber":307,"oldContent":"    }"},{"type":"INSERT","lineNumber":326,"content":""},{"type":"DELETE","lineNumber":327,"oldContent":"    suspend fun changeMode(mode: UInt) {"},{"type":"INSERT","lineNumber":347,"content":""},{"type":"DELETE","lineNumber":348,"oldContent":"    suspend fun land() {"},{"type":"DELETE","lineNumber":359,"oldContent":"    suspend fun arm() {"},{"type":"DELETE","lineNumber":360,"oldContent":"        if (state.value.armable) {"},{"type":"DELETE","lineNumber":361,"oldContent":"                MavCmd.COMPONENT_ARM_DISARM,"},{"type":"DELETE","lineNumber":362,"oldContent":"                1f"},{"type":"INSERT","lineNumber":359,"content":"            val missionCount = MissionCount("},{"type":"INSERT","lineNumber":360,"content":"                targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":361,"content":"                targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":362,"content":"                count = missionItems.size.toUShort()"},{"type":"MODIFY","lineNumber":377,"content":"            _lastFailure.value = e","oldContent":"            MavCmd.DO_SET_MODE,"},{"type":"MODIFY","lineNumber":424,"content":"            val job = AppScope.launch {","oldContent":"            val job = AppScope.launch {"},{"type":"INSERT","lineNumber":438,"content":"                                }"},{"type":"DELETE","lineNumber":439,"oldContent":"                                if (sentSeqs.contains(seq)) {"},{"type":"MODIFY","lineNumber":460,"content":"                                val seq = msg.seq.toInt()","oldContent":"                                val seq = msg.seq.toInt()"},{"type":"DELETE","lineNumber":475,"oldContent":"                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItemInt)"},{"type":"DELETE","lineNumber":476,"oldContent":"                                    Log.i(\"MavlinkRepo\", \"Sent MISSION_ITEM_INT seq=$seq to sys=$senderSys comp=$senderComp (responding to MissionRequest)\")"},{"type":"DELETE","lineNumber":477,"oldContent":"                                    Log.e(\"MavlinkRepo\", \"Failed to send mission item(seq=$seq) as MissionItemInt\", e)"},{"type":"DELETE","lineNumber":478,"oldContent":"                                Log.i(\"MavlinkRepo\", \"Received MISSION_ACK from sys=$senderSys comp=$senderComp: ${msg.type}\")"},{"type":"INSERT","lineNumber":477,"content":"                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItemInt)"},{"type":"INSERT","lineNumber":479,"content":"                                    Log.i(\"MavlinkRepo\", \"Sent MISSION_ITEM_INT seq=$seq to sys=$senderSys comp=$senderComp (responding to MissionRequest)\")"},{"type":"DELETE","lineNumber":483,"oldContent":"                        }"},{"type":"INSERT","lineNumber":481,"content":"                                    Log.e(\"MavlinkRepo\", \"Failed to send mission item(seq=$seq) as MissionItemInt\", e)"},{"type":"INSERT","lineNumber":485,"content":"                                Log.i(\"MavlinkRepo\", \"Received MISSION_ACK from sys=$senderSys comp=$senderComp: ${msg.type}\")"},{"type":"INSERT","lineNumber":492,"content":"                        }"},{"type":"DELETE","lineNumber":501,"oldContent":"                        targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":503,"oldContent":"                        seq = seq.toUShort()"},{"type":"DELETE","lineNumber":505,"oldContent":"                    )"},{"type":"DELETE","lineNumber":507,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":509,"oldContent":"                        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"DELETE","lineNumber":511,"oldContent":"                        sentSeqs.add(seq)"},{"type":"DELETE","lineNumber":513,"oldContent":"                        Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_ITEM_INT seq=$seq\")"},{"type":"DELETE","lineNumber":515,"oldContent":"                        delay(100)"},{"type":"DELETE","lineNumber":517,"oldContent":"                    } catch (e: Exception) {"},{"type":"DELETE","lineNumber":519,"oldContent":"                        Log.e(\"MavlinkRepo\", \"Fallback: Failed to send mission item seq=$seq\", e)"},{"type":"INSERT","lineNumber":511,"content":"                        targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":512,"content":"                        seq = seq.toUShort()"},{"type":"INSERT","lineNumber":513,"content":"                    )"},{"type":"INSERT","lineNumber":514,"content":"                    try {"},{"type":"INSERT","lineNumber":515,"content":"                        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"INSERT","lineNumber":516,"content":"                        sentSeqs.add(seq)"},{"type":"INSERT","lineNumber":517,"content":"                        Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_ITEM_INT seq=$seq\")"},{"type":"INSERT","lineNumber":518,"content":"                        delay(100)"},{"type":"INSERT","lineNumber":519,"content":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":520,"content":"                        Log.e(\"MavlinkRepo\", \"Fallback: Failed to send mission item seq=$seq\", e)"},{"type":"DELETE","lineNumber":522,"oldContent":"            // Wait for ACK with timeout"},{"type":"DELETE","lineNumber":524,"oldContent":"            val ackReceived = withTimeoutOrNull(timeoutMs) {"},{"type":"INSERT","lineNumber":525,"content":"            // Wait for ACK with timeout"},{"type":"INSERT","lineNumber":526,"content":"            val ackReceived = withTimeoutOrNull(timeoutMs) {"},{"type":"MODIFY","lineNumber":530,"content":"            // cancel collector and resend jobs","oldContent":"            // cancel collector and resend jobs"},{"type":"MODIFY","lineNumber":548,"content":"    suspend fun startMission(firstSeq: Int = 0, lastSeq: Int = 0) {","oldContent":"    suspend fun startMission() {"},{"type":"DELETE","lineNumber":553,"oldContent":"            _lastFailure.value = e"},{"type":"DELETE","lineNumber":555,"oldContent":"            throw e"},{"type":"DELETE","lineNumber":556,"oldContent":"        }"},{"type":"DELETE","lineNumber":558,"oldContent":"    }"},{"type":"DELETE","lineNumber":561,"oldContent":"}"},{"type":"DELETE","lineNumber":562,"oldContent":""},{"type":"DELETE","lineNumber":563,"oldContent":""},{"type":"DELETE","lineNumber":564,"oldContent":"            // Also send MISSION_START command to be explicit (some firmwares require it)"},{"type":"INSERT","lineNumber":557,"content":"            // Send MISSION_START with first and last seq"},{"type":"DELETE","lineNumber":566,"oldContent":"                sendCommand(MavCmd.MISSION_START, 0f, 0f, 0f, 0f, 0f, 0f, 0f)"},{"type":"DELETE","lineNumber":567,"oldContent":"                Log.i(\"MavlinkRepo\", \"Sent MISSION_START command\")"},{"type":"INSERT","lineNumber":559,"content":"                // param1 = first_seq, param2 = last_seq"},{"type":"INSERT","lineNumber":560,"content":"                sendCommand(MavCmd.MISSION_START, firstSeq.toFloat(), lastSeq.toFloat())"},{"type":"INSERT","lineNumber":561,"content":"                Log.i(\"MavlinkRepo\", \"Sent MISSION_START command first=$firstSeq last=$lastSeq\")"},{"type":"INSERT","lineNumber":567,"content":"            _lastFailure.value = e"},{"type":"INSERT","lineNumber":568,"content":"            throw e"},{"type":"INSERT","lineNumber":569,"content":"        }"},{"type":"INSERT","lineNumber":570,"content":"    }"},{"type":"INSERT","lineNumber":572,"content":""},{"type":"INSERT","lineNumber":573,"content":"}"},{"type":"INSERT","lineNumber":574,"content":""}]},{"timestamp":1757915700627,"changes":[{"type":"DELETE","lineNumber":11,"oldContent":"import kotlinx.coroutines.CompletableDeferred"},{"type":"DELETE","lineNumber":16,"oldContent":"import kotlinx.coroutines.withTimeout"},{"type":"DELETE","lineNumber":17,"oldContent":"import kotlinx.coroutines.withTimeoutOrNull"},{"type":"DELETE","lineNumber":19,"oldContent":"// MAVLink flight modes (ArduPilot values)"},{"type":"DELETE","lineNumber":20,"oldContent":"object MavMode {"},{"type":"DELETE","lineNumber":21,"oldContent":"    val AUTO: UInt = 3u"},{"type":"DELETE","lineNumber":22,"oldContent":"    // Add other modes as needed"},{"type":"DELETE","lineNumber":23,"oldContent":"}"},{"type":"DELETE","lineNumber":24,"oldContent":""},{"type":"DELETE","lineNumber":297,"oldContent":"        )"},{"type":"DELETE","lineNumber":299,"oldContent":"            connection.trySendUnsignedV2("},{"type":"INSERT","lineNumber":289,"content":"        )"},{"type":"INSERT","lineNumber":291,"content":"            connection.trySendUnsignedV2("},{"type":"DELETE","lineNumber":327,"oldContent":"    suspend fun changeMode(mode: UInt) {"},{"type":"INSERT","lineNumber":318,"content":"    suspend fun changeMode(mode: MavMode) {"},{"type":"DELETE","lineNumber":330,"oldContent":"            mode.toFloat(),"},{"type":"INSERT","lineNumber":321,"content":"            mode.value.toFloat(),"},{"type":"DELETE","lineNumber":352,"oldContent":"    suspend fun uploadMission(missionItems: List<MissionItemInt>) {"},{"type":"DELETE","lineNumber":353,"oldContent":"        if (!state.value.fcuDetected) {"},{"type":"DELETE","lineNumber":354,"oldContent":"            Log.e(\"MavlinkRepo\", \"FCU not detected, cannot upload mission\")"},{"type":"DELETE","lineNumber":355,"oldContent":"            throw IllegalStateException(\"FCU not detected\")"},{"type":"DELETE","lineNumber":356,"oldContent":"        }"},{"type":"DELETE","lineNumber":357,"oldContent":"    suspend fun arm() {"},{"type":"DELETE","lineNumber":358,"oldContent":"            // Send MissionCount"},{"type":"DELETE","lineNumber":359,"oldContent":"            val missionCount = MissionCount("},{"type":"DELETE","lineNumber":360,"oldContent":"                targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":361,"oldContent":"                targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":362,"oldContent":"                count = missionItems.size.toUShort()"},{"type":"DELETE","lineNumber":363,"oldContent":"            )"},{"type":"DELETE","lineNumber":364,"oldContent":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionCount)"},{"type":"DELETE","lineNumber":365,"oldContent":"            // Send each MissionItemInt"},{"type":"DELETE","lineNumber":366,"oldContent":"            missionItems.forEachIndexed { index, item ->"},{"type":"DELETE","lineNumber":367,"oldContent":"                val missionItem = item.copy("},{"type":"DELETE","lineNumber":368,"oldContent":"                    targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":369,"oldContent":"                    targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":370,"oldContent":"                    seq = index.toUShort()"},{"type":"DELETE","lineNumber":371,"oldContent":"                )"},{"type":"DELETE","lineNumber":372,"oldContent":"                connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"DELETE","lineNumber":373,"oldContent":"                delay(50) // Small delay for reliability"},{"type":"DELETE","lineNumber":374,"oldContent":"            }"},{"type":"DELETE","lineNumber":375,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":376,"oldContent":"            Log.e(\"MavlinkRepo\", \"Mission upload failed\", e)"},{"type":"DELETE","lineNumber":377,"oldContent":"            _lastFailure.value = e"},{"type":"DELETE","lineNumber":378,"oldContent":"            throw e"},{"type":"DELETE","lineNumber":379,"oldContent":"        }"},{"type":"DELETE","lineNumber":380,"oldContent":"    }"},{"type":"DELETE","lineNumber":382,"oldContent":"    /**"},{"type":"DELETE","lineNumber":383,"oldContent":"     * Uploads a mission using the MAVLink mission protocol handshake."},{"type":"DELETE","lineNumber":384,"oldContent":"     * Returns true if ACK received, false otherwise."},{"type":"DELETE","lineNumber":385,"oldContent":"     */"},{"type":"DELETE","lineNumber":386,"oldContent":"    suspend fun uploadMissionWithAck(missionItems: List<MissionItemInt>, timeoutMs: Long = 15000): Boolean {"},{"type":"DELETE","lineNumber":387,"oldContent":"        if (!state.value.fcuDetected) {"},{"type":"DELETE","lineNumber":388,"oldContent":"            Log.e(\"MavlinkRepo\", \"FCU not detected, cannot upload mission\")"},{"type":"DELETE","lineNumber":389,"oldContent":"            throw IllegalStateException(\"FCU not detected\")"},{"type":"DELETE","lineNumber":390,"oldContent":"        }"},{"type":"DELETE","lineNumber":391,"oldContent":"        if (missionItems.isEmpty()) {"},{"type":"DELETE","lineNumber":392,"oldContent":"            Log.w(\"MavlinkRepo\", \"No mission items to upload\")"},{"type":"DELETE","lineNumber":393,"oldContent":"            return false"},{"type":"DELETE","lineNumber":394,"oldContent":"        }"},{"type":"DELETE","lineNumber":395,"oldContent":""},{"type":"DELETE","lineNumber":396,"oldContent":"        try {"},{"type":"DELETE","lineNumber":397,"oldContent":"            // Send MissionCount"},{"type":"DELETE","lineNumber":398,"oldContent":"            val missionCount = MissionCount("},{"type":"DELETE","lineNumber":399,"oldContent":"                targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":400,"oldContent":"                targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":401,"oldContent":"                count = missionItems.size.toUShort()"},{"type":"DELETE","lineNumber":402,"oldContent":"            )"},{"type":"DELETE","lineNumber":403,"oldContent":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionCount)"},{"type":"DELETE","lineNumber":404,"oldContent":"            Log.i(\"MavlinkRepo\", \"Sent MISSION_COUNT=${missionItems.size}\")"},{"type":"DELETE","lineNumber":405,"oldContent":""},{"type":"DELETE","lineNumber":406,"oldContent":"            val ackDeferred = CompletableDeferred<Boolean>()"},{"type":"DELETE","lineNumber":407,"oldContent":"            val sentSeqs = mutableSetOf<Int>()"},{"type":"DELETE","lineNumber":408,"oldContent":"            var firstRequestReceived = false"},{"type":"DELETE","lineNumber":409,"oldContent":""},{"type":"DELETE","lineNumber":410,"oldContent":"            // Resend MISSION_COUNT periodically until first request or timeout"},{"type":"DELETE","lineNumber":411,"oldContent":"            val resendJob = AppScope.launch {"},{"type":"DELETE","lineNumber":412,"oldContent":"                while (isActive && !firstRequestReceived && !ackDeferred.isCompleted) {"},{"type":"DELETE","lineNumber":413,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":414,"oldContent":"                        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionCount)"},{"type":"DELETE","lineNumber":415,"oldContent":"                        Log.d(\"MavlinkRepo\", \"Resent MISSION_COUNT\")"},{"type":"DELETE","lineNumber":416,"oldContent":"                    } catch (e: Exception) {"},{"type":"DELETE","lineNumber":417,"oldContent":"                        Log.e(\"MavlinkRepo\", \"Failed to resend MISSION_COUNT\", e)"},{"type":"DELETE","lineNumber":418,"oldContent":"                    }"},{"type":"DELETE","lineNumber":419,"oldContent":"                    kotlinx.coroutines.delay(700)"},{"type":"DELETE","lineNumber":420,"oldContent":"                }"},{"type":"DELETE","lineNumber":421,"oldContent":"            }"},{"type":"DELETE","lineNumber":422,"oldContent":""},{"type":"DELETE","lineNumber":423,"oldContent":"            val job = AppScope.launch {"},{"type":"DELETE","lineNumber":424,"oldContent":"            val job = AppScope.launch {"},{"type":"DELETE","lineNumber":425,"oldContent":"                connection.mavFrame"},{"type":"DELETE","lineNumber":426,"oldContent":"                    //.filter { it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":427,"oldContent":"                    .collect { frame ->"},{"type":"DELETE","lineNumber":428,"oldContent":"                        val senderSys = frame.systemId"},{"type":"DELETE","lineNumber":429,"oldContent":"                        val senderComp = frame.componentId"},{"type":"DELETE","lineNumber":430,"oldContent":"                        when (val msg = frame.message) {"},{"type":"DELETE","lineNumber":431,"oldContent":"                            is MissionRequestInt -> {"},{"type":"DELETE","lineNumber":432,"oldContent":"                                Log.d(\"MavlinkRepo\", \"Received MissionRequestInt from sys=$senderSys comp=$senderComp seq=${msg.seq}\")"},{"type":"DELETE","lineNumber":433,"oldContent":"                                firstRequestReceived = true"},{"type":"DELETE","lineNumber":434,"oldContent":"                                val seq = msg.seq.toInt()"},{"type":"DELETE","lineNumber":435,"oldContent":"                                if (seq < 0 || seq >= missionItems.size) {"},{"type":"DELETE","lineNumber":436,"oldContent":"                                    Log.w(\"MavlinkRepo\", \"FC requested invalid seq=$seq (MissionRequestInt)\")"},{"type":"DELETE","lineNumber":437,"oldContent":"                                    return@collect"},{"type":"DELETE","lineNumber":438,"oldContent":"                                }"},{"type":"DELETE","lineNumber":439,"oldContent":"                                if (sentSeqs.contains(seq)) {"},{"type":"DELETE","lineNumber":440,"oldContent":"                                    Log.i(\"MavlinkRepo\", \"Already sent seq=$seq, ignoring\")"},{"type":"DELETE","lineNumber":441,"oldContent":"                                    return@collect"},{"type":"DELETE","lineNumber":442,"oldContent":"                                }"},{"type":"DELETE","lineNumber":443,"oldContent":"                                val item = missionItems[seq]"},{"type":"DELETE","lineNumber":444,"oldContent":"                                val missionItem = item.copy("},{"type":"DELETE","lineNumber":445,"oldContent":"                                    targetSystem = senderSys.toUByte(),"},{"type":"DELETE","lineNumber":446,"oldContent":"                                    targetComponent = senderComp.toUByte(),"},{"type":"DELETE","lineNumber":447,"oldContent":"                                    seq = seq.toUShort()"},{"type":"DELETE","lineNumber":448,"oldContent":"                                )"},{"type":"DELETE","lineNumber":449,"oldContent":"                                try {"},{"type":"DELETE","lineNumber":450,"oldContent":"                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"DELETE","lineNumber":451,"oldContent":"                                    sentSeqs.add(seq)"},{"type":"DELETE","lineNumber":452,"oldContent":"                                    Log.i(\"MavlinkRepo\", \"Sent MISSION_ITEM_INT seq=$seq to sys=$senderSys comp=$senderComp\")"},{"type":"DELETE","lineNumber":453,"oldContent":"                                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":454,"oldContent":"                                    Log.e(\"MavlinkRepo\", \"Failed to send mission item seq=$seq\", e)"},{"type":"DELETE","lineNumber":455,"oldContent":"                                }"},{"type":"DELETE","lineNumber":456,"oldContent":"                            }"},{"type":"DELETE","lineNumber":457,"oldContent":"                            is MissionRequest -> {"},{"type":"DELETE","lineNumber":458,"oldContent":"                                Log.d(\"MavlinkRepo\", \"Received MissionRequest (float) from sys=$senderSys comp=$senderComp seq=${msg.seq}\")"},{"type":"DELETE","lineNumber":459,"oldContent":"                                val seq = msg.seq.toInt()"},{"type":"DELETE","lineNumber":460,"oldContent":"                                val seq = msg.seq.toInt()"},{"type":"DELETE","lineNumber":461,"oldContent":"                                if (seq < 0 || seq >= missionItems.size) {"},{"type":"DELETE","lineNumber":462,"oldContent":"                                    Log.w(\"MavlinkRepo\", \"FC requested invalid seq=$seq (MissionRequest)\")"},{"type":"DELETE","lineNumber":463,"oldContent":"                                    return@collect"},{"type":"DELETE","lineNumber":464,"oldContent":"                                }"},{"type":"DELETE","lineNumber":465,"oldContent":"                                if (sentSeqs.contains(seq)) {"},{"type":"DELETE","lineNumber":466,"oldContent":"                                    Log.i(\"MavlinkRepo\", \"Already sent seq=$seq, ignoring\")"},{"type":"DELETE","lineNumber":467,"oldContent":"                                    return@collect"},{"type":"DELETE","lineNumber":468,"oldContent":"                                }"},{"type":"DELETE","lineNumber":469,"oldContent":"                                val itemInt = missionItems[seq]"},{"type":"DELETE","lineNumber":470,"oldContent":"                                // Send MissionItemInt even if FC sent MissionRequest (float) because many FCs expect INT"},{"type":"DELETE","lineNumber":471,"oldContent":"                                val missionItemInt = itemInt.copy("},{"type":"DELETE","lineNumber":472,"oldContent":"                                    targetSystem = senderSys.toUByte(),"},{"type":"DELETE","lineNumber":473,"oldContent":"                                    targetComponent = senderComp.toUByte(),"},{"type":"DELETE","lineNumber":474,"oldContent":"                                    seq = seq.toUShort()"},{"type":"DELETE","lineNumber":475,"oldContent":"                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItemInt)"},{"type":"DELETE","lineNumber":476,"oldContent":"                                    Log.i(\"MavlinkRepo\", \"Sent MISSION_ITEM_INT seq=$seq to sys=$senderSys comp=$senderComp (responding to MissionRequest)\")"},{"type":"DELETE","lineNumber":477,"oldContent":"                                )"},{"type":"DELETE","lineNumber":478,"oldContent":"                                try {"},{"type":"DELETE","lineNumber":479,"oldContent":"                                    Log.e(\"MavlinkRepo\", \"Failed to send mission item(seq=$seq) as MissionItemInt\", e)"},{"type":"DELETE","lineNumber":480,"oldContent":"                                    sentSeqs.add(seq)"},{"type":"DELETE","lineNumber":481,"oldContent":"                                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":482,"oldContent":"                                }"},{"type":"DELETE","lineNumber":483,"oldContent":"                                Log.i(\"MavlinkRepo\", \"Received MISSION_ACK from sys=$senderSys comp=$senderComp: ${msg.type}\")"},{"type":"DELETE","lineNumber":484,"oldContent":"                            }"},{"type":"DELETE","lineNumber":485,"oldContent":"                            is MissionAck -> {"},{"type":"DELETE","lineNumber":486,"oldContent":"                                if (!ackDeferred.isCompleted) ackDeferred.complete(true)"},{"type":"DELETE","lineNumber":487,"oldContent":"                                return@collect"},{"type":"DELETE","lineNumber":488,"oldContent":"                            }"},{"type":"DELETE","lineNumber":489,"oldContent":"                            else -> {"},{"type":"DELETE","lineNumber":490,"oldContent":"                                // ignore other messages"},{"type":"DELETE","lineNumber":491,"oldContent":"                        }"},{"type":"DELETE","lineNumber":492,"oldContent":"                            }"},{"type":"DELETE","lineNumber":493,"oldContent":"                    }"},{"type":"DELETE","lineNumber":494,"oldContent":"            }"},{"type":"DELETE","lineNumber":495,"oldContent":""},{"type":"DELETE","lineNumber":496,"oldContent":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"DELETE","lineNumber":497,"oldContent":"            val firstRequestTimeout = 2500L"},{"type":"DELETE","lineNumber":498,"oldContent":"            val startWait = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":499,"oldContent":"            while (!firstRequestReceived && !ackDeferred.isCompleted && System.currentTimeMillis() - startWait < firstRequestTimeout) {"},{"type":"DELETE","lineNumber":500,"oldContent":"                delay(100)"},{"type":"DELETE","lineNumber":501,"oldContent":"            }"},{"type":"DELETE","lineNumber":502,"oldContent":""},{"type":"DELETE","lineNumber":503,"oldContent":"            if (!firstRequestReceived) {"},{"type":"DELETE","lineNumber":504,"oldContent":"                Log.w(\"MavlinkRepo\", \"No MissionRequest received within $firstRequestTimeout ms; falling back to send all items\")"},{"type":"DELETE","lineNumber":505,"oldContent":"                // Send all items sequentially"},{"type":"DELETE","lineNumber":506,"oldContent":"                        targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":507,"oldContent":"                        seq = seq.toUShort()"},{"type":"DELETE","lineNumber":508,"oldContent":"                for (seq in 0 until missionItems.size) {"},{"type":"DELETE","lineNumber":509,"oldContent":"                    )"},{"type":"DELETE","lineNumber":510,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":511,"oldContent":"                    if (sentSeqs.contains(seq)) continue"},{"type":"DELETE","lineNumber":512,"oldContent":"                        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"DELETE","lineNumber":513,"oldContent":"                        sentSeqs.add(seq)"},{"type":"DELETE","lineNumber":514,"oldContent":"                    val item = missionItems[seq]"},{"type":"DELETE","lineNumber":515,"oldContent":"                        Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_ITEM_INT seq=$seq\")"},{"type":"DELETE","lineNumber":516,"oldContent":"                        delay(100)"},{"type":"DELETE","lineNumber":517,"oldContent":"                    val missionItem = item.copy("},{"type":"DELETE","lineNumber":518,"oldContent":"                    } catch (e: Exception) {"},{"type":"DELETE","lineNumber":519,"oldContent":"                        Log.e(\"MavlinkRepo\", \"Fallback: Failed to send mission item seq=$seq\", e)"},{"type":"DELETE","lineNumber":520,"oldContent":"                        targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":521,"oldContent":"                    }"},{"type":"DELETE","lineNumber":522,"oldContent":"                }"},{"type":"DELETE","lineNumber":523,"oldContent":"            // Wait for ACK with timeout"},{"type":"DELETE","lineNumber":524,"oldContent":"            }"},{"type":"DELETE","lineNumber":525,"oldContent":"            val ackReceived = withTimeoutOrNull(timeoutMs) {"},{"type":"DELETE","lineNumber":526,"oldContent":""},{"type":"DELETE","lineNumber":527,"oldContent":"                ackDeferred.await()"},{"type":"DELETE","lineNumber":528,"oldContent":"            } ?: false"},{"type":"DELETE","lineNumber":529,"oldContent":"            // cancel collector and resend jobs"},{"type":"DELETE","lineNumber":530,"oldContent":"            // cancel collector and resend jobs"},{"type":"DELETE","lineNumber":531,"oldContent":"            job.cancel()"},{"type":"DELETE","lineNumber":532,"oldContent":"            resendJob.cancel()"},{"type":"DELETE","lineNumber":533,"oldContent":""},{"type":"DELETE","lineNumber":534,"oldContent":"            if (ackReceived) {"},{"type":"DELETE","lineNumber":535,"oldContent":"                Log.i(\"MavlinkRepo\", \"Mission upload acknowledged by FCU\")"},{"type":"DELETE","lineNumber":536,"oldContent":"                return true"},{"type":"DELETE","lineNumber":537,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":538,"oldContent":"                Log.e(\"MavlinkRepo\", \"Mission upload timed out waiting for ACK\")"},{"type":"DELETE","lineNumber":539,"oldContent":"                return false"},{"type":"DELETE","lineNumber":540,"oldContent":"            }"},{"type":"DELETE","lineNumber":541,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":542,"oldContent":"            Log.e(\"MavlinkRepo\", \"Mission upload failed\", e)"},{"type":"DELETE","lineNumber":543,"oldContent":"            _lastFailure.value = e"},{"type":"DELETE","lineNumber":544,"oldContent":"            return false"},{"type":"DELETE","lineNumber":545,"oldContent":"        }"},{"type":"DELETE","lineNumber":546,"oldContent":"    }"},{"type":"DELETE","lineNumber":547,"oldContent":""},{"type":"DELETE","lineNumber":548,"oldContent":"    suspend fun startMission(firstSeq: Int = 0, lastSeq: Int = 0) {"},{"type":"DELETE","lineNumber":549,"oldContent":"        if (!state.value.fcuDetected) {"},{"type":"DELETE","lineNumber":550,"oldContent":"            Log.e(\"MavlinkRepo\", \"FCU not detected, cannot start mission\")"},{"type":"DELETE","lineNumber":551,"oldContent":"            throw IllegalStateException(\"FCU not detected\")"},{"type":"DELETE","lineNumber":552,"oldContent":"        }"},{"type":"DELETE","lineNumber":553,"oldContent":"        try {"},{"type":"DELETE","lineNumber":554,"oldContent":"            // Send MISSION_START with first and last seq"},{"type":"DELETE","lineNumber":555,"oldContent":"            // Try switching to AUTO mode first"},{"type":"DELETE","lineNumber":556,"oldContent":"                // param1 = first_seq, param2 = last_seq"},{"type":"DELETE","lineNumber":557,"oldContent":"            changeMode(MavMode.AUTO)"},{"type":"DELETE","lineNumber":558,"oldContent":"                sendCommand(MavCmd.MISSION_START, firstSeq.toFloat(), lastSeq.toFloat())"},{"type":"DELETE","lineNumber":559,"oldContent":""},{"type":"DELETE","lineNumber":560,"oldContent":"                Log.i(\"MavlinkRepo\", \"Sent MISSION_START command first=$firstSeq last=$lastSeq\")"},{"type":"DELETE","lineNumber":561,"oldContent":"            try {"},{"type":"DELETE","lineNumber":562,"oldContent":"            _lastFailure.value = e"},{"type":"DELETE","lineNumber":563,"oldContent":"            throw e"},{"type":"DELETE","lineNumber":564,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":565,"oldContent":"        }"},{"type":"DELETE","lineNumber":566,"oldContent":"                Log.w(\"MavlinkRepo\", \"Failed to send MISSION_START command, mode change may still work\", e)"},{"type":"DELETE","lineNumber":567,"oldContent":"    }"},{"type":"DELETE","lineNumber":568,"oldContent":"            }"},{"type":"DELETE","lineNumber":569,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":570,"oldContent":""},{"type":"DELETE","lineNumber":571,"oldContent":"            Log.e(\"MavlinkRepo\", \"Start mission failed\", e)"},{"type":"DELETE","lineNumber":574,"oldContent":""}]},{"timestamp":1757915781148,"changes":[{"type":"INSERT","lineNumber":11,"content":"import kotlinx.coroutines.CompletableDeferred"},{"type":"INSERT","lineNumber":16,"content":"import kotlinx.coroutines.withTimeout"},{"type":"INSERT","lineNumber":17,"content":"import kotlinx.coroutines.withTimeoutOrNull"},{"type":"INSERT","lineNumber":19,"content":"// MAVLink flight modes (ArduPilot values)"},{"type":"INSERT","lineNumber":20,"content":"object MavMode {"},{"type":"INSERT","lineNumber":21,"content":"    val AUTO: UInt = 3u"},{"type":"INSERT","lineNumber":22,"content":"    // Add other modes as needed"},{"type":"INSERT","lineNumber":23,"content":"}"},{"type":"INSERT","lineNumber":24,"content":""},{"type":"DELETE","lineNumber":280,"oldContent":"        )"},{"type":"DELETE","lineNumber":283,"oldContent":"            connection.trySendUnsignedV2("},{"type":"INSERT","lineNumber":298,"content":"        )"},{"type":"INSERT","lineNumber":300,"content":"            connection.trySendUnsignedV2("},{"type":"DELETE","lineNumber":309,"oldContent":"    suspend fun changeMode(mode: MavMode) {"},{"type":"DELETE","lineNumber":313,"oldContent":"            mode.value.toFloat(),"},{"type":"INSERT","lineNumber":327,"content":"    suspend fun changeMode(mode: UInt) {"},{"type":"INSERT","lineNumber":330,"content":"            mode.toFloat(),"},{"type":"INSERT","lineNumber":352,"content":"    suspend fun uploadMission(missionItems: List<MissionItemInt>) {"},{"type":"INSERT","lineNumber":353,"content":"        if (!state.value.fcuDetected) {"},{"type":"INSERT","lineNumber":354,"content":"            Log.e(\"MavlinkRepo\", \"FCU not detected, cannot upload mission\")"},{"type":"INSERT","lineNumber":355,"content":"            throw IllegalStateException(\"FCU not detected\")"},{"type":"INSERT","lineNumber":356,"content":"        }"},{"type":"INSERT","lineNumber":357,"content":"        try {"},{"type":"INSERT","lineNumber":358,"content":"            // Send MissionCount"},{"type":"INSERT","lineNumber":359,"content":"            val missionCount = MissionCount("},{"type":"INSERT","lineNumber":360,"content":"                targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":361,"content":"                targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":362,"content":"                count = missionItems.size.toUShort()"},{"type":"INSERT","lineNumber":363,"content":"            )"},{"type":"INSERT","lineNumber":364,"content":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionCount)"},{"type":"INSERT","lineNumber":365,"content":"            // Send each MissionItemInt"},{"type":"INSERT","lineNumber":366,"content":"            missionItems.forEachIndexed { index, item ->"},{"type":"INSERT","lineNumber":367,"content":"                val missionItem = item.copy("},{"type":"INSERT","lineNumber":368,"content":"                    targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":369,"content":"                    targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":370,"content":"                    seq = index.toUShort()"},{"type":"INSERT","lineNumber":371,"content":"                )"},{"type":"INSERT","lineNumber":372,"content":"                connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"INSERT","lineNumber":373,"content":"                delay(50) // Small delay for reliability"},{"type":"INSERT","lineNumber":374,"content":"            }"},{"type":"INSERT","lineNumber":375,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":376,"content":"            Log.e(\"MavlinkRepo\", \"Mission upload failed\", e)"},{"type":"INSERT","lineNumber":377,"content":"            _lastFailure.value = e"},{"type":"INSERT","lineNumber":378,"content":"            throw e"},{"type":"INSERT","lineNumber":379,"content":"        }"},{"type":"INSERT","lineNumber":380,"content":"    }"},{"type":"INSERT","lineNumber":382,"content":"    /**"},{"type":"INSERT","lineNumber":383,"content":"     * Uploads a mission using the MAVLink mission protocol handshake."},{"type":"INSERT","lineNumber":384,"content":"     * Returns true if ACK received, false otherwise."},{"type":"INSERT","lineNumber":385,"content":"     */"},{"type":"INSERT","lineNumber":386,"content":"    suspend fun uploadMissionWithAck(missionItems: List<MissionItemInt>, timeoutMs: Long = 15000): Boolean {"},{"type":"INSERT","lineNumber":387,"content":"        if (!state.value.fcuDetected) {"},{"type":"INSERT","lineNumber":388,"content":"            Log.e(\"MavlinkRepo\", \"FCU not detected, cannot upload mission\")"},{"type":"INSERT","lineNumber":389,"content":"            throw IllegalStateException(\"FCU not detected\")"},{"type":"INSERT","lineNumber":390,"content":"        }"},{"type":"INSERT","lineNumber":391,"content":"        if (missionItems.isEmpty()) {"},{"type":"INSERT","lineNumber":392,"content":"            Log.w(\"MavlinkRepo\", \"No mission items to upload\")"},{"type":"INSERT","lineNumber":393,"content":"            return false"},{"type":"INSERT","lineNumber":394,"content":"        }"},{"type":"INSERT","lineNumber":395,"content":""},{"type":"INSERT","lineNumber":396,"content":"        try {"},{"type":"INSERT","lineNumber":397,"content":"            // Send MissionCount"},{"type":"INSERT","lineNumber":398,"content":"            val missionCount = MissionCount("},{"type":"INSERT","lineNumber":399,"content":"                targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":400,"content":"                targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":401,"content":"                count = missionItems.size.toUShort()"},{"type":"INSERT","lineNumber":402,"content":"            )"},{"type":"INSERT","lineNumber":403,"content":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionCount)"},{"type":"INSERT","lineNumber":404,"content":"            Log.i(\"MavlinkRepo\", \"Sent MISSION_COUNT=${missionItems.size}\")"},{"type":"INSERT","lineNumber":405,"content":""},{"type":"INSERT","lineNumber":406,"content":"            val ackDeferred = CompletableDeferred<Boolean>()"},{"type":"INSERT","lineNumber":407,"content":"            val sentSeqs = mutableSetOf<Int>()"},{"type":"INSERT","lineNumber":408,"content":"            var firstRequestReceived = false"},{"type":"INSERT","lineNumber":409,"content":""},{"type":"INSERT","lineNumber":410,"content":"            // Resend MISSION_COUNT periodically until first request or timeout"},{"type":"INSERT","lineNumber":411,"content":"            val resendJob = AppScope.launch {"},{"type":"INSERT","lineNumber":412,"content":"                while (isActive && !firstRequestReceived && !ackDeferred.isCompleted) {"},{"type":"INSERT","lineNumber":413,"content":"                    try {"},{"type":"INSERT","lineNumber":414,"content":"                        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionCount)"},{"type":"INSERT","lineNumber":415,"content":"                        Log.d(\"MavlinkRepo\", \"Resent MISSION_COUNT\")"},{"type":"INSERT","lineNumber":416,"content":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":417,"content":"                        Log.e(\"MavlinkRepo\", \"Failed to resend MISSION_COUNT\", e)"},{"type":"INSERT","lineNumber":418,"content":"                    }"},{"type":"INSERT","lineNumber":419,"content":"                    kotlinx.coroutines.delay(700)"},{"type":"INSERT","lineNumber":420,"content":"                }"},{"type":"INSERT","lineNumber":421,"content":"            }"},{"type":"INSERT","lineNumber":422,"content":""},{"type":"INSERT","lineNumber":423,"content":"            // Collector job"},{"type":"INSERT","lineNumber":424,"content":"            val job = AppScope.launch {"},{"type":"INSERT","lineNumber":425,"content":"                connection.mavFrame"},{"type":"INSERT","lineNumber":426,"content":"                    //.filter { it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":427,"content":"                    .collect { frame ->"},{"type":"INSERT","lineNumber":428,"content":"                        val senderSys = frame.systemId"},{"type":"INSERT","lineNumber":429,"content":"                        val senderComp = frame.componentId"},{"type":"INSERT","lineNumber":430,"content":"                        when (val msg = frame.message) {"},{"type":"INSERT","lineNumber":431,"content":"                            is MissionRequestInt -> {"},{"type":"INSERT","lineNumber":432,"content":"                                Log.d(\"MavlinkRepo\", \"Received MissionRequestInt from sys=$senderSys comp=$senderComp seq=${msg.seq}\")"},{"type":"INSERT","lineNumber":433,"content":"                                firstRequestReceived = true"},{"type":"INSERT","lineNumber":434,"content":"                                val seq = msg.seq.toInt()"},{"type":"INSERT","lineNumber":435,"content":"                                if (seq < 0 || seq >= missionItems.size) {"},{"type":"INSERT","lineNumber":436,"content":"                                    Log.w(\"MavlinkRepo\", \"FC requested invalid seq=$seq (MissionRequestInt)\")"},{"type":"INSERT","lineNumber":437,"content":"                                    return@collect"},{"type":"INSERT","lineNumber":438,"content":"                                }"},{"type":"INSERT","lineNumber":439,"content":"                                if (sentSeqs.contains(seq)) {"},{"type":"INSERT","lineNumber":440,"content":"                                    Log.i(\"MavlinkRepo\", \"Already sent seq=$seq, ignoring\")"},{"type":"INSERT","lineNumber":441,"content":"                                    return@collect"},{"type":"INSERT","lineNumber":442,"content":"                                }"},{"type":"INSERT","lineNumber":443,"content":"                                val item = missionItems[seq]"},{"type":"INSERT","lineNumber":444,"content":"                                val missionItem = item.copy("},{"type":"INSERT","lineNumber":445,"content":"                                    targetSystem = senderSys.toUByte(),"},{"type":"INSERT","lineNumber":446,"content":"                                    targetComponent = senderComp.toUByte(),"},{"type":"INSERT","lineNumber":447,"content":"                                    seq = seq.toUShort()"},{"type":"INSERT","lineNumber":448,"content":"                                )"},{"type":"INSERT","lineNumber":449,"content":"                                try {"},{"type":"INSERT","lineNumber":450,"content":"                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"INSERT","lineNumber":451,"content":"                                    sentSeqs.add(seq)"},{"type":"INSERT","lineNumber":452,"content":"                                    Log.i(\"MavlinkRepo\", \"Sent MISSION_ITEM_INT seq=$seq to sys=$senderSys comp=$senderComp\")"},{"type":"INSERT","lineNumber":453,"content":"                                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":454,"content":"                                    Log.e(\"MavlinkRepo\", \"Failed to send mission item seq=$seq\", e)"},{"type":"INSERT","lineNumber":455,"content":"                                }"},{"type":"INSERT","lineNumber":456,"content":"                            }"},{"type":"INSERT","lineNumber":457,"content":"                            is MissionRequest -> {"},{"type":"INSERT","lineNumber":458,"content":"                                Log.d(\"MavlinkRepo\", \"Received MissionRequest (float) from sys=$senderSys comp=$senderComp seq=${msg.seq}\")"},{"type":"INSERT","lineNumber":459,"content":"                                firstRequestReceived = true"},{"type":"INSERT","lineNumber":460,"content":"                                val seq = msg.seq.toInt()"},{"type":"INSERT","lineNumber":461,"content":"                                if (seq < 0 || seq >= missionItems.size) {"},{"type":"INSERT","lineNumber":462,"content":"                                    Log.w(\"MavlinkRepo\", \"FC requested invalid seq=$seq (MissionRequest)\")"},{"type":"INSERT","lineNumber":463,"content":"                                    return@collect"},{"type":"INSERT","lineNumber":464,"content":"                                }"},{"type":"INSERT","lineNumber":465,"content":"                                if (sentSeqs.contains(seq)) {"},{"type":"INSERT","lineNumber":466,"content":"                                    Log.i(\"MavlinkRepo\", \"Already sent seq=$seq, ignoring\")"},{"type":"INSERT","lineNumber":467,"content":"                                    return@collect"},{"type":"INSERT","lineNumber":468,"content":"                                }"},{"type":"INSERT","lineNumber":469,"content":"                                val itemInt = missionItems[seq]"},{"type":"INSERT","lineNumber":470,"content":"                                // Send MissionItemInt even if FC sent MissionRequest (float) because many FCs expect INT"},{"type":"INSERT","lineNumber":471,"content":"                                val missionItemInt = itemInt.copy("},{"type":"INSERT","lineNumber":472,"content":"                                    targetSystem = senderSys.toUByte(),"},{"type":"INSERT","lineNumber":473,"content":"                                    targetComponent = senderComp.toUByte(),"},{"type":"INSERT","lineNumber":474,"content":"                                    seq = seq.toUShort()"},{"type":"INSERT","lineNumber":475,"content":"                                )"},{"type":"INSERT","lineNumber":476,"content":"                                try {"},{"type":"INSERT","lineNumber":477,"content":"                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItemInt)"},{"type":"INSERT","lineNumber":478,"content":"                                    sentSeqs.add(seq)"},{"type":"INSERT","lineNumber":479,"content":"                                    Log.i(\"MavlinkRepo\", \"Sent MISSION_ITEM_INT seq=$seq to sys=$senderSys comp=$senderComp (responding to MissionRequest)\")"},{"type":"INSERT","lineNumber":480,"content":"                                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":481,"content":"                                    Log.e(\"MavlinkRepo\", \"Failed to send mission item(seq=$seq) as MissionItemInt\", e)"},{"type":"INSERT","lineNumber":482,"content":"                                }"},{"type":"INSERT","lineNumber":483,"content":"                            }"},{"type":"INSERT","lineNumber":484,"content":"                            is MissionAck -> {"},{"type":"INSERT","lineNumber":485,"content":"                                Log.i(\"MavlinkRepo\", \"Received MISSION_ACK from sys=$senderSys comp=$senderComp: ${msg.type}\")"},{"type":"INSERT","lineNumber":486,"content":"                                if (!ackDeferred.isCompleted) ackDeferred.complete(true)"},{"type":"INSERT","lineNumber":487,"content":"                                return@collect"},{"type":"INSERT","lineNumber":488,"content":"                            }"},{"type":"INSERT","lineNumber":489,"content":"                            else -> {"},{"type":"INSERT","lineNumber":490,"content":"                                // ignore other messages"},{"type":"INSERT","lineNumber":491,"content":"                            }"},{"type":"INSERT","lineNumber":492,"content":"                        }"},{"type":"INSERT","lineNumber":493,"content":"                    }"},{"type":"INSERT","lineNumber":494,"content":"            }"},{"type":"INSERT","lineNumber":495,"content":""},{"type":"INSERT","lineNumber":496,"content":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"INSERT","lineNumber":497,"content":"            val firstRequestTimeout = 2500L"},{"type":"INSERT","lineNumber":498,"content":"            val startWait = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":499,"content":"            while (!firstRequestReceived && !ackDeferred.isCompleted && System.currentTimeMillis() - startWait < firstRequestTimeout) {"},{"type":"INSERT","lineNumber":500,"content":"                delay(100)"},{"type":"INSERT","lineNumber":501,"content":"            }"},{"type":"INSERT","lineNumber":502,"content":""},{"type":"INSERT","lineNumber":503,"content":"            if (!firstRequestReceived) {"},{"type":"INSERT","lineNumber":504,"content":"                Log.w(\"MavlinkRepo\", \"No MissionRequest received within $firstRequestTimeout ms; falling back to send all items\")"},{"type":"INSERT","lineNumber":505,"content":"                // Send all items sequentially"},{"type":"INSERT","lineNumber":506,"content":"                for (seq in 0 until missionItems.size) {"},{"type":"INSERT","lineNumber":507,"content":"                    if (sentSeqs.contains(seq)) continue"},{"type":"INSERT","lineNumber":508,"content":"                    val item = missionItems[seq]"},{"type":"INSERT","lineNumber":509,"content":"                    val missionItem = item.copy("},{"type":"INSERT","lineNumber":510,"content":"                        targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":511,"content":"                        targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":512,"content":"                        seq = seq.toUShort()"},{"type":"INSERT","lineNumber":513,"content":"                    )"},{"type":"INSERT","lineNumber":514,"content":"                    try {"},{"type":"INSERT","lineNumber":515,"content":"                        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"INSERT","lineNumber":516,"content":"                        sentSeqs.add(seq)"},{"type":"INSERT","lineNumber":517,"content":"                        Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_ITEM_INT seq=$seq\")"},{"type":"INSERT","lineNumber":518,"content":"                        delay(100)"},{"type":"INSERT","lineNumber":519,"content":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":520,"content":"                        Log.e(\"MavlinkRepo\", \"Fallback: Failed to send mission item seq=$seq\", e)"},{"type":"INSERT","lineNumber":521,"content":"                    }"},{"type":"INSERT","lineNumber":522,"content":"                }"},{"type":"INSERT","lineNumber":523,"content":"            }"},{"type":"INSERT","lineNumber":524,"content":""},{"type":"INSERT","lineNumber":525,"content":"            // Wait for ACK with timeout"},{"type":"INSERT","lineNumber":526,"content":"            val ackReceived = withTimeoutOrNull(timeoutMs) {"},{"type":"INSERT","lineNumber":527,"content":"                ackDeferred.await()"},{"type":"INSERT","lineNumber":528,"content":"            } ?: false"},{"type":"INSERT","lineNumber":529,"content":""},{"type":"INSERT","lineNumber":530,"content":"            // cancel collector and resend jobs"},{"type":"INSERT","lineNumber":531,"content":"            job.cancel()"},{"type":"INSERT","lineNumber":532,"content":"            resendJob.cancel()"},{"type":"INSERT","lineNumber":533,"content":""},{"type":"INSERT","lineNumber":534,"content":"            if (ackReceived) {"},{"type":"INSERT","lineNumber":535,"content":"                Log.i(\"MavlinkRepo\", \"Mission upload acknowledged by FCU\")"},{"type":"INSERT","lineNumber":536,"content":"                return true"},{"type":"INSERT","lineNumber":537,"content":"            } else {"},{"type":"INSERT","lineNumber":538,"content":"                Log.e(\"MavlinkRepo\", \"Mission upload timed out waiting for ACK\")"},{"type":"INSERT","lineNumber":539,"content":"                return false"},{"type":"INSERT","lineNumber":540,"content":"            }"},{"type":"INSERT","lineNumber":541,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":542,"content":"            Log.e(\"MavlinkRepo\", \"Mission upload failed\", e)"},{"type":"INSERT","lineNumber":543,"content":"            _lastFailure.value = e"},{"type":"INSERT","lineNumber":544,"content":"            return false"},{"type":"INSERT","lineNumber":545,"content":"        }"},{"type":"INSERT","lineNumber":546,"content":"    }"},{"type":"INSERT","lineNumber":547,"content":""},{"type":"INSERT","lineNumber":548,"content":"    suspend fun startMission(firstSeq: Int = 0, lastSeq: Int = 0) {"},{"type":"INSERT","lineNumber":549,"content":"        if (!state.value.fcuDetected) {"},{"type":"INSERT","lineNumber":550,"content":"            Log.e(\"MavlinkRepo\", \"FCU not detected, cannot start mission\")"},{"type":"INSERT","lineNumber":551,"content":"            throw IllegalStateException(\"FCU not detected\")"},{"type":"INSERT","lineNumber":552,"content":"        }"},{"type":"INSERT","lineNumber":553,"content":"        try {"},{"type":"INSERT","lineNumber":554,"content":"            // Try switching to AUTO mode first"},{"type":"INSERT","lineNumber":555,"content":"            changeMode(MavMode.AUTO)"},{"type":"INSERT","lineNumber":556,"content":""},{"type":"INSERT","lineNumber":557,"content":"            // Send MISSION_START with first and last seq"},{"type":"INSERT","lineNumber":558,"content":"            try {"},{"type":"INSERT","lineNumber":559,"content":"                // param1 = first_seq, param2 = last_seq"},{"type":"INSERT","lineNumber":560,"content":"                sendCommand(MavCmd.MISSION_START, firstSeq.toFloat(), lastSeq.toFloat())"},{"type":"INSERT","lineNumber":561,"content":"                Log.i(\"MavlinkRepo\", \"Sent MISSION_START command first=$firstSeq last=$lastSeq\")"},{"type":"INSERT","lineNumber":562,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":563,"content":"                Log.w(\"MavlinkRepo\", \"Failed to send MISSION_START command, mode change may still work\", e)"},{"type":"INSERT","lineNumber":564,"content":"            }"},{"type":"INSERT","lineNumber":565,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":566,"content":"            Log.e(\"MavlinkRepo\", \"Start mission failed\", e)"},{"type":"INSERT","lineNumber":567,"content":"            _lastFailure.value = e"},{"type":"INSERT","lineNumber":568,"content":"            throw e"},{"type":"INSERT","lineNumber":569,"content":"        }"},{"type":"INSERT","lineNumber":570,"content":"    }"},{"type":"INSERT","lineNumber":571,"content":""},{"type":"INSERT","lineNumber":572,"content":""}]}]}}}