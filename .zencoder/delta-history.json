{"snapshots":{"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uimain/GcsMap.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uimain/GcsMap.kt","baseContent":"package com.example.aerogcsclone.uimain\n\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Modifier\nimport com.example.aerogcsclone.Telemetry.TelemetryState\nimport com.google.android.gms.maps.CameraUpdateFactory\nimport com.google.android.gms.maps.model.LatLng\nimport com.google.maps.android.compose.*\n\n@Composable\nfun GcsMap(telemetryState: TelemetryState) {\n    var points by remember { mutableStateOf(listOf<LatLng>()) }\n    var polygonClosed by remember { mutableStateOf(false) }\n\n    val cameraPositionState = rememberCameraPositionState()\n\n    // Update camera when telemetry changes (live location)\n    LaunchedEffect(telemetryState.latitude, telemetryState.longitude) {\n        val lat = telemetryState.latitude\n        val lon = telemetryState.longitude\n        if (lat != null && lon != null) {\n            val newPosition = LatLng(lat, lon)\n            cameraPositionState.animate(\n                update = CameraUpdateFactory.newLatLngZoom(newPosition, 16f),\n                durationMs = 1000\n            )\n        }\n    }\n\n    GoogleMap(\n        modifier = Modifier.fillMaxSize(),\n        cameraPositionState = cameraPositionState,\n        onMapClick = { latLng ->\n            if (!polygonClosed) {\n                points = points + latLng\n            }\n        }\n    ) {\n        // Live drone marker\n        val lat = telemetryState.latitude\n        val lon = telemetryState.longitude\n        if (lat != null && lon != null) {\n            Marker(\n                state = MarkerState(position = LatLng(lat, lon)),\n                title = \"Drone Location\"\n            )\n        }\n\n        // User-drawn markers\n        points.forEachIndexed { index, point ->\n            Marker(\n                state = MarkerState(position = point),\n                title = \"Marker ${index + 1}\",\n                onClick = {\n                    if (points.size > 1 && !polygonClosed) {\n                        val last = points.last()\n\n                        if (point == points.first() && points.size > 2) {\n                            points = points + point\n                            polygonClosed = true\n                        } else if (point != last) {\n                            points = points + point\n                        }\n                    }\n                    true\n                }\n            )\n        }\n\n        // Draw polyline (open or closed)\n        if (points.size > 1) {\n            Polyline(\n                points = points,\n                width = 4f\n            )\n        }\n    }\n}\n","baseTimestamp":1757909204070,"deltas":[{"timestamp":1757914278117,"changes":[{"type":"DELETE","lineNumber":11,"oldContent":"fun GcsMap(telemetryState: TelemetryState) {"},{"type":"DELETE","lineNumber":12,"oldContent":"    var points by remember { mutableStateOf(listOf<LatLng>()) }"},{"type":"INSERT","lineNumber":11,"content":"fun GcsMap("},{"type":"INSERT","lineNumber":12,"content":"    telemetryState: TelemetryState,"},{"type":"INSERT","lineNumber":13,"content":"    points: List<LatLng> = emptyList(),"},{"type":"INSERT","lineNumber":14,"content":"    onMapClick: (LatLng) -> Unit = {}"},{"type":"INSERT","lineNumber":15,"content":") {"},{"type":"INSERT","lineNumber":16,"content":"    var internalPoints by remember { mutableStateOf(points) }"},{"type":"INSERT","lineNumber":34,"content":"    // Keep internalPoints in sync when parent points change"},{"type":"INSERT","lineNumber":35,"content":"    LaunchedEffect(points) {"},{"type":"INSERT","lineNumber":36,"content":"        internalPoints = points"},{"type":"INSERT","lineNumber":37,"content":"    }"},{"type":"INSERT","lineNumber":38,"content":""},{"type":"DELETE","lineNumber":35,"oldContent":"                points = points + latLng"},{"type":"INSERT","lineNumber":44,"content":"                // Notify parent"},{"type":"INSERT","lineNumber":45,"content":"                onMapClick(latLng)"},{"type":"INSERT","lineNumber":46,"content":"                // update internal copy for immediate UI feedback"},{"type":"INSERT","lineNumber":47,"content":"                internalPoints = internalPoints + latLng"},{"type":"DELETE","lineNumber":50,"oldContent":"        points.forEachIndexed { index, point ->"},{"type":"INSERT","lineNumber":62,"content":"        internalPoints.forEachIndexed { index, point ->"},{"type":"DELETE","lineNumber":54,"oldContent":"                onClick = {"},{"type":"DELETE","lineNumber":55,"oldContent":"                    if (points.size > 1 && !polygonClosed) {"},{"type":"DELETE","lineNumber":56,"oldContent":"                        val last = points.last()"},{"type":"DELETE","lineNumber":57,"oldContent":""},{"type":"DELETE","lineNumber":58,"oldContent":"                        if (point == points.first() && points.size > 2) {"},{"type":"DELETE","lineNumber":59,"oldContent":"                            points = points + point"},{"type":"DELETE","lineNumber":60,"oldContent":"                            polygonClosed = true"},{"type":"DELETE","lineNumber":61,"oldContent":"                        } else if (point != last) {"},{"type":"DELETE","lineNumber":62,"oldContent":"                            points = points + point"},{"type":"DELETE","lineNumber":63,"oldContent":"                        }"},{"type":"DELETE","lineNumber":64,"oldContent":"                    }"},{"type":"DELETE","lineNumber":65,"oldContent":"                    true"},{"type":"DELETE","lineNumber":66,"oldContent":"                }"},{"type":"MODIFY","lineNumber":70,"content":"        if (internalPoints.size > 1) {","oldContent":"        if (points.size > 1) {"},{"type":"MODIFY","lineNumber":72,"content":"                points = internalPoints,","oldContent":"                points = points,"}]},{"timestamp":1757915700671,"changes":[{"type":"DELETE","lineNumber":11,"oldContent":"fun GcsMap("},{"type":"DELETE","lineNumber":12,"oldContent":"    telemetryState: TelemetryState,"},{"type":"DELETE","lineNumber":13,"oldContent":"    points: List<LatLng> = emptyList(),"},{"type":"INSERT","lineNumber":11,"content":"fun GcsMap(telemetryState: TelemetryState) {"},{"type":"INSERT","lineNumber":12,"content":"    var points by remember { mutableStateOf(listOf<LatLng>()) }"},{"type":"DELETE","lineNumber":15,"oldContent":"    onMapClick: (LatLng) -> Unit = {}"},{"type":"DELETE","lineNumber":17,"oldContent":") {"},{"type":"DELETE","lineNumber":19,"oldContent":"    var internalPoints by remember { mutableStateOf(points) }"},{"type":"DELETE","lineNumber":38,"oldContent":"    // Keep internalPoints in sync when parent points change"},{"type":"DELETE","lineNumber":40,"oldContent":"    LaunchedEffect(points) {"},{"type":"DELETE","lineNumber":41,"oldContent":"        internalPoints = points"},{"type":"INSERT","lineNumber":35,"content":"                points = points + latLng"},{"type":"DELETE","lineNumber":43,"oldContent":"    }"},{"type":"DELETE","lineNumber":45,"oldContent":""},{"type":"DELETE","lineNumber":52,"oldContent":"                // Notify parent"},{"type":"DELETE","lineNumber":54,"oldContent":"                onMapClick(latLng)"},{"type":"DELETE","lineNumber":56,"oldContent":"                // update internal copy for immediate UI feedback"},{"type":"DELETE","lineNumber":58,"oldContent":"                internalPoints = internalPoints + latLng"},{"type":"INSERT","lineNumber":50,"content":"        points.forEachIndexed { index, point ->"},{"type":"DELETE","lineNumber":65,"oldContent":"        internalPoints.forEachIndexed { index, point ->"},{"type":"INSERT","lineNumber":54,"content":"                onClick = {"},{"type":"INSERT","lineNumber":55,"content":"                    if (points.size > 1 && !polygonClosed) {"},{"type":"INSERT","lineNumber":56,"content":"                        val last = points.last()"},{"type":"INSERT","lineNumber":57,"content":""},{"type":"INSERT","lineNumber":58,"content":"                        if (point == points.first() && points.size > 2) {"},{"type":"INSERT","lineNumber":59,"content":"                            points = points + point"},{"type":"INSERT","lineNumber":60,"content":"                            polygonClosed = true"},{"type":"INSERT","lineNumber":61,"content":"                        } else if (point != last) {"},{"type":"INSERT","lineNumber":62,"content":"                            points = points + point"},{"type":"INSERT","lineNumber":63,"content":"                        }"},{"type":"INSERT","lineNumber":64,"content":"                    }"},{"type":"INSERT","lineNumber":65,"content":"                    true"},{"type":"INSERT","lineNumber":66,"content":"                }"},{"type":"DELETE","lineNumber":69,"oldContent":"        if (internalPoints.size > 1) {"},{"type":"INSERT","lineNumber":70,"content":"        // Draw polyline (open or closed)"},{"type":"DELETE","lineNumber":71,"oldContent":"                points = internalPoints,"},{"type":"INSERT","lineNumber":72,"content":"            Polyline("}]},{"timestamp":1757915709340,"changes":[{"type":"MODIFY","lineNumber":11,"content":"fun GcsMap(","oldContent":"fun GcsMap(telemetryState: TelemetryState) {"},{"type":"INSERT","lineNumber":12,"content":"    telemetryState: TelemetryState,"},{"type":"INSERT","lineNumber":13,"content":"    mapType: MapType"},{"type":"INSERT","lineNumber":14,"content":") {"},{"type":"DELETE","lineNumber":31,"oldContent":"                points = points + latLng"},{"type":"INSERT","lineNumber":36,"content":"        properties = MapProperties(mapType = mapType), // âœ… Map type applied"},{"type":"INSERT","lineNumber":39,"content":"                points = points + latLng"},{"type":"DELETE","lineNumber":42,"oldContent":"        points.forEachIndexed { index, point ->"},{"type":"INSERT","lineNumber":49,"content":"                title = \"Drone Location\""},{"type":"INSERT","lineNumber":50,"content":"            )"},{"type":"INSERT","lineNumber":51,"content":"        }"},{"type":"INSERT","lineNumber":52,"content":""},{"type":"INSERT","lineNumber":53,"content":"        // User-drawn markers"},{"type":"INSERT","lineNumber":54,"content":"        points.forEachIndexed { index, point ->"},{"type":"INSERT","lineNumber":55,"content":"            Marker("},{"type":"INSERT","lineNumber":56,"content":"                state = MarkerState(position = point),"},{"type":"INSERT","lineNumber":57,"content":"                title = \"Marker ${index + 1}\","},{"type":"DELETE","lineNumber":48,"oldContent":"                title = \"Drone Location\""},{"type":"DELETE","lineNumber":51,"oldContent":"            )"},{"type":"DELETE","lineNumber":54,"oldContent":"        }"},{"type":"DELETE","lineNumber":56,"oldContent":""},{"type":"DELETE","lineNumber":58,"oldContent":"        // User-drawn markers"},{"type":"DELETE","lineNumber":60,"oldContent":"            Marker("},{"type":"DELETE","lineNumber":62,"oldContent":"                state = MarkerState(position = point),"},{"type":"DELETE","lineNumber":64,"oldContent":"                title = \"Marker ${index + 1}\","},{"type":"DELETE","lineNumber":79,"oldContent":""}]},{"timestamp":1757915781162,"changes":[{"type":"MODIFY","lineNumber":13,"content":"<<<<<<< Updated upstream","oldContent":"    var points by remember { mutableStateOf(listOf<LatLng>()) }"},{"type":"MODIFY","lineNumber":16,"content":"    var points by remember { mutableStateOf(listOf<LatLng>()) }","oldContent":"    var polygonClosed by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":17,"content":"======="},{"type":"INSERT","lineNumber":18,"content":"    points: List<LatLng> = emptyList(),"},{"type":"INSERT","lineNumber":19,"content":"    onMapClick: (LatLng) -> Unit = {}"},{"type":"INSERT","lineNumber":20,"content":") {"},{"type":"INSERT","lineNumber":21,"content":"    var internalPoints by remember { mutableStateOf(points) }"},{"type":"INSERT","lineNumber":22,"content":">>>>>>> Stashed changes"},{"type":"INSERT","lineNumber":23,"content":"    var polygonClosed by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":40,"content":"    // Keep internalPoints in sync when parent points change"},{"type":"INSERT","lineNumber":41,"content":"    LaunchedEffect(points) {"},{"type":"INSERT","lineNumber":42,"content":"        internalPoints = points"},{"type":"INSERT","lineNumber":43,"content":"    }"},{"type":"INSERT","lineNumber":44,"content":""},{"type":"INSERT","lineNumber":48,"content":"        properties = MapProperties(mapType = mapType), // âœ… Map type applied"},{"type":"DELETE","lineNumber":38,"oldContent":"        properties = MapProperties(mapType = mapType), // âœ… Map type applied"},{"type":"INSERT","lineNumber":51,"content":"                // Notify parent"},{"type":"INSERT","lineNumber":52,"content":"                onMapClick(latLng)"},{"type":"INSERT","lineNumber":53,"content":"                // update internal copy for immediate UI feedback"},{"type":"INSERT","lineNumber":54,"content":"                internalPoints = internalPoints + latLng"},{"type":"DELETE","lineNumber":42,"oldContent":"                points = points + latLng"},{"type":"DELETE","lineNumber":49,"oldContent":"                onClick = {"},{"type":"DELETE","lineNumber":50,"oldContent":"                    if (points.size > 1 && !polygonClosed) {"},{"type":"DELETE","lineNumber":52,"oldContent":"                        val last = points.last()"},{"type":"DELETE","lineNumber":54,"oldContent":""},{"type":"DELETE","lineNumber":57,"oldContent":"                        if (point == points.first() && points.size > 2) {"},{"type":"DELETE","lineNumber":59,"oldContent":"                            points = points + point"},{"type":"DELETE","lineNumber":60,"oldContent":"        points.forEachIndexed { index, point ->"},{"type":"INSERT","lineNumber":69,"content":"        internalPoints.forEachIndexed { index, point ->"},{"type":"DELETE","lineNumber":62,"oldContent":"                            polygonClosed = true"},{"type":"DELETE","lineNumber":65,"oldContent":"                        } else if (point != last) {"},{"type":"DELETE","lineNumber":66,"oldContent":"                            points = points + point"},{"type":"DELETE","lineNumber":67,"oldContent":"                        }"},{"type":"DELETE","lineNumber":68,"oldContent":"                    }"},{"type":"DELETE","lineNumber":69,"oldContent":"                    true"},{"type":"DELETE","lineNumber":70,"oldContent":"                }"},{"type":"DELETE","lineNumber":75,"oldContent":"        if (points.size > 1) {"},{"type":"INSERT","lineNumber":77,"content":"        if (internalPoints.size > 1) {"},{"type":"DELETE","lineNumber":77,"oldContent":"                points = points,"},{"type":"INSERT","lineNumber":79,"content":"                points = internalPoints,"}]},{"timestamp":1757915853667,"changes":[{"type":"DELETE","lineNumber":11,"oldContent":"fun GcsMap("},{"type":"DELETE","lineNumber":12,"oldContent":"    telemetryState: TelemetryState,"},{"type":"DELETE","lineNumber":13,"oldContent":"<<<<<<< Updated upstream"},{"type":"DELETE","lineNumber":14,"oldContent":"    mapType: MapType"},{"type":"DELETE","lineNumber":15,"oldContent":"    var polygonClosed by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":11,"content":"fun GcsMap(telemetryState: TelemetryState) {"},{"type":"DELETE","lineNumber":17,"oldContent":"======="},{"type":"INSERT","lineNumber":13,"content":"    var polygonClosed by remember { mutableStateOf(false) }"},{"type":"DELETE","lineNumber":19,"oldContent":"    points: List<LatLng> = emptyList(),"},{"type":"DELETE","lineNumber":21,"oldContent":"    onMapClick: (LatLng) -> Unit = {}"},{"type":"DELETE","lineNumber":23,"oldContent":") {"},{"type":"DELETE","lineNumber":25,"oldContent":"    var internalPoints by remember { mutableStateOf(points) }"},{"type":"DELETE","lineNumber":27,"oldContent":">>>>>>> Stashed changes"},{"type":"DELETE","lineNumber":29,"oldContent":"    var polygonClosed by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":35,"content":"                points = points + latLng"},{"type":"DELETE","lineNumber":46,"oldContent":"    // Keep internalPoints in sync when parent points change"},{"type":"DELETE","lineNumber":48,"oldContent":"    LaunchedEffect(points) {"},{"type":"DELETE","lineNumber":50,"oldContent":"        internalPoints = points"},{"type":"DELETE","lineNumber":51,"oldContent":"    }"},{"type":"DELETE","lineNumber":53,"oldContent":""},{"type":"DELETE","lineNumber":58,"oldContent":"        properties = MapProperties(mapType = mapType), // âœ… Map type applied"},{"type":"DELETE","lineNumber":60,"oldContent":"                // Notify parent"},{"type":"DELETE","lineNumber":62,"oldContent":"                onMapClick(latLng)"},{"type":"DELETE","lineNumber":63,"oldContent":"                // update internal copy for immediate UI feedback"},{"type":"DELETE","lineNumber":65,"oldContent":"                internalPoints = internalPoints + latLng"},{"type":"INSERT","lineNumber":50,"content":"        points.forEachIndexed { index, point ->"},{"type":"DELETE","lineNumber":72,"oldContent":"        internalPoints.forEachIndexed { index, point ->"},{"type":"INSERT","lineNumber":54,"content":"                onClick = {"},{"type":"INSERT","lineNumber":55,"content":"                    if (points.size > 1 && !polygonClosed) {"},{"type":"INSERT","lineNumber":56,"content":"                        val last = points.last()"},{"type":"INSERT","lineNumber":57,"content":""},{"type":"INSERT","lineNumber":58,"content":"                        if (point == points.first() && points.size > 2) {"},{"type":"INSERT","lineNumber":59,"content":"                            points = points + point"},{"type":"INSERT","lineNumber":60,"content":"                            polygonClosed = true"},{"type":"INSERT","lineNumber":61,"content":"                        } else if (point != last) {"},{"type":"INSERT","lineNumber":62,"content":"                            points = points + point"},{"type":"INSERT","lineNumber":63,"content":"                        }"},{"type":"INSERT","lineNumber":64,"content":"                    }"},{"type":"INSERT","lineNumber":65,"content":"                    true"},{"type":"INSERT","lineNumber":66,"content":"                }"},{"type":"INSERT","lineNumber":71,"content":"        if (points.size > 1) {"},{"type":"DELETE","lineNumber":78,"oldContent":"        if (internalPoints.size > 1) {"},{"type":"INSERT","lineNumber":73,"content":"                points = points,"},{"type":"DELETE","lineNumber":80,"oldContent":"                points = internalPoints,"},{"type":"INSERT","lineNumber":79,"content":""}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/Telemetry/SharedViewModel.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/Telemetry/SharedViewModel.kt","baseContent":"package com.example.aerogcsclone.Telemetry\n\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.setValue\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.combine\nimport kotlinx.coroutines.launch\n\nclass SharedViewModel : ViewModel() {\n\n    var ipAddress by mutableStateOf(\"10.0.2.2\")\n    var port by mutableStateOf(\"5762\")\n\n    private var repo: MavlinkTelemetryRepository? = null\n\n    private val _telemetryState = mutableStateOf(TelemetryState())\n    val telemetryState: StateFlow<TelemetryState> = _telemetryState\n\n    val isConnected: Flow<ERROR> = telemetryState.combine(repo?.state) { state, repoState ->\n        state.connected || repoState?.connected == true\n    }\n\n\n    fun connect() {\n        viewModelScope.launch {\n            val portInt = port.toIntOrNull()\n            if (portInt != null) {\n                val newRepo = MavlinkTelemetryRepository(ipAddress, portInt)\n                repo = newRepo\n                newRepo.start()\n                newRepo.state.collect {\n                    _telemetryState.value = it\n                }\n            }\n        }\n    }\n}\n","baseTimestamp":1757400233339,"deltas":[{"timestamp":1757912527357,"changes":[{"type":"INSERT","lineNumber":7,"content":"import com.divpundir.mavlink.definitions.common.MissionItemInt"},{"type":"DELETE","lineNumber":20,"oldContent":"    val isConnected: StateFlow<Boolean> = telemetryState"},{"type":"INSERT","lineNumber":22,"content":"    val isConnected: StateFlow<Boolean> = telemetryState"},{"type":"INSERT","lineNumber":25,"content":""},{"type":"DELETE","lineNumber":26,"oldContent":""},{"type":"DELETE","lineNumber":40,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":42,"oldContent":"            repo?.arm()"},{"type":"INSERT","lineNumber":43,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":44,"content":"            repo?.arm()"},{"type":"DELETE","lineNumber":45,"oldContent":"            try {"},{"type":"DELETE","lineNumber":47,"oldContent":"                repo?.uploadMission(missionItems)"},{"type":"MODIFY","lineNumber":50,"content":"            try {","oldContent":"                missionUploaded = true"},{"type":"INSERT","lineNumber":51,"content":"                repo?.uploadMission(missionItems)"},{"type":"INSERT","lineNumber":52,"content":"                missionUploaded = true"},{"type":"DELETE","lineNumber":58,"oldContent":""},{"type":"INSERT","lineNumber":60,"content":""},{"type":"DELETE","lineNumber":61,"oldContent":"                repo?.startMission()"},{"type":"DELETE","lineNumber":63,"oldContent":"                onResult(true, null)"},{"type":"INSERT","lineNumber":64,"content":"                repo?.startMission()"},{"type":"INSERT","lineNumber":65,"content":"                onResult(true, null)"},{"type":"INSERT","lineNumber":70,"content":"    }"},{"type":"DELETE","lineNumber":71,"oldContent":"    }"}]},{"timestamp":1757912534883,"changes":[{"type":"MODIFY","lineNumber":8,"content":"//import com.example.aerogcsclone.Telemetry.MissionItemInt","oldContent":"import com.example.aerogcsclone.Telemetry.MissionItemInt"},{"type":"INSERT","lineNumber":25,"content":""},{"type":"DELETE","lineNumber":27,"oldContent":""},{"type":"MODIFY","lineNumber":43,"content":"        viewModelScope.launch {","oldContent":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":49,"content":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":51,"oldContent":"        viewModelScope.launch {"},{"type":"MODIFY","lineNumber":64,"content":"                repo?.startMission()","oldContent":"                repo?.startMission()"},{"type":"MODIFY","lineNumber":71,"content":"}","oldContent":"}"}]},{"timestamp":1757913228531,"changes":[{"type":"INSERT","lineNumber":42,"content":"    fun arm() {"},{"type":"DELETE","lineNumber":43,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":51,"oldContent":"                repo?.uploadMission(missionItems)"},{"type":"DELETE","lineNumber":52,"oldContent":"                missionUploaded = true"},{"type":"DELETE","lineNumber":53,"oldContent":"                onResult(true, null)"},{"type":"INSERT","lineNumber":51,"content":"                val success = repo?.uploadMissionWithAck(missionItems) ?: false"},{"type":"INSERT","lineNumber":52,"content":"                missionUploaded = success"},{"type":"INSERT","lineNumber":53,"content":"                if (success) {"},{"type":"INSERT","lineNumber":54,"content":"                    onResult(true, null)"},{"type":"INSERT","lineNumber":55,"content":"                } else {"},{"type":"INSERT","lineNumber":56,"content":"                    onResult(false, \"Mission upload failed or timed out\")"},{"type":"INSERT","lineNumber":57,"content":"                }"},{"type":"INSERT","lineNumber":67,"content":"            try {"},{"type":"DELETE","lineNumber":64,"oldContent":"                repo?.startMission()"},{"type":"INSERT","lineNumber":74,"content":"    }"},{"type":"DELETE","lineNumber":71,"oldContent":"}"}]},{"timestamp":1757915308318,"changes":[{"type":"INSERT","lineNumber":27,"content":"    var lastUploadedCount by mutableStateOf(0)"},{"type":"INSERT","lineNumber":55,"content":"                    lastUploadedCount = missionItems.size"},{"type":"DELETE","lineNumber":55,"oldContent":"            } catch (e: Exception) {"},{"type":"MODIFY","lineNumber":58,"content":"                    lastUploadedCount = 0","oldContent":"                missionUploaded = false"},{"type":"DELETE","lineNumber":59,"oldContent":"                onResult(false, e.message)"},{"type":"INSERT","lineNumber":61,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":62,"content":"                missionUploaded = false"},{"type":"INSERT","lineNumber":63,"content":"                lastUploadedCount = 0"},{"type":"INSERT","lineNumber":64,"content":"                onResult(false, e.message)"},{"type":"DELETE","lineNumber":67,"oldContent":"                repo?.startMission()"},{"type":"INSERT","lineNumber":71,"content":"            try {"},{"type":"INSERT","lineNumber":72,"content":"                val last = if (lastUploadedCount > 0) lastUploadedCount - 1 else 0"},{"type":"INSERT","lineNumber":73,"content":"                repo?.startMission(0, last)"},{"type":"DELETE","lineNumber":70,"oldContent":"            try {"},{"type":"INSERT","lineNumber":79,"content":"    }"},{"type":"DELETE","lineNumber":76,"oldContent":"    }"}]},{"timestamp":1757915700671,"changes":[{"type":"DELETE","lineNumber":7,"oldContent":"import com.divpundir.mavlink.definitions.common.MissionItemInt"},{"type":"DELETE","lineNumber":8,"oldContent":"//import com.example.aerogcsclone.Telemetry.MissionItemInt"},{"type":"DELETE","lineNumber":26,"oldContent":"    var missionUploaded by mutableStateOf(false)"},{"type":"DELETE","lineNumber":27,"oldContent":"    var lastUploadedCount by mutableStateOf(0)"},{"type":"DELETE","lineNumber":28,"oldContent":""},{"type":"DELETE","lineNumber":48,"oldContent":""},{"type":"DELETE","lineNumber":49,"oldContent":"    fun uploadMission(missionItems: List<MissionItemInt>, onResult: (Boolean, String?) -> Unit = { _, _ -> }) {"},{"type":"DELETE","lineNumber":50,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":51,"oldContent":"            try {"},{"type":"DELETE","lineNumber":52,"oldContent":"                val success = repo?.uploadMissionWithAck(missionItems) ?: false"},{"type":"DELETE","lineNumber":53,"oldContent":"                missionUploaded = success"},{"type":"DELETE","lineNumber":54,"oldContent":"                if (success) {"},{"type":"DELETE","lineNumber":55,"oldContent":"                    onResult(true, null)"},{"type":"DELETE","lineNumber":56,"oldContent":"                    lastUploadedCount = missionItems.size"},{"type":"DELETE","lineNumber":57,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":58,"oldContent":"                missionUploaded = false"},{"type":"DELETE","lineNumber":59,"oldContent":"                    lastUploadedCount = 0"},{"type":"DELETE","lineNumber":60,"oldContent":"                }"},{"type":"DELETE","lineNumber":61,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":62,"oldContent":"            }"},{"type":"DELETE","lineNumber":63,"oldContent":"                missionUploaded = false"},{"type":"DELETE","lineNumber":64,"oldContent":"        }"},{"type":"DELETE","lineNumber":65,"oldContent":"                lastUploadedCount = 0"},{"type":"DELETE","lineNumber":66,"oldContent":"    }"},{"type":"DELETE","lineNumber":67,"oldContent":"                onResult(false, e.message)"},{"type":"DELETE","lineNumber":68,"oldContent":""},{"type":"DELETE","lineNumber":69,"oldContent":"    fun startMission(onResult: (Boolean, String?) -> Unit = { _, _ -> }) {"},{"type":"DELETE","lineNumber":70,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":71,"oldContent":"                onResult(true, null)"},{"type":"DELETE","lineNumber":72,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":73,"oldContent":"            try {"},{"type":"DELETE","lineNumber":74,"oldContent":"                onResult(false, e.message)"},{"type":"DELETE","lineNumber":75,"oldContent":"                val last = if (lastUploadedCount > 0) lastUploadedCount - 1 else 0"},{"type":"DELETE","lineNumber":76,"oldContent":"            }"},{"type":"DELETE","lineNumber":77,"oldContent":"                repo?.startMission(0, last)"},{"type":"DELETE","lineNumber":78,"oldContent":"        }"},{"type":"DELETE","lineNumber":81,"oldContent":"    }"}]},{"timestamp":1757915781162,"changes":[{"type":"INSERT","lineNumber":7,"content":"import com.divpundir.mavlink.definitions.common.MissionItemInt"},{"type":"INSERT","lineNumber":8,"content":"//import com.example.aerogcsclone.Telemetry.MissionItemInt"},{"type":"INSERT","lineNumber":26,"content":"    var missionUploaded by mutableStateOf(false)"},{"type":"INSERT","lineNumber":27,"content":"    var lastUploadedCount by mutableStateOf(0)"},{"type":"INSERT","lineNumber":28,"content":""},{"type":"INSERT","lineNumber":48,"content":""},{"type":"INSERT","lineNumber":49,"content":"    fun uploadMission(missionItems: List<MissionItemInt>, onResult: (Boolean, String?) -> Unit = { _, _ -> }) {"},{"type":"INSERT","lineNumber":50,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":51,"content":"            try {"},{"type":"INSERT","lineNumber":52,"content":"                val success = repo?.uploadMissionWithAck(missionItems) ?: false"},{"type":"INSERT","lineNumber":53,"content":"                missionUploaded = success"},{"type":"INSERT","lineNumber":54,"content":"                if (success) {"},{"type":"INSERT","lineNumber":55,"content":"                    lastUploadedCount = missionItems.size"},{"type":"INSERT","lineNumber":56,"content":"                    onResult(true, null)"},{"type":"INSERT","lineNumber":57,"content":"                } else {"},{"type":"INSERT","lineNumber":58,"content":"                    lastUploadedCount = 0"},{"type":"INSERT","lineNumber":59,"content":"                    onResult(false, \"Mission upload failed or timed out\")"},{"type":"INSERT","lineNumber":60,"content":"                }"},{"type":"INSERT","lineNumber":61,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":62,"content":"                missionUploaded = false"},{"type":"INSERT","lineNumber":63,"content":"                lastUploadedCount = 0"},{"type":"INSERT","lineNumber":64,"content":"                onResult(false, e.message)"},{"type":"INSERT","lineNumber":65,"content":"            }"},{"type":"INSERT","lineNumber":66,"content":"        }"},{"type":"INSERT","lineNumber":67,"content":"    }"},{"type":"INSERT","lineNumber":68,"content":""},{"type":"INSERT","lineNumber":69,"content":"    fun startMission(onResult: (Boolean, String?) -> Unit = { _, _ -> }) {"},{"type":"INSERT","lineNumber":70,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":71,"content":"            try {"},{"type":"INSERT","lineNumber":72,"content":"                val last = if (lastUploadedCount > 0) lastUploadedCount - 1 else 0"},{"type":"INSERT","lineNumber":73,"content":"                repo?.startMission(0, last)"},{"type":"INSERT","lineNumber":74,"content":"                onResult(true, null)"},{"type":"INSERT","lineNumber":75,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":76,"content":"                onResult(false, e.message)"},{"type":"INSERT","lineNumber":77,"content":"            }"},{"type":"INSERT","lineNumber":78,"content":"        }"},{"type":"INSERT","lineNumber":79,"content":"    }"}]},{"timestamp":1757927170437,"changes":[{"type":"INSERT","lineNumber":2,"content":"import android.util.Log"},{"type":"DELETE","lineNumber":8,"oldContent":"import kotlinx.coroutines.flow.*"},{"type":"INSERT","lineNumber":10,"content":"import kotlinx.coroutines.flow.*"},{"type":"INSERT","lineNumber":27,"content":"    var missionUploaded by mutableStateOf(false)"},{"type":"INSERT","lineNumber":28,"content":"    var lastUploadedCount by mutableStateOf(0)"},{"type":"INSERT","lineNumber":29,"content":""},{"type":"DELETE","lineNumber":28,"oldContent":"    var missionUploaded by mutableStateOf(false)"},{"type":"DELETE","lineNumber":30,"oldContent":"    var lastUploadedCount by mutableStateOf(0)"},{"type":"DELETE","lineNumber":32,"oldContent":""},{"type":"DELETE","lineNumber":48,"oldContent":"}"},{"type":"DELETE","lineNumber":50,"oldContent":"    }"},{"type":"DELETE","lineNumber":51,"oldContent":"        }"},{"type":"DELETE","lineNumber":52,"oldContent":"            }"},{"type":"DELETE","lineNumber":53,"oldContent":""},{"type":"DELETE","lineNumber":54,"oldContent":"                onResult(false, e.message)"},{"type":"DELETE","lineNumber":56,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":58,"oldContent":"                onResult(true, null)"},{"type":"DELETE","lineNumber":60,"oldContent":"                repo?.startMission(0, last)"},{"type":"INSERT","lineNumber":53,"content":"                Log.i(\"SharedVM\", \"Request to upload mission with ${missionItems.size} items\")"},{"type":"INSERT","lineNumber":54,"content":""},{"type":"INSERT","lineNumber":55,"content":"                if (repo == null) {"},{"type":"INSERT","lineNumber":56,"content":"                    Log.w(\"SharedVM\", \"No repo available, cannot upload mission\")"},{"type":"INSERT","lineNumber":57,"content":"                    missionUploaded = false"},{"type":"INSERT","lineNumber":58,"content":"                    lastUploadedCount = 0"},{"type":"INSERT","lineNumber":59,"content":"                    onResult(false, \"Not connected to vehicle\")"},{"type":"INSERT","lineNumber":60,"content":"                    return@launch"},{"type":"INSERT","lineNumber":61,"content":"                }"},{"type":"INSERT","lineNumber":62,"content":""},{"type":"INSERT","lineNumber":63,"content":"                if (!_telemetryState.value.fcuDetected) {"},{"type":"INSERT","lineNumber":64,"content":"                    Log.w(\"SharedVM\", \"FCU not detected, aborting mission upload\")"},{"type":"INSERT","lineNumber":65,"content":"                    missionUploaded = false"},{"type":"INSERT","lineNumber":66,"content":"                    lastUploadedCount = 0"},{"type":"INSERT","lineNumber":67,"content":"                    onResult(false, \"FCU not detected, please connect to vehicle first\")"},{"type":"INSERT","lineNumber":68,"content":"                    return@launch"},{"type":"INSERT","lineNumber":69,"content":"                }"},{"type":"INSERT","lineNumber":70,"content":""},{"type":"INSERT","lineNumber":71,"content":"                Log.i(\"SharedVM\", \"Starting mission upload to FCU...\")"},{"type":"DELETE","lineNumber":62,"oldContent":"                val last = if (lastUploadedCount > 0) lastUploadedCount - 1 else 0"},{"type":"DELETE","lineNumber":64,"oldContent":"            try {"},{"type":"DELETE","lineNumber":66,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":68,"oldContent":"    fun startMission(onResult: (Boolean, String?) -> Unit = { _, _ -> }) {"},{"type":"INSERT","lineNumber":76,"content":"                    Log.i(\"SharedVM\", \"Mission upload succeeded (${missionItems.size})\")"},{"type":"DELETE","lineNumber":70,"oldContent":""},{"type":"DELETE","lineNumber":72,"oldContent":"    }"},{"type":"DELETE","lineNumber":74,"oldContent":"        }"},{"type":"INSERT","lineNumber":80,"content":"                    Log.e(\"SharedVM\", \"Mission upload failed or timed out\")"},{"type":"DELETE","lineNumber":76,"oldContent":"            }"},{"type":"DELETE","lineNumber":78,"oldContent":"                onResult(false, e.message)"},{"type":"DELETE","lineNumber":80,"oldContent":"                lastUploadedCount = 0"},{"type":"INSERT","lineNumber":85,"content":"                lastUploadedCount = 0"},{"type":"INSERT","lineNumber":86,"content":"                Log.e(\"SharedVM\", \"Exception during mission upload\", e)"},{"type":"INSERT","lineNumber":87,"content":"                onResult(false, e.message)"},{"type":"INSERT","lineNumber":88,"content":"            }"},{"type":"INSERT","lineNumber":89,"content":"        }"},{"type":"INSERT","lineNumber":90,"content":"    }"},{"type":"INSERT","lineNumber":91,"content":""},{"type":"INSERT","lineNumber":92,"content":"    fun startMission(onResult: (Boolean, String?) -> Unit = { _, _ -> }) {"},{"type":"INSERT","lineNumber":93,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":94,"content":"            try {"},{"type":"INSERT","lineNumber":95,"content":"                if (repo == null) {"},{"type":"INSERT","lineNumber":96,"content":"                    Log.w(\"SharedVM\", \"No repo available, cannot start mission\")"},{"type":"INSERT","lineNumber":97,"content":"                    onResult(false, \"Not connected to vehicle\")"},{"type":"INSERT","lineNumber":98,"content":"                    return@launch"},{"type":"INSERT","lineNumber":99,"content":"                }"},{"type":"INSERT","lineNumber":100,"content":""},{"type":"INSERT","lineNumber":101,"content":"                if (!_telemetryState.value.fcuDetected) {"},{"type":"INSERT","lineNumber":102,"content":"                    Log.w(\"SharedVM\", \"FCU not detected, cannot start mission\")"},{"type":"INSERT","lineNumber":103,"content":"                    onResult(false, \"FCU not detected\")"},{"type":"INSERT","lineNumber":104,"content":"                    return@launch"},{"type":"INSERT","lineNumber":105,"content":"                }"},{"type":"INSERT","lineNumber":106,"content":""},{"type":"INSERT","lineNumber":107,"content":"                val last = if (lastUploadedCount > 0) lastUploadedCount - 1 else 0"},{"type":"INSERT","lineNumber":108,"content":"                Log.i(\"SharedVM\", \"Sending start mission with first=0 last=$last\")"},{"type":"INSERT","lineNumber":109,"content":"                repo?.startMission(0, last)"},{"type":"INSERT","lineNumber":110,"content":"                onResult(true, null)"},{"type":"INSERT","lineNumber":111,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":112,"content":"                Log.e(\"SharedVM\", \"Failed to start mission\", e)"},{"type":"INSERT","lineNumber":113,"content":"                onResult(false, e.message)"},{"type":"INSERT","lineNumber":114,"content":"            }"},{"type":"INSERT","lineNumber":115,"content":"        }"},{"type":"INSERT","lineNumber":116,"content":"    }"},{"type":"INSERT","lineNumber":117,"content":"}"},{"type":"INSERT","lineNumber":118,"content":""}]},{"timestamp":1757927529141,"changes":[{"type":"DELETE","lineNumber":27,"oldContent":"    fun connect() {"},{"type":"DELETE","lineNumber":29,"oldContent":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":30,"content":"    fun connect() {"},{"type":"INSERT","lineNumber":31,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":50,"content":"    fun uploadMission(missionItems: List<MissionItemInt>, onResult: (Boolean, String?) -> Unit = { _, _ -> }) {"},{"type":"INSERT","lineNumber":51,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":52,"content":"            try {"},{"type":"DELETE","lineNumber":53,"oldContent":"    fun uploadMission(missionItems: List<MissionItemInt>, onResult: (Boolean, String?) -> Unit = { _, _ -> }) {"},{"type":"DELETE","lineNumber":56,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":59,"oldContent":"            try {"},{"type":"DELETE","lineNumber":62,"oldContent":"                val success = repo?.uploadMissionWithAck(missionItems) ?: false"},{"type":"DELETE","lineNumber":65,"oldContent":"                missionUploaded = success"},{"type":"DELETE","lineNumber":68,"oldContent":"                if (success) {"},{"type":"DELETE","lineNumber":71,"oldContent":"                    lastUploadedCount = missionItems.size"},{"type":"DELETE","lineNumber":74,"oldContent":"                    onResult(true, null)"},{"type":"INSERT","lineNumber":72,"content":"                val success = repo?.uploadMissionWithAck(missionItems) ?: false"},{"type":"INSERT","lineNumber":73,"content":"                missionUploaded = success"},{"type":"INSERT","lineNumber":74,"content":"                if (success) {"},{"type":"INSERT","lineNumber":75,"content":"                    lastUploadedCount = missionItems.size"},{"type":"INSERT","lineNumber":76,"content":"                    Log.i(\"SharedVM\", \"Mission upload succeeded (${missionItems.size})\")"},{"type":"INSERT","lineNumber":77,"content":"                    onResult(true, null)"},{"type":"INSERT","lineNumber":80,"content":"                    Log.e(\"SharedVM\", \"Mission upload failed or timed out\")"},{"type":"DELETE","lineNumber":80,"oldContent":"                    Log.i(\"SharedVM\", \"Mission upload succeeded (${missionItems.size})\")"},{"type":"DELETE","lineNumber":83,"oldContent":"                    Log.e(\"SharedVM\", \"Mission upload failed or timed out\")"},{"type":"DELETE","lineNumber":85,"oldContent":""},{"type":"DELETE","lineNumber":86,"oldContent":"}"},{"type":"DELETE","lineNumber":87,"oldContent":"    }"},{"type":"DELETE","lineNumber":89,"oldContent":"        }"},{"type":"DELETE","lineNumber":91,"oldContent":"            }"},{"type":"DELETE","lineNumber":93,"oldContent":"                onResult(false, e.message)"},{"type":"DELETE","lineNumber":95,"oldContent":"                Log.e(\"SharedVM\", \"Failed to start mission\", e)"},{"type":"DELETE","lineNumber":97,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":99,"oldContent":"                onResult(true, null)"},{"type":"DELETE","lineNumber":101,"oldContent":"                repo?.startMission(0, last)"},{"type":"DELETE","lineNumber":103,"oldContent":"                Log.i(\"SharedVM\", \"Sending start mission with first=0 last=$last\")"},{"type":"DELETE","lineNumber":105,"oldContent":"                val last = if (lastUploadedCount > 0) lastUploadedCount - 1 else 0"},{"type":"DELETE","lineNumber":107,"oldContent":""},{"type":"DELETE","lineNumber":109,"oldContent":"                }"},{"type":"DELETE","lineNumber":111,"oldContent":"                    return@launch"},{"type":"DELETE","lineNumber":113,"oldContent":"                    onResult(false, \"FCU not detected\")"},{"type":"DELETE","lineNumber":115,"oldContent":"                    Log.w(\"SharedVM\", \"FCU not detected, cannot start mission\")"},{"type":"INSERT","lineNumber":100,"content":""},{"type":"INSERT","lineNumber":102,"content":"                    Log.w(\"SharedVM\", \"FCU not detected, cannot start mission\")"},{"type":"INSERT","lineNumber":103,"content":"                    onResult(false, \"FCU not detected\")"},{"type":"INSERT","lineNumber":104,"content":"                    return@launch"},{"type":"INSERT","lineNumber":105,"content":"                }"},{"type":"INSERT","lineNumber":107,"content":"                val last = if (lastUploadedCount > 0) lastUploadedCount - 1 else 0"},{"type":"INSERT","lineNumber":108,"content":"                Log.i(\"SharedVM\", \"Sending start mission with first=0 last=$last\")"},{"type":"INSERT","lineNumber":109,"content":"                repo?.startMission(0, last)"},{"type":"INSERT","lineNumber":110,"content":"                onResult(true, null)"},{"type":"INSERT","lineNumber":111,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":112,"content":"                Log.e(\"SharedVM\", \"Failed to start mission\", e)"},{"type":"INSERT","lineNumber":113,"content":"                onResult(false, e.message)"},{"type":"INSERT","lineNumber":114,"content":"            }"},{"type":"INSERT","lineNumber":115,"content":"        }"},{"type":"INSERT","lineNumber":116,"content":"    }"},{"type":"INSERT","lineNumber":117,"content":""},{"type":"INSERT","lineNumber":118,"content":"    // New helper to request mission from FCU and log its items for debugging"},{"type":"INSERT","lineNumber":119,"content":"    fun readMissionFromFcu() {"},{"type":"INSERT","lineNumber":120,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":121,"content":"            if (repo == null) {"},{"type":"INSERT","lineNumber":122,"content":"                Log.w(\"SharedVM\", \"No repo available, cannot request mission readback\")"},{"type":"INSERT","lineNumber":123,"content":"                return@launch"},{"type":"INSERT","lineNumber":124,"content":"            }"},{"type":"INSERT","lineNumber":125,"content":"            try {"},{"type":"INSERT","lineNumber":126,"content":"                repo?.requestMissionAndLog()"},{"type":"INSERT","lineNumber":127,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":128,"content":"                Log.e(\"SharedVM\", \"Exception during mission readback\", e)"},{"type":"INSERT","lineNumber":129,"content":"            }"},{"type":"INSERT","lineNumber":130,"content":"        }"},{"type":"INSERT","lineNumber":131,"content":"    }"},{"type":"INSERT","lineNumber":132,"content":"}"},{"type":"INSERT","lineNumber":133,"content":""}]},{"timestamp":1757928544496,"changes":[{"type":"DELETE","lineNumber":28,"oldContent":"    fun connect() {"},{"type":"MODIFY","lineNumber":30,"content":"    fun connect() {","oldContent":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":31,"content":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":51,"oldContent":"                Log.i(\"SharedVM\", \"Request to upload mission with ${missionItems.size} items\")"},{"type":"MODIFY","lineNumber":53,"content":"                Log.i(\"SharedVM\", \"Request to upload mission with ${missionItems.size} items\")","oldContent":""},{"type":"INSERT","lineNumber":54,"content":""},{"type":"DELETE","lineNumber":68,"oldContent":"                val success = repo?.uploadMissionWithAck(missionItems) ?: false"},{"type":"MODIFY","lineNumber":70,"content":"","oldContent":"                missionUploaded = success"},{"type":"INSERT","lineNumber":71,"content":"                Log.i(\"SharedVM\", \"Starting mission upload to FCU...\")"},{"type":"INSERT","lineNumber":72,"content":"                val success = repo?.uploadMissionWithAck(missionItems) ?: false"},{"type":"INSERT","lineNumber":73,"content":"                missionUploaded = success"},{"type":"DELETE","lineNumber":74,"oldContent":""},{"type":"DELETE","lineNumber":76,"oldContent":"                Log.i(\"SharedVM\", \"Starting mission upload to FCU...\")"},{"type":"MODIFY","lineNumber":81,"content":"                    onResult(false, \"Mission upload failed or timed out\")","oldContent":"                    onResult(false, \"Mission upload failed or timed out\")"},{"type":"INSERT","lineNumber":92,"content":"    fun startMission(onResult: (Boolean, String?) -> Unit = { _, _ -> }) {"},{"type":"INSERT","lineNumber":93,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":94,"content":"            try {"},{"type":"INSERT","lineNumber":95,"content":"                if (repo == null) {"},{"type":"INSERT","lineNumber":96,"content":"                    Log.w(\"SharedVM\", \"No repo available, cannot start mission\")"},{"type":"INSERT","lineNumber":97,"content":"                    onResult(false, \"Not connected to vehicle\")"},{"type":"INSERT","lineNumber":98,"content":"                    return@launch"},{"type":"INSERT","lineNumber":99,"content":"                }"},{"type":"INSERT","lineNumber":101,"content":"                if (!_telemetryState.value.fcuDetected) {"},{"type":"DELETE","lineNumber":94,"oldContent":"    fun startMission(onResult: (Boolean, String?) -> Unit = { _, _ -> }) {"},{"type":"DELETE","lineNumber":97,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":99,"oldContent":"            try {"},{"type":"INSERT","lineNumber":106,"content":""},{"type":"DELETE","lineNumber":102,"oldContent":"                if (repo == null) {"},{"type":"DELETE","lineNumber":103,"oldContent":"                repo?.startMission(0, last)"},{"type":"DELETE","lineNumber":104,"oldContent":"                onResult(true, null)"},{"type":"DELETE","lineNumber":105,"oldContent":"                    Log.w(\"SharedVM\", \"No repo available, cannot start mission\")"},{"type":"INSERT","lineNumber":109,"content":"                val result = repo?.startMission(0, last) ?: false"},{"type":"INSERT","lineNumber":110,"content":"                if (result) {"},{"type":"INSERT","lineNumber":111,"content":"                    Log.i(\"SharedVM\", \"Mission start acknowledged by FCU\")"},{"type":"INSERT","lineNumber":112,"content":"                    onResult(true, null)"},{"type":"INSERT","lineNumber":113,"content":"                } else {"},{"type":"INSERT","lineNumber":114,"content":"                    Log.e(\"SharedVM\", \"Mission start failed or not acknowledged\")"},{"type":"INSERT","lineNumber":115,"content":"                    onResult(false, \"Mission start failed or not acknowledged\")"},{"type":"INSERT","lineNumber":116,"content":"                }"},{"type":"DELETE","lineNumber":108,"oldContent":"                    onResult(false, \"Not connected to vehicle\")"},{"type":"DELETE","lineNumber":111,"oldContent":"                    return@launch"},{"type":"DELETE","lineNumber":114,"oldContent":"                }"},{"type":"DELETE","lineNumber":116,"oldContent":"                if (!_telemetryState.value.fcuDetected) {"},{"type":"DELETE","lineNumber":118,"oldContent":""},{"type":"DELETE","lineNumber":120,"oldContent":""},{"type":"DELETE","lineNumber":122,"oldContent":"}"},{"type":"DELETE","lineNumber":124,"oldContent":"    }"},{"type":"DELETE","lineNumber":126,"oldContent":"        }"},{"type":"DELETE","lineNumber":129,"oldContent":"            }"},{"type":"DELETE","lineNumber":130,"oldContent":"                Log.e(\"SharedVM\", \"Exception during mission readback\", e)"},{"type":"MODIFY","lineNumber":133,"content":"            } catch (e: Exception) {","oldContent":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":134,"content":"                Log.e(\"SharedVM\", \"Exception during mission readback\", e)"},{"type":"INSERT","lineNumber":135,"content":"            }"},{"type":"INSERT","lineNumber":136,"content":"        }"},{"type":"INSERT","lineNumber":137,"content":"    }"},{"type":"INSERT","lineNumber":138,"content":"}"},{"type":"INSERT","lineNumber":139,"content":""}]},{"timestamp":1757931448005,"changes":[{"type":"INSERT","lineNumber":12,"content":"import kotlinx.coroutines.delay"},{"type":"INSERT","lineNumber":30,"content":""},{"type":"DELETE","lineNumber":31,"oldContent":""},{"type":"INSERT","lineNumber":53,"content":"            try {"},{"type":"DELETE","lineNumber":54,"oldContent":"            try {"},{"type":"INSERT","lineNumber":70,"content":"                }"},{"type":"DELETE","lineNumber":71,"oldContent":"                }"},{"type":"DELETE","lineNumber":73,"oldContent":"                if (success) {"},{"type":"INSERT","lineNumber":75,"content":"                if (success) {"},{"type":"INSERT","lineNumber":81,"content":"                    Log.e(\"SharedVM\", \"Mission upload failed or timed out\")"},{"type":"DELETE","lineNumber":81,"oldContent":"                    onResult(false, \"Mission upload failed or timed out\")"},{"type":"DELETE","lineNumber":93,"oldContent":""},{"type":"DELETE","lineNumber":95,"oldContent":"                    Log.w(\"SharedVM\", \"FCU not detected, cannot start mission\")"},{"type":"DELETE","lineNumber":98,"oldContent":"                    onResult(false, \"FCU not detected\")"},{"type":"DELETE","lineNumber":100,"oldContent":"                    return@launch"},{"type":"INSERT","lineNumber":101,"content":""},{"type":"INSERT","lineNumber":102,"content":"                if (!_telemetryState.value.fcuDetected) {"},{"type":"INSERT","lineNumber":103,"content":"                    Log.w(\"SharedVM\", \"FCU not detected, cannot start mission\")"},{"type":"INSERT","lineNumber":104,"content":"                    onResult(false, \"FCU not detected\")"},{"type":"INSERT","lineNumber":105,"content":"                    return@launch"},{"type":"INSERT","lineNumber":107,"content":""},{"type":"INSERT","lineNumber":108,"content":"                // Ensure vehicle is armed; if not, attempt to arm and wait briefly"},{"type":"INSERT","lineNumber":109,"content":"                if (!_telemetryState.value.armed) {"},{"type":"INSERT","lineNumber":110,"content":"                    Log.i(\"SharedVM\", \"Vehicle not armed - attempting to arm\")"},{"type":"INSERT","lineNumber":111,"content":"                    repo?.arm()"},{"type":"INSERT","lineNumber":112,"content":"                    // wait up to 5s for telemetry to report armed"},{"type":"INSERT","lineNumber":113,"content":"                    val armTimeout = 5000L"},{"type":"INSERT","lineNumber":114,"content":"                    val start = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":115,"content":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - start < armTimeout) {"},{"type":"INSERT","lineNumber":116,"content":"                        delay(250)"},{"type":"INSERT","lineNumber":117,"content":"                    }"},{"type":"INSERT","lineNumber":118,"content":"                    if (!_telemetryState.value.armed) {"},{"type":"INSERT","lineNumber":119,"content":"                        Log.w(\"SharedVM\", \"Vehicle did not arm within timeout\")"},{"type":"INSERT","lineNumber":120,"content":"                        onResult(false, \"Vehicle did not arm\")"},{"type":"INSERT","lineNumber":121,"content":"                        return@launch"},{"type":"INSERT","lineNumber":122,"content":"                    }"},{"type":"INSERT","lineNumber":123,"content":"                    Log.i(\"SharedVM\", \"Vehicle armed\")"},{"type":"INSERT","lineNumber":124,"content":"                }"},{"type":"INSERT","lineNumber":125,"content":""},{"type":"INSERT","lineNumber":126,"content":"                // Ensure vehicle mode is AUTO (some FCs require AUTO mode to execute mission)"},{"type":"INSERT","lineNumber":127,"content":"                val desiredModeLabel = \"Auto\""},{"type":"INSERT","lineNumber":128,"content":"                if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"INSERT","lineNumber":129,"content":"                    Log.i(\"SharedVM\", \"Switching vehicle mode to AUTO\")"},{"type":"INSERT","lineNumber":130,"content":"                    // attempt to set mode; changeMode expects numeric mode value"},{"type":"INSERT","lineNumber":131,"content":"                    repo?.changeMode(MavMode.AUTO)"},{"type":"INSERT","lineNumber":132,"content":"                    // wait up to 4s for mode change"},{"type":"INSERT","lineNumber":133,"content":"                    val modeTimeout = 4000L"},{"type":"INSERT","lineNumber":134,"content":"                    val mstart = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":135,"content":"                    while (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true && System.currentTimeMillis() - mstart < modeTimeout) {"},{"type":"INSERT","lineNumber":136,"content":"                        delay(250)"},{"type":"INSERT","lineNumber":137,"content":"                    }"},{"type":"INSERT","lineNumber":138,"content":"                    if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"INSERT","lineNumber":139,"content":"                        Log.w(\"SharedVM\", \"Vehicle did not switch to AUTO mode within timeout\")"},{"type":"INSERT","lineNumber":140,"content":"                        // not a hard failure; proceed to send mission start but warn"},{"type":"INSERT","lineNumber":141,"content":"                    } else {"},{"type":"INSERT","lineNumber":142,"content":"                        Log.i(\"SharedVM\", \"Vehicle mode is now AUTO\")"},{"type":"INSERT","lineNumber":143,"content":"                    }"},{"type":"INSERT","lineNumber":144,"content":"                }"},{"type":"INSERT","lineNumber":145,"content":""},{"type":"DELETE","lineNumber":106,"oldContent":"                if (!_telemetryState.value.fcuDetected) {"},{"type":"DELETE","lineNumber":108,"oldContent":""},{"type":"DELETE","lineNumber":109,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":110,"oldContent":"                Log.e(\"SharedVM\", \"Failed to start mission\", e)"},{"type":"DELETE","lineNumber":112,"oldContent":"                onResult(false, e.message)"},{"type":"DELETE","lineNumber":114,"oldContent":"            }"},{"type":"DELETE","lineNumber":117,"oldContent":"        }"},{"type":"DELETE","lineNumber":119,"oldContent":"    }"},{"type":"DELETE","lineNumber":122,"oldContent":""},{"type":"INSERT","lineNumber":156,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":157,"content":"                Log.e(\"SharedVM\", \"Failed to start mission\", e)"},{"type":"INSERT","lineNumber":158,"content":"                onResult(false, e.message)"},{"type":"INSERT","lineNumber":159,"content":"            }"},{"type":"INSERT","lineNumber":160,"content":"        }"},{"type":"INSERT","lineNumber":161,"content":"    }"},{"type":"INSERT","lineNumber":162,"content":""},{"type":"INSERT","lineNumber":171,"content":"                repo?.requestMissionAndLog()"},{"type":"DELETE","lineNumber":133,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":135,"oldContent":""},{"type":"DELETE","lineNumber":137,"oldContent":"}"},{"type":"INSERT","lineNumber":177,"content":"}"},{"type":"INSERT","lineNumber":178,"content":""}]},{"timestamp":1757998251236,"changes":[{"type":"INSERT","lineNumber":9,"content":"import com.google.android.gms.maps.model.LatLng"},{"type":"DELETE","lineNumber":30,"oldContent":"    fun connect() {"},{"type":"INSERT","lineNumber":31,"content":"    "},{"type":"INSERT","lineNumber":32,"content":"    // Store uploaded waypoints for display on main screen"},{"type":"INSERT","lineNumber":33,"content":"    private val _uploadedWaypoints = MutableStateFlow<List<LatLng>>(emptyList())"},{"type":"INSERT","lineNumber":34,"content":"    val uploadedWaypoints: StateFlow<List<LatLng>> = _uploadedWaypoints.asStateFlow()"},{"type":"INSERT","lineNumber":36,"content":"    fun connect() {"},{"type":"DELETE","lineNumber":53,"oldContent":"                Log.i(\"SharedVM\", \"Request to upload mission with ${missionItems.size} items\")"},{"type":"INSERT","lineNumber":59,"content":"                Log.i(\"SharedVM\", \"Request to upload mission with ${missionItems.size} items\")"},{"type":"DELETE","lineNumber":70,"oldContent":""},{"type":"INSERT","lineNumber":76,"content":""},{"type":"INSERT","lineNumber":82,"content":"                    "},{"type":"INSERT","lineNumber":83,"content":"                    // Convert MissionItemInt to LatLng for display"},{"type":"INSERT","lineNumber":84,"content":"                    val waypoints = missionItems.map { item ->"},{"type":"INSERT","lineNumber":85,"content":"                        LatLng(item.x / 1E7, item.y / 1E7)"},{"type":"INSERT","lineNumber":86,"content":"                    }"},{"type":"INSERT","lineNumber":87,"content":"                    _uploadedWaypoints.value = waypoints"},{"type":"INSERT","lineNumber":88,"content":"                    "},{"type":"DELETE","lineNumber":81,"oldContent":"                    onResult(false, \"Mission upload failed or timed out\")"},{"type":"INSERT","lineNumber":93,"content":"                    _uploadedWaypoints.value = emptyList()"},{"type":"INSERT","lineNumber":95,"content":"                    onResult(false, \"Mission upload failed or timed out\")"},{"type":"INSERT","lineNumber":100,"content":"                _uploadedWaypoints.value = emptyList()"},{"type":"DELETE","lineNumber":98,"oldContent":""},{"type":"DELETE","lineNumber":100,"oldContent":"                if (!_telemetryState.value.fcuDetected) {"},{"type":"DELETE","lineNumber":102,"oldContent":"                    Log.w(\"SharedVM\", \"FCU not detected, cannot start mission\")"},{"type":"INSERT","lineNumber":115,"content":""},{"type":"INSERT","lineNumber":116,"content":"                if (!_telemetryState.value.fcuDetected) {"},{"type":"INSERT","lineNumber":117,"content":"                    Log.w(\"SharedVM\", \"FCU not detected, cannot start mission\")"},{"type":"INSERT","lineNumber":119,"content":"                    return@launch"},{"type":"INSERT","lineNumber":121,"content":""},{"type":"INSERT","lineNumber":122,"content":"                // Check if mission is uploaded"},{"type":"INSERT","lineNumber":123,"content":"                if (!missionUploaded || lastUploadedCount == 0) {"},{"type":"INSERT","lineNumber":124,"content":"                    Log.w(\"SharedVM\", \"No mission uploaded, cannot start\")"},{"type":"INSERT","lineNumber":125,"content":"                    onResult(false, \"No mission uploaded. Please upload a mission first.\")"},{"type":"DELETE","lineNumber":107,"oldContent":"                val last = if (lastUploadedCount > 0) lastUploadedCount - 1 else 0"},{"type":"INSERT","lineNumber":127,"content":"                }"},{"type":"DELETE","lineNumber":109,"oldContent":"                Log.i(\"SharedVM\", \"Sending start mission with first=0 last=$last\")"},{"type":"INSERT","lineNumber":129,"content":"                // Check if vehicle is armable"},{"type":"INSERT","lineNumber":130,"content":"                if (!_telemetryState.value.armable) {"},{"type":"INSERT","lineNumber":131,"content":"                    Log.w(\"SharedVM\", \"Vehicle not armable, cannot start mission\")"},{"type":"INSERT","lineNumber":132,"content":"                    onResult(false, \"Vehicle not armable. Check sensors and GPS.\")"},{"type":"INSERT","lineNumber":133,"content":"                    return@launch"},{"type":"INSERT","lineNumber":134,"content":"                }"},{"type":"INSERT","lineNumber":135,"content":""},{"type":"INSERT","lineNumber":136,"content":"                // Check GPS fix"},{"type":"INSERT","lineNumber":137,"content":"                val sats = _telemetryState.value.sats ?: 0"},{"type":"INSERT","lineNumber":138,"content":"                if (sats < 6) {"},{"type":"INSERT","lineNumber":139,"content":"                    Log.w(\"SharedVM\", \"Insufficient GPS satellites ($sats), minimum 6 required\")"},{"type":"INSERT","lineNumber":140,"content":"                    onResult(false, \"Insufficient GPS satellites ($sats). Need at least 6 for mission.\")"},{"type":"INSERT","lineNumber":141,"content":"                    return@launch"},{"type":"INSERT","lineNumber":142,"content":"                }"},{"type":"INSERT","lineNumber":143,"content":""},{"type":"DELETE","lineNumber":114,"oldContent":"                val result = repo?.startMission(0, last) ?: false"},{"type":"DELETE","lineNumber":115,"oldContent":"                    // wait up to 5s for telemetry to report armed"},{"type":"DELETE","lineNumber":116,"oldContent":"                    val armTimeout = 5000L"},{"type":"DELETE","lineNumber":117,"oldContent":"                if (result) {"},{"type":"INSERT","lineNumber":148,"content":"                    // wait up to 8s for telemetry to report armed (increased timeout)"},{"type":"INSERT","lineNumber":149,"content":"                    val armTimeout = 8000L"},{"type":"DELETE","lineNumber":120,"oldContent":"                    Log.i(\"SharedVM\", \"Mission start acknowledged by FCU\")"},{"type":"DELETE","lineNumber":121,"oldContent":"                        delay(250)"},{"type":"DELETE","lineNumber":122,"oldContent":"                    onResult(true, null)"},{"type":"INSERT","lineNumber":152,"content":"                        delay(500)"},{"type":"DELETE","lineNumber":125,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":127,"oldContent":"                        onResult(false, \"Vehicle did not arm\")"},{"type":"DELETE","lineNumber":128,"oldContent":"                    Log.e(\"SharedVM\", \"Mission start failed or not acknowledged\")"},{"type":"INSERT","lineNumber":156,"content":"                        onResult(false, \"Vehicle failed to arm. Check pre-arm conditions.\")"},{"type":"DELETE","lineNumber":130,"oldContent":"                    onResult(false, \"Mission start failed or not acknowledged\")"},{"type":"DELETE","lineNumber":132,"oldContent":"                    Log.i(\"SharedVM\", \"Vehicle armed\")"},{"type":"INSERT","lineNumber":159,"content":"                    Log.i(\"SharedVM\", \"Vehicle armed successfully\")"},{"type":"DELETE","lineNumber":134,"oldContent":"                }"},{"type":"DELETE","lineNumber":135,"oldContent":"    // New helper to request mission from FCU and log its items for debugging"},{"type":"DELETE","lineNumber":137,"oldContent":"    fun readMissionFromFcu() {"},{"type":"DELETE","lineNumber":138,"oldContent":"                // Ensure vehicle mode is AUTO (some FCs require AUTO mode to execute mission)"},{"type":"DELETE","lineNumber":139,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":140,"oldContent":"                val desiredModeLabel = \"Auto\""},{"type":"DELETE","lineNumber":141,"oldContent":"            if (repo == null) {"},{"type":"INSERT","lineNumber":162,"content":"                // Ensure vehicle mode is AUTO (ArduPilot requires AUTO mode to execute mission)"},{"type":"DELETE","lineNumber":143,"oldContent":"                Log.w(\"SharedVM\", \"No repo available, cannot request mission readback\")"},{"type":"DELETE","lineNumber":145,"oldContent":"                return@launch"},{"type":"DELETE","lineNumber":146,"oldContent":"                    // attempt to set mode; changeMode expects numeric mode value"},{"type":"DELETE","lineNumber":147,"oldContent":"            }"},{"type":"DELETE","lineNumber":149,"oldContent":"            try {"},{"type":"DELETE","lineNumber":150,"oldContent":"                    // wait up to 4s for mode change"},{"type":"DELETE","lineNumber":151,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":152,"oldContent":"                    val modeTimeout = 4000L"},{"type":"INSERT","lineNumber":166,"content":"                    // wait up to 6s for mode change (increased timeout)"},{"type":"INSERT","lineNumber":167,"content":"                    val modeTimeout = 6000L"},{"type":"DELETE","lineNumber":154,"oldContent":"                Log.e(\"SharedVM\", \"Exception during mission readback\", e)"},{"type":"DELETE","lineNumber":156,"oldContent":"                        delay(250)"},{"type":"DELETE","lineNumber":157,"oldContent":"            }"},{"type":"INSERT","lineNumber":170,"content":"                        delay(500)"},{"type":"DELETE","lineNumber":160,"oldContent":"        }"},{"type":"DELETE","lineNumber":162,"oldContent":"    }"},{"type":"DELETE","lineNumber":163,"oldContent":"                        // not a hard failure; proceed to send mission start but warn"},{"type":"DELETE","lineNumber":164,"oldContent":""},{"type":"INSERT","lineNumber":174,"content":"                        onResult(false, \"Failed to switch to AUTO mode. Current mode: ${_telemetryState.value.mode}\")"},{"type":"INSERT","lineNumber":175,"content":"                        return@launch"},{"type":"DELETE","lineNumber":166,"oldContent":"}"},{"type":"DELETE","lineNumber":168,"oldContent":"                repo?.requestMissionAndLog()"},{"type":"INSERT","lineNumber":179,"content":"                }"},{"type":"INSERT","lineNumber":181,"content":"                // Give a small delay to ensure all mode changes are processed"},{"type":"INSERT","lineNumber":182,"content":"                delay(1000)"},{"type":"INSERT","lineNumber":183,"content":""},{"type":"INSERT","lineNumber":184,"content":"                val last = if (lastUploadedCount > 0) lastUploadedCount - 1 else 0"},{"type":"INSERT","lineNumber":185,"content":"                Log.i(\"SharedVM\", \"Sending start mission with first=0 last=$last\")"},{"type":"INSERT","lineNumber":186,"content":"                val result = repo?.startMission(0, last) ?: false"},{"type":"INSERT","lineNumber":187,"content":"                if (result) {"},{"type":"INSERT","lineNumber":188,"content":"                    Log.i(\"SharedVM\", \"Mission start acknowledged by FCU\")"},{"type":"INSERT","lineNumber":189,"content":"                    onResult(true, null)"},{"type":"INSERT","lineNumber":190,"content":"                } else {"},{"type":"INSERT","lineNumber":191,"content":"                    Log.e(\"SharedVM\", \"Mission start failed or not acknowledged\")"},{"type":"INSERT","lineNumber":192,"content":"                    onResult(false, \"Mission start failed. Check vehicle status and try again.\")"},{"type":"INSERT","lineNumber":194,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":195,"content":"                Log.e(\"SharedVM\", \"Failed to start mission\", e)"},{"type":"INSERT","lineNumber":196,"content":"                onResult(false, e.message)"},{"type":"INSERT","lineNumber":197,"content":"            }"},{"type":"INSERT","lineNumber":198,"content":"        }"},{"type":"DELETE","lineNumber":174,"oldContent":"        }"},{"type":"INSERT","lineNumber":201,"content":"    // New helper to request mission from FCU and log its items for debugging"},{"type":"INSERT","lineNumber":202,"content":"    fun readMissionFromFcu() {"},{"type":"INSERT","lineNumber":203,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":204,"content":"            if (repo == null) {"},{"type":"INSERT","lineNumber":205,"content":"                Log.w(\"SharedVM\", \"No repo available, cannot request mission readback\")"},{"type":"INSERT","lineNumber":206,"content":"                return@launch"},{"type":"DELETE","lineNumber":176,"oldContent":"                onResult(false, e.message)"},{"type":"DELETE","lineNumber":177,"oldContent":"                Log.e(\"SharedVM\", \"Failed to start mission\", e)"},{"type":"INSERT","lineNumber":208,"content":"            try {"},{"type":"INSERT","lineNumber":209,"content":"                repo?.requestMissionAndLog()"},{"type":"INSERT","lineNumber":211,"content":"                Log.e(\"SharedVM\", \"Exception during mission readback\", e)"},{"type":"INSERT","lineNumber":212,"content":"            }"},{"type":"INSERT","lineNumber":213,"content":"        }"},{"type":"INSERT","lineNumber":214,"content":"    }"},{"type":"INSERT","lineNumber":215,"content":"}"},{"type":"INSERT","lineNumber":216,"content":""}]},{"timestamp":1757998310355,"changes":[{"type":"DELETE","lineNumber":12,"oldContent":"import kotlinx.coroutines.flow.combine"},{"type":"MODIFY","lineNumber":13,"content":"import kotlinx.coroutines.delay","oldContent":"import kotlinx.coroutines.delay"},{"type":"INSERT","lineNumber":20,"content":"    private var repo: MavlinkTelemetryRepository? = null"},{"type":"DELETE","lineNumber":31,"oldContent":"    "},{"type":"DELETE","lineNumber":34,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":36,"oldContent":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":35,"content":""},{"type":"INSERT","lineNumber":36,"content":"    fun connect() {"},{"type":"INSERT","lineNumber":37,"content":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":40,"oldContent":"    fun connect() {"},{"type":"INSERT","lineNumber":48,"content":"    }"},{"type":"INSERT","lineNumber":59,"content":"                Log.i(\"SharedVM\", \"Request to upload mission with ${missionItems.size} items\")"},{"type":"DELETE","lineNumber":63,"oldContent":"                Log.i(\"SharedVM\", \"Request to upload mission with ${missionItems.size} items\")"},{"type":"INSERT","lineNumber":76,"content":""},{"type":"DELETE","lineNumber":80,"oldContent":""},{"type":"INSERT","lineNumber":82,"content":""},{"type":"INSERT","lineNumber":83,"content":"                    // Convert MissionItemInt to LatLng for display"},{"type":"INSERT","lineNumber":84,"content":"                    val waypoints = missionItems.map { item ->"},{"type":"INSERT","lineNumber":85,"content":"                        LatLng(item.x / 1E7, item.y / 1E7)"},{"type":"INSERT","lineNumber":86,"content":"                    }"},{"type":"INSERT","lineNumber":87,"content":"                    _uploadedWaypoints.value = waypoints"},{"type":"INSERT","lineNumber":88,"content":""},{"type":"DELETE","lineNumber":86,"oldContent":"                    "},{"type":"INSERT","lineNumber":93,"content":"                    _uploadedWaypoints.value = emptyList()"},{"type":"DELETE","lineNumber":88,"oldContent":"                    // Convert MissionItemInt to LatLng for display"},{"type":"INSERT","lineNumber":95,"content":"                    onResult(false, \"Mission upload failed or timed out\")"},{"type":"DELETE","lineNumber":90,"oldContent":"                    val waypoints = missionItems.map { item ->"},{"type":"DELETE","lineNumber":92,"oldContent":"                        LatLng(item.x / 1E7, item.y / 1E7)"},{"type":"DELETE","lineNumber":94,"oldContent":"                    }"},{"type":"DELETE","lineNumber":96,"oldContent":"                    _uploadedWaypoints.value = waypoints"},{"type":"INSERT","lineNumber":100,"content":"                _uploadedWaypoints.value = emptyList()"},{"type":"DELETE","lineNumber":98,"oldContent":"                    "},{"type":"DELETE","lineNumber":104,"oldContent":"                    _uploadedWaypoints.value = emptyList()"},{"type":"DELETE","lineNumber":107,"oldContent":"                    onResult(false, \"Mission upload failed or timed out\")"},{"type":"DELETE","lineNumber":112,"oldContent":"                _uploadedWaypoints.value = emptyList()"},{"type":"DELETE","lineNumber":115,"oldContent":"                    onResult(false, \"FCU not detected\")"},{"type":"DELETE","lineNumber":116,"oldContent":"                }"},{"type":"DELETE","lineNumber":117,"oldContent":"                    return@launch"},{"type":"DELETE","lineNumber":119,"oldContent":"                // Ensure vehicle is armed; if not, attempt to arm and wait briefly"},{"type":"DELETE","lineNumber":120,"oldContent":"                if (!_telemetryState.value.armed) {"},{"type":"DELETE","lineNumber":121,"oldContent":"                    Log.i(\"SharedVM\", \"Vehicle not armed - attempting to arm\")"},{"type":"DELETE","lineNumber":122,"oldContent":"                    repo?.arm()"},{"type":"DELETE","lineNumber":123,"oldContent":""},{"type":"DELETE","lineNumber":126,"oldContent":"                    val start = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":118,"content":"                    onResult(false, \"FCU not detected\")"},{"type":"DELETE","lineNumber":128,"oldContent":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - start < armTimeout) {"},{"type":"INSERT","lineNumber":120,"content":"                }"},{"type":"DELETE","lineNumber":132,"oldContent":"                    }"},{"type":"DELETE","lineNumber":134,"oldContent":"                    if (!_telemetryState.value.armed) {"},{"type":"DELETE","lineNumber":136,"oldContent":"                        Log.w(\"SharedVM\", \"Vehicle did not arm within timeout\")"},{"type":"INSERT","lineNumber":126,"content":"                    return@launch"},{"type":"INSERT","lineNumber":128,"content":""},{"type":"DELETE","lineNumber":139,"oldContent":"                        return@launch"},{"type":"DELETE","lineNumber":142,"oldContent":"                    }"},{"type":"DELETE","lineNumber":146,"oldContent":"                }"},{"type":"DELETE","lineNumber":149,"oldContent":""},{"type":"DELETE","lineNumber":156,"oldContent":"                if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"DELETE","lineNumber":158,"oldContent":"                    Log.i(\"SharedVM\", \"Switching vehicle mode to AUTO\")"},{"type":"INSERT","lineNumber":144,"content":"                // Ensure vehicle is armed; if not, attempt to arm and wait briefly"},{"type":"INSERT","lineNumber":145,"content":"                if (!_telemetryState.value.armed) {"},{"type":"INSERT","lineNumber":146,"content":"                    Log.i(\"SharedVM\", \"Vehicle not armed - attempting to arm\")"},{"type":"INSERT","lineNumber":147,"content":"                    repo?.arm()"},{"type":"DELETE","lineNumber":160,"oldContent":"                    repo?.changeMode(MavMode.AUTO)"},{"type":"INSERT","lineNumber":150,"content":"                    val start = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":151,"content":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - start < armTimeout) {"},{"type":"DELETE","lineNumber":163,"oldContent":"                    val mstart = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":164,"oldContent":"                    while (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true && System.currentTimeMillis() - mstart < modeTimeout) {"},{"type":"INSERT","lineNumber":153,"content":"                    }"},{"type":"INSERT","lineNumber":154,"content":"                    if (!_telemetryState.value.armed) {"},{"type":"INSERT","lineNumber":155,"content":"                        Log.w(\"SharedVM\", \"Vehicle did not arm within timeout\")"},{"type":"INSERT","lineNumber":157,"content":"                        return@launch"},{"type":"DELETE","lineNumber":168,"oldContent":"                    if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"DELETE","lineNumber":169,"oldContent":"                        Log.w(\"SharedVM\", \"Vehicle did not switch to AUTO mode within timeout\")"},{"type":"INSERT","lineNumber":160,"content":"                }"},{"type":"INSERT","lineNumber":161,"content":""},{"type":"DELETE","lineNumber":171,"oldContent":"                    } else {"},{"type":"INSERT","lineNumber":163,"content":"                if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"INSERT","lineNumber":164,"content":"                    Log.i(\"SharedVM\", \"Switching vehicle mode to AUTO\")"},{"type":"INSERT","lineNumber":165,"content":"                    repo?.changeMode(MavMode.AUTO)"},{"type":"DELETE","lineNumber":174,"oldContent":"                        Log.i(\"SharedVM\", \"Vehicle mode is now AUTO\")"},{"type":"DELETE","lineNumber":175,"oldContent":"                    }"},{"type":"INSERT","lineNumber":168,"content":"                    val mstart = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":169,"content":"                    while (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true && System.currentTimeMillis() - mstart < modeTimeout) {"},{"type":"DELETE","lineNumber":177,"oldContent":"                repo?.requestMissionAndLog()"},{"type":"DELETE","lineNumber":178,"oldContent":"                }"},{"type":"DELETE","lineNumber":179,"oldContent":""},{"type":"DELETE","lineNumber":180,"oldContent":""},{"type":"INSERT","lineNumber":171,"content":"                    }"},{"type":"INSERT","lineNumber":172,"content":"                    if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"INSERT","lineNumber":173,"content":"                        Log.w(\"SharedVM\", \"Vehicle did not switch to AUTO mode within timeout\")"},{"type":"DELETE","lineNumber":183,"oldContent":"        }"},{"type":"DELETE","lineNumber":184,"oldContent":"                Log.e(\"SharedVM\", \"Failed to start mission\", e)"},{"type":"INSERT","lineNumber":176,"content":"                    } else {"},{"type":"INSERT","lineNumber":177,"content":"                        Log.i(\"SharedVM\", \"Vehicle mode is now AUTO\")"},{"type":"INSERT","lineNumber":178,"content":"                    }"},{"type":"DELETE","lineNumber":186,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":189,"oldContent":"}"},{"type":"DELETE","lineNumber":191,"oldContent":"    }"},{"type":"DELETE","lineNumber":193,"oldContent":"        }"},{"type":"DELETE","lineNumber":195,"oldContent":"            }"},{"type":"DELETE","lineNumber":197,"oldContent":"                Log.e(\"SharedVM\", \"Exception during mission readback\", e)"},{"type":"DELETE","lineNumber":199,"oldContent":"                repo?.requestMissionAndLog()"},{"type":"DELETE","lineNumber":201,"oldContent":"            try {"},{"type":"DELETE","lineNumber":203,"oldContent":"                return@launch"},{"type":"DELETE","lineNumber":205,"oldContent":"                Log.w(\"SharedVM\", \"No repo available, cannot request mission readback\")"},{"type":"DELETE","lineNumber":207,"oldContent":"            if (repo == null) {"},{"type":"DELETE","lineNumber":209,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":211,"oldContent":"    fun readMissionFromFcu() {"},{"type":"DELETE","lineNumber":212,"oldContent":"    // New helper to request mission from FCU and log its items for debugging"},{"type":"INSERT","lineNumber":193,"content":"                }"},{"type":"DELETE","lineNumber":214,"oldContent":"        }"},{"type":"DELETE","lineNumber":216,"oldContent":"            }"},{"type":"INSERT","lineNumber":197,"content":"            }"},{"type":"INSERT","lineNumber":198,"content":"        }"},{"type":"INSERT","lineNumber":199,"content":"    }"},{"type":"INSERT","lineNumber":200,"content":""},{"type":"INSERT","lineNumber":201,"content":"    // New helper to request mission from FCU and log its items for debugging"},{"type":"INSERT","lineNumber":202,"content":"    fun readMissionFromFcu() {"},{"type":"INSERT","lineNumber":203,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":204,"content":"            if (repo == null) {"},{"type":"INSERT","lineNumber":205,"content":"                Log.w(\"SharedVM\", \"No repo available, cannot request mission readback\")"},{"type":"INSERT","lineNumber":206,"content":"                return@launch"},{"type":"INSERT","lineNumber":207,"content":"            }"},{"type":"INSERT","lineNumber":208,"content":"            try {"},{"type":"INSERT","lineNumber":209,"content":"                repo?.requestMissionAndLog()"},{"type":"INSERT","lineNumber":210,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":211,"content":"                Log.e(\"SharedVM\", \"Exception during mission readback\", e)"},{"type":"INSERT","lineNumber":212,"content":"            }"},{"type":"INSERT","lineNumber":213,"content":"        }"},{"type":"INSERT","lineNumber":214,"content":"    }"},{"type":"INSERT","lineNumber":215,"content":"}"},{"type":"INSERT","lineNumber":216,"content":""}]},{"timestamp":1757999117769,"changes":[{"type":"MODIFY","lineNumber":13,"content":"import kotlinx.coroutines.delay","oldContent":"import kotlinx.coroutines.delay"},{"type":"INSERT","lineNumber":19,"content":""},{"type":"DELETE","lineNumber":21,"oldContent":""},{"type":"DELETE","lineNumber":33,"oldContent":""},{"type":"INSERT","lineNumber":34,"content":"    val uploadedWaypoints: StateFlow<List<LatLng>> = _uploadedWaypoints.asStateFlow()"},{"type":"INSERT","lineNumber":35,"content":""},{"type":"DELETE","lineNumber":37,"oldContent":"    val uploadedWaypoints: StateFlow<List<LatLng>> = _uploadedWaypoints.asStateFlow()"},{"type":"MODIFY","lineNumber":48,"content":"    }","oldContent":"    }"},{"type":"DELETE","lineNumber":83,"oldContent":"                    Log.i(\"SharedVM\", \"Mission upload succeeded (${missionItems.size})\")"},{"type":"DELETE","lineNumber":85,"oldContent":"                    onResult(true, null)"},{"type":"DELETE","lineNumber":87,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":89,"oldContent":"                    lastUploadedCount = 0"},{"type":"DELETE","lineNumber":92,"oldContent":"                    Log.e(\"SharedVM\", \"Mission upload failed or timed out\")"},{"type":"INSERT","lineNumber":89,"content":"                    Log.i(\"SharedVM\", \"Mission upload succeeded (${missionItems.size}). ACK received.\")"},{"type":"INSERT","lineNumber":90,"content":"                    onResult(true, null)"},{"type":"INSERT","lineNumber":91,"content":"                } else {"},{"type":"INSERT","lineNumber":92,"content":"                    lastUploadedCount = 0"},{"type":"INSERT","lineNumber":93,"content":"                    _uploadedWaypoints.value = emptyList()"},{"type":"INSERT","lineNumber":94,"content":"                    Log.e(\"SharedVM\", \"Mission upload failed or timed out (no ACK)\")"},{"type":"INSERT","lineNumber":95,"content":"                    onResult(false, \"Mission upload failed or timed out\")"},{"type":"DELETE","lineNumber":96,"oldContent":"                    _uploadedWaypoints.value = emptyList()"},{"type":"DELETE","lineNumber":98,"oldContent":"                    onResult(false, \"Mission upload failed or timed out\")"},{"type":"INSERT","lineNumber":100,"content":"                _uploadedWaypoints.value = emptyList()"},{"type":"DELETE","lineNumber":102,"oldContent":"                _uploadedWaypoints.value = emptyList()"},{"type":"INSERT","lineNumber":109,"content":"            val tag = \"StartMissionFlow\""},{"type":"MODIFY","lineNumber":112,"content":"                    Log.w(tag, \"No repo available, cannot start mission\")","oldContent":"                    Log.w(\"SharedVM\", \"No repo available, cannot start mission\")"},{"type":"DELETE","lineNumber":115,"oldContent":"                    onResult(false, \"FCU not detected\")"},{"type":"DELETE","lineNumber":117,"oldContent":"                }"},{"type":"MODIFY","lineNumber":118,"content":"                    Log.w(tag, \"FCU not detected, cannot start mission\")","oldContent":"                    Log.w(\"SharedVM\", \"FCU not detected, cannot start mission\")"},{"type":"INSERT","lineNumber":119,"content":"                    onResult(false, \"FCU not detected\")"},{"type":"MODIFY","lineNumber":121,"content":"                }","oldContent":"                    return@launch"},{"type":"DELETE","lineNumber":123,"oldContent":""},{"type":"MODIFY","lineNumber":123,"content":"                // 1) Check mission upload ACK state","oldContent":"                // Check if mission is uploaded"},{"type":"DELETE","lineNumber":126,"oldContent":"                    Log.w(\"SharedVM\", \"No mission uploaded, cannot start\")"},{"type":"DELETE","lineNumber":127,"oldContent":"                    onResult(false, \"No mission uploaded. Please upload a mission first.\")"},{"type":"INSERT","lineNumber":125,"content":"                    Log.e(tag, \"No mission ACK present. Upload a mission first.\")"},{"type":"INSERT","lineNumber":126,"content":"                    onResult(false, \"No mission uploaded/acknowledged.\")"},{"type":"INSERT","lineNumber":127,"content":"                    return@launch"},{"type":"INSERT","lineNumber":128,"content":"                } else {"},{"type":"INSERT","lineNumber":129,"content":"                    Log.i(tag, \"Mission ACK confirmed (items=$lastUploadedCount)\")"},{"type":"DELETE","lineNumber":129,"oldContent":"                // Check if vehicle is armable"},{"type":"DELETE","lineNumber":130,"oldContent":"                if (!_telemetryState.value.armable) {"},{"type":"DELETE","lineNumber":131,"oldContent":"                    Log.w(\"SharedVM\", \"Vehicle not armable, cannot start mission\")"},{"type":"DELETE","lineNumber":132,"oldContent":"                    onResult(false, \"Vehicle not armable. Check sensors and GPS.\")"},{"type":"DELETE","lineNumber":133,"oldContent":"                // Ensure vehicle is armed; if not, attempt to arm and wait briefly"},{"type":"INSERT","lineNumber":131,"content":""},{"type":"INSERT","lineNumber":132,"content":"                // 2) Change mode to AUTO and verify"},{"type":"INSERT","lineNumber":133,"content":"                Log.i(tag, \"Requesting AUTO mode...\")"},{"type":"INSERT","lineNumber":134,"content":"                val autoOk = repo!!.changeModeAutoWithVerify(timeoutMs = 7000)"},{"type":"INSERT","lineNumber":135,"content":"                if (!autoOk) {"},{"type":"INSERT","lineNumber":136,"content":"                    Log.e(tag, \"Mode change to AUTO failed. Current mode='${_telemetryState.value.mode}'\")"},{"type":"INSERT","lineNumber":137,"content":"                    onResult(false, \"Mode change to AUTO failed\")"},{"type":"DELETE","lineNumber":135,"oldContent":"                if (!_telemetryState.value.armed) {"},{"type":"DELETE","lineNumber":137,"oldContent":"                    Log.i(\"SharedVM\", \"Vehicle not armed - attempting to arm\")"},{"type":"DELETE","lineNumber":138,"oldContent":"                    repo?.arm()"},{"type":"INSERT","lineNumber":140,"content":"                Log.i(tag, \"Mode is AUTO confirmed by telemetry\")"},{"type":"DELETE","lineNumber":140,"oldContent":"                // Check GPS fix"},{"type":"INSERT","lineNumber":142,"content":"                // 3) Arm motors and verify"},{"type":"INSERT","lineNumber":143,"content":"                if (!_telemetryState.value.armed) {"},{"type":"INSERT","lineNumber":144,"content":"                    Log.i(tag, \"Arming motors...\")"},{"type":"INSERT","lineNumber":145,"content":"                    repo!!.arm()"},{"type":"INSERT","lineNumber":146,"content":"                    val armTimeout = 8000L"},{"type":"DELETE","lineNumber":142,"oldContent":"                val sats = _telemetryState.value.sats ?: 0"},{"type":"DELETE","lineNumber":144,"oldContent":"                if (sats < 6) {"},{"type":"DELETE","lineNumber":145,"oldContent":"                    Log.w(\"SharedVM\", \"Insufficient GPS satellites ($sats), minimum 6 required\")"},{"type":"INSERT","lineNumber":149,"content":"                        delay(300)"},{"type":"DELETE","lineNumber":147,"oldContent":"                    onResult(false, \"Insufficient GPS satellites ($sats). Need at least 6 for mission.\")"},{"type":"DELETE","lineNumber":149,"oldContent":"                    return@launch"},{"type":"DELETE","lineNumber":150,"oldContent":"                        Log.w(\"SharedVM\", \"Vehicle did not arm within timeout\")"},{"type":"DELETE","lineNumber":151,"oldContent":"                }"},{"type":"INSERT","lineNumber":152,"content":"                        Log.e(tag, \"Vehicle failed to arm within ${armTimeout}ms. armable=${_telemetryState.value.armable}\")"},{"type":"INSERT","lineNumber":153,"content":"                        onResult(false, \"Vehicle failed to arm\")"},{"type":"DELETE","lineNumber":153,"oldContent":""},{"type":"DELETE","lineNumber":154,"oldContent":"                    // wait up to 8s for telemetry to report armed (increased timeout)"},{"type":"DELETE","lineNumber":155,"oldContent":"                }"},{"type":"DELETE","lineNumber":156,"oldContent":""},{"type":"DELETE","lineNumber":157,"oldContent":"                    val armTimeout = 8000L"},{"type":"DELETE","lineNumber":158,"oldContent":"                        delay(500)"},{"type":"DELETE","lineNumber":159,"oldContent":"                if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"DELETE","lineNumber":160,"oldContent":"                    Log.i(\"SharedVM\", \"Switching vehicle mode to AUTO\")"},{"type":"DELETE","lineNumber":161,"oldContent":"                    repo?.changeMode(MavMode.AUTO)"},{"type":"DELETE","lineNumber":162,"oldContent":"                        onResult(false, \"Vehicle failed to arm. Check pre-arm conditions.\")"},{"type":"DELETE","lineNumber":164,"oldContent":"                    Log.i(\"SharedVM\", \"Vehicle armed successfully\")"},{"type":"DELETE","lineNumber":165,"oldContent":"                    val mstart = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":166,"oldContent":"                    while (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true && System.currentTimeMillis() - mstart < modeTimeout) {"},{"type":"DELETE","lineNumber":167,"oldContent":"                // Ensure vehicle mode is AUTO (ArduPilot requires AUTO mode to execute mission)"},{"type":"DELETE","lineNumber":168,"oldContent":"                    }"},{"type":"DELETE","lineNumber":169,"oldContent":"                    if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"DELETE","lineNumber":170,"oldContent":"                    // wait up to 6s for mode change (increased timeout)"},{"type":"DELETE","lineNumber":171,"oldContent":"                        Log.w(\"SharedVM\", \"Vehicle did not switch to AUTO mode within timeout\")"},{"type":"DELETE","lineNumber":172,"oldContent":"                    val modeTimeout = 6000L"},{"type":"DELETE","lineNumber":173,"oldContent":"                    } else {"},{"type":"DELETE","lineNumber":174,"oldContent":"                        delay(500)"},{"type":"DELETE","lineNumber":175,"oldContent":"                        Log.i(\"SharedVM\", \"Vehicle mode is now AUTO\")"},{"type":"DELETE","lineNumber":176,"oldContent":"                    }"},{"type":"DELETE","lineNumber":177,"oldContent":"                        onResult(false, \"Failed to switch to AUTO mode. Current mode: ${_telemetryState.value.mode}\")"},{"type":"DELETE","lineNumber":178,"oldContent":"                        return@launch"},{"type":"INSERT","lineNumber":157,"content":"                Log.i(tag, \"Motors armed confirmed\")"},{"type":"DELETE","lineNumber":181,"oldContent":"                // Give a small delay to ensure all mode changes are processed"},{"type":"DELETE","lineNumber":182,"oldContent":"                delay(1000)"},{"type":"DELETE","lineNumber":183,"oldContent":""},{"type":"DELETE","lineNumber":184,"oldContent":"                }"},{"type":"INSERT","lineNumber":159,"content":"                // 4) Start mission"},{"type":"DELETE","lineNumber":186,"oldContent":"                Log.i(\"SharedVM\", \"Sending start mission with first=0 last=$last\")"},{"type":"INSERT","lineNumber":161,"content":"                Log.i(tag, \"Sending MISSION_START (first=0, last=$last)...\")"},{"type":"INSERT","lineNumber":162,"content":"                val result = repo!!.startMission(0, last)"},{"type":"INSERT","lineNumber":163,"content":"                if (result) {"},{"type":"INSERT","lineNumber":164,"content":"                    Log.i(tag, \"MISSION_START accepted by FCU\")"},{"type":"INSERT","lineNumber":165,"content":"                    onResult(true, null)"},{"type":"INSERT","lineNumber":166,"content":"                } else {"},{"type":"INSERT","lineNumber":167,"content":"                    Log.e(tag, \"MISSION_START rejected or timed out\")"},{"type":"INSERT","lineNumber":168,"content":"                    onResult(false, \"Mission start failed or timed out\")"},{"type":"INSERT","lineNumber":169,"content":"                }"},{"type":"INSERT","lineNumber":170,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":171,"content":"                Log.e(tag, \"Failed to start mission\", e)"},{"type":"INSERT","lineNumber":172,"content":"                onResult(false, e.message)"},{"type":"DELETE","lineNumber":189,"oldContent":"                val result = repo?.startMission(0, last) ?: false"},{"type":"DELETE","lineNumber":192,"oldContent":"                if (result) {"},{"type":"DELETE","lineNumber":195,"oldContent":"                    Log.i(\"SharedVM\", \"Mission start acknowledged by FCU\")"},{"type":"DELETE","lineNumber":198,"oldContent":"                    onResult(true, null)"},{"type":"DELETE","lineNumber":201,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":204,"oldContent":"                    Log.e(\"SharedVM\", \"Mission start failed or not acknowledged\")"},{"type":"DELETE","lineNumber":207,"oldContent":"                    onResult(false, \"Mission start failed. Check vehicle status and try again.\")"},{"type":"DELETE","lineNumber":211,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":214,"oldContent":"                Log.e(\"SharedVM\", \"Failed to start mission\", e)"},{"type":"DELETE","lineNumber":216,"oldContent":"                onResult(false, e.message)"}]},{"timestamp":1757999634146,"changes":[{"type":"INSERT","lineNumber":12,"content":"import kotlinx.coroutines.launch"},{"type":"DELETE","lineNumber":13,"oldContent":"import kotlinx.coroutines.delay"},{"type":"MODIFY","lineNumber":34,"content":"    val uploadedWaypoints: StateFlow<List<LatLng>> = _uploadedWaypoints.asStateFlow()","oldContent":"    val uploadedWaypoints: StateFlow<List<LatLng>> = _uploadedWaypoints.asStateFlow()"},{"type":"INSERT","lineNumber":47,"content":"        }"},{"type":"DELETE","lineNumber":48,"oldContent":"    }"},{"type":"DELETE","lineNumber":86,"oldContent":"                    Log.i(\"SharedVM\", \"Mission upload succeeded (${missionItems.size}). ACK received.\")"},{"type":"DELETE","lineNumber":87,"oldContent":"                    onResult(true, null)"},{"type":"DELETE","lineNumber":89,"oldContent":"                } else {"},{"type":"INSERT","lineNumber":88,"content":""},{"type":"INSERT","lineNumber":89,"content":"                    Log.i(\"SharedVM\", \"Mission upload succeeded (${missionItems.size})\")"},{"type":"INSERT","lineNumber":90,"content":"                    onResult(true, null)"},{"type":"INSERT","lineNumber":91,"content":"                } else {"},{"type":"DELETE","lineNumber":93,"oldContent":""},{"type":"DELETE","lineNumber":94,"oldContent":"                    Log.e(\"SharedVM\", \"Mission upload failed or timed out (no ACK)\")"},{"type":"DELETE","lineNumber":95,"oldContent":"                }"},{"type":"INSERT","lineNumber":94,"content":"                    Log.e(\"SharedVM\", \"Mission upload failed or timed out\")"},{"type":"INSERT","lineNumber":96,"content":"                }"},{"type":"DELETE","lineNumber":109,"oldContent":"            val tag = \"StartMissionFlow\""},{"type":"DELETE","lineNumber":113,"oldContent":"                    Log.w(tag, \"No repo available, cannot start mission\")"},{"type":"INSERT","lineNumber":112,"content":"                    onResult(false, \"Not connected to vehicle\")"},{"type":"DELETE","lineNumber":117,"oldContent":"                    Log.w(tag, \"FCU not detected, cannot start mission\")"},{"type":"DELETE","lineNumber":118,"oldContent":"                    onResult(false, \"FCU not detected\")"},{"type":"INSERT","lineNumber":116,"content":"                if (!_telemetryState.value.fcuDetected) {"},{"type":"INSERT","lineNumber":118,"content":"                    onResult(false, \"FCU not detected\")"},{"type":"DELETE","lineNumber":123,"oldContent":"                // 1) Check mission upload ACK state"},{"type":"DELETE","lineNumber":124,"oldContent":"                    Log.e(tag, \"No mission ACK present. Upload a mission first.\")"},{"type":"INSERT","lineNumber":122,"content":"                // Check if mission is uploaded"},{"type":"DELETE","lineNumber":126,"oldContent":"                    onResult(false, \"No mission uploaded/acknowledged.\")"},{"type":"INSERT","lineNumber":124,"content":"                    Log.w(\"SharedVM\", \"No mission uploaded, cannot start\")"},{"type":"INSERT","lineNumber":125,"content":"                    onResult(false, \"No mission uploaded. Please upload a mission first.\")"},{"type":"DELETE","lineNumber":128,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":130,"oldContent":"                    Log.i(tag, \"Mission ACK confirmed (items=$lastUploadedCount)\")"},{"type":"DELETE","lineNumber":132,"oldContent":"                // 2) Change mode to AUTO and verify"},{"type":"DELETE","lineNumber":133,"oldContent":"                Log.i(tag, \"Requesting AUTO mode...\")"},{"type":"DELETE","lineNumber":134,"oldContent":"                val autoOk = repo!!.changeModeAutoWithVerify(timeoutMs = 7000)"},{"type":"INSERT","lineNumber":129,"content":"                // Check if vehicle is armable"},{"type":"INSERT","lineNumber":130,"content":"                if (!_telemetryState.value.armable) {"},{"type":"INSERT","lineNumber":131,"content":"                    Log.w(\"SharedVM\", \"Vehicle not armable, cannot start mission\")"},{"type":"INSERT","lineNumber":132,"content":"                    onResult(false, \"Vehicle not armable. Check sensors and GPS.\")"},{"type":"DELETE","lineNumber":136,"oldContent":"                if (!autoOk) {"},{"type":"DELETE","lineNumber":137,"oldContent":"                    Log.e(tag, \"Mode change to AUTO failed. Current mode='${_telemetryState.value.mode}'\")"},{"type":"DELETE","lineNumber":139,"oldContent":"                    onResult(false, \"Mode change to AUTO failed\")"},{"type":"DELETE","lineNumber":141,"oldContent":"                Log.i(tag, \"Mode is AUTO confirmed by telemetry\")"},{"type":"DELETE","lineNumber":142,"oldContent":"                    val start = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":143,"oldContent":"                // 3) Arm motors and verify"},{"type":"INSERT","lineNumber":136,"content":"                // Check GPS fix"},{"type":"INSERT","lineNumber":137,"content":"                val sats = _telemetryState.value.sats ?: 0"},{"type":"INSERT","lineNumber":138,"content":"                if (sats < 6) {"},{"type":"INSERT","lineNumber":139,"content":"                    Log.w(\"SharedVM\", \"Insufficient GPS satellites ($sats), minimum 6 required\")"},{"type":"INSERT","lineNumber":140,"content":"                    onResult(false, \"Insufficient GPS satellites ($sats). Need at least 6 for mission.\")"},{"type":"INSERT","lineNumber":141,"content":"                    return@launch"},{"type":"INSERT","lineNumber":142,"content":"                }"},{"type":"INSERT","lineNumber":143,"content":""},{"type":"INSERT","lineNumber":144,"content":"                // Ensure vehicle is armed; if not, attempt to arm and wait briefly"},{"type":"DELETE","lineNumber":145,"oldContent":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - start < armTimeout) {"},{"type":"DELETE","lineNumber":146,"oldContent":"                    Log.i(tag, \"Arming motors...\")"},{"type":"DELETE","lineNumber":147,"oldContent":"                    repo!!.arm()"},{"type":"INSERT","lineNumber":146,"content":"                    Log.i(\"SharedVM\", \"Vehicle not armed - attempting to arm\")"},{"type":"INSERT","lineNumber":147,"content":"                    repo?.arm()"},{"type":"INSERT","lineNumber":148,"content":"                    // wait up to 8s for telemetry to report armed (increased timeout)"},{"type":"INSERT","lineNumber":150,"content":"                    val start = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":151,"content":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - start < armTimeout) {"},{"type":"INSERT","lineNumber":152,"content":"                        delay(500)"},{"type":"DELETE","lineNumber":151,"oldContent":"                        delay(300)"},{"type":"DELETE","lineNumber":152,"oldContent":"                        Log.e(tag, \"Vehicle failed to arm within ${armTimeout}ms. armable=${_telemetryState.value.armable}\")"},{"type":"INSERT","lineNumber":155,"content":"                        Log.w(\"SharedVM\", \"Vehicle did not arm within timeout\")"},{"type":"INSERT","lineNumber":156,"content":"                        onResult(false, \"Vehicle failed to arm. Check pre-arm conditions.\")"},{"type":"DELETE","lineNumber":154,"oldContent":"                        onResult(false, \"Vehicle failed to arm\")"},{"type":"DELETE","lineNumber":155,"oldContent":"                Log.i(tag, \"Motors armed confirmed\")"},{"type":"DELETE","lineNumber":156,"oldContent":"                // 4) Start mission"},{"type":"DELETE","lineNumber":157,"oldContent":"                Log.i(tag, \"Sending MISSION_START (first=0, last=$last)...\")"},{"type":"DELETE","lineNumber":158,"oldContent":"                val result = repo!!.startMission(0, last)"},{"type":"DELETE","lineNumber":159,"oldContent":"                if (result) {"},{"type":"DELETE","lineNumber":161,"oldContent":"                    Log.i(tag, \"MISSION_START accepted by FCU\")"},{"type":"INSERT","lineNumber":159,"content":"                    Log.i(\"SharedVM\", \"Vehicle armed successfully\")"},{"type":"INSERT","lineNumber":160,"content":"                }"},{"type":"INSERT","lineNumber":161,"content":""},{"type":"INSERT","lineNumber":162,"content":"                // Ensure vehicle mode is AUTO (ArduPilot requires AUTO mode to execute mission)"},{"type":"INSERT","lineNumber":163,"content":"                if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"INSERT","lineNumber":164,"content":"                    Log.i(\"SharedVM\", \"Switching vehicle mode to AUTO\")"},{"type":"INSERT","lineNumber":165,"content":"                    repo?.changeMode(MavMode.AUTO)"},{"type":"INSERT","lineNumber":166,"content":"                    // wait up to 6s for mode change (increased timeout)"},{"type":"INSERT","lineNumber":167,"content":"                    val modeTimeout = 6000L"},{"type":"INSERT","lineNumber":168,"content":"                    val mstart = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":169,"content":"                    while (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true && System.currentTimeMillis() - mstart < modeTimeout) {"},{"type":"INSERT","lineNumber":170,"content":"                        delay(500)"},{"type":"INSERT","lineNumber":171,"content":"                    }"},{"type":"INSERT","lineNumber":172,"content":"                    if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"INSERT","lineNumber":173,"content":"                        Log.w(\"SharedVM\", \"Vehicle did not switch to AUTO mode within timeout\")"},{"type":"INSERT","lineNumber":174,"content":"                        onResult(false, \"Failed to switch to AUTO mode. Current mode: ${_telemetryState.value.mode}\")"},{"type":"INSERT","lineNumber":175,"content":"                        return@launch"},{"type":"INSERT","lineNumber":176,"content":"                    } else {"},{"type":"INSERT","lineNumber":177,"content":"                        Log.i(\"SharedVM\", \"Vehicle mode is now AUTO\")"},{"type":"INSERT","lineNumber":178,"content":"                    }"},{"type":"INSERT","lineNumber":179,"content":"                }"},{"type":"INSERT","lineNumber":180,"content":""},{"type":"INSERT","lineNumber":181,"content":"                // Give a small delay to ensure all mode changes are processed"},{"type":"INSERT","lineNumber":182,"content":"                delay(1000)"},{"type":"INSERT","lineNumber":183,"content":""},{"type":"INSERT","lineNumber":184,"content":"                val last = if (lastUploadedCount > 0) lastUploadedCount - 1 else 0"},{"type":"INSERT","lineNumber":185,"content":"                Log.i(\"SharedVM\", \"Sending start mission with first=0 last=$last\")"},{"type":"INSERT","lineNumber":186,"content":"                val result = repo?.startMission(0, last) ?: false"},{"type":"INSERT","lineNumber":187,"content":"                if (result) {"},{"type":"INSERT","lineNumber":188,"content":"                    Log.i(\"SharedVM\", \"Mission start acknowledged by FCU\")"},{"type":"DELETE","lineNumber":164,"oldContent":"                    Log.e(tag, \"MISSION_START rejected or timed out\")"},{"type":"DELETE","lineNumber":165,"oldContent":"                    onResult(false, \"Mission start failed or timed out\")"},{"type":"INSERT","lineNumber":191,"content":"                    Log.e(\"SharedVM\", \"Mission start failed or not acknowledged\")"},{"type":"INSERT","lineNumber":192,"content":"                    onResult(false, \"Mission start failed. Check vehicle status and try again.\")"},{"type":"DELETE","lineNumber":168,"oldContent":"                Log.e(tag, \"Failed to start mission\", e)"},{"type":"INSERT","lineNumber":195,"content":"                Log.e(\"SharedVM\", \"Failed to start mission\", e)"},{"type":"DELETE","lineNumber":170,"oldContent":"                }"},{"type":"DELETE","lineNumber":171,"oldContent":""},{"type":"DELETE","lineNumber":172,"oldContent":"                val last = if (lastUploadedCount > 0) lastUploadedCount - 1 else 0"}]},{"timestamp":1758001922818,"changes":[{"type":"INSERT","lineNumber":14,"content":""},{"type":"DELETE","lineNumber":19,"oldContent":""},{"type":"MODIFY","lineNumber":21,"content":"","oldContent":"    private var repo: MavlinkTelemetryRepository? = null"},{"type":"INSERT","lineNumber":33,"content":"    private val _uploadedWaypoints = MutableStateFlow<List<LatLng>>(emptyList())"},{"type":"DELETE","lineNumber":34,"oldContent":"    val uploadedWaypoints: StateFlow<List<LatLng>> = _uploadedWaypoints.asStateFlow()"},{"type":"INSERT","lineNumber":38,"content":"            val portInt = port.toIntOrNull()"},{"type":"DELETE","lineNumber":47,"oldContent":"        }"},{"type":"DELETE","lineNumber":86,"oldContent":""},{"type":"INSERT","lineNumber":87,"content":"                    _uploadedWaypoints.value = waypoints"},{"type":"INSERT","lineNumber":88,"content":""},{"type":"DELETE","lineNumber":90,"oldContent":"                    _uploadedWaypoints.value = waypoints"},{"type":"MODIFY","lineNumber":96,"content":"                }","oldContent":"                }"},{"type":"INSERT","lineNumber":110,"content":"                Log.i(\"SharedVM\", \"=== Starting Mission Start Sequence ===\")"},{"type":"INSERT","lineNumber":111,"content":"                "},{"type":"DELETE","lineNumber":111,"oldContent":"                    onResult(false, \"Not connected to vehicle\")"},{"type":"INSERT","lineNumber":114,"content":"                    onResult(false, \"Not connected to vehicle\")"},{"type":"DELETE","lineNumber":115,"oldContent":"                if (!_telemetryState.value.fcuDetected) {"},{"type":"DELETE","lineNumber":117,"oldContent":"                    onResult(false, \"FCU not detected\")"},{"type":"INSERT","lineNumber":118,"content":"                if (!_telemetryState.value.fcuDetected) {"},{"type":"INSERT","lineNumber":120,"content":"                    onResult(false, \"FCU not detected\")"},{"type":"DELETE","lineNumber":121,"oldContent":"                // Check if mission is uploaded"},{"type":"DELETE","lineNumber":123,"oldContent":"                    Log.w(\"SharedVM\", \"No mission uploaded, cannot start\")"},{"type":"MODIFY","lineNumber":124,"content":"                // STEP 1: Check if mission acknowledgment has been received (mission uploaded)","oldContent":"                    onResult(false, \"No mission uploaded. Please upload a mission first.\")"},{"type":"INSERT","lineNumber":125,"content":"                Log.i(\"SharedVM\", \"Step 1: Checking mission acknowledgment status\")"},{"type":"INSERT","lineNumber":127,"content":"                    Log.w(\"SharedVM\", \"No mission uploaded or acknowledged, cannot start\")"},{"type":"INSERT","lineNumber":128,"content":"                    onResult(false, \"No mission uploaded. Please upload a mission first.\")"},{"type":"DELETE","lineNumber":127,"oldContent":"                // Check if vehicle is armable"},{"type":"INSERT","lineNumber":131,"content":"                Log.i(\"SharedVM\", \"âœ“ Mission acknowledgment confirmed - ${lastUploadedCount} waypoints uploaded\")"},{"type":"INSERT","lineNumber":132,"content":""},{"type":"INSERT","lineNumber":133,"content":"                // Check if vehicle is armable"},{"type":"DELETE","lineNumber":131,"oldContent":""},{"type":"INSERT","lineNumber":138,"content":"                }"},{"type":"INSERT","lineNumber":139,"content":""},{"type":"DELETE","lineNumber":137,"oldContent":"                }"},{"type":"DELETE","lineNumber":140,"oldContent":""},{"type":"INSERT","lineNumber":147,"content":"                Log.i(\"SharedVM\", \"âœ“ GPS fix confirmed - ${sats} satellites\")"},{"type":"DELETE","lineNumber":144,"oldContent":"                // Ensure vehicle is armed; if not, attempt to arm and wait briefly"},{"type":"DELETE","lineNumber":145,"oldContent":"                if (!_telemetryState.value.armed) {"},{"type":"INSERT","lineNumber":149,"content":"                // STEP 2: Change mode to AUTO first (before arming)"},{"type":"INSERT","lineNumber":150,"content":"                Log.i(\"SharedVM\", \"Step 2: Changing vehicle mode to AUTO\")"},{"type":"INSERT","lineNumber":151,"content":"                val currentMode = _telemetryState.value.mode"},{"type":"INSERT","lineNumber":152,"content":"                Log.i(\"SharedVM\", \"Current vehicle mode: $currentMode\")"},{"type":"INSERT","lineNumber":153,"content":"                "},{"type":"INSERT","lineNumber":154,"content":"                if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"INSERT","lineNumber":155,"content":"                    Log.i(\"SharedVM\", \"Switching vehicle mode from $currentMode to AUTO\")"},{"type":"INSERT","lineNumber":156,"content":"                    repo?.changeMode(MavMode.AUTO)"},{"type":"INSERT","lineNumber":157,"content":"                    "},{"type":"INSERT","lineNumber":158,"content":"                    // Wait for mode change with detailed logging"},{"type":"INSERT","lineNumber":159,"content":"                    val modeTimeout = 8000L // Increased timeout"},{"type":"INSERT","lineNumber":160,"content":"                    val modeStart = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":161,"content":"                    var modeChangeSuccess = false"},{"type":"INSERT","lineNumber":162,"content":"                    "},{"type":"INSERT","lineNumber":163,"content":"                    while (!modeChangeSuccess && System.currentTimeMillis() - modeStart < modeTimeout) {"},{"type":"INSERT","lineNumber":164,"content":"                        delay(500)"},{"type":"INSERT","lineNumber":165,"content":"                        val newMode = _telemetryState.value.mode"},{"type":"INSERT","lineNumber":166,"content":"                        if (newMode?.contains(\"Auto\", ignoreCase = true) == true) {"},{"type":"INSERT","lineNumber":167,"content":"                            modeChangeSuccess = true"},{"type":"INSERT","lineNumber":168,"content":"                            Log.i(\"SharedVM\", \"âœ“ Mode change successful: $currentMode -> $newMode\")"},{"type":"INSERT","lineNumber":169,"content":"                        } else {"},{"type":"INSERT","lineNumber":170,"content":"                            Log.d(\"SharedVM\", \"Waiting for mode change... Current: $newMode (${System.currentTimeMillis() - modeStart}ms elapsed)\")"},{"type":"INSERT","lineNumber":171,"content":"                        }"},{"type":"INSERT","lineNumber":172,"content":"                    }"},{"type":"INSERT","lineNumber":173,"content":"                    "},{"type":"INSERT","lineNumber":174,"content":"                    if (!modeChangeSuccess) {"},{"type":"INSERT","lineNumber":175,"content":"                        val finalMode = _telemetryState.value.mode"},{"type":"INSERT","lineNumber":176,"content":"                        Log.e(\"SharedVM\", \"âœ— Mode change to AUTO failed within timeout. Current mode: $finalMode\")"},{"type":"INSERT","lineNumber":177,"content":"                        onResult(false, \"Failed to switch to AUTO mode. Current mode: $finalMode\")"},{"type":"INSERT","lineNumber":178,"content":"                        return@launch"},{"type":"INSERT","lineNumber":179,"content":"                    }"},{"type":"INSERT","lineNumber":180,"content":"                } else {"},{"type":"INSERT","lineNumber":181,"content":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle already in AUTO mode\")"},{"type":"INSERT","lineNumber":182,"content":"                }"},{"type":"INSERT","lineNumber":183,"content":""},{"type":"INSERT","lineNumber":184,"content":"                // STEP 3: Arm the motors after mode change"},{"type":"INSERT","lineNumber":185,"content":"                Log.i(\"SharedVM\", \"Step 3: Arming the vehicle\")"},{"type":"INSERT","lineNumber":186,"content":"                val isArmed = _telemetryState.value.armed"},{"type":"INSERT","lineNumber":187,"content":"                Log.i(\"SharedVM\", \"Current armed state: $isArmed\")"},{"type":"INSERT","lineNumber":188,"content":"                "},{"type":"INSERT","lineNumber":189,"content":"                if (!isArmed) {"},{"type":"DELETE","lineNumber":148,"oldContent":"                    // wait up to 8s for telemetry to report armed (increased timeout)"},{"type":"DELETE","lineNumber":149,"oldContent":"                    val armTimeout = 8000L"},{"type":"DELETE","lineNumber":150,"oldContent":"                    }"},{"type":"DELETE","lineNumber":151,"oldContent":"                    val start = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":152,"oldContent":"                    if (!_telemetryState.value.armed) {"},{"type":"DELETE","lineNumber":153,"oldContent":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - start < armTimeout) {"},{"type":"INSERT","lineNumber":192,"content":"                    "},{"type":"INSERT","lineNumber":193,"content":"                    // Wait for arming with detailed logging"},{"type":"INSERT","lineNumber":194,"content":"                    val armTimeout = 10000L // Increased timeout for arming"},{"type":"INSERT","lineNumber":195,"content":"                    val armStart = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":196,"content":"                    var armingSuccess = false"},{"type":"INSERT","lineNumber":197,"content":"                    "},{"type":"INSERT","lineNumber":198,"content":"                    while (!armingSuccess && System.currentTimeMillis() - armStart < armTimeout) {"},{"type":"DELETE","lineNumber":155,"oldContent":"                        return@launch"},{"type":"DELETE","lineNumber":156,"oldContent":"                        Log.w(\"SharedVM\", \"Vehicle did not arm within timeout\")"},{"type":"INSERT","lineNumber":200,"content":"                        val newArmedState = _telemetryState.value.armed"},{"type":"INSERT","lineNumber":201,"content":"                        if (newArmedState) {"},{"type":"INSERT","lineNumber":202,"content":"                            armingSuccess = true"},{"type":"INSERT","lineNumber":203,"content":"                            Log.i(\"SharedVM\", \"âœ“ Vehicle armed successfully\")"},{"type":"INSERT","lineNumber":204,"content":"                        } else {"},{"type":"INSERT","lineNumber":205,"content":"                            Log.d(\"SharedVM\", \"Waiting for arming... (${System.currentTimeMillis() - armStart}ms elapsed)\")"},{"type":"INSERT","lineNumber":206,"content":"                        }"},{"type":"INSERT","lineNumber":207,"content":"                    }"},{"type":"INSERT","lineNumber":208,"content":"                    "},{"type":"INSERT","lineNumber":209,"content":"                    if (!armingSuccess) {"},{"type":"INSERT","lineNumber":210,"content":"                        Log.e(\"SharedVM\", \"âœ— Vehicle failed to arm within timeout\")"},{"type":"DELETE","lineNumber":158,"oldContent":"                    Log.i(\"SharedVM\", \"Vehicle armed successfully\")"},{"type":"DELETE","lineNumber":159,"oldContent":"                }"},{"type":"INSERT","lineNumber":212,"content":"                        return@launch"},{"type":"INSERT","lineNumber":214,"content":"                } else {"},{"type":"INSERT","lineNumber":215,"content":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle already armed\")"},{"type":"INSERT","lineNumber":216,"content":"                }"},{"type":"DELETE","lineNumber":162,"oldContent":"                // Ensure vehicle mode is AUTO (ArduPilot requires AUTO mode to execute mission)"},{"type":"INSERT","lineNumber":218,"content":"                // Give additional delay to ensure all changes are processed"},{"type":"INSERT","lineNumber":219,"content":"                Log.i(\"SharedVM\", \"Waiting for system stabilization...\")"},{"type":"INSERT","lineNumber":220,"content":"                delay(2000)"},{"type":"INSERT","lineNumber":221,"content":""},{"type":"INSERT","lineNumber":222,"content":"                // STEP 4: Start the mission"},{"type":"INSERT","lineNumber":223,"content":"                Log.i(\"SharedVM\", \"Step 4: Starting mission execution\")"},{"type":"INSERT","lineNumber":224,"content":"                val last = if (lastUploadedCount > 0) lastUploadedCount - 1 else 0"},{"type":"INSERT","lineNumber":225,"content":"                Log.i(\"SharedVM\", \"Sending mission start command with first=0 last=$last\")"},{"type":"INSERT","lineNumber":226,"content":"                "},{"type":"INSERT","lineNumber":227,"content":"                val result = repo?.startMission(0, last) ?: false"},{"type":"INSERT","lineNumber":228,"content":"                if (result) {"},{"type":"INSERT","lineNumber":229,"content":"                    Log.i(\"SharedVM\", \"âœ“ Mission start acknowledged by FCU\")"},{"type":"INSERT","lineNumber":230,"content":"                    Log.i(\"SharedVM\", \"=== Mission Start Sequence Completed Successfully ===\")"},{"type":"DELETE","lineNumber":164,"oldContent":"                if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"DELETE","lineNumber":166,"oldContent":"                    Log.i(\"SharedVM\", \"Switching vehicle mode to AUTO\")"},{"type":"DELETE","lineNumber":167,"oldContent":"                    repo?.changeMode(MavMode.AUTO)"},{"type":"DELETE","lineNumber":168,"oldContent":"                    // wait up to 6s for mode change (increased timeout)"},{"type":"INSERT","lineNumber":233,"content":"                    Log.e(\"SharedVM\", \"âœ— Mission start failed or not acknowledged\")"},{"type":"INSERT","lineNumber":234,"content":"                    onResult(false, \"Mission start failed. Check vehicle status and try again.\")"},{"type":"DELETE","lineNumber":170,"oldContent":"                    val modeTimeout = 6000L"},{"type":"DELETE","lineNumber":172,"oldContent":"                    val mstart = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":173,"oldContent":"                    while (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true && System.currentTimeMillis() - mstart < modeTimeout) {"},{"type":"INSERT","lineNumber":237,"content":"                Log.e(\"SharedVM\", \"âœ— Exception during mission start sequence\", e)"},{"type":"DELETE","lineNumber":175,"oldContent":"                        delay(500)"},{"type":"DELETE","lineNumber":176,"oldContent":"                    }"},{"type":"DELETE","lineNumber":177,"oldContent":"                    if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"DELETE","lineNumber":178,"oldContent":"                        Log.w(\"SharedVM\", \"Vehicle did not switch to AUTO mode within timeout\")"},{"type":"DELETE","lineNumber":180,"oldContent":"                        onResult(false, \"Failed to switch to AUTO mode. Current mode: ${_telemetryState.value.mode}\")"},{"type":"DELETE","lineNumber":182,"oldContent":"                        return@launch"},{"type":"DELETE","lineNumber":184,"oldContent":"                    } else {"},{"type":"DELETE","lineNumber":186,"oldContent":"                        Log.i(\"SharedVM\", \"Vehicle mode is now AUTO\")"},{"type":"DELETE","lineNumber":188,"oldContent":"                    }"},{"type":"DELETE","lineNumber":190,"oldContent":"                }"},{"type":"DELETE","lineNumber":192,"oldContent":""},{"type":"DELETE","lineNumber":194,"oldContent":"                // Give a small delay to ensure all mode changes are processed"},{"type":"DELETE","lineNumber":196,"oldContent":"                delay(1000)"},{"type":"DELETE","lineNumber":198,"oldContent":""},{"type":"DELETE","lineNumber":200,"oldContent":"                val last = if (lastUploadedCount > 0) lastUploadedCount - 1 else 0"},{"type":"DELETE","lineNumber":202,"oldContent":"                Log.i(\"SharedVM\", \"Sending start mission with first=0 last=$last\")"},{"type":"DELETE","lineNumber":204,"oldContent":"                val result = repo?.startMission(0, last) ?: false"},{"type":"DELETE","lineNumber":206,"oldContent":"                if (result) {"},{"type":"DELETE","lineNumber":208,"oldContent":"                    Log.i(\"SharedVM\", \"Mission start acknowledged by FCU\")"},{"type":"DELETE","lineNumber":212,"oldContent":"                    Log.e(\"SharedVM\", \"Mission start failed or not acknowledged\")"},{"type":"DELETE","lineNumber":214,"oldContent":"                    onResult(false, \"Mission start failed. Check vehicle status and try again.\")"},{"type":"DELETE","lineNumber":216,"oldContent":"                Log.e(\"SharedVM\", \"Failed to start mission\", e)"}]},{"timestamp":1758001944129,"changes":[{"type":"DELETE","lineNumber":15,"oldContent":""},{"type":"INSERT","lineNumber":19,"content":""},{"type":"DELETE","lineNumber":39,"oldContent":"            val portInt = port.toIntOrNull()"},{"type":"INSERT","lineNumber":47,"content":"        }"},{"type":"MODIFY","lineNumber":87,"content":"                    _uploadedWaypoints.value = waypoints","oldContent":"                    _uploadedWaypoints.value = waypoints"},{"type":"INSERT","lineNumber":95,"content":"                    onResult(false, \"Mission upload failed or timed out\")"},{"type":"DELETE","lineNumber":96,"oldContent":"                }"},{"type":"DELETE","lineNumber":110,"oldContent":"                Log.i(\"SharedVM\", \"=== Starting Mission Start Sequence ===\")"},{"type":"DELETE","lineNumber":112,"oldContent":"                "},{"type":"MODIFY","lineNumber":113,"content":"                    return@launch","oldContent":"                    return@launch"},{"type":"MODIFY","lineNumber":119,"content":"                    return@launch","oldContent":"                    return@launch"},{"type":"DELETE","lineNumber":124,"oldContent":"                // STEP 1: Check if mission acknowledgment has been received (mission uploaded)"},{"type":"DELETE","lineNumber":125,"oldContent":"                Log.i(\"SharedVM\", \"Step 1: Checking mission acknowledgment status\")"},{"type":"INSERT","lineNumber":122,"content":"                // Check if mission is uploaded"},{"type":"DELETE","lineNumber":127,"oldContent":"                    return@launch"},{"type":"DELETE","lineNumber":128,"oldContent":"                    Log.w(\"SharedVM\", \"No mission uploaded or acknowledged, cannot start\")"},{"type":"INSERT","lineNumber":124,"content":"                    Log.w(\"SharedVM\", \"No mission uploaded, cannot start\")"},{"type":"INSERT","lineNumber":126,"content":"                    return@launch"},{"type":"INSERT","lineNumber":128,"content":""},{"type":"INSERT","lineNumber":129,"content":"                // Check if vehicle is armable"},{"type":"DELETE","lineNumber":133,"oldContent":"                Log.i(\"SharedVM\", \"âœ“ Mission acknowledgment confirmed - ${lastUploadedCount} waypoints uploaded\")"},{"type":"DELETE","lineNumber":134,"oldContent":""},{"type":"DELETE","lineNumber":136,"oldContent":"                // Check if vehicle is armable"},{"type":"INSERT","lineNumber":134,"content":"                }"},{"type":"INSERT","lineNumber":135,"content":""},{"type":"DELETE","lineNumber":141,"oldContent":"                }"},{"type":"DELETE","lineNumber":143,"oldContent":""},{"type":"INSERT","lineNumber":144,"content":"                // Ensure vehicle is armed; if not, attempt to arm and wait briefly"},{"type":"INSERT","lineNumber":145,"content":"                if (!_telemetryState.value.armed) {"},{"type":"DELETE","lineNumber":149,"oldContent":"                Log.i(\"SharedVM\", \"âœ“ GPS fix confirmed - ${sats} satellites\")"},{"type":"DELETE","lineNumber":151,"oldContent":"                // STEP 2: Change mode to AUTO first (before arming)"},{"type":"DELETE","lineNumber":152,"oldContent":"                Log.i(\"SharedVM\", \"Step 2: Changing vehicle mode to AUTO\")"},{"type":"DELETE","lineNumber":153,"oldContent":"                val currentMode = _telemetryState.value.mode"},{"type":"DELETE","lineNumber":154,"oldContent":"                Log.i(\"SharedVM\", \"Current vehicle mode: $currentMode\")"},{"type":"DELETE","lineNumber":155,"oldContent":"                "},{"type":"DELETE","lineNumber":156,"oldContent":"                if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"INSERT","lineNumber":148,"content":"                    // wait up to 8s for telemetry to report armed (increased timeout)"},{"type":"INSERT","lineNumber":149,"content":"                    val armTimeout = 8000L"},{"type":"INSERT","lineNumber":150,"content":"                    val start = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":151,"content":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - start < armTimeout) {"},{"type":"DELETE","lineNumber":158,"oldContent":"                    Log.i(\"SharedVM\", \"Switching vehicle mode from $currentMode to AUTO\")"},{"type":"DELETE","lineNumber":159,"oldContent":"                    repo?.changeMode(MavMode.AUTO)"},{"type":"DELETE","lineNumber":160,"oldContent":"                    "},{"type":"INSERT","lineNumber":153,"content":"                    }"},{"type":"INSERT","lineNumber":154,"content":"                    if (!_telemetryState.value.armed) {"},{"type":"INSERT","lineNumber":155,"content":"                        Log.w(\"SharedVM\", \"Vehicle did not arm within timeout\")"},{"type":"DELETE","lineNumber":162,"oldContent":"                    // Wait for mode change with detailed logging"},{"type":"DELETE","lineNumber":163,"oldContent":"                    val modeTimeout = 8000L // Increased timeout"},{"type":"DELETE","lineNumber":164,"oldContent":"                    val modeStart = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":157,"content":"                        return@launch"},{"type":"DELETE","lineNumber":166,"oldContent":"                    var modeChangeSuccess = false"},{"type":"INSERT","lineNumber":159,"content":"                    Log.i(\"SharedVM\", \"Vehicle armed successfully\")"},{"type":"INSERT","lineNumber":160,"content":"                }"},{"type":"DELETE","lineNumber":168,"oldContent":"                    "},{"type":"DELETE","lineNumber":169,"oldContent":"                    while (!modeChangeSuccess && System.currentTimeMillis() - modeStart < modeTimeout) {"},{"type":"DELETE","lineNumber":170,"oldContent":"                    onResult(true, null)"},{"type":"INSERT","lineNumber":162,"content":"                // Ensure vehicle mode is AUTO (ArduPilot requires AUTO mode to execute mission)"},{"type":"INSERT","lineNumber":163,"content":"                if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"INSERT","lineNumber":164,"content":"                    Log.i(\"SharedVM\", \"Switching vehicle mode to AUTO\")"},{"type":"INSERT","lineNumber":165,"content":"                    repo?.changeMode(MavMode.AUTO)"},{"type":"INSERT","lineNumber":166,"content":"                    // wait up to 6s for mode change (increased timeout)"},{"type":"INSERT","lineNumber":167,"content":"                    val modeTimeout = 6000L"},{"type":"INSERT","lineNumber":168,"content":"                    val mstart = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":169,"content":"                    while (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true && System.currentTimeMillis() - mstart < modeTimeout) {"},{"type":"DELETE","lineNumber":172,"oldContent":"                        val newMode = _telemetryState.value.mode"},{"type":"INSERT","lineNumber":171,"content":"                    }"},{"type":"INSERT","lineNumber":172,"content":"                    if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"INSERT","lineNumber":173,"content":"                        Log.w(\"SharedVM\", \"Vehicle did not switch to AUTO mode within timeout\")"},{"type":"INSERT","lineNumber":174,"content":"                        onResult(false, \"Failed to switch to AUTO mode. Current mode: ${_telemetryState.value.mode}\")"},{"type":"INSERT","lineNumber":175,"content":"                        return@launch"},{"type":"INSERT","lineNumber":176,"content":"                    } else {"},{"type":"INSERT","lineNumber":177,"content":"                        Log.i(\"SharedVM\", \"Vehicle mode is now AUTO\")"},{"type":"INSERT","lineNumber":178,"content":"                    }"},{"type":"INSERT","lineNumber":179,"content":"                }"},{"type":"INSERT","lineNumber":180,"content":""},{"type":"INSERT","lineNumber":181,"content":"                // Give a small delay to ensure all mode changes are processed"},{"type":"INSERT","lineNumber":182,"content":"                delay(1000)"},{"type":"INSERT","lineNumber":183,"content":""},{"type":"INSERT","lineNumber":184,"content":"                val last = if (lastUploadedCount > 0) lastUploadedCount - 1 else 0"},{"type":"INSERT","lineNumber":185,"content":"                Log.i(\"SharedVM\", \"Sending start mission with first=0 last=$last\")"},{"type":"INSERT","lineNumber":186,"content":"                val result = repo?.startMission(0, last) ?: false"},{"type":"INSERT","lineNumber":187,"content":"                if (result) {"},{"type":"INSERT","lineNumber":188,"content":"                    Log.i(\"SharedVM\", \"Mission start acknowledged by FCU\")"},{"type":"INSERT","lineNumber":189,"content":"                    onResult(true, null)"},{"type":"DELETE","lineNumber":174,"oldContent":"                        if (newMode?.contains(\"Auto\", ignoreCase = true) == true) {"},{"type":"DELETE","lineNumber":175,"oldContent":"                            modeChangeSuccess = true"},{"type":"DELETE","lineNumber":176,"oldContent":"                            Log.i(\"SharedVM\", \"âœ“ Mode change successful: $currentMode -> $newMode\")"},{"type":"DELETE","lineNumber":177,"oldContent":"                        } else {"},{"type":"INSERT","lineNumber":191,"content":"                    Log.e(\"SharedVM\", \"Mission start failed or not acknowledged\")"},{"type":"INSERT","lineNumber":192,"content":"                    onResult(false, \"Mission start failed. Check vehicle status and try again.\")"},{"type":"DELETE","lineNumber":179,"oldContent":"                            Log.d(\"SharedVM\", \"Waiting for mode change... Current: $newMode (${System.currentTimeMillis() - modeStart}ms elapsed)\")"},{"type":"DELETE","lineNumber":180,"oldContent":"                        }"},{"type":"DELETE","lineNumber":182,"oldContent":"                    }"},{"type":"DELETE","lineNumber":183,"oldContent":"                    "},{"type":"DELETE","lineNumber":184,"oldContent":"                    if (!modeChangeSuccess) {"},{"type":"INSERT","lineNumber":195,"content":"                Log.e(\"SharedVM\", \"Failed to start mission\", e)"},{"type":"DELETE","lineNumber":186,"oldContent":"                        val finalMode = _telemetryState.value.mode"},{"type":"DELETE","lineNumber":187,"oldContent":"                        Log.e(\"SharedVM\", \"âœ— Mode change to AUTO failed within timeout. Current mode: $finalMode\")"},{"type":"DELETE","lineNumber":188,"oldContent":"                        onResult(false, \"Failed to switch to AUTO mode. Current mode: $finalMode\")"},{"type":"DELETE","lineNumber":189,"oldContent":"                        return@launch"},{"type":"DELETE","lineNumber":190,"oldContent":"                    }"},{"type":"DELETE","lineNumber":192,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":193,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle already in AUTO mode\")"},{"type":"DELETE","lineNumber":195,"oldContent":"                }"},{"type":"DELETE","lineNumber":196,"oldContent":""},{"type":"DELETE","lineNumber":198,"oldContent":"                // STEP 3: Arm the motors after mode change"},{"type":"DELETE","lineNumber":199,"oldContent":"                Log.i(\"SharedVM\", \"Step 3: Arming the vehicle\")"},{"type":"DELETE","lineNumber":201,"oldContent":"                val isArmed = _telemetryState.value.armed"},{"type":"DELETE","lineNumber":202,"oldContent":"                Log.i(\"SharedVM\", \"Current armed state: $isArmed\")"},{"type":"DELETE","lineNumber":204,"oldContent":"                "},{"type":"DELETE","lineNumber":205,"oldContent":"                if (!isArmed) {"},{"type":"DELETE","lineNumber":208,"oldContent":"                    "},{"type":"DELETE","lineNumber":209,"oldContent":"                    // Wait for arming with detailed logging"},{"type":"DELETE","lineNumber":211,"oldContent":"                    val armTimeout = 10000L // Increased timeout for arming"},{"type":"DELETE","lineNumber":212,"oldContent":"                    val armStart = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":214,"oldContent":"                    var armingSuccess = false"},{"type":"DELETE","lineNumber":215,"oldContent":"                    "},{"type":"DELETE","lineNumber":217,"oldContent":"                    while (!armingSuccess && System.currentTimeMillis() - armStart < armTimeout) {"},{"type":"DELETE","lineNumber":219,"oldContent":"                        val newArmedState = _telemetryState.value.armed"},{"type":"DELETE","lineNumber":220,"oldContent":"                        if (newArmedState) {"},{"type":"DELETE","lineNumber":222,"oldContent":"                            armingSuccess = true"},{"type":"DELETE","lineNumber":223,"oldContent":"                            Log.i(\"SharedVM\", \"âœ“ Vehicle armed successfully\")"},{"type":"DELETE","lineNumber":225,"oldContent":"                        } else {"},{"type":"DELETE","lineNumber":226,"oldContent":"                            Log.d(\"SharedVM\", \"Waiting for arming... (${System.currentTimeMillis() - armStart}ms elapsed)\")"},{"type":"DELETE","lineNumber":228,"oldContent":"                        }"},{"type":"DELETE","lineNumber":229,"oldContent":"                    }"},{"type":"DELETE","lineNumber":231,"oldContent":"                    "},{"type":"DELETE","lineNumber":232,"oldContent":"                    if (!armingSuccess) {"},{"type":"DELETE","lineNumber":234,"oldContent":"                        Log.e(\"SharedVM\", \"âœ— Vehicle failed to arm within timeout\")"},{"type":"DELETE","lineNumber":237,"oldContent":"                        return@launch"},{"type":"DELETE","lineNumber":239,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":240,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle already armed\")"},{"type":"DELETE","lineNumber":242,"oldContent":"                }"},{"type":"DELETE","lineNumber":243,"oldContent":"                Log.e(\"SharedVM\", \"âœ— Exception during mission start sequence\", e)"},{"type":"DELETE","lineNumber":244,"oldContent":"                // Give additional delay to ensure all changes are processed"},{"type":"DELETE","lineNumber":245,"oldContent":"                    onResult(false, \"Mission start failed. Check vehicle status and try again.\")"},{"type":"DELETE","lineNumber":246,"oldContent":"                Log.i(\"SharedVM\", \"Waiting for system stabilization...\")"},{"type":"DELETE","lineNumber":247,"oldContent":"                    Log.e(\"SharedVM\", \"âœ— Mission start failed or not acknowledged\")"},{"type":"DELETE","lineNumber":248,"oldContent":"                delay(2000)"},{"type":"DELETE","lineNumber":249,"oldContent":"                    Log.i(\"SharedVM\", \"=== Mission Start Sequence Completed Successfully ===\")"},{"type":"DELETE","lineNumber":250,"oldContent":""},{"type":"DELETE","lineNumber":251,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Mission start acknowledged by FCU\")"},{"type":"DELETE","lineNumber":252,"oldContent":"                // STEP 4: Start the mission"},{"type":"DELETE","lineNumber":253,"oldContent":"                if (result) {"},{"type":"DELETE","lineNumber":254,"oldContent":"                Log.i(\"SharedVM\", \"Step 4: Starting mission execution\")"},{"type":"DELETE","lineNumber":255,"oldContent":"                val result = repo?.startMission(0, last) ?: false"},{"type":"DELETE","lineNumber":256,"oldContent":"                val last = if (lastUploadedCount > 0) lastUploadedCount - 1 else 0"},{"type":"DELETE","lineNumber":257,"oldContent":"                "},{"type":"DELETE","lineNumber":258,"oldContent":"                Log.i(\"SharedVM\", \"Sending mission start command with first=0 last=$last\")"}]},{"timestamp":1758002074204,"changes":[{"type":"DELETE","lineNumber":15,"oldContent":""},{"type":"MODIFY","lineNumber":18,"content":"    var port by mutableStateOf(\"5762\")","oldContent":""},{"type":"INSERT","lineNumber":19,"content":""},{"type":"INSERT","lineNumber":22,"content":"    private val _telemetryState = MutableStateFlow(TelemetryState())"},{"type":"INSERT","lineNumber":23,"content":"    val telemetryState: StateFlow<TelemetryState> = _telemetryState.asStateFlow()"},{"type":"DELETE","lineNumber":23,"oldContent":""},{"type":"DELETE","lineNumber":24,"oldContent":""},{"type":"INSERT","lineNumber":26,"content":"        .map { it.connected }"},{"type":"INSERT","lineNumber":27,"content":"        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), false)"},{"type":"DELETE","lineNumber":27,"oldContent":"    val isConnected: Flow<ERROR> = telemetryState.combine(repo?.state) { state, repoState ->"},{"type":"DELETE","lineNumber":28,"oldContent":""},{"type":"DELETE","lineNumber":39,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":40,"oldContent":"            val portInt = port.toIntOrNull()"},{"type":"MODIFY","lineNumber":45,"content":"                }","oldContent":"        }"},{"type":"INSERT","lineNumber":46,"content":"            }"},{"type":"INSERT","lineNumber":47,"content":"        }"},{"type":"INSERT","lineNumber":86,"content":"                    }"},{"type":"DELETE","lineNumber":87,"oldContent":"                    _uploadedWaypoints.value = waypoints"},{"type":"INSERT","lineNumber":110,"content":"                Log.i(\"SharedVM\", \"Starting mission start sequence...\")"},{"type":"INSERT","lineNumber":111,"content":"                "},{"type":"DELETE","lineNumber":111,"oldContent":"                    return@launch"},{"type":"DELETE","lineNumber":112,"oldContent":"                    return@launch"},{"type":"INSERT","lineNumber":113,"content":"                    Log.w(\"SharedVM\", \"No repo available, cannot start mission\")"},{"type":"INSERT","lineNumber":115,"content":"                    return@launch"},{"type":"DELETE","lineNumber":117,"oldContent":"                    return@launch"},{"type":"DELETE","lineNumber":118,"oldContent":"                    return@launch"},{"type":"INSERT","lineNumber":119,"content":"                    Log.w(\"SharedVM\", \"FCU not detected, cannot start mission\")"},{"type":"DELETE","lineNumber":120,"oldContent":"                // Check if mission is uploaded"},{"type":"INSERT","lineNumber":121,"content":"                    return@launch"},{"type":"DELETE","lineNumber":123,"oldContent":"                    Log.w(\"SharedVM\", \"No mission uploaded, cannot start\")"},{"type":"MODIFY","lineNumber":124,"content":"                // Step 1: Check for acknowledgment of the mission","oldContent":"                    return@launch"},{"type":"DELETE","lineNumber":126,"oldContent":""},{"type":"DELETE","lineNumber":127,"oldContent":"                // Check if vehicle is armable"},{"type":"INSERT","lineNumber":126,"content":"                    Log.w(\"SharedVM\", \"No mission uploaded or acknowledged, cannot start\")"},{"type":"INSERT","lineNumber":128,"content":"                    return@launch"},{"type":"INSERT","lineNumber":130,"content":"                Log.i(\"SharedVM\", \"âœ“ Mission upload acknowledged (${lastUploadedCount} items)\")"},{"type":"INSERT","lineNumber":131,"content":""},{"type":"INSERT","lineNumber":132,"content":"                // Check basic prerequisites"},{"type":"DELETE","lineNumber":132,"oldContent":"                }"},{"type":"DELETE","lineNumber":133,"oldContent":""},{"type":"DELETE","lineNumber":136,"oldContent":"                // Check GPS fix"},{"type":"INSERT","lineNumber":137,"content":"                }"},{"type":"INSERT","lineNumber":138,"content":""},{"type":"DELETE","lineNumber":140,"oldContent":"                // Ensure vehicle is armed; if not, attempt to arm and wait briefly"},{"type":"DELETE","lineNumber":142,"oldContent":"                if (!_telemetryState.value.armed) {"},{"type":"MODIFY","lineNumber":146,"content":"                // Step 2: See if the drone is either in Stabilize or Loiter to arm the drone","oldContent":"                    // wait up to 8s for telemetry to report armed (increased timeout)"},{"type":"INSERT","lineNumber":147,"content":"                val currentMode = _telemetryState.value.mode"},{"type":"INSERT","lineNumber":148,"content":"                val isInArmableMode = currentMode?.equals(\"Stabilize\", ignoreCase = true) == true || "},{"type":"INSERT","lineNumber":149,"content":"                                     currentMode?.equals(\"Loiter\", ignoreCase = true) == true"},{"type":"INSERT","lineNumber":150,"content":"                "},{"type":"INSERT","lineNumber":151,"content":"                if (!isInArmableMode) {"},{"type":"INSERT","lineNumber":152,"content":"                    Log.i(\"SharedVM\", \"Current mode '$currentMode' not suitable for arming, switching to Stabilize\")"},{"type":"INSERT","lineNumber":153,"content":"                    repo?.changeMode(MavMode.STABILIZE)"},{"type":"INSERT","lineNumber":154,"content":"                    "},{"type":"INSERT","lineNumber":155,"content":"                    // Wait for mode change to Stabilize"},{"type":"INSERT","lineNumber":156,"content":"                    val modeTimeout = 5000L"},{"type":"INSERT","lineNumber":157,"content":"                    val modeStart = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":158,"content":"                    while (System.currentTimeMillis() - modeStart < modeTimeout) {"},{"type":"INSERT","lineNumber":159,"content":"                        val mode = _telemetryState.value.mode"},{"type":"INSERT","lineNumber":160,"content":"                        if (mode?.equals(\"Stabilize\", ignoreCase = true) == true) {"},{"type":"INSERT","lineNumber":161,"content":"                            Log.i(\"SharedVM\", \"âœ“ Successfully switched to Stabilize mode\")"},{"type":"INSERT","lineNumber":162,"content":"                            break"},{"type":"INSERT","lineNumber":163,"content":"                        }"},{"type":"INSERT","lineNumber":164,"content":"                        delay(500)"},{"type":"INSERT","lineNumber":165,"content":"                    }"},{"type":"INSERT","lineNumber":166,"content":"                    "},{"type":"INSERT","lineNumber":167,"content":"                    if (!(_telemetryState.value.mode?.equals(\"Stabilize\", ignoreCase = true) == true)) {"},{"type":"INSERT","lineNumber":168,"content":"                        Log.w(\"SharedVM\", \"Failed to switch to Stabilize mode within timeout\")"},{"type":"INSERT","lineNumber":169,"content":"                        onResult(false, \"Failed to switch to suitable mode for arming. Current mode: ${_telemetryState.value.mode}\")"},{"type":"INSERT","lineNumber":170,"content":"                        return@launch"},{"type":"INSERT","lineNumber":171,"content":"                    }"},{"type":"INSERT","lineNumber":172,"content":"                } else {"},{"type":"INSERT","lineNumber":173,"content":"                    Log.i(\"SharedVM\", \"âœ“ Already in suitable mode for arming: $currentMode\")"},{"type":"INSERT","lineNumber":174,"content":"                }"},{"type":"INSERT","lineNumber":175,"content":""},{"type":"INSERT","lineNumber":176,"content":"                // Step 3: Arm the drone"},{"type":"INSERT","lineNumber":177,"content":"                if (!_telemetryState.value.armed) {"},{"type":"DELETE","lineNumber":148,"oldContent":"                    val armTimeout = 8000L"},{"type":"DELETE","lineNumber":149,"oldContent":"                    val start = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":151,"oldContent":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - start < armTimeout) {"},{"type":"INSERT","lineNumber":180,"content":"                    "},{"type":"INSERT","lineNumber":181,"content":"                    // Wait for arming with increased timeout"},{"type":"INSERT","lineNumber":182,"content":"                    val armTimeout = 10000L"},{"type":"INSERT","lineNumber":183,"content":"                    val armStart = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":184,"content":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - armStart < armTimeout) {"},{"type":"INSERT","lineNumber":185,"content":"                        delay(500)"},{"type":"INSERT","lineNumber":187,"content":"                    "},{"type":"INSERT","lineNumber":190,"content":"                        onResult(false, \"Vehicle failed to arm. Check pre-arm conditions.\")"},{"type":"DELETE","lineNumber":156,"oldContent":"                        delay(500)"},{"type":"DELETE","lineNumber":157,"oldContent":"                    Log.i(\"SharedVM\", \"Vehicle armed successfully\")"},{"type":"INSERT","lineNumber":192,"content":"                    }"},{"type":"INSERT","lineNumber":193,"content":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle armed successfully\")"},{"type":"INSERT","lineNumber":194,"content":"                } else {"},{"type":"INSERT","lineNumber":195,"content":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle already armed\")"},{"type":"DELETE","lineNumber":159,"oldContent":"                        onResult(false, \"Vehicle failed to arm. Check pre-arm conditions.\")"},{"type":"DELETE","lineNumber":160,"oldContent":"                // Ensure vehicle mode is AUTO (ArduPilot requires AUTO mode to execute mission)"},{"type":"INSERT","lineNumber":197,"content":""},{"type":"INSERT","lineNumber":198,"content":"                // Step 4: Change mode to Auto"},{"type":"DELETE","lineNumber":164,"oldContent":"                    }"},{"type":"DELETE","lineNumber":165,"oldContent":"                    // wait up to 6s for mode change (increased timeout)"},{"type":"DELETE","lineNumber":166,"oldContent":"                    val modeTimeout = 6000L"},{"type":"DELETE","lineNumber":167,"oldContent":""},{"type":"DELETE","lineNumber":168,"oldContent":"                    val mstart = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":169,"oldContent":"                    while (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true && System.currentTimeMillis() - mstart < modeTimeout) {"},{"type":"DELETE","lineNumber":170,"oldContent":"                    }"},{"type":"INSERT","lineNumber":202,"content":"                    "},{"type":"INSERT","lineNumber":203,"content":"                    // Wait for mode change to AUTO with increased timeout"},{"type":"INSERT","lineNumber":204,"content":"                    val autoModeTimeout = 8000L"},{"type":"INSERT","lineNumber":205,"content":"                    val autoModeStart = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":206,"content":"                    while (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true && "},{"type":"INSERT","lineNumber":207,"content":"                           System.currentTimeMillis() - autoModeStart < autoModeTimeout) {"},{"type":"INSERT","lineNumber":209,"content":"                    }"},{"type":"INSERT","lineNumber":210,"content":"                    "},{"type":"DELETE","lineNumber":174,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":177,"oldContent":"                    } else {"},{"type":"DELETE","lineNumber":178,"oldContent":"                        Log.i(\"SharedVM\", \"Vehicle mode is now AUTO\")"},{"type":"INSERT","lineNumber":216,"content":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle mode is now AUTO\")"},{"type":"INSERT","lineNumber":217,"content":"                } else {"},{"type":"INSERT","lineNumber":218,"content":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle already in AUTO mode\")"},{"type":"DELETE","lineNumber":181,"oldContent":"                }"},{"type":"DELETE","lineNumber":184,"oldContent":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":224,"content":"                // Step 5: Start the mission"},{"type":"DELETE","lineNumber":188,"oldContent":"                Log.i(\"SharedVM\", \"Sending start mission with first=0 last=$last\")"},{"type":"DELETE","lineNumber":189,"oldContent":"                onResult(false, e.message)"},{"type":"INSERT","lineNumber":226,"content":"                Log.i(\"SharedVM\", \"Sending start mission command with first=0 last=$last\")"},{"type":"INSERT","lineNumber":228,"content":"                "},{"type":"DELETE","lineNumber":192,"oldContent":"                    Log.i(\"SharedVM\", \"Mission start acknowledged by FCU\")"},{"type":"INSERT","lineNumber":230,"content":"                    Log.i(\"SharedVM\", \"âœ“ Mission start acknowledged by FCU\")"},{"type":"INSERT","lineNumber":232,"content":"                } else {"},{"type":"DELETE","lineNumber":195,"oldContent":"            }"},{"type":"DELETE","lineNumber":197,"oldContent":"        }"},{"type":"INSERT","lineNumber":235,"content":"                }"},{"type":"INSERT","lineNumber":236,"content":"                "},{"type":"INSERT","lineNumber":237,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":239,"content":"                onResult(false, e.message)"},{"type":"INSERT","lineNumber":240,"content":"            }"},{"type":"INSERT","lineNumber":241,"content":"        }"},{"type":"DELETE","lineNumber":217,"oldContent":"                val result = repo?.startMission(0, last) ?: false"},{"type":"DELETE","lineNumber":218,"oldContent":"                "}]},{"timestamp":1758002126412,"changes":[{"type":"INSERT","lineNumber":17,"content":"    var ipAddress by mutableStateOf(\"10.0.2.2\")"},{"type":"DELETE","lineNumber":19,"oldContent":"    var ipAddress by mutableStateOf(\"10.0.2.2\")"},{"type":"MODIFY","lineNumber":24,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":28,"content":"","oldContent":""},{"type":"INSERT","lineNumber":43,"content":"                newRepo.state.collect {"},{"type":"INSERT","lineNumber":44,"content":"                    _telemetryState.value = it"},{"type":"DELETE","lineNumber":46,"oldContent":"        }"},{"type":"DELETE","lineNumber":47,"oldContent":"                    _telemetryState.value = it"},{"type":"MODIFY","lineNumber":49,"content":"","oldContent":"            }"},{"type":"INSERT","lineNumber":111,"content":""},{"type":"DELETE","lineNumber":112,"oldContent":"                "},{"type":"MODIFY","lineNumber":116,"content":"                }","oldContent":"                }"},{"type":"MODIFY","lineNumber":128,"content":"                    return@launch","oldContent":"                    return@launch"},{"type":"DELETE","lineNumber":131,"oldContent":"                if (!_telemetryState.value.armable) {"},{"type":"MODIFY","lineNumber":133,"content":"                if (!_telemetryState.value.armable) {","oldContent":"                    Log.w(\"SharedVM\", \"Vehicle not armable, cannot start mission\")"},{"type":"INSERT","lineNumber":134,"content":"                    Log.w(\"SharedVM\", \"Vehicle not armable, cannot start mission\")"},{"type":"MODIFY","lineNumber":139,"content":"                val sats = _telemetryState.value.sats ?: 0","oldContent":"                val sats = _telemetryState.value.sats ?: 0"},{"type":"DELETE","lineNumber":148,"oldContent":"                    Log.i(\"SharedVM\", \"Vehicle not armed - attempting to arm\")"},{"type":"MODIFY","lineNumber":148,"content":"                val isInArmableMode = currentMode?.equals(\"Stabilize\", ignoreCase = true) == true ||","oldContent":"                val isInArmableMode = currentMode?.equals(\"Stabilize\", ignoreCase = true) == true || "},{"type":"DELETE","lineNumber":151,"oldContent":"                "},{"type":"DELETE","lineNumber":152,"oldContent":"                    repo?.arm()"},{"type":"INSERT","lineNumber":150,"content":""},{"type":"DELETE","lineNumber":155,"oldContent":"                    }"},{"type":"DELETE","lineNumber":157,"oldContent":"                    if (!_telemetryState.value.armed) {"},{"type":"DELETE","lineNumber":158,"oldContent":"                    "},{"type":"DELETE","lineNumber":159,"oldContent":"                        Log.w(\"SharedVM\", \"Vehicle did not arm within timeout\")"},{"type":"INSERT","lineNumber":154,"content":""},{"type":"DELETE","lineNumber":161,"oldContent":"                        return@launch"},{"type":"DELETE","lineNumber":165,"oldContent":"                }"},{"type":"DELETE","lineNumber":169,"oldContent":"                if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"DELETE","lineNumber":171,"oldContent":"                    Log.i(\"SharedVM\", \"Switching vehicle mode to AUTO\")"},{"type":"DELETE","lineNumber":173,"oldContent":"                    repo?.changeMode(MavMode.AUTO)"},{"type":"DELETE","lineNumber":176,"oldContent":"                    "},{"type":"INSERT","lineNumber":166,"content":""},{"type":"DELETE","lineNumber":182,"oldContent":"                        delay(500)"},{"type":"DELETE","lineNumber":184,"oldContent":"                    if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"DELETE","lineNumber":186,"oldContent":"                        Log.w(\"SharedVM\", \"Vehicle did not switch to AUTO mode within timeout\")"},{"type":"DELETE","lineNumber":189,"oldContent":"                        onResult(false, \"Failed to switch to AUTO mode. Current mode: ${_telemetryState.value.mode}\")"},{"type":"DELETE","lineNumber":191,"oldContent":"                        return@launch"},{"type":"DELETE","lineNumber":193,"oldContent":"                    }"},{"type":"DELETE","lineNumber":194,"oldContent":"                    "},{"type":"DELETE","lineNumber":195,"oldContent":"                }"},{"type":"INSERT","lineNumber":178,"content":"                    Log.i(\"SharedVM\", \"Vehicle not armed - attempting to arm\")"},{"type":"INSERT","lineNumber":179,"content":"                    repo?.arm()"},{"type":"INSERT","lineNumber":180,"content":""},{"type":"DELETE","lineNumber":198,"oldContent":""},{"type":"DELETE","lineNumber":200,"oldContent":"                // Give a small delay to ensure all mode changes are processed"},{"type":"INSERT","lineNumber":186,"content":"                    }"},{"type":"INSERT","lineNumber":187,"content":""},{"type":"INSERT","lineNumber":188,"content":"                    if (!_telemetryState.value.armed) {"},{"type":"INSERT","lineNumber":189,"content":"                        Log.w(\"SharedVM\", \"Vehicle did not arm within timeout\")"},{"type":"INSERT","lineNumber":190,"content":"                        onResult(false, \"Vehicle failed to arm. Check pre-arm conditions.\")"},{"type":"INSERT","lineNumber":191,"content":"                        return@launch"},{"type":"INSERT","lineNumber":192,"content":"                    }"},{"type":"INSERT","lineNumber":193,"content":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle armed successfully\")"},{"type":"INSERT","lineNumber":194,"content":"                } else {"},{"type":"INSERT","lineNumber":195,"content":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle already armed\")"},{"type":"INSERT","lineNumber":196,"content":"                }"},{"type":"INSERT","lineNumber":197,"content":""},{"type":"INSERT","lineNumber":198,"content":"                // Step 4: Change mode to Auto"},{"type":"INSERT","lineNumber":199,"content":"                if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"INSERT","lineNumber":200,"content":"                    Log.i(\"SharedVM\", \"Switching vehicle mode to AUTO\")"},{"type":"INSERT","lineNumber":201,"content":"                    repo?.changeMode(MavMode.AUTO)"},{"type":"INSERT","lineNumber":202,"content":""},{"type":"INSERT","lineNumber":203,"content":"                    // Wait for mode change to AUTO with increased timeout"},{"type":"INSERT","lineNumber":204,"content":"                    val autoModeTimeout = 8000L"},{"type":"INSERT","lineNumber":205,"content":"                    val autoModeStart = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":206,"content":"                    while (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true &&"},{"type":"INSERT","lineNumber":207,"content":"                           System.currentTimeMillis() - autoModeStart < autoModeTimeout) {"},{"type":"INSERT","lineNumber":208,"content":"                        delay(500)"},{"type":"INSERT","lineNumber":209,"content":"                    }"},{"type":"INSERT","lineNumber":210,"content":""},{"type":"INSERT","lineNumber":211,"content":"                    if (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true) {"},{"type":"INSERT","lineNumber":212,"content":"                        Log.w(\"SharedVM\", \"Vehicle did not switch to AUTO mode within timeout\")"},{"type":"INSERT","lineNumber":213,"content":"                        onResult(false, \"Failed to switch to AUTO mode. Current mode: ${_telemetryState.value.mode}\")"},{"type":"INSERT","lineNumber":214,"content":"                        return@launch"},{"type":"INSERT","lineNumber":215,"content":"                    }"},{"type":"INSERT","lineNumber":216,"content":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle mode is now AUTO\")"},{"type":"INSERT","lineNumber":217,"content":"                } else {"},{"type":"INSERT","lineNumber":218,"content":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle already in AUTO mode\")"},{"type":"INSERT","lineNumber":219,"content":"                }"},{"type":"INSERT","lineNumber":220,"content":""},{"type":"INSERT","lineNumber":221,"content":"                // Give a small delay to ensure all mode changes are processed"},{"type":"DELETE","lineNumber":205,"oldContent":"                    "},{"type":"INSERT","lineNumber":224,"content":"                // Step 5: Start the mission"},{"type":"DELETE","lineNumber":207,"oldContent":"                        onResult(false, \"Vehicle failed to arm. Check pre-arm conditions.\")"},{"type":"INSERT","lineNumber":226,"content":"                Log.i(\"SharedVM\", \"Sending start mission command with first=0 last=$last\")"},{"type":"INSERT","lineNumber":228,"content":""},{"type":"DELETE","lineNumber":210,"oldContent":"                    }"},{"type":"DELETE","lineNumber":211,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle armed successfully\")"},{"type":"INSERT","lineNumber":230,"content":"                    Log.i(\"SharedVM\", \"âœ“ Mission start acknowledged by FCU\")"},{"type":"DELETE","lineNumber":215,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle already armed\")"},{"type":"INSERT","lineNumber":235,"content":"                }"},{"type":"DELETE","lineNumber":218,"oldContent":"                // Step 4: Change mode to Auto"},{"type":"INSERT","lineNumber":237,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":239,"content":"                onResult(false, e.message)"},{"type":"INSERT","lineNumber":240,"content":"            }"},{"type":"INSERT","lineNumber":241,"content":"        }"},{"type":"DELETE","lineNumber":223,"oldContent":"                    "},{"type":"DELETE","lineNumber":225,"oldContent":"                    // Wait for mode change to AUTO with increased timeout"},{"type":"DELETE","lineNumber":227,"oldContent":"                    val autoModeTimeout = 8000L"},{"type":"DELETE","lineNumber":229,"oldContent":"                    val autoModeStart = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":231,"oldContent":"                    while (_telemetryState.value.mode?.contains(\"Auto\", ignoreCase = true) != true && "},{"type":"DELETE","lineNumber":233,"oldContent":"                           System.currentTimeMillis() - autoModeStart < autoModeTimeout) {"},{"type":"DELETE","lineNumber":236,"oldContent":"                    }"},{"type":"DELETE","lineNumber":238,"oldContent":"                    "},{"type":"DELETE","lineNumber":245,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle mode is now AUTO\")"},{"type":"DELETE","lineNumber":247,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":248,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Vehicle already in AUTO mode\")"},{"type":"DELETE","lineNumber":249,"oldContent":"                onResult(false, e.message)"},{"type":"DELETE","lineNumber":250,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":251,"oldContent":"                "},{"type":"DELETE","lineNumber":252,"oldContent":"                }"},{"type":"DELETE","lineNumber":253,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":254,"oldContent":"                // Step 5: Start the mission"},{"type":"DELETE","lineNumber":255,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Mission start acknowledged by FCU\")"},{"type":"DELETE","lineNumber":256,"oldContent":"                "},{"type":"DELETE","lineNumber":257,"oldContent":"                Log.i(\"SharedVM\", \"Sending start mission command with first=0 last=$last\")"}]},{"timestamp":1758003802608,"changes":[{"type":"INSERT","lineNumber":15,"content":"class SharedViewModel : ViewModel() {"},{"type":"INSERT","lineNumber":16,"content":""},{"type":"DELETE","lineNumber":17,"oldContent":"    var ipAddress by mutableStateOf(\"10.0.2.2\")"},{"type":"DELETE","lineNumber":18,"oldContent":"    var port by mutableStateOf(\"5762\")"},{"type":"INSERT","lineNumber":23,"content":"    val telemetryState: StateFlow<TelemetryState> = _telemetryState.asStateFlow()"},{"type":"DELETE","lineNumber":24,"oldContent":""},{"type":"MODIFY","lineNumber":27,"content":"        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), false)","oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":39,"oldContent":"    }"},{"type":"DELETE","lineNumber":40,"oldContent":"}"},{"type":"DELETE","lineNumber":41,"oldContent":""},{"type":"DELETE","lineNumber":42,"oldContent":""},{"type":"INSERT","lineNumber":39,"content":"            if (portInt != null) {"},{"type":"INSERT","lineNumber":40,"content":"                val newRepo = MavlinkTelemetryRepository(ipAddress, portInt)"},{"type":"INSERT","lineNumber":41,"content":"                repo = newRepo"},{"type":"INSERT","lineNumber":42,"content":"                newRepo.start()"},{"type":"MODIFY","lineNumber":45,"content":"                }","oldContent":"                }"},{"type":"MODIFY","lineNumber":55,"content":"","oldContent":"        }"},{"type":"MODIFY","lineNumber":98,"content":"                missionUploaded = false","oldContent":"}"},{"type":"INSERT","lineNumber":115,"content":"                    return@launch"},{"type":"DELETE","lineNumber":116,"oldContent":"                }"},{"type":"INSERT","lineNumber":127,"content":"                    onResult(false, \"No mission uploaded. Please upload a mission first.\")"},{"type":"DELETE","lineNumber":128,"oldContent":"                    return@launch"},{"type":"INSERT","lineNumber":132,"content":"                // Check basic prerequisites"},{"type":"DELETE","lineNumber":134,"oldContent":"                // Check basic prerequisites"},{"type":"INSERT","lineNumber":138,"content":""},{"type":"DELETE","lineNumber":139,"oldContent":"                val sats = _telemetryState.value.sats ?: 0"},{"type":"DELETE","lineNumber":149,"oldContent":""},{"type":"MODIFY","lineNumber":151,"content":"                if (!isInArmableMode) {","oldContent":"                if (!isInArmableMode) {"},{"type":"INSERT","lineNumber":154,"content":"                    "},{"type":"DELETE","lineNumber":159,"oldContent":""},{"type":"INSERT","lineNumber":166,"content":"                    "},{"type":"DELETE","lineNumber":168,"oldContent":"                    Log.i(\"SharedVM\", \"Vehicle not armed - attempting to arm\")"},{"type":"DELETE","lineNumber":170,"oldContent":"                    repo?.arm()"},{"type":"DELETE","lineNumber":172,"oldContent":""},{"type":"INSERT","lineNumber":174,"content":"                }"},{"type":"INSERT","lineNumber":175,"content":""},{"type":"INSERT","lineNumber":176,"content":"                // Step 3: Arm the drone"},{"type":"INSERT","lineNumber":177,"content":"                if (!_telemetryState.value.armed) {"},{"type":"INSERT","lineNumber":178,"content":"                    Log.i(\"SharedVM\", \"Vehicle not armed - attempting to arm\")"},{"type":"INSERT","lineNumber":179,"content":"                    repo?.arm()"},{"type":"INSERT","lineNumber":180,"content":""},{"type":"INSERT","lineNumber":181,"content":"                    // Wait for arming with increased timeout"},{"type":"INSERT","lineNumber":182,"content":"                    val armTimeout = 10000L"},{"type":"INSERT","lineNumber":183,"content":"                    val armStart = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":184,"content":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - armStart < armTimeout) {"},{"type":"INSERT","lineNumber":185,"content":"                        delay(500)"},{"type":"DELETE","lineNumber":179,"oldContent":"                }"},{"type":"DELETE","lineNumber":181,"oldContent":""},{"type":"DELETE","lineNumber":184,"oldContent":"                // Step 3: Arm the drone"},{"type":"DELETE","lineNumber":187,"oldContent":"                if (!_telemetryState.value.armed) {"},{"type":"DELETE","lineNumber":192,"oldContent":"                    // Wait for arming with increased timeout"},{"type":"DELETE","lineNumber":194,"oldContent":"                    val armTimeout = 10000L"},{"type":"DELETE","lineNumber":197,"oldContent":"                    val armStart = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":200,"oldContent":"                    while (!_telemetryState.value.armed && System.currentTimeMillis() - armStart < armTimeout) {"},{"type":"DELETE","lineNumber":202,"oldContent":"                        delay(500)"},{"type":"DELETE","lineNumber":204,"oldContent":"                delay(1000)"},{"type":"DELETE","lineNumber":206,"oldContent":""},{"type":"DELETE","lineNumber":209,"oldContent":"                val last = if (lastUploadedCount > 0) lastUploadedCount - 1 else 0"},{"type":"DELETE","lineNumber":212,"oldContent":"                val result = repo?.startMission(0, last) ?: false"},{"type":"DELETE","lineNumber":214,"oldContent":"                if (result) {"},{"type":"DELETE","lineNumber":218,"oldContent":"                    onResult(true, null)"},{"type":"DELETE","lineNumber":220,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":222,"oldContent":"                    Log.e(\"SharedVM\", \"Mission start failed or not acknowledged\")"},{"type":"DELETE","lineNumber":225,"oldContent":"                    onResult(false, \"Mission start failed. Check vehicle status and try again.\")"},{"type":"DELETE","lineNumber":227,"oldContent":""},{"type":"DELETE","lineNumber":230,"oldContent":"                Log.e(\"SharedVM\", \"Failed to start mission\", e)"},{"type":"DELETE","lineNumber":232,"oldContent":"    }"},{"type":"INSERT","lineNumber":222,"content":"                delay(1000)"},{"type":"DELETE","lineNumber":235,"oldContent":"    // New helper to request mission from FCU and log its items for debugging"},{"type":"DELETE","lineNumber":237,"oldContent":"    fun readMissionFromFcu() {"},{"type":"INSERT","lineNumber":225,"content":"                val last = if (lastUploadedCount > 0) lastUploadedCount - 1 else 0"},{"type":"DELETE","lineNumber":239,"oldContent":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":227,"content":"                val result = repo?.startMission(0, last) ?: false"},{"type":"DELETE","lineNumber":241,"oldContent":"            if (repo == null) {"},{"type":"INSERT","lineNumber":229,"content":"                if (result) {"},{"type":"INSERT","lineNumber":231,"content":"                    onResult(true, null)"},{"type":"INSERT","lineNumber":232,"content":"                } else {"},{"type":"INSERT","lineNumber":233,"content":"                    Log.e(\"SharedVM\", \"Mission start failed or not acknowledged\")"},{"type":"INSERT","lineNumber":234,"content":"                    onResult(false, \"Mission start failed. Check vehicle status and try again.\")"},{"type":"INSERT","lineNumber":235,"content":"                }"},{"type":"INSERT","lineNumber":236,"content":""},{"type":"INSERT","lineNumber":237,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":238,"content":"                Log.e(\"SharedVM\", \"Failed to start mission\", e)"},{"type":"INSERT","lineNumber":239,"content":"                onResult(false, e.message)"},{"type":"INSERT","lineNumber":240,"content":"            }"},{"type":"INSERT","lineNumber":241,"content":"        }"},{"type":"INSERT","lineNumber":242,"content":"    }"},{"type":"INSERT","lineNumber":243,"content":""},{"type":"INSERT","lineNumber":244,"content":"    // New helper to request mission from FCU and log its items for debugging"},{"type":"INSERT","lineNumber":245,"content":"    fun readMissionFromFcu() {"},{"type":"INSERT","lineNumber":246,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":247,"content":"            if (repo == null) {"},{"type":"DELETE","lineNumber":246,"oldContent":"                }"},{"type":"DELETE","lineNumber":248,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":250,"oldContent":"                onResult(false, e.message)"},{"type":"DELETE","lineNumber":252,"oldContent":"            }"},{"type":"DELETE","lineNumber":254,"oldContent":"        }"},{"type":"MODIFY","lineNumber":259,"content":"","oldContent":"                Log.e(\"SharedVM\", \"Failed to start mission\", e)"}]},{"timestamp":1758003860267,"changes":[{"type":"DELETE","lineNumber":16,"oldContent":"class SharedViewModel : ViewModel() {"},{"type":"INSERT","lineNumber":17,"content":"    var ipAddress by mutableStateOf(\"10.0.2.2\")"},{"type":"INSERT","lineNumber":18,"content":"    var port by mutableStateOf(\"5762\")"},{"type":"DELETE","lineNumber":19,"oldContent":""},{"type":"INSERT","lineNumber":44,"content":"                    _telemetryState.value = it"},{"type":"DELETE","lineNumber":45,"oldContent":"                }"},{"type":"MODIFY","lineNumber":151,"content":"                if (!isInArmableMode) {","oldContent":"                if (!isInArmableMode) {"},{"type":"MODIFY","lineNumber":154,"content":"","oldContent":"                    "},{"type":"MODIFY","lineNumber":166,"content":"","oldContent":"                    "},{"type":"DELETE","lineNumber":171,"oldContent":"                }"},{"type":"DELETE","lineNumber":173,"oldContent":""},{"type":"DELETE","lineNumber":175,"oldContent":"                // Step 3: Arm the drone"},{"type":"INSERT","lineNumber":174,"content":"                }"},{"type":"INSERT","lineNumber":175,"content":""},{"type":"INSERT","lineNumber":176,"content":"                // Step 3: Arm the drone"},{"type":"DELETE","lineNumber":178,"oldContent":"                    }"},{"type":"DELETE","lineNumber":180,"oldContent":""},{"type":"DELETE","lineNumber":183,"oldContent":"                    if (!_telemetryState.value.armed) {"},{"type":"DELETE","lineNumber":186,"oldContent":"                        Log.w(\"SharedVM\", \"Vehicle did not arm within timeout\")"},{"type":"DELETE","lineNumber":188,"oldContent":"                        onResult(false, \"Vehicle failed to arm. Check pre-arm conditions.\")"},{"type":"INSERT","lineNumber":186,"content":"                    }"},{"type":"INSERT","lineNumber":187,"content":""},{"type":"INSERT","lineNumber":188,"content":"                    if (!_telemetryState.value.armed) {"},{"type":"INSERT","lineNumber":189,"content":"                        Log.w(\"SharedVM\", \"Vehicle did not arm within timeout\")"},{"type":"INSERT","lineNumber":190,"content":"                        onResult(false, \"Vehicle failed to arm. Check pre-arm conditions.\")"},{"type":"DELETE","lineNumber":215,"oldContent":"                delay(1000)"},{"type":"DELETE","lineNumber":218,"oldContent":"                val last = if (lastUploadedCount > 0) lastUploadedCount - 1 else 0"},{"type":"DELETE","lineNumber":220,"oldContent":"                val result = repo?.startMission(0, last) ?: false"},{"type":"DELETE","lineNumber":222,"oldContent":"                if (result) {"},{"type":"DELETE","lineNumber":224,"oldContent":"                    onResult(true, null)"},{"type":"INSERT","lineNumber":221,"content":"                // Give a small delay to ensure all mode changes are processed"},{"type":"INSERT","lineNumber":222,"content":"                delay(1000)"},{"type":"INSERT","lineNumber":223,"content":""},{"type":"INSERT","lineNumber":224,"content":"                // Step 5: Start the mission"},{"type":"INSERT","lineNumber":225,"content":"                val last = if (lastUploadedCount > 0) lastUploadedCount - 1 else 0"},{"type":"INSERT","lineNumber":226,"content":"                Log.i(\"SharedVM\", \"Sending start mission command with first=0 last=$last\")"},{"type":"INSERT","lineNumber":227,"content":"                val result = repo?.startMission(0, last) ?: false"},{"type":"INSERT","lineNumber":228,"content":""},{"type":"INSERT","lineNumber":229,"content":"                if (result) {"},{"type":"INSERT","lineNumber":230,"content":"                    Log.i(\"SharedVM\", \"âœ“ Mission start acknowledged by FCU\")"},{"type":"INSERT","lineNumber":231,"content":"                    onResult(true, null)"},{"type":"DELETE","lineNumber":228,"oldContent":"                // Give a small delay to ensure all mode changes are processed"},{"type":"DELETE","lineNumber":230,"oldContent":""},{"type":"DELETE","lineNumber":233,"oldContent":"                // Step 5: Start the mission"},{"type":"DELETE","lineNumber":236,"oldContent":"                Log.i(\"SharedVM\", \"Sending start mission command with first=0 last=$last\")"},{"type":"DELETE","lineNumber":239,"oldContent":""},{"type":"DELETE","lineNumber":242,"oldContent":"                    Log.i(\"SharedVM\", \"âœ“ Mission start acknowledged by FCU\")"},{"type":"DELETE","lineNumber":244,"oldContent":"                Log.w(\"SharedVM\", \"No repo available, cannot request mission readback\")"},{"type":"DELETE","lineNumber":246,"oldContent":"                return@launch"},{"type":"MODIFY","lineNumber":248,"content":"                Log.w(\"SharedVM\", \"No repo available, cannot request mission readback\")","oldContent":"            }"},{"type":"INSERT","lineNumber":249,"content":"                return@launch"},{"type":"INSERT","lineNumber":250,"content":"            }"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uimain/MainPage.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uimain/MainPage.kt","baseContent":"package com.example.aerogcsclone.uimain\n\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.*\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.dp\nimport androidx.navigation.NavHostController\nimport com.example.aerogcsclone.Telemetry.SharedViewModel\nimport com.example.aerogcsclone.Telemetry.TelemetryState\nimport com.example.aerogcsclone.authentication.AuthViewModel\n\n@Composable\nfun MainPage(\n    telemetryViewModel: SharedViewModel,\n    authViewModel: AuthViewModel,\n    navController: NavHostController\n) {\n    val telemetryState by telemetryViewModel.telemetryState.collectAsState()\n\n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .background(MaterialTheme.colorScheme.background)\n    ) {\n        // âœ… Corrected TopNavBar call\n        TopNavBar(\n            telemetryState = telemetryState,\n            authViewModel = authViewModel,\n            navController = navController\n        )\n\n        Box(\n            modifier = Modifier\n                .weight(1f)\n                .fillMaxWidth()\n        ) {\n            // âœ… Pass telemetryState to GcsMap\n//\n            GcsMap(telemetryState = telemetryState)\n\n\n\n            StatusPanel(\n                modifier = Modifier\n                    .align(Alignment.BottomStart)\n                    .padding(12.dp),\n                telemetryState = telemetryState\n            )\n\n            FloatingButtons(\n                modifier = Modifier\n                    .align(Alignment.CenterEnd)\n                    .padding(12.dp)\n            )\n        }\n    }\n}\n\n@Composable\nfun StatusPanel(\n    modifier: Modifier = Modifier,\n    telemetryState: TelemetryState\n) {\n    Surface(\n        modifier = modifier\n            .width(500.dp)\n            .height(120.dp),\n        color = Color.Black.copy(alpha = 0.6f),\n        shape = RoundedCornerShape(8.dp)\n    ) {\n        Column(\n            modifier = Modifier.padding(10.dp),\n            verticalArrangement = Arrangement.spacedBy(8.dp)\n        ) {\n            Row(\n                horizontalArrangement = Arrangement.SpaceBetween,\n                modifier = Modifier.fillMaxWidth()\n            ) {\n                Text(\"Alt: ${telemetryState.altitudeRelative ?: \"N/A\"}\", color = Color.White)\n                Text(\"Speed: ${telemetryState.groundspeed ?: \"N/A\"}\", color = Color.White)\n                Text(\"Area: N/A\", color = Color.White)\n                Text(\"Flow: N/A\", color = Color.White)\n            }\n            Spacer(modifier = Modifier.height(8.dp))\n            Row(\n                horizontalArrangement = Arrangement.SpaceBetween,\n                modifier = Modifier.fillMaxWidth()\n            ) {\n                Text(\"Obs Alt: N/A\", color = Color.White)\n                Text(\"Time: N/A\", color = Color.White)\n                Text(\"Distance: N/A\", color = Color.White)\n                Text(\"Consumed: N/A\", color = Color.White)\n            }\n        }\n    }\n}\n\n@Composable\nfun FloatingButtons(modifier: Modifier = Modifier) {\n    Column(\n        modifier = modifier,\n        verticalArrangement = Arrangement.spacedBy(12.dp),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        FloatingActionButton(onClick = { }, containerColor = Color.Black.copy(alpha = 0.7f)) {\n            Icon(Icons.Default.PlayArrow, contentDescription = \"Start\", tint = Color.White)\n        }\n        FloatingActionButton(onClick = { }, containerColor = Color.Black.copy(alpha = 0.7f)) {\n            Icon(Icons.Default.Settings, contentDescription = \"Settings\", tint = Color.White)\n        }\n        FloatingActionButton(onClick = { }, containerColor = Color.Black.copy(alpha = 0.7f)) {\n            Icon(Icons.Default.Refresh, contentDescription = \"Refresh\", tint = Color.White)\n        }\n        FloatingActionButton(onClick = { }, containerColor = Color.Black.copy(alpha = 0.7f)) {\n            Icon(Icons.Default.Map, contentDescription = \"Map Options\", tint = Color.White)\n        }\n    }\n}","baseTimestamp":1757909204070,"deltas":[{"timestamp":1757912402740,"changes":[{"type":"INSERT","lineNumber":2,"content":"import android.widget.Toast"},{"type":"INSERT","lineNumber":15,"content":"import androidx.compose.ui.platform.LocalContext"},{"type":"INSERT","lineNumber":29,"content":"    val context = LocalContext.current"},{"type":"INSERT","lineNumber":30,"content":"    val missionUploaded = telemetryViewModel.missionUploaded"},{"type":"DELETE","lineNumber":48,"oldContent":""},{"type":"DELETE","lineNumber":49,"oldContent":""},{"type":"DELETE","lineNumber":50,"oldContent":""},{"type":"INSERT","lineNumber":64,"content":""},{"type":"INSERT","lineNumber":65,"content":"            // Start Mission button"},{"type":"INSERT","lineNumber":66,"content":"            Button("},{"type":"INSERT","lineNumber":67,"content":"                onClick = {"},{"type":"INSERT","lineNumber":68,"content":"                    telemetryViewModel.startMission { success, error ->"},{"type":"INSERT","lineNumber":69,"content":"                        if (success) {"},{"type":"INSERT","lineNumber":70,"content":"                            Toast.makeText(context, \"Mission started\", Toast.LENGTH_SHORT).show()"},{"type":"INSERT","lineNumber":71,"content":"                        } else {"},{"type":"INSERT","lineNumber":72,"content":"                            Toast.makeText(context, error ?: \"Mission start failed\", Toast.LENGTH_SHORT).show()"},{"type":"INSERT","lineNumber":73,"content":"                        }"},{"type":"INSERT","lineNumber":74,"content":"                    }"},{"type":"INSERT","lineNumber":75,"content":"                },"},{"type":"INSERT","lineNumber":76,"content":"                enabled = missionUploaded,"},{"type":"INSERT","lineNumber":77,"content":"                modifier = Modifier"},{"type":"INSERT","lineNumber":78,"content":"                    .align(Alignment.BottomEnd)"},{"type":"INSERT","lineNumber":79,"content":"                    .padding(24.dp)"},{"type":"INSERT","lineNumber":80,"content":"            ) {"},{"type":"INSERT","lineNumber":81,"content":"                Text(\"Start Mission\")"},{"type":"INSERT","lineNumber":82,"content":"            }"}]},{"timestamp":1757915700671,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import android.widget.Toast"},{"type":"DELETE","lineNumber":16,"oldContent":"import androidx.compose.ui.platform.LocalContext"},{"type":"DELETE","lineNumber":31,"oldContent":"    val context = LocalContext.current"},{"type":"DELETE","lineNumber":33,"oldContent":"    val missionUploaded = telemetryViewModel.missionUploaded"},{"type":"INSERT","lineNumber":48,"content":""},{"type":"INSERT","lineNumber":49,"content":""},{"type":"INSERT","lineNumber":50,"content":""},{"type":"DELETE","lineNumber":65,"oldContent":""},{"type":"DELETE","lineNumber":67,"oldContent":"            // Start Mission button"},{"type":"DELETE","lineNumber":69,"oldContent":"            Button("},{"type":"DELETE","lineNumber":71,"oldContent":"                onClick = {"},{"type":"DELETE","lineNumber":73,"oldContent":"                    telemetryViewModel.startMission { success, error ->"},{"type":"DELETE","lineNumber":75,"oldContent":"                        if (success) {"},{"type":"DELETE","lineNumber":77,"oldContent":"                            Toast.makeText(context, \"Mission started\", Toast.LENGTH_SHORT).show()"},{"type":"DELETE","lineNumber":79,"oldContent":"                        } else {"},{"type":"DELETE","lineNumber":81,"oldContent":"                            Toast.makeText(context, error ?: \"Mission start failed\", Toast.LENGTH_SHORT).show()"},{"type":"DELETE","lineNumber":83,"oldContent":"                        }"},{"type":"DELETE","lineNumber":85,"oldContent":"                    }"},{"type":"DELETE","lineNumber":87,"oldContent":"                },"},{"type":"DELETE","lineNumber":89,"oldContent":"                enabled = missionUploaded,"},{"type":"DELETE","lineNumber":91,"oldContent":"                modifier = Modifier"},{"type":"DELETE","lineNumber":93,"oldContent":"                    .align(Alignment.BottomEnd)"},{"type":"DELETE","lineNumber":95,"oldContent":"                    .padding(24.dp)"},{"type":"DELETE","lineNumber":97,"oldContent":"            ) {"},{"type":"DELETE","lineNumber":99,"oldContent":"                Text(\"Start Mission\")"},{"type":"DELETE","lineNumber":101,"oldContent":"            }"}]},{"timestamp":1757915709355,"changes":[{"type":"DELETE","lineNumber":8,"oldContent":"import androidx.compose.runtime.Composable"},{"type":"DELETE","lineNumber":9,"oldContent":"import androidx.compose.runtime.collectAsState"},{"type":"DELETE","lineNumber":10,"oldContent":"import androidx.compose.runtime.getValue"},{"type":"INSERT","lineNumber":8,"content":"import androidx.compose.runtime.*"},{"type":"INSERT","lineNumber":17,"content":"import com.google.maps.android.compose.MapType"},{"type":"INSERT","lineNumber":27,"content":"    // ðŸ”‘ Map type state"},{"type":"INSERT","lineNumber":28,"content":"    var mapType by remember { mutableStateOf(MapType.NORMAL) }"},{"type":"INSERT","lineNumber":29,"content":""},{"type":"DELETE","lineNumber":33,"oldContent":"        // âœ… Corrected TopNavBar call"},{"type":"DELETE","lineNumber":44,"oldContent":""},{"type":"INSERT","lineNumber":46,"content":"            // âœ… Pass telemetryState and mapType to GcsMap"},{"type":"INSERT","lineNumber":47,"content":"            GcsMap("},{"type":"INSERT","lineNumber":48,"content":"                telemetryState = telemetryState,"},{"type":"INSERT","lineNumber":49,"content":"                mapType = mapType"},{"type":"INSERT","lineNumber":50,"content":"            )"},{"type":"DELETE","lineNumber":47,"oldContent":"            // âœ… Pass telemetryState to GcsMap"},{"type":"DELETE","lineNumber":48,"oldContent":""},{"type":"DELETE","lineNumber":49,"oldContent":"//"},{"type":"DELETE","lineNumber":50,"oldContent":"            GcsMap(telemetryState = telemetryState)"},{"type":"MODIFY","lineNumber":62,"content":"                    .padding(12.dp),","oldContent":"                    .padding(12.dp)"},{"type":"INSERT","lineNumber":63,"content":"                onToggleMapType = {"},{"type":"INSERT","lineNumber":64,"content":"                    mapType = if (mapType == MapType.NORMAL) MapType.SATELLITE else MapType.NORMAL"},{"type":"INSERT","lineNumber":65,"content":"                }"},{"type":"DELETE","lineNumber":107,"oldContent":"fun FloatingButtons(modifier: Modifier = Modifier) {"},{"type":"INSERT","lineNumber":111,"content":"fun FloatingButtons("},{"type":"INSERT","lineNumber":112,"content":"    modifier: Modifier = Modifier,"},{"type":"INSERT","lineNumber":113,"content":"    onToggleMapType: () -> Unit"},{"type":"INSERT","lineNumber":114,"content":") {"},{"type":"DELETE","lineNumber":122,"oldContent":"        FloatingActionButton(onClick = { }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"INSERT","lineNumber":129,"content":"        FloatingActionButton("},{"type":"INSERT","lineNumber":130,"content":"            onClick = { onToggleMapType() },"},{"type":"INSERT","lineNumber":131,"content":"            containerColor = Color.Black.copy(alpha = 0.7f)"},{"type":"INSERT","lineNumber":132,"content":"        ) {"}]},{"timestamp":1757915781162,"changes":[{"type":"INSERT","lineNumber":2,"content":"import android.widget.Toast"},{"type":"INSERT","lineNumber":13,"content":"import androidx.compose.ui.platform.LocalContext"},{"type":"DELETE","lineNumber":15,"oldContent":"import com.google.maps.android.compose.MapType"},{"type":"INSERT","lineNumber":19,"content":"import com.google.maps.android.compose.MapType"},{"type":"DELETE","lineNumber":26,"oldContent":"    // ðŸ”‘ Map type state"},{"type":"INSERT","lineNumber":28,"content":"    val context = LocalContext.current"},{"type":"INSERT","lineNumber":29,"content":"    val missionUploaded = telemetryViewModel.missionUploaded"},{"type":"INSERT","lineNumber":31,"content":"    // ðŸ”‘ Map type state"},{"type":"DELETE","lineNumber":29,"oldContent":"    Column("},{"type":"INSERT","lineNumber":34,"content":"    Column("},{"type":"INSERT","lineNumber":50,"content":"<<<<<<< Updated upstream"},{"type":"DELETE","lineNumber":47,"oldContent":""},{"type":"INSERT","lineNumber":56,"content":""},{"type":"INSERT","lineNumber":57,"content":"======="},{"type":"INSERT","lineNumber":58,"content":"            // âœ… Pass telemetryState to GcsMap"},{"type":"INSERT","lineNumber":59,"content":"//"},{"type":"INSERT","lineNumber":60,"content":"            GcsMap(telemetryState = telemetryState)"},{"type":"INSERT","lineNumber":61,"content":">>>>>>> Stashed changes"},{"type":"DELETE","lineNumber":62,"oldContent":"                    .padding(12.dp)"},{"type":"DELETE","lineNumber":65,"oldContent":"        }"},{"type":"DELETE","lineNumber":67,"oldContent":"    }"},{"type":"INSERT","lineNumber":76,"content":"            )"},{"type":"INSERT","lineNumber":77,"content":""},{"type":"INSERT","lineNumber":78,"content":"            // Start Mission button"},{"type":"INSERT","lineNumber":79,"content":"            Button("},{"type":"INSERT","lineNumber":80,"content":"                onClick = {"},{"type":"INSERT","lineNumber":81,"content":"                    telemetryViewModel.startMission { success, error ->"},{"type":"INSERT","lineNumber":82,"content":"                        if (success) {"},{"type":"INSERT","lineNumber":83,"content":"                            Toast.makeText(context, \"Mission started\", Toast.LENGTH_SHORT).show()"},{"type":"INSERT","lineNumber":84,"content":"                        } else {"},{"type":"INSERT","lineNumber":85,"content":"                            Toast.makeText(context, error ?: \"Mission start failed\", Toast.LENGTH_SHORT).show()"},{"type":"INSERT","lineNumber":86,"content":"                        }"},{"type":"INSERT","lineNumber":87,"content":"                    }"},{"type":"INSERT","lineNumber":88,"content":"                },"},{"type":"INSERT","lineNumber":89,"content":"                enabled = missionUploaded,"},{"type":"INSERT","lineNumber":90,"content":"                modifier = Modifier"},{"type":"INSERT","lineNumber":91,"content":"                    .align(Alignment.BottomEnd)"},{"type":"INSERT","lineNumber":92,"content":"                    .padding(24.dp)"},{"type":"INSERT","lineNumber":93,"content":"            ) {"},{"type":"INSERT","lineNumber":94,"content":"                Text(\"Start Mission\")"},{"type":"INSERT","lineNumber":95,"content":"            }"},{"type":"INSERT","lineNumber":96,"content":"        }"},{"type":"INSERT","lineNumber":97,"content":"    }"},{"type":"INSERT","lineNumber":140,"content":"fun FloatingButtons("},{"type":"INSERT","lineNumber":141,"content":"    modifier: Modifier = Modifier,"},{"type":"INSERT","lineNumber":142,"content":"    onToggleMapType: () -> Unit"},{"type":"INSERT","lineNumber":143,"content":") {"},{"type":"DELETE","lineNumber":114,"oldContent":"fun FloatingButtons("},{"type":"DELETE","lineNumber":116,"oldContent":"    modifier: Modifier = Modifier,"},{"type":"DELETE","lineNumber":118,"oldContent":"    onToggleMapType: () -> Unit"},{"type":"DELETE","lineNumber":120,"oldContent":") {"},{"type":"INSERT","lineNumber":158,"content":"        FloatingActionButton("},{"type":"INSERT","lineNumber":159,"content":"            onClick = { onToggleMapType() },"},{"type":"INSERT","lineNumber":160,"content":"            containerColor = Color.Black.copy(alpha = 0.7f)"},{"type":"INSERT","lineNumber":161,"content":"        ) {"},{"type":"DELETE","lineNumber":133,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":134,"oldContent":"            containerColor = Color.Black.copy(alpha = 0.7f)"},{"type":"DELETE","lineNumber":135,"oldContent":"        FloatingActionButton("},{"type":"DELETE","lineNumber":136,"oldContent":"            onClick = { onToggleMapType() },"}]},{"timestamp":1757915821259,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import android.widget.Toast"},{"type":"MODIFY","lineNumber":8,"content":"import androidx.compose.runtime.Composable","oldContent":"import androidx.compose.runtime.*"},{"type":"INSERT","lineNumber":9,"content":"import androidx.compose.runtime.collectAsState"},{"type":"INSERT","lineNumber":10,"content":"import androidx.compose.runtime.getValue"},{"type":"DELETE","lineNumber":14,"oldContent":"import androidx.compose.ui.platform.LocalContext"},{"type":"DELETE","lineNumber":20,"oldContent":"import com.google.maps.android.compose.MapType"},{"type":"DELETE","lineNumber":29,"oldContent":"    val context = LocalContext.current"},{"type":"DELETE","lineNumber":30,"oldContent":"    var mapType by remember { mutableStateOf(MapType.NORMAL) }"},{"type":"DELETE","lineNumber":31,"oldContent":"    val missionUploaded = telemetryViewModel.missionUploaded"},{"type":"DELETE","lineNumber":32,"oldContent":""},{"type":"DELETE","lineNumber":33,"oldContent":"    // ðŸ”‘ Map type state"},{"type":"INSERT","lineNumber":28,"content":"    Column("},{"type":"DELETE","lineNumber":37,"oldContent":"    Column("},{"type":"INSERT","lineNumber":33,"content":"        // âœ… Corrected TopNavBar call"},{"type":"DELETE","lineNumber":50,"oldContent":"            // âœ… Pass telemetryState and mapType to GcsMap"},{"type":"DELETE","lineNumber":51,"oldContent":"            GcsMap("},{"type":"DELETE","lineNumber":52,"oldContent":"                telemetryState = telemetryState,"},{"type":"DELETE","lineNumber":53,"oldContent":"<<<<<<< Updated upstream"},{"type":"DELETE","lineNumber":54,"oldContent":"                mapType = mapType"},{"type":"DELETE","lineNumber":55,"oldContent":"            )"},{"type":"INSERT","lineNumber":45,"content":"            // âœ… Pass telemetryState to GcsMap"},{"type":"INSERT","lineNumber":46,"content":"//"},{"type":"INSERT","lineNumber":47,"content":"            GcsMap(telemetryState = telemetryState)"},{"type":"INSERT","lineNumber":48,"content":""},{"type":"INSERT","lineNumber":49,"content":""},{"type":"INSERT","lineNumber":50,"content":""},{"type":"DELETE","lineNumber":60,"oldContent":""},{"type":"DELETE","lineNumber":62,"oldContent":"======="},{"type":"DELETE","lineNumber":64,"oldContent":"            // âœ… Pass telemetryState to GcsMap"},{"type":"DELETE","lineNumber":66,"oldContent":"//"},{"type":"DELETE","lineNumber":68,"oldContent":"            GcsMap(telemetryState = telemetryState)"},{"type":"DELETE","lineNumber":70,"oldContent":">>>>>>> Stashed changes"},{"type":"DELETE","lineNumber":72,"oldContent":"                    .padding(12.dp),"},{"type":"DELETE","lineNumber":73,"oldContent":"                onToggleMapType = {"},{"type":"DELETE","lineNumber":74,"oldContent":"                    mapType = if (mapType == MapType.NORMAL) MapType.SATELLITE else MapType.NORMAL"},{"type":"DELETE","lineNumber":75,"oldContent":"                }"},{"type":"INSERT","lineNumber":61,"content":"                    .padding(12.dp)"},{"type":"INSERT","lineNumber":62,"content":"            )"},{"type":"INSERT","lineNumber":63,"content":"        }"},{"type":"INSERT","lineNumber":64,"content":"    }"},{"type":"DELETE","lineNumber":83,"oldContent":"            )"},{"type":"DELETE","lineNumber":85,"oldContent":""},{"type":"DELETE","lineNumber":87,"oldContent":"            // Start Mission button"},{"type":"DELETE","lineNumber":89,"oldContent":"            Button("},{"type":"DELETE","lineNumber":91,"oldContent":"                onClick = {"},{"type":"DELETE","lineNumber":93,"oldContent":"                    telemetryViewModel.startMission { success, error ->"},{"type":"DELETE","lineNumber":95,"oldContent":"                        if (success) {"},{"type":"DELETE","lineNumber":97,"oldContent":"                            Toast.makeText(context, \"Mission started\", Toast.LENGTH_SHORT).show()"},{"type":"DELETE","lineNumber":99,"oldContent":"                        } else {"},{"type":"DELETE","lineNumber":101,"oldContent":"                            Toast.makeText(context, error ?: \"Mission start failed\", Toast.LENGTH_SHORT).show()"},{"type":"DELETE","lineNumber":103,"oldContent":"                        }"},{"type":"DELETE","lineNumber":105,"oldContent":"                    }"},{"type":"DELETE","lineNumber":107,"oldContent":"                },"},{"type":"DELETE","lineNumber":109,"oldContent":"                enabled = missionUploaded,"},{"type":"DELETE","lineNumber":111,"oldContent":"                modifier = Modifier"},{"type":"DELETE","lineNumber":113,"oldContent":"                    .align(Alignment.BottomEnd)"},{"type":"DELETE","lineNumber":115,"oldContent":"                    .padding(24.dp)"},{"type":"DELETE","lineNumber":117,"oldContent":"            ) {"},{"type":"DELETE","lineNumber":119,"oldContent":"                Text(\"Start Mission\")"},{"type":"DELETE","lineNumber":122,"oldContent":"            }"},{"type":"DELETE","lineNumber":123,"oldContent":"        }"},{"type":"DELETE","lineNumber":125,"oldContent":"    }"},{"type":"INSERT","lineNumber":107,"content":"fun FloatingButtons(modifier: Modifier = Modifier) {"},{"type":"INSERT","lineNumber":122,"content":"        FloatingActionButton(onClick = { }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"DELETE","lineNumber":158,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":159,"oldContent":"            containerColor = Color.Black.copy(alpha = 0.7f)"},{"type":"DELETE","lineNumber":160,"oldContent":"            onClick = { onToggleMapType() },"},{"type":"DELETE","lineNumber":161,"oldContent":"fun FloatingButtons("},{"type":"DELETE","lineNumber":162,"oldContent":"        FloatingActionButton("},{"type":"DELETE","lineNumber":163,"oldContent":"    modifier: Modifier = Modifier,"},{"type":"DELETE","lineNumber":164,"oldContent":") {"},{"type":"DELETE","lineNumber":165,"oldContent":"    onToggleMapType: () -> Unit"}]},{"timestamp":1757998273930,"changes":[{"type":"DELETE","lineNumber":7,"oldContent":"import androidx.compose.runtime.Composable"},{"type":"MODIFY","lineNumber":7,"content":"import androidx.compose.material3.*","oldContent":"import androidx.compose.runtime.collectAsState"},{"type":"DELETE","lineNumber":10,"oldContent":"import androidx.compose.runtime.getValue"},{"type":"INSERT","lineNumber":17,"content":"import com.google.maps.android.compose.MapType"},{"type":"INSERT","lineNumber":18,"content":"import androidx.compose.ui.platform.LocalContext"},{"type":"INSERT","lineNumber":19,"content":"import android.widget.Toast"},{"type":"DELETE","lineNumber":27,"oldContent":"    Column("},{"type":"INSERT","lineNumber":28,"content":"    val uploadedWaypoints by telemetryViewModel.uploadedWaypoints.collectAsState()"},{"type":"INSERT","lineNumber":29,"content":"    val context = LocalContext.current"},{"type":"DELETE","lineNumber":29,"oldContent":"        // âœ… Corrected TopNavBar call"},{"type":"INSERT","lineNumber":31,"content":"    // ðŸ”‘ Map type state"},{"type":"INSERT","lineNumber":32,"content":"    var mapType by remember { mutableStateOf(MapType.SATELLITE) }"},{"type":"INSERT","lineNumber":33,"content":""},{"type":"INSERT","lineNumber":34,"content":"    Column("},{"type":"DELETE","lineNumber":40,"oldContent":"            // âœ… Pass telemetryState to GcsMap"},{"type":"DELETE","lineNumber":42,"oldContent":"//"},{"type":"DELETE","lineNumber":44,"oldContent":"            GcsMap(telemetryState = telemetryState)"},{"type":"DELETE","lineNumber":46,"oldContent":""},{"type":"DELETE","lineNumber":48,"oldContent":""},{"type":"INSERT","lineNumber":50,"content":"            // âœ… Pass telemetryState, mapType, and uploaded waypoints to GcsMap"},{"type":"INSERT","lineNumber":51,"content":"            GcsMap("},{"type":"INSERT","lineNumber":52,"content":"                telemetryState = telemetryState,"},{"type":"INSERT","lineNumber":53,"content":"                points = uploadedWaypoints,"},{"type":"INSERT","lineNumber":54,"content":"                mapType = mapType"},{"type":"INSERT","lineNumber":55,"content":"            )"},{"type":"DELETE","lineNumber":55,"oldContent":"                    .padding(12.dp)"},{"type":"DELETE","lineNumber":58,"oldContent":"        }"},{"type":"DELETE","lineNumber":59,"oldContent":"            )"},{"type":"DELETE","lineNumber":60,"oldContent":"    }"},{"type":"INSERT","lineNumber":67,"content":"                    .padding(12.dp),"},{"type":"INSERT","lineNumber":68,"content":"                onToggleMapType = {"},{"type":"INSERT","lineNumber":69,"content":"                    mapType = if (mapType == MapType.SATELLITE) MapType.NORMAL else MapType.SATELLITE"},{"type":"INSERT","lineNumber":70,"content":"                },"},{"type":"INSERT","lineNumber":71,"content":"                onStartMission = {"},{"type":"INSERT","lineNumber":72,"content":"                    telemetryViewModel.startMission { success, error ->"},{"type":"INSERT","lineNumber":73,"content":"                        if (success) {"},{"type":"INSERT","lineNumber":74,"content":"                            Toast.makeText(context, \"Mission start sent\", Toast.LENGTH_SHORT).show()"},{"type":"INSERT","lineNumber":75,"content":"                        } else {"},{"type":"INSERT","lineNumber":76,"content":"                            Toast.makeText(context, error ?: \"Failed to start mission\", Toast.LENGTH_SHORT).show()"},{"type":"INSERT","lineNumber":77,"content":"                        }"},{"type":"INSERT","lineNumber":78,"content":"                    }"},{"type":"INSERT","lineNumber":79,"content":"                }"},{"type":"INSERT","lineNumber":80,"content":"            )"},{"type":"INSERT","lineNumber":81,"content":"        }"},{"type":"INSERT","lineNumber":82,"content":"    }"},{"type":"DELETE","lineNumber":84,"oldContent":"fun FloatingButtons(modifier: Modifier = Modifier) {"},{"type":"DELETE","lineNumber":93,"oldContent":"        FloatingActionButton(onClick = { }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"INSERT","lineNumber":125,"content":"fun FloatingButtons("},{"type":"INSERT","lineNumber":126,"content":"    modifier: Modifier = Modifier,"},{"type":"INSERT","lineNumber":127,"content":"    onToggleMapType: () -> Unit,"},{"type":"INSERT","lineNumber":128,"content":"    onStartMission: () -> Unit"},{"type":"INSERT","lineNumber":129,"content":") {"},{"type":"DELETE","lineNumber":114,"oldContent":"        FloatingActionButton(onClick = { }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"INSERT","lineNumber":135,"content":"        FloatingActionButton(onClick = { onStartMission() }, containerColor = Color.Black.copy(alpha = 0.7f)) {"},{"type":"INSERT","lineNumber":144,"content":"        FloatingActionButton("},{"type":"INSERT","lineNumber":145,"content":"            onClick = { onToggleMapType() },"},{"type":"INSERT","lineNumber":146,"content":"            containerColor = Color.Black.copy(alpha = 0.7f)"},{"type":"INSERT","lineNumber":147,"content":"        ) {"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uimain/PlanScreen.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uimain/PlanScreen.kt","baseContent":"package com.example.aerogcsclone.uimain\n\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.FloatingActionButton\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Modifier\nimport androidx.navigation.NavHostController\nimport com.example.aerogcsclone.Telemetry.SharedViewModel\nimport com.example.aerogcsclone.authentication.AuthViewModel\n\n@Composable\nfun PlanScreen(\n    telemetryViewModel: SharedViewModel,\n    authViewModel: AuthViewModel,\n    navController: NavHostController\n) {\n    val telemetryState by telemetryViewModel.telemetryState.collectAsState()\n\n    Scaffold(\n        floatingActionButton = {\n            FloatingActionButton(onClick = { /* TODO */ }) {\n                Text(\"Create Plan\")\n            }\n        }\n    ) { paddingValues ->\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(paddingValues)\n        ) {\n            TopNavBar(\n                telemetryState = telemetryState,\n                authViewModel = authViewModel,\n                navController = navController\n            )\n            GcsMap(telemetryState = telemetryState)\n        }\n    }\n}","baseTimestamp":1757650088623,"deltas":[{"timestamp":1757913872038,"changes":[{"type":"INSERT","lineNumber":180,"content":"                // Show waypoints for user feedback"},{"type":"DELETE","lineNumber":181,"oldContent":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"INSERT","lineNumber":183,"content":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":184,"oldContent":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"},{"type":"DELETE","lineNumber":190,"oldContent":"}"},{"type":"INSERT","lineNumber":191,"content":""}]},{"timestamp":1757913880438,"changes":[{"type":"MODIFY","lineNumber":6,"content":"import androidx.compose.material3.*","oldContent":"import androidx.compose.foundation.layout.fillMaxSize"},{"type":"MODIFY","lineNumber":8,"content":"import androidx.compose.runtime.*","oldContent":"import androidx.compose.material3.FloatingActionButton"},{"type":"DELETE","lineNumber":10,"oldContent":"import androidx.compose.material3.Text"},{"type":"DELETE","lineNumber":11,"oldContent":"import androidx.compose.ui.unit.dp"},{"type":"DELETE","lineNumber":12,"oldContent":"import androidx.compose.runtime.Composable"},{"type":"DELETE","lineNumber":13,"oldContent":"import androidx.compose.runtime.collectAsState"},{"type":"INSERT","lineNumber":11,"content":"import androidx.compose.ui.unit.dp"},{"type":"INSERT","lineNumber":12,"content":"import androidx.navigation.NavHostController"},{"type":"INSERT","lineNumber":13,"content":"import com.example.aerogcsclone.Telemetry.SharedViewModel"},{"type":"INSERT","lineNumber":14,"content":"import com.example.aerogcsclone.authentication.AuthViewModel"},{"type":"INSERT","lineNumber":98,"content":"                            .size(56.dp)"},{"type":"INSERT","lineNumber":99,"content":"                    ) {"},{"type":"INSERT","lineNumber":100,"content":"                        Icon(Icons.Default.ClearAll, contentDescription = \"Clear Plan\")"},{"type":"INSERT","lineNumber":101,"content":"                    }"},{"type":"DELETE","lineNumber":99,"oldContent":"                    Text(\"Upload Mission\")"},{"type":"DELETE","lineNumber":100,"oldContent":"                        .fillMaxWidth()"},{"type":"DELETE","lineNumber":101,"oldContent":"                        .padding(top = 16.dp)"},{"type":"DELETE","lineNumber":102,"oldContent":"                    },"},{"type":"MODIFY","lineNumber":103,"content":"","oldContent":"                        }"},{"type":"DELETE","lineNumber":152,"oldContent":"                                    popUpTo(Screen.Plan.route) { inclusive = true }"},{"type":"DELETE","lineNumber":153,"oldContent":"                                Toast.makeText(context, \"Mission uploaded\", Toast.LENGTH_SHORT).show()"},{"type":"INSERT","lineNumber":152,"content":"                // Upload Mission button"},{"type":"INSERT","lineNumber":153,"content":"                Button("},{"type":"MODIFY","lineNumber":172,"content":"                    modifier = Modifier","oldContent":"                // Show waypoints for user feedback"},{"type":"INSERT","lineNumber":173,"content":"                        .padding(top = 16.dp)"},{"type":"INSERT","lineNumber":174,"content":"                        .fillMaxWidth()"},{"type":"INSERT","lineNumber":175,"content":"                ) {"},{"type":"DELETE","lineNumber":174,"oldContent":"                    enabled = waypoints.isNotEmpty(),"},{"type":"DELETE","lineNumber":175,"oldContent":"                            } else {"},{"type":"DELETE","lineNumber":176,"oldContent":"                    Text(\"Upload Mission (${waypoints.size})\")"},{"type":"INSERT","lineNumber":190,"content":"}"},{"type":"DELETE","lineNumber":191,"oldContent":""}]},{"timestamp":1757913894119,"changes":[{"type":"INSERT","lineNumber":10,"content":"import androidx.compose.ui.Modifier"},{"type":"DELETE","lineNumber":14,"oldContent":"import androidx.compose.runtime.getValue"},{"type":"DELETE","lineNumber":19,"oldContent":""},{"type":"DELETE","lineNumber":20,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":21,"oldContent":"    telemetryViewModel: SharedViewModel,"},{"type":"INSERT","lineNumber":19,"content":"import androidx.compose.material.icons.filled.Delete"},{"type":"INSERT","lineNumber":20,"content":"import androidx.compose.material.icons.filled.ClearAll"},{"type":"INSERT","lineNumber":21,"content":"import androidx.compose.material.icons.filled.Menu"},{"type":"MODIFY","lineNumber":35,"content":"","oldContent":"        Column("},{"type":"MODIFY","lineNumber":79,"content":"                    ) {","oldContent":"                        telemetryViewModel.uploadMission(sampleMissionItems) { success, error ->"},{"type":"MODIFY","lineNumber":97,"content":"                            .padding(bottom = 12.dp)","oldContent":""},{"type":"DELETE","lineNumber":99,"oldContent":"                navController = navController"},{"type":"INSERT","lineNumber":102,"content":"                }"},{"type":"DELETE","lineNumber":117,"oldContent":"                }"},{"type":"DELETE","lineNumber":118,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":119,"oldContent":"                        .padding(top = 16.dp)"},{"type":"DELETE","lineNumber":120,"oldContent":"                    modifier = Modifier"},{"type":"DELETE","lineNumber":121,"oldContent":"                        }"},{"type":"DELETE","lineNumber":122,"oldContent":"                                Toast.makeText(context, error ?: \"Mission upload failed\", Toast.LENGTH_SHORT).show()"},{"type":"DELETE","lineNumber":123,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":124,"oldContent":"                    verticalArrangement = Arrangement.spacedBy(12.dp)"},{"type":"DELETE","lineNumber":125,"oldContent":"                        .align(Alignment.TopStart)"},{"type":"DELETE","lineNumber":126,"oldContent":"                Column("},{"type":"INSERT","lineNumber":117,"content":"                .padding(paddingValues)"},{"type":"INSERT","lineNumber":118,"content":"        ) {"},{"type":"INSERT","lineNumber":119,"content":"            // Top navigation bar"},{"type":"INSERT","lineNumber":120,"content":"            TopNavBar("},{"type":"INSERT","lineNumber":121,"content":"                telemetryState = telemetryState,"},{"type":"INSERT","lineNumber":122,"content":"                authViewModel = authViewModel,"},{"type":"INSERT","lineNumber":123,"content":"                navController = navController"},{"type":"INSERT","lineNumber":124,"content":"            )"},{"type":"INSERT","lineNumber":125,"content":""},{"type":"INSERT","lineNumber":126,"content":"            Box(modifier = Modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":134,"oldContent":"                            if (success) {"},{"type":"DELETE","lineNumber":135,"oldContent":"                        telemetryViewModel.uploadMission(sampleMissionItems) { success, error ->"},{"type":"INSERT","lineNumber":134,"content":"                        .padding(start = 16.dp, top = 72.dp), // push below TopNavBar"},{"type":"INSERT","lineNumber":135,"content":"                    verticalArrangement = Arrangement.spacedBy(12.dp)"},{"type":"INSERT","lineNumber":136,"content":"                ) {"},{"type":"INSERT","lineNumber":137,"content":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":137,"oldContent":"                    modifier = Modifier"},{"type":"DELETE","lineNumber":138,"oldContent":"                    },"},{"type":"DELETE","lineNumber":174,"oldContent":"                    Text(\"Upload Mission (${waypoints.size})\")"},{"type":"DELETE","lineNumber":177,"oldContent":"                }"},{"type":"INSERT","lineNumber":176,"content":"                    Text(\"Upload Mission (${waypoints.size})\")"},{"type":"INSERT","lineNumber":177,"content":"                };"},{"type":"INSERT","lineNumber":178,"content":"                "},{"type":"DELETE","lineNumber":185,"oldContent":""},{"type":"INSERT","lineNumber":186,"content":"                    }"},{"type":"INSERT","lineNumber":187,"content":"                }"},{"type":"INSERT","lineNumber":188,"content":"            }"},{"type":"INSERT","lineNumber":189,"content":"        }"},{"type":"DELETE","lineNumber":187,"oldContent":""},{"type":"DELETE","lineNumber":188,"oldContent":""},{"type":"INSERT","lineNumber":192,"content":""}]},{"timestamp":1757913896538,"changes":[{"type":"MODIFY","lineNumber":3,"content":"import android.widget.Toast","oldContent":"import androidx.compose.foundation.layout.Column"},{"type":"MODIFY","lineNumber":15,"content":"import androidx.compose.material.icons.Icons","oldContent":"import com.example.aerogcsclone.authentication.AuthViewModel"},{"type":"INSERT","lineNumber":25,"content":"import com.example.aerogcsclone.navigation.Screen"},{"type":"DELETE","lineNumber":26,"oldContent":""},{"type":"MODIFY","lineNumber":34,"content":"    val context = LocalContext.current","oldContent":"                .fillMaxSize()"},{"type":"MODIFY","lineNumber":36,"content":"    // Example mission items (replace with actual user input)","oldContent":"        ) {"},{"type":"MODIFY","lineNumber":102,"content":"                }","oldContent":"                }"},{"type":"DELETE","lineNumber":106,"oldContent":"                                }"},{"type":"DELETE","lineNumber":107,"oldContent":"                                    popUpTo(Screen.Plan.route) { inclusive = true }"},{"type":"DELETE","lineNumber":108,"oldContent":"                                Toast.makeText(context, \"Mission uploaded\", Toast.LENGTH_SHORT).show()"},{"type":"DELETE","lineNumber":109,"oldContent":"                            if (success) {"},{"type":"INSERT","lineNumber":106,"content":"                    onClick = { showPlanActions = !showPlanActions },"},{"type":"INSERT","lineNumber":107,"content":"                    modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":108,"content":"                ) {"},{"type":"INSERT","lineNumber":109,"content":"                    Icon(Icons.Default.Menu, contentDescription = \"Create Plan\")"},{"type":"DELETE","lineNumber":127,"oldContent":"                    }"},{"type":"DELETE","lineNumber":128,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":129,"oldContent":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"INSERT","lineNumber":127,"content":"                // Map background"},{"type":"INSERT","lineNumber":128,"content":"                GcsMap(telemetryState = telemetryState)"},{"type":"INSERT","lineNumber":129,"content":""},{"type":"DELETE","lineNumber":137,"oldContent":"                            } else {"},{"type":"INSERT","lineNumber":138,"content":"                        onClick = { telemetryViewModel.arm() },"},{"type":"MODIFY","lineNumber":176,"content":"                    Text(\"Upload Mission (${waypoints.size})\")","oldContent":"                    Text(\"Upload Mission (${waypoints.size})\")"},{"type":"DELETE","lineNumber":178,"oldContent":"                "},{"type":"MODIFY","lineNumber":188,"content":"        }","oldContent":"}"},{"type":"INSERT","lineNumber":189,"content":"    }"},{"type":"INSERT","lineNumber":190,"content":"}"},{"type":"INSERT","lineNumber":191,"content":""}]},{"timestamp":1757913901156,"changes":[{"type":"DELETE","lineNumber":17,"oldContent":"import com.example.aerogcsclone.authentication.AuthViewModel"},{"type":"DELETE","lineNumber":18,"oldContent":""},{"type":"INSERT","lineNumber":17,"content":"import androidx.compose.material.icons.filled.FlightTakeoff"},{"type":"INSERT","lineNumber":18,"content":"import androidx.compose.material.icons.filled.Add"},{"type":"MODIFY","lineNumber":23,"content":"import com.divpundir.mavlink.definitions.common.MissionItemInt","oldContent":"    navController: NavHostController"},{"type":"MODIFY","lineNumber":27,"content":"@Composable","oldContent":"    Scaffold("},{"type":"MODIFY","lineNumber":40,"content":"    var showPlanActions by remember { mutableStateOf(false) }","oldContent":"        ) {"},{"type":"INSERT","lineNumber":101,"content":"                    }"},{"type":"DELETE","lineNumber":102,"oldContent":"                }"},{"type":"DELETE","lineNumber":104,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":105,"oldContent":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleMedium)"},{"type":"INSERT","lineNumber":104,"content":"                // Main Create Plan button"},{"type":"INSERT","lineNumber":105,"content":"                FloatingActionButton("},{"type":"DELETE","lineNumber":110,"oldContent":"                    enabled = waypoints.isNotEmpty(),"},{"type":"MODIFY","lineNumber":110,"content":"                }","oldContent":"                                }"},{"type":"INSERT","lineNumber":111,"content":"            }"},{"type":"DELETE","lineNumber":113,"oldContent":"                                    popUpTo(Screen.Plan.route) { inclusive = true }"},{"type":"DELETE","lineNumber":114,"oldContent":"                        telemetryViewModel.uploadMission(waypoints) { success, error ->"},{"type":"DELETE","lineNumber":115,"oldContent":"                Column("},{"type":"DELETE","lineNumber":116,"oldContent":"                // Left-side floating buttons (below TopNavBar)"},{"type":"INSERT","lineNumber":113,"content":"    ) { paddingValues ->"},{"type":"INSERT","lineNumber":114,"content":"        Column("},{"type":"INSERT","lineNumber":115,"content":"            modifier = Modifier"},{"type":"INSERT","lineNumber":116,"content":"                .fillMaxSize()"},{"type":"MODIFY","lineNumber":138,"content":"                        onClick = { telemetryViewModel.arm() },","oldContent":"                        onClick = { telemetryViewModel.arm() },"},{"type":"MODIFY","lineNumber":161,"content":"                                }","oldContent":""},{"type":"INSERT","lineNumber":175,"content":"                ) {"},{"type":"DELETE","lineNumber":176,"oldContent":"                    Text(\"Upload Mission (${waypoints.size})\")"},{"type":"MODIFY","lineNumber":179,"content":"","oldContent":"            "},{"type":"MODIFY","lineNumber":182,"content":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleMedium)","oldContent":""},{"type":"MODIFY","lineNumber":184,"content":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")","oldContent":"}"},{"type":"INSERT","lineNumber":186,"content":"                }"},{"type":"INSERT","lineNumber":187,"content":"            }"},{"type":"DELETE","lineNumber":187,"oldContent":"        }"},{"type":"DELETE","lineNumber":189,"oldContent":""},{"type":"INSERT","lineNumber":191,"content":""}]},{"timestamp":1757913954843,"changes":[{"type":"MODIFY","lineNumber":16,"content":"import androidx.compose.material.icons.filled.Build","oldContent":"import com.example.aerogcsclone.authentication.AuthViewModel"},{"type":"MODIFY","lineNumber":22,"content":"import androidx.compose.ui.platform.LocalContext","oldContent":"    navController: NavHostController"},{"type":"MODIFY","lineNumber":41,"content":"","oldContent":"                authViewModel = authViewModel,"},{"type":"MODIFY","lineNumber":111,"content":"            }","oldContent":"                    enabled = waypoints.isNotEmpty(),"},{"type":"INSERT","lineNumber":137,"content":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":138,"oldContent":"                        onClick = { telemetryViewModel.arm() },"},{"type":"DELETE","lineNumber":177,"oldContent":"                };"},{"type":"DELETE","lineNumber":178,"oldContent":"            "},{"type":"INSERT","lineNumber":177,"content":"                }"},{"type":"DELETE","lineNumber":181,"oldContent":""},{"type":"INSERT","lineNumber":180,"content":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"DELETE","lineNumber":183,"oldContent":""},{"type":"INSERT","lineNumber":182,"content":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"MODIFY","lineNumber":187,"content":"        }","oldContent":"                }"},{"type":"DELETE","lineNumber":190,"oldContent":""},{"type":"INSERT","lineNumber":189,"content":"}"}]},{"timestamp":1757914008068,"changes":[{"type":"MODIFY","lineNumber":24,"content":"//import com.example.aerogcsclone.Telemetry.MissionItemInt","oldContent":"    val telemetryState by telemetryViewModel.telemetryState.collectAsState()"},{"type":"DELETE","lineNumber":38,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":39,"oldContent":"                telemetryState = telemetryState,"},{"type":"INSERT","lineNumber":38,"content":""},{"type":"INSERT","lineNumber":39,"content":"    // State to toggle plan action buttons"},{"type":"DELETE","lineNumber":51,"oldContent":"            frame = 3u, // MAV_FRAME_GLOBAL_RELATIVE_ALT_INT"},{"type":"DELETE","lineNumber":52,"oldContent":"            command = 16u, // MAV_CMD_NAV_WAYPOINT"},{"type":"INSERT","lineNumber":51,"content":"            frame = com.divpundir.mavlink.api.MavEnumValue.of(com.divpundir.mavlink.definitions.common.MavFrame.GLOBAL_RELATIVE_ALT_INT),"},{"type":"INSERT","lineNumber":52,"content":"            command = com.divpundir.mavlink.api.MavEnumValue.of(com.divpundir.mavlink.definitions.common.MavCmd.NAV_WAYPOINT), // MAV_CMD_NAV_WAYPOINT"},{"type":"DELETE","lineNumber":179,"oldContent":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"DELETE","lineNumber":181,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"INSERT","lineNumber":180,"content":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"INSERT","lineNumber":182,"content":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":186,"oldContent":"        }"},{"type":"MODIFY","lineNumber":187,"content":"        }","oldContent":"}"},{"type":"INSERT","lineNumber":189,"content":"}"}]},{"timestamp":1757914035561,"changes":[{"type":"DELETE","lineNumber":42,"oldContent":"            )"},{"type":"DELETE","lineNumber":43,"oldContent":"        }"},{"type":"DELETE","lineNumber":44,"oldContent":"}"},{"type":"DELETE","lineNumber":45,"oldContent":"                    }"},{"type":"DELETE","lineNumber":46,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":47,"oldContent":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"INSERT","lineNumber":42,"content":"    // Mutable list to store waypoints"},{"type":"INSERT","lineNumber":43,"content":"    val waypoints = remember { mutableStateListOf<MissionItemInt>() }"},{"type":"DELETE","lineNumber":49,"oldContent":"                    enabled = waypoints.isNotEmpty(),"},{"type":"DELETE","lineNumber":50,"oldContent":"                                }"},{"type":"INSERT","lineNumber":45,"content":"    // Helper to create a dummy waypoint (replace with real input logic)"},{"type":"INSERT","lineNumber":46,"content":"    fun createDummyWaypoint(seq: Int): MissionItemInt {"},{"type":"INSERT","lineNumber":47,"content":"        return MissionItemInt("},{"type":"INSERT","lineNumber":48,"content":"            targetSystem = telemetryState.fcuDetected.let { if (it) 1u else 0u }, // Use 1u for demo"},{"type":"INSERT","lineNumber":49,"content":"            targetComponent = 0u,"},{"type":"INSERT","lineNumber":50,"content":"            seq = seq.toUShort(),"},{"type":"MODIFY","lineNumber":53,"content":"            current = if (seq == 0) 1u else 0u,","oldContent":"        }"},{"type":"DELETE","lineNumber":76,"oldContent":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"DELETE","lineNumber":77,"oldContent":"                // Show waypoints for user feedback"},{"type":"DELETE","lineNumber":78,"oldContent":"                    Text(\"Upload Mission (${waypoints.size})\")"},{"type":"INSERT","lineNumber":76,"content":"                        modifier = Modifier"},{"type":"INSERT","lineNumber":77,"content":"                            .padding(bottom = 12.dp)"},{"type":"INSERT","lineNumber":78,"content":"                            .size(56.dp)"},{"type":"DELETE","lineNumber":81,"oldContent":"                        telemetryViewModel.uploadMission(waypoints) { success, error ->"},{"type":"DELETE","lineNumber":82,"oldContent":"                Column("},{"type":"DELETE","lineNumber":83,"oldContent":"        }"},{"type":"INSERT","lineNumber":81,"content":"                    }"},{"type":"INSERT","lineNumber":82,"content":""},{"type":"INSERT","lineNumber":83,"content":"                    FloatingActionButton("},{"type":"MODIFY","lineNumber":85,"content":"                            if (waypoints.isNotEmpty()) waypoints.removeAt(waypoints.lastIndex)","oldContent":"                            if (waypoints.isNotEmpty()) waypoints.removeLast()"},{"type":"DELETE","lineNumber":92,"oldContent":"        }"},{"type":"DELETE","lineNumber":93,"oldContent":"            }"},{"type":"DELETE","lineNumber":96,"oldContent":"                    Text(\"Upload Mission (${waypoints.size})\")"},{"type":"INSERT","lineNumber":94,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":95,"content":"                        onClick = { waypoints.clear() },"},{"type":"INSERT","lineNumber":96,"content":"                        modifier = Modifier"},{"type":"MODIFY","lineNumber":130,"content":"                // Left-side floating buttons (below TopNavBar)","oldContent":"                                Toast.makeText(context, \"Mission uploaded\", Toast.LENGTH_SHORT).show()"},{"type":"DELETE","lineNumber":132,"oldContent":"                            if (success) {"},{"type":"DELETE","lineNumber":133,"oldContent":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleMedium)"},{"type":"INSERT","lineNumber":132,"content":"                    modifier = Modifier"},{"type":"INSERT","lineNumber":133,"content":"                        .align(Alignment.TopStart)"},{"type":"DELETE","lineNumber":147,"oldContent":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleMedium)"},{"type":"DELETE","lineNumber":148,"oldContent":""},{"type":"DELETE","lineNumber":149,"oldContent":"            }"},{"type":"INSERT","lineNumber":147,"content":"                    ) {"},{"type":"INSERT","lineNumber":148,"content":"                        Icon(Icons.Default.Build, contentDescription = \"Change Mode\")"},{"type":"INSERT","lineNumber":149,"content":"                    }"},{"type":"MODIFY","lineNumber":151,"content":"","oldContent":"                                ).show()"},{"type":"DELETE","lineNumber":155,"oldContent":"                                    context,"},{"type":"DELETE","lineNumber":156,"oldContent":"                                navController.navigate(Screen.Main.route) {"},{"type":"INSERT","lineNumber":155,"content":"                        telemetryViewModel.uploadMission(waypoints) { success, error ->"},{"type":"INSERT","lineNumber":156,"content":"                            if (success) {"},{"type":"MODIFY","lineNumber":158,"content":"                                    .show()","oldContent":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleMedium)"},{"type":"MODIFY","lineNumber":160,"content":"                                    popUpTo(Screen.Plan.route) { inclusive = true }","oldContent":""},{"type":"DELETE","lineNumber":162,"oldContent":"                    },"},{"type":"DELETE","lineNumber":163,"oldContent":"                        }"},{"type":"DELETE","lineNumber":164,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":165,"oldContent":"                // Show waypoints for user feedback"},{"type":"INSERT","lineNumber":162,"content":"                            } else {"},{"type":"INSERT","lineNumber":163,"content":"                                Toast.makeText("},{"type":"INSERT","lineNumber":164,"content":"                                    context,"},{"type":"INSERT","lineNumber":165,"content":"                                    error ?: \"Mission upload failed\","},{"type":"DELETE","lineNumber":168,"oldContent":"            "},{"type":"DELETE","lineNumber":169,"oldContent":"            }"},{"type":"DELETE","lineNumber":170,"oldContent":""},{"type":"DELETE","lineNumber":171,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"INSERT","lineNumber":168,"content":"                            }"},{"type":"INSERT","lineNumber":169,"content":"                        }"},{"type":"INSERT","lineNumber":170,"content":"                    },"},{"type":"INSERT","lineNumber":171,"content":"                    enabled = waypoints.isNotEmpty(),"},{"type":"INSERT","lineNumber":179,"content":"                // Show waypoints for user feedback"},{"type":"DELETE","lineNumber":180,"oldContent":"                    }"},{"type":"MODIFY","lineNumber":182,"content":"                    waypoints.forEachIndexed { idx, wp ->","oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"MODIFY","lineNumber":184,"content":"                    }","oldContent":"            }"},{"type":"INSERT","lineNumber":186,"content":"            }"},{"type":"INSERT","lineNumber":188,"content":"    }"},{"type":"INSERT","lineNumber":189,"content":"}"}]},{"timestamp":1757914323829,"changes":[{"type":"DELETE","lineNumber":23,"oldContent":"import com.divpundir.mavlink.definitions.common.MissionItemInt"},{"type":"DELETE","lineNumber":24,"oldContent":"//import com.example.aerogcsclone.Telemetry.MissionItemInt"},{"type":"DELETE","lineNumber":25,"oldContent":"import com.example.aerogcsclone.navigation.Screen"},{"type":"DELETE","lineNumber":26,"oldContent":"        floatingActionButton = {"},{"type":"INSERT","lineNumber":23,"content":"import com.google.android.gms.maps.model.LatLng"},{"type":"INSERT","lineNumber":24,"content":"import com.divpundir.mavlink.api.MavEnumValue"},{"type":"INSERT","lineNumber":25,"content":"import com.divpundir.mavlink.definitions.common.MavFrame"},{"type":"INSERT","lineNumber":26,"content":"import com.divpundir.mavlink.definitions.common.MavCmd"},{"type":"INSERT","lineNumber":27,"content":""},{"type":"DELETE","lineNumber":36,"oldContent":"    // Example mission items (replace with actual user input)"},{"type":"DELETE","lineNumber":37,"oldContent":"    val sampleMissionItems = listOf<MissionItemInt>() // TODO: Populate with real waypoints"},{"type":"DELETE","lineNumber":38,"oldContent":""},{"type":"DELETE","lineNumber":42,"oldContent":"    // Mutable list to store waypoints"},{"type":"DELETE","lineNumber":43,"oldContent":"    val waypoints = remember { mutableStateListOf<MissionItemInt>() }"},{"type":"DELETE","lineNumber":44,"oldContent":"    // Helper to create a dummy waypoint (replace with real input logic)"},{"type":"DELETE","lineNumber":45,"oldContent":"    fun createDummyWaypoint(seq: Int): MissionItemInt {"},{"type":"DELETE","lineNumber":46,"oldContent":"        return MissionItemInt("},{"type":"DELETE","lineNumber":47,"oldContent":"            targetSystem = telemetryState.fcuDetected.let { if (it) 1u else 0u }, // Use 1u for demo"},{"type":"DELETE","lineNumber":48,"oldContent":"                    Text(\"Upload Mission (${waypoints.size})\")"},{"type":"INSERT","lineNumber":40,"content":"    // Mutable list to store map points (LatLng) and mission items"},{"type":"INSERT","lineNumber":41,"content":"    val points = remember { mutableStateListOf<LatLng>() }"},{"type":"INSERT","lineNumber":42,"content":"    val waypoints = remember { mutableStateListOf<com.divpundir.mavlink.definitions.common.MissionItemInt>() }"},{"type":"INSERT","lineNumber":43,"content":""},{"type":"INSERT","lineNumber":44,"content":"    // Handler when user taps on map: add marker and corresponding mission item"},{"type":"INSERT","lineNumber":45,"content":"    val onMapClick: (LatLng) -> Unit = { latLng ->"},{"type":"INSERT","lineNumber":46,"content":"        points.add(latLng)"},{"type":"INSERT","lineNumber":47,"content":"        // build MissionItemInt"},{"type":"INSERT","lineNumber":48,"content":"        val seq = waypoints.size"},{"type":"INSERT","lineNumber":49,"content":"        val missionItem = com.divpundir.mavlink.definitions.common.MissionItemInt("},{"type":"INSERT","lineNumber":50,"content":"            targetSystem = 0u,"},{"type":"DELETE","lineNumber":51,"oldContent":"            frame = com.divpundir.mavlink.api.MavEnumValue.of(com.divpundir.mavlink.definitions.common.MavFrame.GLOBAL_RELATIVE_ALT_INT),"},{"type":"DELETE","lineNumber":52,"oldContent":"            command = com.divpundir.mavlink.api.MavEnumValue.of(com.divpundir.mavlink.definitions.common.MavCmd.NAV_WAYPOINT), // MAV_CMD_NAV_WAYPOINT"},{"type":"MODIFY","lineNumber":53,"content":"            frame = MavEnumValue.of(MavFrame.GLOBAL_RELATIVE_ALT_INT),","oldContent":"            current = if (seq == 0) 1u else 0u,"},{"type":"INSERT","lineNumber":54,"content":"            command = MavEnumValue.of(MavCmd.NAV_WAYPOINT),"},{"type":"INSERT","lineNumber":55,"content":"            current = 0u,"},{"type":"DELETE","lineNumber":55,"oldContent":"            param1 = 0f, // Hold time"},{"type":"DELETE","lineNumber":56,"oldContent":"            param2 = 0f, // Acceptance radius"},{"type":"DELETE","lineNumber":57,"oldContent":"            param3 = 0f, // Pass radius"},{"type":"DELETE","lineNumber":58,"oldContent":"            param4 = 0f, // Yaw"},{"type":"DELETE","lineNumber":59,"oldContent":"            x = (19.0760 * 1e7).toInt(), // Example lat"},{"type":"DELETE","lineNumber":60,"oldContent":"            y = (72.8777 * 1e7).toInt(), // Example lon"},{"type":"DELETE","lineNumber":61,"oldContent":"            z = 10f // Example alt"},{"type":"INSERT","lineNumber":57,"content":"            param1 = 0f,"},{"type":"INSERT","lineNumber":58,"content":"            param2 = 0f,"},{"type":"INSERT","lineNumber":59,"content":"            param3 = 0f,"},{"type":"INSERT","lineNumber":60,"content":"            param4 = 0f,"},{"type":"INSERT","lineNumber":61,"content":"            x = (latLng.latitude * 1e7).toInt(),"},{"type":"INSERT","lineNumber":62,"content":"            y = (latLng.longitude * 1e7).toInt(),"},{"type":"INSERT","lineNumber":63,"content":"            z = 10f"},{"type":"INSERT","lineNumber":65,"content":"        waypoints.add(missionItem)"},{"type":"DELETE","lineNumber":68,"oldContent":"                    ) {"},{"type":"DELETE","lineNumber":69,"oldContent":"                            .padding(bottom = 12.dp)"},{"type":"DELETE","lineNumber":70,"oldContent":"                        Icon(Icons.Default.Add, contentDescription = \"Add Waypoints\")"},{"type":"DELETE","lineNumber":71,"oldContent":"        }"},{"type":"DELETE","lineNumber":72,"oldContent":"            }"},{"type":"DELETE","lineNumber":73,"oldContent":"                }"},{"type":"DELETE","lineNumber":74,"oldContent":"                    }"},{"type":"DELETE","lineNumber":75,"oldContent":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"},{"type":"INSERT","lineNumber":71,"content":"                horizontalAlignment = Alignment.End"},{"type":"INSERT","lineNumber":72,"content":"            ) {"},{"type":"INSERT","lineNumber":73,"content":"                // Extra buttons shown above \"Create Plan\""},{"type":"INSERT","lineNumber":74,"content":"                if (showPlanActions) {"},{"type":"INSERT","lineNumber":75,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":76,"content":"                        onClick = {"},{"type":"INSERT","lineNumber":77,"content":"                            if (waypoints.isNotEmpty()) {"},{"type":"INSERT","lineNumber":78,"content":"                                waypoints.removeAt(waypoints.lastIndex)"},{"type":"INSERT","lineNumber":79,"content":"                                points.removeAt(points.lastIndex)"},{"type":"INSERT","lineNumber":80,"content":"                            }"},{"type":"INSERT","lineNumber":81,"content":"                        },"},{"type":"DELETE","lineNumber":80,"oldContent":"                        Icon(Icons.Default.Add, contentDescription = \"Add Waypoints\")"},{"type":"INSERT","lineNumber":86,"content":"                        Icon(Icons.Default.Delete, contentDescription = \"Delete Waypoints\")"},{"type":"DELETE","lineNumber":84,"oldContent":"                        onClick = {"},{"type":"DELETE","lineNumber":85,"oldContent":"                            if (waypoints.isNotEmpty()) waypoints.removeAt(waypoints.lastIndex)"},{"type":"DELETE","lineNumber":86,"oldContent":"}"},{"type":"DELETE","lineNumber":87,"oldContent":"    }"},{"type":"DELETE","lineNumber":88,"oldContent":"                            .padding(bottom = 12.dp)"},{"type":"DELETE","lineNumber":89,"oldContent":"                            .size(56.dp)"},{"type":"DELETE","lineNumber":90,"oldContent":"                    ) {"},{"type":"DELETE","lineNumber":91,"oldContent":"                        Icon(Icons.Default.Delete, contentDescription = \"Delete Waypoints\")"},{"type":"DELETE","lineNumber":92,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":93,"oldContent":"                        telemetryViewModel.uploadMission(waypoints) { success, error ->"},{"type":"DELETE","lineNumber":94,"oldContent":"                        onClick = { waypoints.clear() },"},{"type":"DELETE","lineNumber":95,"oldContent":"                Column("},{"type":"INSERT","lineNumber":90,"content":"                        onClick = { waypoints.clear(); points.clear() },"},{"type":"DELETE","lineNumber":112,"oldContent":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleMedium)"},{"type":"INSERT","lineNumber":107,"content":"        }"},{"type":"DELETE","lineNumber":127,"oldContent":"                // Map background"},{"type":"DELETE","lineNumber":128,"oldContent":"                GcsMap(telemetryState = telemetryState)"},{"type":"INSERT","lineNumber":122,"content":"                // Map background - pass points and onMapClick callback"},{"type":"INSERT","lineNumber":123,"content":"                GcsMap(telemetryState = telemetryState, points = points, onMapClick = onMapClick)"},{"type":"DELETE","lineNumber":131,"oldContent":"                    ) {"},{"type":"INSERT","lineNumber":126,"content":"                Column("},{"type":"DELETE","lineNumber":139,"oldContent":"                                    Toast.LENGTH_SHORT"},{"type":"INSERT","lineNumber":134,"content":"                        modifier = Modifier.size(56.dp)"},{"type":"DELETE","lineNumber":144,"oldContent":"                                    .show()"},{"type":"INSERT","lineNumber":139,"content":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":150,"oldContent":"                    },"},{"type":"INSERT","lineNumber":145,"content":"                }"},{"type":"DELETE","lineNumber":154,"oldContent":"                // Show waypoints for user feedback"},{"type":"INSERT","lineNumber":149,"content":"                    onClick = {"},{"type":"DELETE","lineNumber":157,"oldContent":"                }"},{"type":"INSERT","lineNumber":152,"content":"                                Toast.makeText(context, \"Mission uploaded\", Toast.LENGTH_SHORT)"},{"type":"DELETE","lineNumber":166,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":167,"oldContent":"                        .fillMaxWidth()"},{"type":"INSERT","lineNumber":161,"content":"                                    Toast.LENGTH_SHORT"},{"type":"INSERT","lineNumber":162,"content":"                                ).show()"},{"type":"DELETE","lineNumber":172,"oldContent":"                }"},{"type":"DELETE","lineNumber":173,"oldContent":"                    }"},{"type":"DELETE","lineNumber":174,"oldContent":"                };"},{"type":"INSERT","lineNumber":167,"content":"                    modifier = Modifier"},{"type":"INSERT","lineNumber":168,"content":"                        .padding(top = 16.dp)"},{"type":"INSERT","lineNumber":169,"content":"                        .fillMaxWidth()"},{"type":"INSERT","lineNumber":176,"content":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleMedium)"},{"type":"DELETE","lineNumber":182,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":183,"oldContent":"}"},{"type":"INSERT","lineNumber":178,"content":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"},{"type":"INSERT","lineNumber":180,"content":"                }"},{"type":"INSERT","lineNumber":182,"content":"        }"},{"type":"INSERT","lineNumber":183,"content":"    }"},{"type":"INSERT","lineNumber":184,"content":"}"}]},{"timestamp":1757914366169,"changes":[{"type":"INSERT","lineNumber":27,"content":"import com.example.aerogcsclone.navigation.Screen"},{"type":"DELETE","lineNumber":38,"oldContent":"    // Mutable list to store map points (LatLng) and mission items"},{"type":"DELETE","lineNumber":40,"oldContent":"    val points = remember { mutableStateListOf<LatLng>() }"},{"type":"INSERT","lineNumber":41,"content":"    // Mutable list to store map points (LatLng) and mission items"},{"type":"INSERT","lineNumber":42,"content":"    val points = remember { mutableStateListOf<LatLng>() }"},{"type":"DELETE","lineNumber":50,"oldContent":"            targetComponent = 0u,"},{"type":"INSERT","lineNumber":52,"content":"            targetComponent = 0u,"},{"type":"DELETE","lineNumber":55,"oldContent":"            autocontinue = 1u,"},{"type":"INSERT","lineNumber":57,"content":"            autocontinue = 1u,"},{"type":"DELETE","lineNumber":63,"oldContent":"            Column("},{"type":"DELETE","lineNumber":65,"oldContent":"        floatingActionButton = {"},{"type":"DELETE","lineNumber":66,"oldContent":""},{"type":"INSERT","lineNumber":65,"content":"        )"},{"type":"INSERT","lineNumber":67,"content":"    }"},{"type":"INSERT","lineNumber":68,"content":""},{"type":"DELETE","lineNumber":77,"oldContent":"                        modifier = Modifier"},{"type":"DELETE","lineNumber":79,"oldContent":"                            .padding(bottom = 12.dp)"},{"type":"DELETE","lineNumber":81,"oldContent":"                            .size(56.dp)"},{"type":"MODIFY","lineNumber":83,"content":"                        modifier = Modifier","oldContent":"                    ) {"},{"type":"INSERT","lineNumber":84,"content":"                            .padding(bottom = 12.dp)"},{"type":"INSERT","lineNumber":85,"content":"                            .size(56.dp)"},{"type":"INSERT","lineNumber":86,"content":"                    ) {"},{"type":"INSERT","lineNumber":87,"content":"                        Icon(Icons.Default.Delete, contentDescription = \"Delete Waypoints\")"},{"type":"DELETE","lineNumber":89,"oldContent":"                        Icon(Icons.Default.Delete, contentDescription = \"Delete Waypoints\")"},{"type":"DELETE","lineNumber":102,"oldContent":"        }"},{"type":"INSERT","lineNumber":108,"content":"        }"},{"type":"DELETE","lineNumber":117,"oldContent":"                // Map background - pass points and onMapClick callback"},{"type":"DELETE","lineNumber":119,"oldContent":"                GcsMap(telemetryState = telemetryState, points = points, onMapClick = onMapClick)"},{"type":"MODIFY","lineNumber":123,"content":"                // Map background - pass points and onMapClick callback","oldContent":"                Column("},{"type":"INSERT","lineNumber":124,"content":"                GcsMap(telemetryState = telemetryState, points = points, onMapClick = onMapClick)"},{"type":"INSERT","lineNumber":127,"content":"                Column("},{"type":"DELETE","lineNumber":129,"oldContent":"                        modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":135,"content":"                        modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":136,"content":"                    ) {"},{"type":"INSERT","lineNumber":137,"content":"                        Icon(Icons.Default.FlightTakeoff, contentDescription = \"Arm\")"},{"type":"INSERT","lineNumber":138,"content":"                    }"},{"type":"INSERT","lineNumber":139,"content":""},{"type":"DELETE","lineNumber":136,"oldContent":"            "},{"type":"DELETE","lineNumber":137,"oldContent":"            }"},{"type":"DELETE","lineNumber":138,"oldContent":"                }"},{"type":"DELETE","lineNumber":139,"oldContent":"                                ).show()"},{"type":"DELETE","lineNumber":140,"oldContent":"                }"},{"type":"MODIFY","lineNumber":142,"content":"                        modifier = Modifier.size(56.dp)","oldContent":"                                navController.navigate(Screen.Main.route) {"},{"type":"DELETE","lineNumber":145,"oldContent":"                    onClick = {"},{"type":"INSERT","lineNumber":146,"content":"                }"},{"type":"DELETE","lineNumber":148,"oldContent":"                                Toast.makeText(context, \"Mission uploaded\", Toast.LENGTH_SHORT)"},{"type":"INSERT","lineNumber":150,"content":"                    onClick = {"},{"type":"INSERT","lineNumber":153,"content":"                                Toast.makeText(context, \"Mission uploaded\", Toast.LENGTH_SHORT)"},{"type":"DELETE","lineNumber":154,"oldContent":"                    }"},{"type":"INSERT","lineNumber":155,"content":"                                navController.navigate(Screen.Main.route) {"},{"type":"DELETE","lineNumber":156,"oldContent":"                                    Toast.LENGTH_SHORT"},{"type":"DELETE","lineNumber":158,"oldContent":"                                ).show()"},{"type":"DELETE","lineNumber":163,"oldContent":"                    modifier = Modifier"},{"type":"DELETE","lineNumber":164,"oldContent":"                        .padding(top = 16.dp)"},{"type":"INSERT","lineNumber":162,"content":"                                    Toast.LENGTH_SHORT"},{"type":"INSERT","lineNumber":163,"content":"                                ).show()"},{"type":"DELETE","lineNumber":166,"oldContent":"                        .fillMaxWidth()"},{"type":"DELETE","lineNumber":170,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":171,"oldContent":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleMedium)"},{"type":"INSERT","lineNumber":168,"content":"                    modifier = Modifier"},{"type":"INSERT","lineNumber":169,"content":"                        .padding(top = 16.dp)"},{"type":"INSERT","lineNumber":170,"content":"                        .fillMaxWidth()"},{"type":"INSERT","lineNumber":171,"content":"                ) {"},{"type":"INSERT","lineNumber":172,"content":"                    Text(\"Upload Mission (${waypoints.size})\")"},{"type":"INSERT","lineNumber":173,"content":"                }"},{"type":"INSERT","lineNumber":174,"content":""},{"type":"INSERT","lineNumber":175,"content":"                // Show waypoints for user feedback"},{"type":"DELETE","lineNumber":173,"oldContent":"}"},{"type":"INSERT","lineNumber":177,"content":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleMedium)"},{"type":"INSERT","lineNumber":178,"content":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":175,"oldContent":"    }"},{"type":"DELETE","lineNumber":176,"oldContent":"                // Show waypoints for user feedback"},{"type":"INSERT","lineNumber":180,"content":"                    }"},{"type":"DELETE","lineNumber":179,"oldContent":"}"},{"type":"INSERT","lineNumber":184,"content":"    }"},{"type":"INSERT","lineNumber":185,"content":"}"}]},{"timestamp":1757914694128,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import android.os.Build"},{"type":"DELETE","lineNumber":4,"oldContent":"import androidx.annotation.RequiresApi"},{"type":"MODIFY","lineNumber":39,"content":"    // Mutable list to store map points (LatLng) and mission items","oldContent":"    // Mutable list to store map points (LatLng) and mission items"},{"type":"DELETE","lineNumber":54,"oldContent":"            frame = MavEnumValue.of(MavFrame.GLOBAL_RELATIVE_ALT_INT),"},{"type":"DELETE","lineNumber":55,"oldContent":"            command = MavEnumValue.of(MavCmd.NAV_WAYPOINT),"},{"type":"INSERT","lineNumber":52,"content":"            frame = 3u, // GLOBAL_RELATIVE_ALT_INT"},{"type":"INSERT","lineNumber":53,"content":"            command = 16u, // MAV_CMD_NAV_WAYPOINT"},{"type":"MODIFY","lineNumber":65,"content":"    }","oldContent":"    }"},{"type":"INSERT","lineNumber":79,"content":"                            }"},{"type":"INSERT","lineNumber":80,"content":"                        },"},{"type":"DELETE","lineNumber":83,"oldContent":"                            }"},{"type":"DELETE","lineNumber":85,"oldContent":"                        },"},{"type":"MODIFY","lineNumber":86,"content":"                    }","oldContent":"                    }"},{"type":"INSERT","lineNumber":120,"content":"            Box(modifier = Modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":124,"oldContent":"            Box(modifier = Modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":136,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":141,"oldContent":"        }"},{"type":"INSERT","lineNumber":138,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":139,"content":"                        onClick = { /* TODO: handle Change Mode action */ },"},{"type":"MODIFY","lineNumber":144,"content":"                }","oldContent":"                }"},{"type":"DELETE","lineNumber":148,"oldContent":""},{"type":"INSERT","lineNumber":146,"content":"                // Upload Mission button"},{"type":"INSERT","lineNumber":147,"content":"                Button("},{"type":"DELETE","lineNumber":150,"oldContent":"}"},{"type":"DELETE","lineNumber":157,"oldContent":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"INSERT","lineNumber":155,"content":"                                }"},{"type":"MODIFY","lineNumber":160,"content":"                                    Toast.LENGTH_SHORT","oldContent":"                                    Toast.LENGTH_SHORT"},{"type":"DELETE","lineNumber":166,"oldContent":"                    modifier = Modifier"},{"type":"INSERT","lineNumber":165,"content":"                    enabled = waypoints.isNotEmpty(),"},{"type":"INSERT","lineNumber":166,"content":"                    modifier = Modifier"},{"type":"DELETE","lineNumber":169,"oldContent":"}"},{"type":"DELETE","lineNumber":173,"oldContent":"}"},{"type":"DELETE","lineNumber":176,"oldContent":"                    }"},{"type":"INSERT","lineNumber":174,"content":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"INSERT","lineNumber":175,"content":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleMedium)"},{"type":"INSERT","lineNumber":176,"content":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"INSERT","lineNumber":177,"content":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"},{"type":"INSERT","lineNumber":178,"content":"                    }"},{"type":"INSERT","lineNumber":179,"content":"                }"},{"type":"INSERT","lineNumber":180,"content":"            }"},{"type":"INSERT","lineNumber":181,"content":"        }"},{"type":"INSERT","lineNumber":182,"content":"    }"},{"type":"INSERT","lineNumber":183,"content":"}"}]},{"timestamp":1757914866576,"changes":[{"type":"DELETE","lineNumber":37,"oldContent":"    // Mutable list to store map points (LatLng) and mission items"},{"type":"DELETE","lineNumber":38,"oldContent":"    // Mutable list to store map points (LatLng) and mission items"},{"type":"INSERT","lineNumber":37,"content":"    var showPlanActions by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":39,"content":"    // Mutable list to store map points (LatLng) and mission items"},{"type":"DELETE","lineNumber":50,"oldContent":"            frame = 3u, // GLOBAL_RELATIVE_ALT_INT"},{"type":"MODIFY","lineNumber":52,"content":"            frame = MavEnumValue.of(MavFrame.GLOBAL_RELATIVE_ALT_INT),","oldContent":"            command = 16u, // MAV_CMD_NAV_WAYPOINT"},{"type":"INSERT","lineNumber":53,"content":"            command = MavEnumValue.of(MavCmd.NAV_WAYPOINT),"},{"type":"DELETE","lineNumber":63,"oldContent":"    }"},{"type":"DELETE","lineNumber":64,"oldContent":"    }"},{"type":"INSERT","lineNumber":63,"content":"        )"},{"type":"INSERT","lineNumber":65,"content":"    }"},{"type":"DELETE","lineNumber":77,"oldContent":"                            }"},{"type":"MODIFY","lineNumber":79,"content":"                            }","oldContent":"                        },"},{"type":"INSERT","lineNumber":80,"content":"                        },"},{"type":"DELETE","lineNumber":84,"oldContent":"                    }"},{"type":"DELETE","lineNumber":85,"oldContent":"                    }"},{"type":"INSERT","lineNumber":84,"content":"                    ) {"},{"type":"INSERT","lineNumber":86,"content":"                    }"},{"type":"DELETE","lineNumber":118,"oldContent":"            Box(modifier = Modifier.fillMaxSize()) {"},{"type":"INSERT","lineNumber":120,"content":"            Box(modifier = Modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":135,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":137,"oldContent":"                        onClick = { /* TODO: handle Change Mode action */ },"},{"type":"INSERT","lineNumber":138,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":139,"content":"                        onClick = { /* TODO: handle Change Mode action */ },"},{"type":"INSERT","lineNumber":142,"content":"                        Icon(Icons.Default.Build, contentDescription = \"Change Mode\")"},{"type":"INSERT","lineNumber":143,"content":"                    }"},{"type":"DELETE","lineNumber":143,"oldContent":"                }"},{"type":"INSERT","lineNumber":145,"content":""},{"type":"DELETE","lineNumber":145,"oldContent":"                    }"},{"type":"DELETE","lineNumber":147,"oldContent":""},{"type":"DELETE","lineNumber":153,"oldContent":"                                }"},{"type":"INSERT","lineNumber":155,"content":"                                }"},{"type":"MODIFY","lineNumber":157,"content":"                                Toast.makeText(","oldContent":"}"},{"type":"INSERT","lineNumber":158,"content":"                                    context,"},{"type":"INSERT","lineNumber":159,"content":"                                    error ?: \"Mission upload failed\","},{"type":"DELETE","lineNumber":159,"oldContent":"                                    Toast.LENGTH_SHORT"},{"type":"DELETE","lineNumber":160,"oldContent":"        }"},{"type":"MODIFY","lineNumber":162,"content":"                            }","oldContent":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleMedium)"},{"type":"INSERT","lineNumber":163,"content":"                        }"},{"type":"INSERT","lineNumber":164,"content":"                    },"},{"type":"DELETE","lineNumber":164,"oldContent":"}"},{"type":"DELETE","lineNumber":166,"oldContent":"    }"},{"type":"DELETE","lineNumber":171,"oldContent":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"INSERT","lineNumber":172,"content":""},{"type":"INSERT","lineNumber":173,"content":"                // Show waypoints for user feedback"},{"type":"INSERT","lineNumber":174,"content":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"DELETE","lineNumber":174,"oldContent":"}"},{"type":"DELETE","lineNumber":177,"oldContent":"        }"},{"type":"MODIFY","lineNumber":180,"content":"            }","oldContent":"            }"},{"type":"INSERT","lineNumber":181,"content":"        }"},{"type":"INSERT","lineNumber":182,"content":"    }"},{"type":"INSERT","lineNumber":183,"content":"}"}]},{"timestamp":1757914889686,"changes":[{"type":"DELETE","lineNumber":16,"oldContent":"import androidx.compose.material.icons.filled.Add"},{"type":"MODIFY","lineNumber":38,"content":"    // Mutable list to store map points (LatLng) and mission items","oldContent":"    // Mutable list to store map points (LatLng) and mission items"},{"type":"INSERT","lineNumber":50,"content":"            seq = seq.toUShort(),"},{"type":"DELETE","lineNumber":53,"oldContent":"            seq = seq.toUShort(),"},{"type":"MODIFY","lineNumber":64,"content":"    }","oldContent":"    }"},{"type":"DELETE","lineNumber":67,"oldContent":"                    }"},{"type":"DELETE","lineNumber":68,"oldContent":"                    ) {"},{"type":"DELETE","lineNumber":69,"oldContent":"                        onClick = { /* TODO: handle Change Mode action */ },"},{"type":"INSERT","lineNumber":66,"content":"    Scaffold("},{"type":"INSERT","lineNumber":67,"content":"        floatingActionButton = {"},{"type":"INSERT","lineNumber":68,"content":"            Column("},{"type":"INSERT","lineNumber":77,"content":"                                points.removeAt(points.lastIndex)"},{"type":"DELETE","lineNumber":80,"oldContent":"                                points.removeAt(points.lastIndex)"},{"type":"MODIFY","lineNumber":85,"content":"                    }","oldContent":"                    }"},{"type":"MODIFY","lineNumber":119,"content":"            Box(modifier = Modifier.fillMaxSize()) {","oldContent":"            Box(modifier = Modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":128,"oldContent":"}"},{"type":"DELETE","lineNumber":129,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":130,"oldContent":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"INSERT","lineNumber":127,"content":"                        .padding(start = 16.dp, top = 72.dp), // push below TopNavBar"},{"type":"INSERT","lineNumber":128,"content":"                    verticalArrangement = Arrangement.spacedBy(12.dp)"},{"type":"INSERT","lineNumber":129,"content":"                ) {"},{"type":"DELETE","lineNumber":132,"oldContent":"                }"},{"type":"INSERT","lineNumber":131,"content":"                        onClick = { telemetryViewModel.arm() },"},{"type":"DELETE","lineNumber":136,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":138,"oldContent":"                        onClick = { /* TODO: handle Change Mode action */ },"},{"type":"INSERT","lineNumber":137,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":138,"content":"                        onClick = { /* TODO: handle Change Mode action */ },"},{"type":"DELETE","lineNumber":143,"oldContent":"                }"},{"type":"DELETE","lineNumber":145,"oldContent":"                // Upload Mission button"},{"type":"INSERT","lineNumber":143,"content":"                }"},{"type":"INSERT","lineNumber":145,"content":"                // Upload Mission button"},{"type":"DELETE","lineNumber":150,"oldContent":"}"},{"type":"INSERT","lineNumber":149,"content":"                            if (success) {"},{"type":"DELETE","lineNumber":152,"oldContent":"        }"},{"type":"INSERT","lineNumber":151,"content":"                                    .show()"},{"type":"INSERT","lineNumber":153,"content":"                                    popUpTo(Screen.Plan.route) { inclusive = true }"},{"type":"DELETE","lineNumber":155,"oldContent":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"},{"type":"DELETE","lineNumber":156,"oldContent":"                        .fillMaxWidth()"},{"type":"INSERT","lineNumber":155,"content":"                            } else {"},{"type":"MODIFY","lineNumber":159,"content":"                                    Toast.LENGTH_SHORT","oldContent":"                                    Toast.LENGTH_SHORT"},{"type":"MODIFY","lineNumber":164,"content":"                    enabled = waypoints.isNotEmpty(),","oldContent":"                    enabled = waypoints.isNotEmpty(),"},{"type":"DELETE","lineNumber":170,"oldContent":"}"},{"type":"INSERT","lineNumber":169,"content":"                    Text(\"Upload Mission (${waypoints.size})\")"},{"type":"INSERT","lineNumber":170,"content":"                }"},{"type":"DELETE","lineNumber":172,"oldContent":"        }"},{"type":"MODIFY","lineNumber":174,"content":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleMedium)","oldContent":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleMedium)"},{"type":"DELETE","lineNumber":178,"oldContent":"}"},{"type":"DELETE","lineNumber":179,"oldContent":"    }"},{"type":"INSERT","lineNumber":177,"content":"                    }"},{"type":"INSERT","lineNumber":178,"content":"                }"},{"type":"INSERT","lineNumber":180,"content":"        }"},{"type":"INSERT","lineNumber":181,"content":"    }"},{"type":"INSERT","lineNumber":182,"content":"}"}]},{"timestamp":1757915700674,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import android.widget.Toast"},{"type":"INSERT","lineNumber":15,"content":"import androidx.compose.material.icons.filled.Add"},{"type":"DELETE","lineNumber":19,"oldContent":"import androidx.compose.ui.platform.LocalContext"},{"type":"DELETE","lineNumber":20,"oldContent":"import com.google.android.gms.maps.model.LatLng"},{"type":"DELETE","lineNumber":21,"oldContent":"import com.divpundir.mavlink.api.MavEnumValue"},{"type":"DELETE","lineNumber":22,"oldContent":"import com.divpundir.mavlink.definitions.common.MavFrame"},{"type":"DELETE","lineNumber":23,"oldContent":"import com.divpundir.mavlink.definitions.common.MavCmd"},{"type":"DELETE","lineNumber":24,"oldContent":"import com.example.aerogcsclone.navigation.Screen"},{"type":"DELETE","lineNumber":33,"oldContent":"    val context = LocalContext.current"},{"type":"DELETE","lineNumber":37,"oldContent":"    // Mutable list to store map points (LatLng) and mission items"},{"type":"DELETE","lineNumber":39,"oldContent":"    val points = remember { mutableStateListOf<LatLng>() }"},{"type":"DELETE","lineNumber":40,"oldContent":"    val waypoints = remember { mutableStateListOf<com.divpundir.mavlink.definitions.common.MissionItemInt>() }"},{"type":"DELETE","lineNumber":41,"oldContent":""},{"type":"DELETE","lineNumber":42,"oldContent":"    // Handler when user taps on map: add marker and corresponding mission item"},{"type":"DELETE","lineNumber":43,"oldContent":"    val onMapClick: (LatLng) -> Unit = { latLng ->"},{"type":"DELETE","lineNumber":44,"oldContent":"        points.add(latLng)"},{"type":"DELETE","lineNumber":45,"oldContent":"        // build MissionItemInt"},{"type":"DELETE","lineNumber":46,"oldContent":"        val seq = waypoints.size"},{"type":"DELETE","lineNumber":47,"oldContent":"        val missionItem = com.divpundir.mavlink.definitions.common.MissionItemInt("},{"type":"DELETE","lineNumber":48,"oldContent":"            targetSystem = 0u,"},{"type":"DELETE","lineNumber":49,"oldContent":"            seq = seq.toUShort(),"},{"type":"DELETE","lineNumber":50,"oldContent":"            targetComponent = 0u,"},{"type":"DELETE","lineNumber":51,"oldContent":"            frame = MavEnumValue.of(MavFrame.GLOBAL_RELATIVE_ALT_INT),"},{"type":"DELETE","lineNumber":52,"oldContent":"            command = MavEnumValue.of(MavCmd.NAV_WAYPOINT),"},{"type":"DELETE","lineNumber":53,"oldContent":"            current = 0u,"},{"type":"DELETE","lineNumber":54,"oldContent":"            autocontinue = 1u,"},{"type":"DELETE","lineNumber":55,"oldContent":"            param1 = 0f,"},{"type":"DELETE","lineNumber":56,"oldContent":"            param2 = 0f,"},{"type":"DELETE","lineNumber":57,"oldContent":"            param3 = 0f,"},{"type":"DELETE","lineNumber":58,"oldContent":"            param4 = 0f,"},{"type":"DELETE","lineNumber":59,"oldContent":"            x = (latLng.latitude * 1e7).toInt(),"},{"type":"DELETE","lineNumber":60,"oldContent":"            y = (latLng.longitude * 1e7).toInt(),"},{"type":"DELETE","lineNumber":61,"oldContent":"            z = 10f"},{"type":"DELETE","lineNumber":62,"oldContent":"        )"},{"type":"DELETE","lineNumber":63,"oldContent":"    }"},{"type":"DELETE","lineNumber":64,"oldContent":"        waypoints.add(missionItem)"},{"type":"DELETE","lineNumber":66,"oldContent":""},{"type":"DELETE","lineNumber":74,"oldContent":"                        onClick = {"},{"type":"DELETE","lineNumber":75,"oldContent":"                            if (waypoints.isNotEmpty()) {"},{"type":"DELETE","lineNumber":76,"oldContent":"                                points.removeAt(points.lastIndex)"},{"type":"DELETE","lineNumber":77,"oldContent":"                                waypoints.removeAt(waypoints.lastIndex)"},{"type":"DELETE","lineNumber":78,"oldContent":"                            }"},{"type":"DELETE","lineNumber":79,"oldContent":"                        },"},{"type":"INSERT","lineNumber":39,"content":"                        onClick = { /* TODO: Add Waypoints */ },"},{"type":"INSERT","lineNumber":44,"content":"                        Icon(Icons.Default.Add, contentDescription = \"Add Waypoints\")"},{"type":"INSERT","lineNumber":46,"content":""},{"type":"INSERT","lineNumber":47,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":48,"content":"                        onClick = { /* TODO: Delete Waypoints */ },"},{"type":"INSERT","lineNumber":49,"content":"                        modifier = Modifier"},{"type":"INSERT","lineNumber":50,"content":"                            .padding(bottom = 12.dp)"},{"type":"INSERT","lineNumber":51,"content":"                            .size(56.dp)"},{"type":"INSERT","lineNumber":52,"content":"                    ) {"},{"type":"INSERT","lineNumber":54,"content":"                    }"},{"type":"DELETE","lineNumber":88,"oldContent":"                        onClick = { waypoints.clear(); points.clear() },"},{"type":"INSERT","lineNumber":57,"content":"                        onClick = { /* TODO: Clear Plan */ },"},{"type":"INSERT","lineNumber":83,"content":"                telemetryState = telemetryState,"},{"type":"INSERT","lineNumber":84,"content":"                authViewModel = authViewModel,"},{"type":"INSERT","lineNumber":85,"content":"                navController = navController"},{"type":"INSERT","lineNumber":86,"content":"            )"},{"type":"DELETE","lineNumber":115,"oldContent":"}"},{"type":"DELETE","lineNumber":116,"oldContent":"    }"},{"type":"DELETE","lineNumber":117,"oldContent":"                        onClick = { telemetryViewModel.arm() },"},{"type":"INSERT","lineNumber":89,"content":"                // Map background"},{"type":"INSERT","lineNumber":90,"content":"                GcsMap(telemetryState = telemetryState)"},{"type":"DELETE","lineNumber":120,"oldContent":"                // Map background - pass points and onMapClick callback"},{"type":"DELETE","lineNumber":121,"oldContent":"                GcsMap(telemetryState = telemetryState, points = points, onMapClick = onMapClick)"},{"type":"DELETE","lineNumber":122,"oldContent":"            }"},{"type":"DELETE","lineNumber":126,"oldContent":"                        .padding(start = 16.dp, top = 72.dp), // push below TopNavBar"},{"type":"INSERT","lineNumber":96,"content":"                        .padding(start = 16.dp, top = 72.dp), // push below TopNavBar"},{"type":"INSERT","lineNumber":99,"content":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":131,"oldContent":"}"},{"type":"DELETE","lineNumber":135,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":137,"oldContent":"                        onClick = { /* TODO: handle Change Mode action */ },"},{"type":"INSERT","lineNumber":106,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":107,"content":"                        onClick = { /* TODO: handle Change Mode action */ },"},{"type":"DELETE","lineNumber":142,"oldContent":"                }"},{"type":"DELETE","lineNumber":144,"oldContent":"                // Upload Mission button"},{"type":"DELETE","lineNumber":145,"oldContent":""},{"type":"DELETE","lineNumber":146,"oldContent":"                Button("},{"type":"DELETE","lineNumber":147,"oldContent":"                    onClick = {"},{"type":"DELETE","lineNumber":148,"oldContent":"                            if (success) {"},{"type":"DELETE","lineNumber":149,"oldContent":"    }"},{"type":"DELETE","lineNumber":150,"oldContent":"                                    .show()"},{"type":"DELETE","lineNumber":151,"oldContent":"                                Toast.makeText(context, \"Mission uploaded\", Toast.LENGTH_SHORT)"},{"type":"DELETE","lineNumber":152,"oldContent":"                                    popUpTo(Screen.Plan.route) { inclusive = true }"},{"type":"DELETE","lineNumber":153,"oldContent":"                                navController.navigate(Screen.Main.route) {"},{"type":"DELETE","lineNumber":154,"oldContent":"                                }"},{"type":"DELETE","lineNumber":155,"oldContent":"                            } else {"},{"type":"DELETE","lineNumber":156,"oldContent":"                                Toast.makeText("},{"type":"DELETE","lineNumber":157,"oldContent":"                                    context,"},{"type":"DELETE","lineNumber":158,"oldContent":"                                    Toast.LENGTH_SHORT"},{"type":"DELETE","lineNumber":159,"oldContent":"                                    error ?: \"Mission upload failed\","},{"type":"DELETE","lineNumber":160,"oldContent":"                                ).show()"},{"type":"DELETE","lineNumber":161,"oldContent":"                            }"},{"type":"DELETE","lineNumber":162,"oldContent":"                        }"},{"type":"DELETE","lineNumber":163,"oldContent":"                    enabled = waypoints.isNotEmpty(),"},{"type":"DELETE","lineNumber":164,"oldContent":"                    },"},{"type":"DELETE","lineNumber":165,"oldContent":"                    modifier = Modifier"},{"type":"DELETE","lineNumber":166,"oldContent":"                        .padding(top = 16.dp)"},{"type":"DELETE","lineNumber":167,"oldContent":"                        .fillMaxWidth()"},{"type":"DELETE","lineNumber":168,"oldContent":"                    Text(\"Upload Mission (${waypoints.size})\")"},{"type":"DELETE","lineNumber":169,"oldContent":"}"},{"type":"DELETE","lineNumber":171,"oldContent":""},{"type":"DELETE","lineNumber":172,"oldContent":"                // Show waypoints for user feedback"},{"type":"DELETE","lineNumber":173,"oldContent":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleMedium)"},{"type":"DELETE","lineNumber":174,"oldContent":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"DELETE","lineNumber":175,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":176,"oldContent":"                    }"},{"type":"DELETE","lineNumber":177,"oldContent":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"},{"type":"DELETE","lineNumber":178,"oldContent":"                }"},{"type":"INSERT","lineNumber":113,"content":"            }"},{"type":"DELETE","lineNumber":180,"oldContent":"}"},{"type":"INSERT","lineNumber":116,"content":"}"},{"type":"INSERT","lineNumber":117,"content":""}]},{"timestamp":1757915709360,"changes":[{"type":"DELETE","lineNumber":13,"oldContent":"import androidx.compose.material.icons.filled.Build"},{"type":"DELETE","lineNumber":14,"oldContent":"import androidx.compose.material.icons.filled.Add"},{"type":"DELETE","lineNumber":15,"oldContent":"import androidx.compose.material.icons.filled.FlightTakeoff"},{"type":"DELETE","lineNumber":16,"oldContent":"import androidx.compose.material.icons.filled.Delete"},{"type":"DELETE","lineNumber":17,"oldContent":"import androidx.compose.material.icons.filled.ClearAll"},{"type":"DELETE","lineNumber":18,"oldContent":"import androidx.compose.material.icons.filled.Menu"},{"type":"INSERT","lineNumber":13,"content":"import androidx.compose.material.icons.filled.*"},{"type":"INSERT","lineNumber":14,"content":"import com.google.maps.android.compose.MapType"},{"type":"DELETE","lineNumber":31,"oldContent":"                        onClick = { /* TODO: Add Waypoints */ },"},{"type":"DELETE","lineNumber":32,"oldContent":"                        Icon(Icons.Default.Add, contentDescription = \"Add Waypoints\")"},{"type":"INSERT","lineNumber":27,"content":"    // âœ… Map type state (same as in MainPage)"},{"type":"INSERT","lineNumber":28,"content":"    var mapType by remember { mutableStateOf(MapType.NORMAL) }"},{"type":"DELETE","lineNumber":34,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":35,"oldContent":"                        onClick = { /* TODO: Delete Waypoints */ },"},{"type":"DELETE","lineNumber":36,"oldContent":"                        modifier = Modifier"},{"type":"DELETE","lineNumber":37,"oldContent":"                            .padding(bottom = 12.dp)"},{"type":"DELETE","lineNumber":38,"oldContent":"                            .size(56.dp)"},{"type":"DELETE","lineNumber":39,"oldContent":"                    ) {"},{"type":"DELETE","lineNumber":40,"oldContent":"                    }"},{"type":"DELETE","lineNumber":41,"oldContent":"                        onClick = { /* TODO: Clear Plan */ },"},{"type":"INSERT","lineNumber":38,"content":"                        onClick = { /* TODO: Add Waypoints */ },"},{"type":"DELETE","lineNumber":53,"oldContent":"                telemetryState = telemetryState,"},{"type":"DELETE","lineNumber":55,"oldContent":"                authViewModel = authViewModel,"},{"type":"INSERT","lineNumber":43,"content":"                        Icon(Icons.Default.Add, contentDescription = \"Add Waypoints\")"},{"type":"DELETE","lineNumber":57,"oldContent":"                navController = navController"},{"type":"DELETE","lineNumber":58,"oldContent":"                        Icon(Icons.Default.Delete, contentDescription = \"Delete Waypoints\")"},{"type":"DELETE","lineNumber":59,"oldContent":"            )"},{"type":"DELETE","lineNumber":62,"oldContent":"                // Map background"},{"type":"INSERT","lineNumber":47,"content":"                        onClick = { /* TODO: Delete Waypoints */ },"},{"type":"DELETE","lineNumber":64,"oldContent":"                GcsMap(telemetryState = telemetryState)"},{"type":"INSERT","lineNumber":52,"content":"                        Icon(Icons.Default.Delete, contentDescription = \"Delete Waypoints\")"},{"type":"INSERT","lineNumber":53,"content":"                    }"},{"type":"INSERT","lineNumber":55,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":56,"content":"                        onClick = { /* TODO: Clear Plan */ },"},{"type":"INSERT","lineNumber":57,"content":"                        modifier = Modifier"},{"type":"INSERT","lineNumber":58,"content":"                            .padding(bottom = 12.dp)"},{"type":"INSERT","lineNumber":59,"content":"                            .size(56.dp)"},{"type":"INSERT","lineNumber":60,"content":"                    ) {"},{"type":"INSERT","lineNumber":61,"content":"                        Icon(Icons.Default.ClearAll, contentDescription = \"Clear Plan\")"},{"type":"DELETE","lineNumber":71,"oldContent":"                        .padding(start = 16.dp, top = 72.dp), // push below TopNavBar"},{"type":"DELETE","lineNumber":72,"oldContent":"            }"},{"type":"INSERT","lineNumber":64,"content":""},{"type":"DELETE","lineNumber":75,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":83,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":85,"oldContent":"                        onClick = { /* TODO: handle Change Mode action */ },"},{"type":"DELETE","lineNumber":92,"oldContent":"            }"},{"type":"INSERT","lineNumber":81,"content":"            TopNavBar("},{"type":"INSERT","lineNumber":82,"content":"                telemetryState = telemetryState,"},{"type":"INSERT","lineNumber":83,"content":"                authViewModel = authViewModel,"},{"type":"INSERT","lineNumber":84,"content":"                navController = navController"},{"type":"INSERT","lineNumber":85,"content":"            )"},{"type":"DELETE","lineNumber":94,"oldContent":"}"},{"type":"DELETE","lineNumber":95,"oldContent":"}"},{"type":"DELETE","lineNumber":96,"oldContent":""},{"type":"DELETE","lineNumber":98,"oldContent":"                GcsMap(telemetryState = telemetryState)"},{"type":"INSERT","lineNumber":88,"content":"                // âœ… Pass selected mapType to GcsMap"},{"type":"INSERT","lineNumber":89,"content":"                GcsMap(telemetryState = telemetryState, mapType = mapType)"},{"type":"INSERT","lineNumber":90,"content":""},{"type":"INSERT","lineNumber":95,"content":"                        .padding(start = 16.dp, top = 72.dp), // push below TopNavBar"},{"type":"INSERT","lineNumber":98,"content":"                    // âœ… Map toggle button ABOVE Arm button"},{"type":"INSERT","lineNumber":99,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":100,"content":"                        onClick = {"},{"type":"INSERT","lineNumber":101,"content":"                            mapType = if (mapType == MapType.NORMAL) MapType.SATELLITE else MapType.NORMAL"},{"type":"INSERT","lineNumber":102,"content":"                        },"},{"type":"INSERT","lineNumber":103,"content":"                        modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":104,"content":"                    ) {"},{"type":"INSERT","lineNumber":105,"content":"                        Icon(Icons.Default.Map, contentDescription = \"Toggle Map Type\")"},{"type":"INSERT","lineNumber":106,"content":"                    }"},{"type":"INSERT","lineNumber":107,"content":""},{"type":"INSERT","lineNumber":108,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":115,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":116,"content":"                        onClick = { /* TODO: handle Change Mode action */ },"},{"type":"INSERT","lineNumber":122,"content":"            }"},{"type":"INSERT","lineNumber":124,"content":"    }"},{"type":"INSERT","lineNumber":125,"content":"}"},{"type":"INSERT","lineNumber":126,"content":""}]},{"timestamp":1757915781167,"changes":[{"type":"MODIFY","lineNumber":2,"content":"import android.widget.Toast","oldContent":"import androidx.compose.material3.FloatingActionButton"},{"type":"INSERT","lineNumber":3,"content":"import androidx.compose.foundation.layout.*"},{"type":"MODIFY","lineNumber":7,"content":"import androidx.compose.ui.Alignment","oldContent":"import androidx.compose.runtime.collectAsState"},{"type":"INSERT","lineNumber":14,"content":"<<<<<<< Updated upstream"},{"type":"INSERT","lineNumber":17,"content":"======="},{"type":"INSERT","lineNumber":18,"content":"import androidx.compose.material.icons.filled.Build"},{"type":"INSERT","lineNumber":19,"content":"import androidx.compose.material.icons.filled.FlightTakeoff"},{"type":"INSERT","lineNumber":20,"content":"import androidx.compose.material.icons.filled.Delete"},{"type":"INSERT","lineNumber":21,"content":"import androidx.compose.material.icons.filled.ClearAll"},{"type":"INSERT","lineNumber":22,"content":"import androidx.compose.material.icons.filled.Menu"},{"type":"INSERT","lineNumber":23,"content":"import androidx.compose.ui.platform.LocalContext"},{"type":"INSERT","lineNumber":24,"content":"import com.google.android.gms.maps.model.LatLng"},{"type":"INSERT","lineNumber":25,"content":"import com.divpundir.mavlink.api.MavEnumValue"},{"type":"INSERT","lineNumber":26,"content":"import com.divpundir.mavlink.definitions.common.MavFrame"},{"type":"INSERT","lineNumber":27,"content":"import com.divpundir.mavlink.definitions.common.MavCmd"},{"type":"INSERT","lineNumber":28,"content":"import com.example.aerogcsclone.navigation.Screen"},{"type":"INSERT","lineNumber":29,"content":">>>>>>> Stashed changes"},{"type":"DELETE","lineNumber":18,"oldContent":"        }"},{"type":"DELETE","lineNumber":19,"oldContent":"        Column("},{"type":"DELETE","lineNumber":20,"oldContent":"            modifier = Modifier"},{"type":"INSERT","lineNumber":33,"content":"    telemetryViewModel: SharedViewModel,"},{"type":"INSERT","lineNumber":34,"content":"    authViewModel: AuthViewModel,"},{"type":"INSERT","lineNumber":35,"content":"    navController: NavHostController"},{"type":"DELETE","lineNumber":23,"oldContent":"    // âœ… Map type state (same as in MainPage)"},{"type":"INSERT","lineNumber":38,"content":"    val context = LocalContext.current"},{"type":"DELETE","lineNumber":25,"oldContent":"    var mapType by remember { mutableStateOf(MapType.NORMAL) }"},{"type":"INSERT","lineNumber":43,"content":"<<<<<<< Updated upstream"},{"type":"INSERT","lineNumber":44,"content":"    // âœ… Map type state (same as in MainPage)"},{"type":"INSERT","lineNumber":45,"content":"    var mapType by remember { mutableStateOf(MapType.NORMAL) }"},{"type":"INSERT","lineNumber":46,"content":"======="},{"type":"INSERT","lineNumber":47,"content":"    // Mutable list to store map points (LatLng) and mission items"},{"type":"INSERT","lineNumber":48,"content":"    val points = remember { mutableStateListOf<LatLng>() }"},{"type":"INSERT","lineNumber":49,"content":"    val waypoints = remember { mutableStateListOf<com.divpundir.mavlink.definitions.common.MissionItemInt>() }"},{"type":"DELETE","lineNumber":30,"oldContent":"                        onClick = { /* TODO: Add Waypoints */ },"},{"type":"INSERT","lineNumber":51,"content":"    // Handler when user taps on map: add marker and corresponding mission item"},{"type":"INSERT","lineNumber":52,"content":"    val onMapClick: (LatLng) -> Unit = { latLng ->"},{"type":"INSERT","lineNumber":53,"content":"        points.add(latLng)"},{"type":"INSERT","lineNumber":54,"content":"        // build MissionItemInt"},{"type":"INSERT","lineNumber":55,"content":"        val seq = waypoints.size"},{"type":"INSERT","lineNumber":56,"content":"        val missionItem = com.divpundir.mavlink.definitions.common.MissionItemInt("},{"type":"INSERT","lineNumber":57,"content":"            targetSystem = 0u,"},{"type":"INSERT","lineNumber":58,"content":"            targetComponent = 0u,"},{"type":"INSERT","lineNumber":59,"content":"            seq = seq.toUShort(),"},{"type":"INSERT","lineNumber":60,"content":"            frame = MavEnumValue.of(MavFrame.GLOBAL_RELATIVE_ALT_INT),"},{"type":"INSERT","lineNumber":61,"content":"            command = MavEnumValue.of(MavCmd.NAV_WAYPOINT),"},{"type":"INSERT","lineNumber":62,"content":"            current = 0u,"},{"type":"INSERT","lineNumber":63,"content":"            autocontinue = 1u,"},{"type":"INSERT","lineNumber":64,"content":"            param1 = 0f,"},{"type":"INSERT","lineNumber":65,"content":"            param2 = 0f,"},{"type":"INSERT","lineNumber":66,"content":"            param3 = 0f,"},{"type":"INSERT","lineNumber":67,"content":"            param4 = 0f,"},{"type":"INSERT","lineNumber":68,"content":"            x = (latLng.latitude * 1e7).toInt(),"},{"type":"INSERT","lineNumber":69,"content":"            y = (latLng.longitude * 1e7).toInt(),"},{"type":"INSERT","lineNumber":70,"content":"            z = 10f"},{"type":"INSERT","lineNumber":71,"content":"        )"},{"type":"INSERT","lineNumber":72,"content":"        waypoints.add(missionItem)"},{"type":"INSERT","lineNumber":73,"content":"    }"},{"type":"INSERT","lineNumber":74,"content":">>>>>>> Stashed changes"},{"type":"INSERT","lineNumber":75,"content":""},{"type":"DELETE","lineNumber":32,"oldContent":"                        Icon(Icons.Default.Add, contentDescription = \"Add Waypoints\")"},{"type":"DELETE","lineNumber":37,"oldContent":"                        onClick = { /* TODO: Delete Waypoints */ },"},{"type":"INSERT","lineNumber":84,"content":"                        onClick = {"},{"type":"INSERT","lineNumber":85,"content":"                            if (waypoints.isNotEmpty()) {"},{"type":"INSERT","lineNumber":86,"content":"                                waypoints.removeAt(waypoints.lastIndex)"},{"type":"INSERT","lineNumber":87,"content":"                                points.removeAt(points.lastIndex)"},{"type":"INSERT","lineNumber":88,"content":"                            }"},{"type":"INSERT","lineNumber":89,"content":"                        },"},{"type":"DELETE","lineNumber":43,"oldContent":"                        Icon(Icons.Default.Delete, contentDescription = \"Delete Waypoints\")"},{"type":"DELETE","lineNumber":45,"oldContent":"                    }"},{"type":"DELETE","lineNumber":47,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":48,"oldContent":"                        onClick = { /* TODO: Clear Plan */ },"},{"type":"INSERT","lineNumber":94,"content":"                        Icon(Icons.Default.Delete, contentDescription = \"Delete Waypoints\")"},{"type":"INSERT","lineNumber":96,"content":""},{"type":"INSERT","lineNumber":97,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":98,"content":"                        onClick = { waypoints.clear(); points.clear() },"},{"type":"DELETE","lineNumber":54,"oldContent":""},{"type":"DELETE","lineNumber":56,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":57,"oldContent":"                        modifier = Modifier"},{"type":"DELETE","lineNumber":58,"oldContent":""},{"type":"DELETE","lineNumber":59,"oldContent":"                            .padding(bottom = 12.dp)"},{"type":"DELETE","lineNumber":60,"oldContent":"                };"},{"type":"DELETE","lineNumber":61,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":62,"oldContent":"                ) {"},{"type":"INSERT","lineNumber":106,"content":""},{"type":"DELETE","lineNumber":72,"oldContent":"            TopNavBar("},{"type":"DELETE","lineNumber":74,"oldContent":"                telemetryState = telemetryState,"},{"type":"DELETE","lineNumber":76,"oldContent":"                authViewModel = authViewModel,"},{"type":"DELETE","lineNumber":77,"oldContent":"                navController = navController"},{"type":"DELETE","lineNumber":79,"oldContent":"            )"},{"type":"DELETE","lineNumber":82,"oldContent":"                // âœ… Pass selected mapType to GcsMap"},{"type":"INSERT","lineNumber":120,"content":"                .padding(paddingValues)"},{"type":"INSERT","lineNumber":121,"content":"        ) {"},{"type":"INSERT","lineNumber":122,"content":"            // Top navigation bar"},{"type":"INSERT","lineNumber":123,"content":"            TopNavBar("},{"type":"INSERT","lineNumber":124,"content":"                telemetryState = telemetryState,"},{"type":"INSERT","lineNumber":125,"content":"                authViewModel = authViewModel,"},{"type":"INSERT","lineNumber":126,"content":"                navController = navController"},{"type":"INSERT","lineNumber":127,"content":"            )"},{"type":"INSERT","lineNumber":128,"content":""},{"type":"INSERT","lineNumber":129,"content":"            Box(modifier = Modifier.fillMaxSize()) {"},{"type":"INSERT","lineNumber":130,"content":"<<<<<<< Updated upstream"},{"type":"INSERT","lineNumber":131,"content":"                // âœ… Pass selected mapType to GcsMap"},{"type":"DELETE","lineNumber":85,"oldContent":"                        onClick = { telemetryViewModel.arm() },"},{"type":"INSERT","lineNumber":133,"content":"======="},{"type":"INSERT","lineNumber":134,"content":"                // Map background - pass points and onMapClick callback"},{"type":"INSERT","lineNumber":135,"content":"                GcsMap(telemetryState = telemetryState, points = points, onMapClick = onMapClick)"},{"type":"INSERT","lineNumber":136,"content":">>>>>>> Stashed changes"},{"type":"DELETE","lineNumber":87,"oldContent":""},{"type":"DELETE","lineNumber":88,"oldContent":"                GcsMap(telemetryState = telemetryState)"},{"type":"DELETE","lineNumber":89,"oldContent":"                // Map background"},{"type":"INSERT","lineNumber":138,"content":"                // Left-side floating buttons (below TopNavBar)"},{"type":"INSERT","lineNumber":139,"content":"                Column("},{"type":"INSERT","lineNumber":140,"content":"                    modifier = Modifier"},{"type":"INSERT","lineNumber":141,"content":"                        .align(Alignment.TopStart)"},{"type":"DELETE","lineNumber":91,"oldContent":"            Box(modifier = Modifier.fillMaxSize()) {"},{"type":"INSERT","lineNumber":143,"content":"                    verticalArrangement = Arrangement.spacedBy(12.dp)"},{"type":"INSERT","lineNumber":144,"content":"                ) {"},{"type":"DELETE","lineNumber":94,"oldContent":"                // Left-side floating buttons (below TopNavBar)"},{"type":"DELETE","lineNumber":96,"oldContent":"                Column("},{"type":"DELETE","lineNumber":98,"oldContent":"                    modifier = Modifier"},{"type":"DELETE","lineNumber":100,"oldContent":"                        .align(Alignment.TopStart)"},{"type":"DELETE","lineNumber":102,"oldContent":"                    verticalArrangement = Arrangement.spacedBy(12.dp)"},{"type":"DELETE","lineNumber":104,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":106,"oldContent":"                        onClick = { telemetryViewModel.arm() },"},{"type":"DELETE","lineNumber":108,"oldContent":"                        modifier = Modifier.size(56.dp)"},{"type":"DELETE","lineNumber":110,"oldContent":"                    ) {"},{"type":"INSERT","lineNumber":156,"content":"                        onClick = { telemetryViewModel.arm() },"},{"type":"INSERT","lineNumber":157,"content":"                        modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":158,"content":"                    ) {"},{"type":"INSERT","lineNumber":162,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":163,"content":"                        onClick = { /* TODO: handle Change Mode action */ },"},{"type":"DELETE","lineNumber":119,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":121,"oldContent":"                        onClick = { /* TODO: handle Change Mode action */ },"},{"type":"DELETE","lineNumber":123,"oldContent":"}"},{"type":"DELETE","lineNumber":124,"oldContent":"    }"},{"type":"INSERT","lineNumber":170,"content":"                // Upload Mission button"},{"type":"INSERT","lineNumber":171,"content":"                Button("},{"type":"INSERT","lineNumber":172,"content":"                    onClick = {"},{"type":"INSERT","lineNumber":173,"content":"                        telemetryViewModel.uploadMission(waypoints) { success, error ->"},{"type":"INSERT","lineNumber":174,"content":"                            if (success) {"},{"type":"INSERT","lineNumber":175,"content":"                                Toast.makeText(context, \"Mission uploaded\", Toast.LENGTH_SHORT)"},{"type":"INSERT","lineNumber":176,"content":"                                    .show()"},{"type":"INSERT","lineNumber":177,"content":"                                navController.navigate(Screen.Main.route) {"},{"type":"INSERT","lineNumber":178,"content":"                                    popUpTo(Screen.Plan.route) { inclusive = true }"},{"type":"INSERT","lineNumber":179,"content":"                                }"},{"type":"INSERT","lineNumber":180,"content":"                            } else {"},{"type":"INSERT","lineNumber":181,"content":"                                Toast.makeText("},{"type":"INSERT","lineNumber":182,"content":"                                    context,"},{"type":"INSERT","lineNumber":183,"content":"                                    error ?: \"Mission upload failed\","},{"type":"INSERT","lineNumber":184,"content":"                                    Toast.LENGTH_SHORT"},{"type":"INSERT","lineNumber":185,"content":"                                ).show()"},{"type":"INSERT","lineNumber":186,"content":"                            }"},{"type":"INSERT","lineNumber":187,"content":"                        }"},{"type":"INSERT","lineNumber":188,"content":"                    },"},{"type":"INSERT","lineNumber":189,"content":"                    enabled = waypoints.isNotEmpty(),"},{"type":"INSERT","lineNumber":190,"content":"                    modifier = Modifier"},{"type":"INSERT","lineNumber":191,"content":"                        .padding(top = 16.dp)"},{"type":"INSERT","lineNumber":192,"content":"                        .fillMaxWidth()"},{"type":"INSERT","lineNumber":193,"content":"                ) {"},{"type":"INSERT","lineNumber":194,"content":"                    Text(\"Upload Mission (${waypoints.size})\")"},{"type":"INSERT","lineNumber":195,"content":"                }"},{"type":"INSERT","lineNumber":196,"content":""},{"type":"INSERT","lineNumber":197,"content":"                // Show waypoints for user feedback"},{"type":"INSERT","lineNumber":198,"content":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"INSERT","lineNumber":199,"content":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleMedium)"},{"type":"INSERT","lineNumber":200,"content":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"INSERT","lineNumber":201,"content":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"},{"type":"INSERT","lineNumber":202,"content":"                    }"},{"type":"INSERT","lineNumber":203,"content":"                }"},{"type":"INSERT","lineNumber":205,"content":"        }"},{"type":"INSERT","lineNumber":206,"content":"    }"},{"type":"INSERT","lineNumber":207,"content":"}"}]},{"timestamp":1757915832887,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import android.widget.Toast"},{"type":"MODIFY","lineNumber":7,"content":"import androidx.compose.ui.Modifier","oldContent":"import androidx.compose.runtime.collectAsState"},{"type":"DELETE","lineNumber":14,"oldContent":"import androidx.compose.material.icons.filled.*"},{"type":"DELETE","lineNumber":15,"oldContent":"<<<<<<< Updated upstream"},{"type":"DELETE","lineNumber":16,"oldContent":"import com.google.maps.android.compose.MapType"},{"type":"DELETE","lineNumber":17,"oldContent":""},{"type":"DELETE","lineNumber":18,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":19,"oldContent":"======="},{"type":"DELETE","lineNumber":20,"oldContent":"            }"},{"type":"INSERT","lineNumber":15,"content":"import androidx.compose.material.icons.filled.Add"},{"type":"DELETE","lineNumber":25,"oldContent":") {"},{"type":"DELETE","lineNumber":27,"oldContent":"            modifier = Modifier"},{"type":"DELETE","lineNumber":28,"oldContent":"import androidx.compose.ui.platform.LocalContext"},{"type":"DELETE","lineNumber":29,"oldContent":"import com.google.android.gms.maps.model.LatLng"},{"type":"DELETE","lineNumber":31,"oldContent":"import com.divpundir.mavlink.api.MavEnumValue"},{"type":"DELETE","lineNumber":32,"oldContent":"import com.divpundir.mavlink.definitions.common.MavFrame"},{"type":"INSERT","lineNumber":20,"content":"@Composable"},{"type":"INSERT","lineNumber":21,"content":"fun PlanScreen("},{"type":"INSERT","lineNumber":22,"content":"    telemetryViewModel: SharedViewModel,"},{"type":"INSERT","lineNumber":23,"content":"    authViewModel: AuthViewModel,"},{"type":"INSERT","lineNumber":24,"content":"    navController: NavHostController"},{"type":"INSERT","lineNumber":25,"content":") {"},{"type":"INSERT","lineNumber":26,"content":"    val telemetryState by telemetryViewModel.telemetryState.collectAsState()"},{"type":"INSERT","lineNumber":27,"content":""},{"type":"DELETE","lineNumber":34,"oldContent":"import com.divpundir.mavlink.definitions.common.MavCmd"},{"type":"DELETE","lineNumber":36,"oldContent":"import com.example.aerogcsclone.navigation.Screen"},{"type":"DELETE","lineNumber":38,"oldContent":">>>>>>> Stashed changes"},{"type":"DELETE","lineNumber":39,"oldContent":""},{"type":"DELETE","lineNumber":41,"oldContent":"    telemetryViewModel: SharedViewModel,"},{"type":"DELETE","lineNumber":43,"oldContent":"    authViewModel: AuthViewModel,"},{"type":"DELETE","lineNumber":45,"oldContent":"    navController: NavHostController"},{"type":"DELETE","lineNumber":48,"oldContent":"    val context = LocalContext.current"},{"type":"INSERT","lineNumber":39,"content":"                        onClick = { /* TODO: Add Waypoints */ },"},{"type":"DELETE","lineNumber":54,"oldContent":"<<<<<<< Updated upstream"},{"type":"DELETE","lineNumber":55,"oldContent":"    // âœ… Map type state (same as in MainPage)"},{"type":"DELETE","lineNumber":57,"oldContent":"    var mapType by remember { mutableStateOf(MapType.NORMAL) }"},{"type":"DELETE","lineNumber":58,"oldContent":"======="},{"type":"DELETE","lineNumber":60,"oldContent":"    // Mutable list to store map points (LatLng) and mission items"},{"type":"DELETE","lineNumber":61,"oldContent":"    val points = remember { mutableStateListOf<LatLng>() }"},{"type":"DELETE","lineNumber":62,"oldContent":"    val waypoints = remember { mutableStateListOf<com.divpundir.mavlink.definitions.common.MissionItemInt>() }"},{"type":"INSERT","lineNumber":44,"content":"                        Icon(Icons.Default.Add, contentDescription = \"Add Waypoints\")"},{"type":"INSERT","lineNumber":46,"content":""},{"type":"INSERT","lineNumber":47,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":48,"content":"                        onClick = { /* TODO: Delete Waypoints */ },"},{"type":"DELETE","lineNumber":65,"oldContent":"    // Handler when user taps on map: add marker and corresponding mission item"},{"type":"DELETE","lineNumber":67,"oldContent":"    val onMapClick: (LatLng) -> Unit = { latLng ->"},{"type":"DELETE","lineNumber":69,"oldContent":"        points.add(latLng)"},{"type":"DELETE","lineNumber":71,"oldContent":"        // build MissionItemInt"},{"type":"DELETE","lineNumber":72,"oldContent":"        val seq = waypoints.size"},{"type":"INSERT","lineNumber":53,"content":"                        Icon(Icons.Default.Delete, contentDescription = \"Delete Waypoints\")"},{"type":"INSERT","lineNumber":54,"content":"                    }"},{"type":"INSERT","lineNumber":55,"content":""},{"type":"INSERT","lineNumber":56,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":57,"content":"                        onClick = { /* TODO: Clear Plan */ },"},{"type":"INSERT","lineNumber":58,"content":"                        modifier = Modifier"},{"type":"INSERT","lineNumber":59,"content":"                            .padding(bottom = 12.dp)"},{"type":"INSERT","lineNumber":60,"content":"                            .size(56.dp)"},{"type":"INSERT","lineNumber":61,"content":"                    ) {"},{"type":"DELETE","lineNumber":74,"oldContent":"        val missionItem = com.divpundir.mavlink.definitions.common.MissionItemInt("},{"type":"DELETE","lineNumber":75,"oldContent":"            targetSystem = 0u,"},{"type":"DELETE","lineNumber":76,"oldContent":"            targetComponent = 0u,"},{"type":"DELETE","lineNumber":77,"oldContent":"            seq = seq.toUShort(),"},{"type":"DELETE","lineNumber":78,"oldContent":"            frame = MavEnumValue.of(MavFrame.GLOBAL_RELATIVE_ALT_INT),"},{"type":"DELETE","lineNumber":79,"oldContent":"            command = MavEnumValue.of(MavCmd.NAV_WAYPOINT),"},{"type":"DELETE","lineNumber":80,"oldContent":"            current = 0u,"},{"type":"DELETE","lineNumber":81,"oldContent":"            autocontinue = 1u,"},{"type":"DELETE","lineNumber":83,"oldContent":"            param1 = 0f,"},{"type":"DELETE","lineNumber":84,"oldContent":"                        onClick = { telemetryViewModel.arm() },"},{"type":"DELETE","lineNumber":85,"oldContent":"            param2 = 0f,"},{"type":"INSERT","lineNumber":64,"content":"                }"},{"type":"INSERT","lineNumber":65,"content":""},{"type":"DELETE","lineNumber":87,"oldContent":"            param3 = 0f,"},{"type":"DELETE","lineNumber":89,"oldContent":"            param4 = 0f,"},{"type":"DELETE","lineNumber":91,"oldContent":"            x = (latLng.latitude * 1e7).toInt(),"},{"type":"DELETE","lineNumber":93,"oldContent":"            y = (latLng.longitude * 1e7).toInt(),"},{"type":"DELETE","lineNumber":94,"oldContent":""},{"type":"DELETE","lineNumber":95,"oldContent":"            z = 10f"},{"type":"DELETE","lineNumber":96,"oldContent":"            }"},{"type":"DELETE","lineNumber":97,"oldContent":"        )"},{"type":"INSERT","lineNumber":70,"content":"                ) {"},{"type":"INSERT","lineNumber":71,"content":"                    Icon(Icons.Default.Menu, contentDescription = \"Create Plan\")"},{"type":"DELETE","lineNumber":99,"oldContent":"        waypoints.add(missionItem)"},{"type":"DELETE","lineNumber":100,"oldContent":"    }"},{"type":"DELETE","lineNumber":102,"oldContent":">>>>>>> Stashed changes"},{"type":"DELETE","lineNumber":103,"oldContent":""},{"type":"DELETE","lineNumber":107,"oldContent":"}"},{"type":"DELETE","lineNumber":108,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":109,"oldContent":"                        onClick = {"},{"type":"DELETE","lineNumber":110,"oldContent":"                GcsMap(telemetryState = telemetryState, mapType = mapType)"},{"type":"DELETE","lineNumber":111,"oldContent":"                            if (waypoints.isNotEmpty()) {"},{"type":"DELETE","lineNumber":112,"oldContent":"                                waypoints.removeAt(waypoints.lastIndex)"},{"type":"DELETE","lineNumber":113,"oldContent":""},{"type":"DELETE","lineNumber":114,"oldContent":"                                points.removeAt(points.lastIndex)"},{"type":"DELETE","lineNumber":115,"oldContent":"                            }"},{"type":"DELETE","lineNumber":116,"oldContent":"                        },"},{"type":"DELETE","lineNumber":117,"oldContent":"                        .padding(start = 16.dp, top = 72.dp), // push below TopNavBar"},{"type":"DELETE","lineNumber":118,"oldContent":"                    // âœ… Map toggle button ABOVE Arm button"},{"type":"DELETE","lineNumber":119,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":120,"oldContent":"                        Icon(Icons.Default.Delete, contentDescription = \"Delete Waypoints\")"},{"type":"DELETE","lineNumber":121,"oldContent":"                        onClick = {"},{"type":"DELETE","lineNumber":122,"oldContent":""},{"type":"DELETE","lineNumber":123,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":124,"oldContent":"                            mapType = if (mapType == MapType.NORMAL) MapType.SATELLITE else MapType.NORMAL"},{"type":"DELETE","lineNumber":125,"oldContent":"                        onClick = { waypoints.clear(); points.clear() },"},{"type":"DELETE","lineNumber":126,"oldContent":"                        },"},{"type":"DELETE","lineNumber":127,"oldContent":"                        modifier = Modifier.size(56.dp)"},{"type":"DELETE","lineNumber":128,"oldContent":"                    ) {"},{"type":"DELETE","lineNumber":129,"oldContent":"                        Icon(Icons.Default.Map, contentDescription = \"Toggle Map Type\")"},{"type":"DELETE","lineNumber":130,"oldContent":""},{"type":"DELETE","lineNumber":131,"oldContent":"                    }"},{"type":"DELETE","lineNumber":132,"oldContent":""},{"type":"DELETE","lineNumber":133,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":134,"oldContent":"                        Icon(Icons.Default.FlightTakeoff, contentDescription = \"Arm\")"},{"type":"DELETE","lineNumber":135,"oldContent":"                    }"},{"type":"DELETE","lineNumber":136,"oldContent":""},{"type":"DELETE","lineNumber":137,"oldContent":"                        modifier = Modifier.size(56.dp)"},{"type":"DELETE","lineNumber":138,"oldContent":"                        .padding(top = 16.dp)"},{"type":"DELETE","lineNumber":139,"oldContent":"                        Icon(Icons.Default.Build, contentDescription = \"Change Mode\")"},{"type":"DELETE","lineNumber":140,"oldContent":"                    }"},{"type":"INSERT","lineNumber":77,"content":"            modifier = Modifier"},{"type":"INSERT","lineNumber":78,"content":"                .fillMaxSize()"},{"type":"DELETE","lineNumber":142,"oldContent":"                }"},{"type":"DELETE","lineNumber":145,"oldContent":""},{"type":"DELETE","lineNumber":149,"oldContent":"            }"},{"type":"DELETE","lineNumber":151,"oldContent":"}"},{"type":"DELETE","lineNumber":153,"oldContent":"    }"},{"type":"DELETE","lineNumber":155,"oldContent":"        }"},{"type":"DELETE","lineNumber":157,"oldContent":"                }"},{"type":"DELETE","lineNumber":158,"oldContent":"<<<<<<< Updated upstream"},{"type":"DELETE","lineNumber":159,"oldContent":"                    }"},{"type":"DELETE","lineNumber":160,"oldContent":"                // âœ… Pass selected mapType to GcsMap"},{"type":"DELETE","lineNumber":161,"oldContent":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"},{"type":"DELETE","lineNumber":162,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":163,"oldContent":"======="},{"type":"DELETE","lineNumber":164,"oldContent":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleMedium)"},{"type":"DELETE","lineNumber":165,"oldContent":"                // Map background - pass points and onMapClick callback"},{"type":"DELETE","lineNumber":166,"oldContent":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"DELETE","lineNumber":167,"oldContent":"                GcsMap(telemetryState = telemetryState, points = points, onMapClick = onMapClick)"},{"type":"DELETE","lineNumber":168,"oldContent":"                // Show waypoints for user feedback"},{"type":"DELETE","lineNumber":169,"oldContent":">>>>>>> Stashed changes"},{"type":"INSERT","lineNumber":89,"content":"                // Map background"},{"type":"INSERT","lineNumber":90,"content":"                GcsMap(telemetryState = telemetryState)"},{"type":"DELETE","lineNumber":171,"oldContent":"                }"},{"type":"DELETE","lineNumber":173,"oldContent":"                    Text(\"Upload Mission (${waypoints.size})\")"},{"type":"DELETE","lineNumber":175,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":177,"oldContent":"                        .fillMaxWidth()"},{"type":"DELETE","lineNumber":179,"oldContent":"                        .padding(top = 16.dp)"},{"type":"DELETE","lineNumber":180,"oldContent":"                    modifier = Modifier"},{"type":"INSERT","lineNumber":96,"content":"                        .padding(start = 16.dp, top = 72.dp), // push below TopNavBar"},{"type":"DELETE","lineNumber":182,"oldContent":"                    enabled = waypoints.isNotEmpty(),"},{"type":"DELETE","lineNumber":184,"oldContent":"                    },"},{"type":"DELETE","lineNumber":185,"oldContent":"                        }"},{"type":"DELETE","lineNumber":186,"oldContent":"                            }"},{"type":"DELETE","lineNumber":187,"oldContent":"                                ).show()"},{"type":"DELETE","lineNumber":188,"oldContent":"                                    Toast.LENGTH_SHORT"},{"type":"DELETE","lineNumber":189,"oldContent":"                                    error ?: \"Mission upload failed\","},{"type":"DELETE","lineNumber":190,"oldContent":"                                    context,"},{"type":"DELETE","lineNumber":191,"oldContent":"                                Toast.makeText("},{"type":"DELETE","lineNumber":192,"oldContent":"                            } else {"},{"type":"DELETE","lineNumber":193,"oldContent":"                                }"},{"type":"DELETE","lineNumber":194,"oldContent":"                                    popUpTo(Screen.Plan.route) { inclusive = true }"},{"type":"DELETE","lineNumber":195,"oldContent":"                                navController.navigate(Screen.Main.route) {"},{"type":"INSERT","lineNumber":99,"content":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":197,"oldContent":"                                    .show()"},{"type":"DELETE","lineNumber":199,"oldContent":"                                Toast.makeText(context, \"Mission uploaded\", Toast.LENGTH_SHORT)"},{"type":"DELETE","lineNumber":201,"oldContent":"                            if (success) {"},{"type":"DELETE","lineNumber":202,"oldContent":"                        telemetryViewModel.uploadMission(waypoints) { success, error ->"},{"type":"DELETE","lineNumber":203,"oldContent":"                    onClick = {"},{"type":"DELETE","lineNumber":204,"oldContent":"                Button("},{"type":"INSERT","lineNumber":103,"content":"                        Icon(Icons.Default.FlightTakeoff, contentDescription = \"Arm\")"},{"type":"INSERT","lineNumber":104,"content":"                    }"},{"type":"INSERT","lineNumber":105,"content":""},{"type":"DELETE","lineNumber":206,"oldContent":"                // Upload Mission button"},{"type":"INSERT","lineNumber":108,"content":"                        modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":109,"content":"                    ) {"},{"type":"INSERT","lineNumber":110,"content":"                        Icon(Icons.Default.Build, contentDescription = \"Change Mode\")"},{"type":"INSERT","lineNumber":111,"content":"                    }"},{"type":"INSERT","lineNumber":112,"content":"                }"},{"type":"INSERT","lineNumber":113,"content":"            }"},{"type":"INSERT","lineNumber":114,"content":"        }"},{"type":"INSERT","lineNumber":115,"content":"    }"},{"type":"INSERT","lineNumber":116,"content":"}"},{"type":"INSERT","lineNumber":117,"content":""}]},{"timestamp":1757998367130,"changes":[{"type":"INSERT","lineNumber":2,"content":"import android.widget.Toast"},{"type":"INSERT","lineNumber":3,"content":"import androidx.compose.foundation.background"},{"type":"DELETE","lineNumber":4,"oldContent":"import androidx.compose.material3.Text"},{"type":"INSERT","lineNumber":6,"content":"import androidx.compose.material3.FloatingActionButton"},{"type":"DELETE","lineNumber":6,"oldContent":"import androidx.compose.ui.Modifier"},{"type":"INSERT","lineNumber":9,"content":"import androidx.compose.ui.Modifier"},{"type":"DELETE","lineNumber":13,"oldContent":"import androidx.compose.material.icons.filled.Add"},{"type":"INSERT","lineNumber":15,"content":"import androidx.compose.material.icons.filled.*"},{"type":"INSERT","lineNumber":16,"content":"import androidx.compose.ui.platform.LocalContext"},{"type":"INSERT","lineNumber":17,"content":"import com.google.android.gms.maps.model.LatLng"},{"type":"INSERT","lineNumber":18,"content":"import com.divpundir.mavlink.api.MavEnumValue"},{"type":"INSERT","lineNumber":19,"content":"import com.divpundir.mavlink.definitions.common.MavFrame"},{"type":"INSERT","lineNumber":20,"content":"import com.divpundir.mavlink.definitions.common.MavCmd"},{"type":"INSERT","lineNumber":21,"content":"import com.divpundir.mavlink.definitions.common.MissionItemInt"},{"type":"INSERT","lineNumber":22,"content":"import com.google.maps.android.compose.rememberCameraPositionState"},{"type":"INSERT","lineNumber":23,"content":"import com.google.maps.android.compose.MapType"},{"type":"INSERT","lineNumber":24,"content":"import com.example.aerogcsclone.navigation.Screen"},{"type":"INSERT","lineNumber":25,"content":"import kotlinx.coroutines.launch"},{"type":"INSERT","lineNumber":26,"content":""},{"type":"DELETE","lineNumber":16,"oldContent":"import androidx.compose.material.icons.filled.Build"},{"type":"DELETE","lineNumber":18,"oldContent":"import androidx.compose.material.icons.filled.FlightTakeoff"},{"type":"DELETE","lineNumber":20,"oldContent":"import androidx.compose.material.icons.filled.Delete"},{"type":"DELETE","lineNumber":22,"oldContent":"import androidx.compose.material.icons.filled.ClearAll"},{"type":"DELETE","lineNumber":25,"oldContent":"import androidx.compose.material.icons.filled.Menu"},{"type":"INSERT","lineNumber":34,"content":"    val context = LocalContext.current"},{"type":"INSERT","lineNumber":36,"content":"    // Top navigation bar"},{"type":"INSERT","lineNumber":37,"content":"    TopNavBar("},{"type":"INSERT","lineNumber":38,"content":"        telemetryState = telemetryState,"},{"type":"INSERT","lineNumber":39,"content":"        authViewModel = authViewModel,"},{"type":"INSERT","lineNumber":40,"content":"        navController = navController"},{"type":"INSERT","lineNumber":41,"content":"    )"},{"type":"DELETE","lineNumber":31,"oldContent":"                        onClick = { /* TODO: Add Waypoints */ },"},{"type":"INSERT","lineNumber":46,"content":"    // Map type state"},{"type":"INSERT","lineNumber":47,"content":"    var mapType by remember { mutableStateOf(MapType.SATELLITE) }"},{"type":"INSERT","lineNumber":48,"content":""},{"type":"INSERT","lineNumber":49,"content":"    // Camera state for map center / crosshair"},{"type":"INSERT","lineNumber":50,"content":"    val cameraPositionState = rememberCameraPositionState()"},{"type":"INSERT","lineNumber":51,"content":""},{"type":"INSERT","lineNumber":52,"content":"    // Ensure we center the map once when Plan screen opens if we have telemetry"},{"type":"INSERT","lineNumber":53,"content":"    var centeredOnce by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":54,"content":"    LaunchedEffect(telemetryState.latitude, telemetryState.longitude) {"},{"type":"INSERT","lineNumber":55,"content":"        val lat = telemetryState.latitude"},{"type":"INSERT","lineNumber":56,"content":"        val lon = telemetryState.longitude"},{"type":"INSERT","lineNumber":57,"content":"        if (!centeredOnce && lat != null && lon != null) {"},{"type":"INSERT","lineNumber":58,"content":"            cameraPositionState.move(com.google.android.gms.maps.CameraUpdateFactory.newLatLngZoom(LatLng(lat, lon), 16f))"},{"type":"INSERT","lineNumber":59,"content":"            centeredOnce = true"},{"type":"INSERT","lineNumber":60,"content":"        }"},{"type":"INSERT","lineNumber":61,"content":"    }"},{"type":"INSERT","lineNumber":62,"content":""},{"type":"INSERT","lineNumber":63,"content":"    // Waypoint storage: geographic points and mission items"},{"type":"INSERT","lineNumber":64,"content":"    val points = remember { mutableStateListOf<LatLng>() }"},{"type":"INSERT","lineNumber":65,"content":"    val waypoints = remember { mutableStateListOf<MissionItemInt>() }"},{"type":"INSERT","lineNumber":66,"content":""},{"type":"INSERT","lineNumber":67,"content":"    // Helper to build MissionItemInt from LatLng"},{"type":"INSERT","lineNumber":68,"content":"    fun buildMissionItemFromLatLng(latLng: LatLng, seq: Int, isTakeoff: Boolean = false, alt: Float = 10f): MissionItemInt {"},{"type":"INSERT","lineNumber":69,"content":"        return MissionItemInt("},{"type":"INSERT","lineNumber":70,"content":"            targetSystem = 0u,"},{"type":"INSERT","lineNumber":71,"content":"            targetComponent = 0u,"},{"type":"INSERT","lineNumber":72,"content":"            seq = seq.toUShort(),"},{"type":"INSERT","lineNumber":73,"content":"            frame = MavEnumValue.of(MavFrame.GLOBAL_RELATIVE_ALT_INT),"},{"type":"INSERT","lineNumber":74,"content":"            command = if (isTakeoff) MavEnumValue.of(MavCmd.NAV_TAKEOFF) else MavEnumValue.of(MavCmd.NAV_WAYPOINT),"},{"type":"INSERT","lineNumber":75,"content":"            current = 0u, // ensure 0 for compatibility"},{"type":"INSERT","lineNumber":76,"content":"            autocontinue = 1u,"},{"type":"INSERT","lineNumber":77,"content":"            param1 = 0f,"},{"type":"INSERT","lineNumber":78,"content":"            param2 = 0f,"},{"type":"INSERT","lineNumber":79,"content":"            param3 = 0f,"},{"type":"INSERT","lineNumber":80,"content":"            param4 = 0f,"},{"type":"INSERT","lineNumber":81,"content":"            x = (latLng.latitude * 1E7).toInt(),"},{"type":"INSERT","lineNumber":82,"content":"            y = (latLng.longitude * 1E7).toInt(),"},{"type":"INSERT","lineNumber":83,"content":"            z = alt"},{"type":"INSERT","lineNumber":84,"content":"        )"},{"type":"INSERT","lineNumber":85,"content":"    }"},{"type":"INSERT","lineNumber":86,"content":""},{"type":"INSERT","lineNumber":87,"content":"    // Handler when user taps on map: add marker and mission item"},{"type":"INSERT","lineNumber":88,"content":"    val onMapClick: (LatLng) -> Unit = { latLng ->"},{"type":"INSERT","lineNumber":89,"content":"        val seq = waypoints.size"},{"type":"INSERT","lineNumber":90,"content":"        val isTakeoff = seq == 0"},{"type":"INSERT","lineNumber":91,"content":"        val item = buildMissionItemFromLatLng(latLng, seq, isTakeoff)"},{"type":"INSERT","lineNumber":92,"content":"        points.add(latLng)"},{"type":"INSERT","lineNumber":93,"content":"        waypoints.add(item)"},{"type":"INSERT","lineNumber":94,"content":"    }"},{"type":"INSERT","lineNumber":95,"content":""},{"type":"INSERT","lineNumber":96,"content":"    val coroutineScope = rememberCoroutineScope()"},{"type":"INSERT","lineNumber":97,"content":""},{"type":"DELETE","lineNumber":34,"oldContent":"                        Icon(Icons.Default.Add, contentDescription = \"Add Waypoints\")"},{"type":"DELETE","lineNumber":36,"oldContent":""},{"type":"DELETE","lineNumber":38,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":40,"oldContent":"                        onClick = { /* TODO: Delete Waypoints */ },"},{"type":"INSERT","lineNumber":105,"content":"                    // Add at crosshair"},{"type":"INSERT","lineNumber":107,"content":"                        onClick = {"},{"type":"INSERT","lineNumber":108,"content":"                            // get map center"},{"type":"INSERT","lineNumber":109,"content":"                            val center = cameraPositionState.position.target"},{"type":"INSERT","lineNumber":110,"content":"                            val seq = waypoints.size"},{"type":"INSERT","lineNumber":111,"content":"                            val isTakeoff = seq == 0"},{"type":"INSERT","lineNumber":112,"content":"                            val item = buildMissionItemFromLatLng(center, seq, isTakeoff)"},{"type":"INSERT","lineNumber":113,"content":"                            points.add(center)"},{"type":"INSERT","lineNumber":114,"content":"                            waypoints.add(item)"},{"type":"INSERT","lineNumber":115,"content":"                        },"},{"type":"DELETE","lineNumber":45,"oldContent":"                        Icon(Icons.Default.Delete, contentDescription = \"Delete Waypoints\")"},{"type":"INSERT","lineNumber":118,"content":"                            .size(56.dp)"},{"type":"INSERT","lineNumber":119,"content":"                    ) {"},{"type":"INSERT","lineNumber":120,"content":"                        Icon(Icons.Default.Add, contentDescription = \"Add Waypoint at Crosshair\")"},{"type":"DELETE","lineNumber":50,"oldContent":"                            .size(56.dp)"},{"type":"DELETE","lineNumber":51,"oldContent":"                        onClick = { /* TODO: Clear Plan */ },"},{"type":"INSERT","lineNumber":124,"content":"                        onClick = {"},{"type":"INSERT","lineNumber":125,"content":"                            if (waypoints.isNotEmpty()) {"},{"type":"INSERT","lineNumber":126,"content":"                                waypoints.removeAt(waypoints.lastIndex)"},{"type":"INSERT","lineNumber":127,"content":"                                points.removeAt(points.lastIndex)"},{"type":"INSERT","lineNumber":128,"content":"                            }"},{"type":"INSERT","lineNumber":129,"content":"                        },"},{"type":"DELETE","lineNumber":54,"oldContent":"                    ) {"},{"type":"INSERT","lineNumber":134,"content":"                        Icon(Icons.Default.Delete, contentDescription = \"Delete Waypoints\")"},{"type":"DELETE","lineNumber":58,"oldContent":"                }"},{"type":"DELETE","lineNumber":59,"oldContent":"                        modifier = Modifier"},{"type":"INSERT","lineNumber":137,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":138,"content":"                        onClick = { waypoints.clear(); points.clear() },"},{"type":"INSERT","lineNumber":139,"content":"                        modifier = Modifier"},{"type":"DELETE","lineNumber":63,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":65,"oldContent":"                    Icon(Icons.Default.Menu, contentDescription = \"Create Plan\")"},{"type":"DELETE","lineNumber":67,"oldContent":"            modifier = Modifier"},{"type":"DELETE","lineNumber":68,"oldContent":"                .fillMaxSize()"},{"type":"INSERT","lineNumber":145,"content":"                }"},{"type":"INSERT","lineNumber":146,"content":""},{"type":"DELETE","lineNumber":72,"oldContent":"                // Map background"},{"type":"DELETE","lineNumber":73,"oldContent":"                GcsMap(telemetryState = telemetryState)"},{"type":"DELETE","lineNumber":74,"oldContent":"                .fillMaxSize()"},{"type":"DELETE","lineNumber":75,"oldContent":"            modifier = Modifier"},{"type":"DELETE","lineNumber":76,"oldContent":"                        .padding(start = 16.dp, top = 72.dp), // push below TopNavBar"},{"type":"DELETE","lineNumber":77,"oldContent":"}"},{"type":"DELETE","lineNumber":78,"oldContent":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":149,"content":"                    onClick = { showPlanActions = !showPlanActions },"},{"type":"INSERT","lineNumber":150,"content":"                    modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":151,"content":"                ) {"},{"type":"INSERT","lineNumber":152,"content":"                    Icon(Icons.Default.Menu, contentDescription = \"Create Plan\")"},{"type":"INSERT","lineNumber":153,"content":"                }"},{"type":"DELETE","lineNumber":80,"oldContent":"                        Icon(Icons.Default.FlightTakeoff, contentDescription = \"Arm\")"},{"type":"DELETE","lineNumber":81,"oldContent":"                    }"},{"type":"INSERT","lineNumber":156,"content":"    ) { paddingValues ->"},{"type":"INSERT","lineNumber":157,"content":"        Box(modifier = Modifier.fillMaxSize().padding(paddingValues)) {"},{"type":"INSERT","lineNumber":158,"content":"            // Map background - pass points and onMapClick callback, camera state, and mapType"},{"type":"INSERT","lineNumber":159,"content":"            GcsMap("},{"type":"INSERT","lineNumber":160,"content":"                telemetryState = telemetryState,"},{"type":"INSERT","lineNumber":161,"content":"                points = points,"},{"type":"INSERT","lineNumber":162,"content":"                onMapClick = onMapClick,"},{"type":"INSERT","lineNumber":163,"content":"                cameraPositionState = cameraPositionState,"},{"type":"INSERT","lineNumber":164,"content":"                mapType = mapType,"},{"type":"INSERT","lineNumber":165,"content":"                autoCenter = false // do not force camera while planning"},{"type":"INSERT","lineNumber":166,"content":"            )"},{"type":"INSERT","lineNumber":168,"content":"            // Small connection / FCU status indicator to help debugging"},{"type":"INSERT","lineNumber":169,"content":"            Column(modifier = Modifier"},{"type":"INSERT","lineNumber":170,"content":"                .align(Alignment.TopEnd)"},{"type":"INSERT","lineNumber":171,"content":"                .padding(12.dp)) {"},{"type":"INSERT","lineNumber":172,"content":"                Text(\"Connected: ${telemetryState.connected}\", style = MaterialTheme.typography.bodySmall, color = MaterialTheme.colorScheme.onSurface)"},{"type":"INSERT","lineNumber":173,"content":"                Text(\"FCU detected: ${telemetryState.fcuDetected}\", style = MaterialTheme.typography.bodySmall, color = MaterialTheme.colorScheme.onSurface)"},{"type":"INSERT","lineNumber":174,"content":"            }"},{"type":"INSERT","lineNumber":175,"content":""},{"type":"INSERT","lineNumber":176,"content":"            // Crosshair overlay at center (small so it doesn't cover the whole map)"},{"type":"INSERT","lineNumber":177,"content":"            Box(modifier = Modifier.size(36.dp).align(Alignment.Center), contentAlignment = Alignment.Center) {"},{"type":"INSERT","lineNumber":178,"content":"                Icon(Icons.Default.Add, contentDescription = \"Crosshair\", tint = MaterialTheme.colorScheme.primary, modifier = Modifier.size(28.dp))"},{"type":"INSERT","lineNumber":179,"content":"            }"},{"type":"INSERT","lineNumber":180,"content":""},{"type":"INSERT","lineNumber":181,"content":"            // Left-side floating buttons (below TopNavBar)"},{"type":"INSERT","lineNumber":182,"content":"            Column("},{"type":"INSERT","lineNumber":183,"content":"                modifier = Modifier"},{"type":"INSERT","lineNumber":184,"content":"                    .align(Alignment.TopStart)"},{"type":"INSERT","lineNumber":185,"content":"                    .padding(start = 16.dp, top = 72.dp),"},{"type":"INSERT","lineNumber":186,"content":"                verticalArrangement = Arrangement.spacedBy(12.dp)"},{"type":"INSERT","lineNumber":187,"content":"            ) {"},{"type":"INSERT","lineNumber":188,"content":"                FloatingActionButton("},{"type":"INSERT","lineNumber":189,"content":"                    onClick = { telemetryViewModel.arm() },"},{"type":"INSERT","lineNumber":190,"content":"                    modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":191,"content":"                ) {"},{"type":"INSERT","lineNumber":192,"content":"                    Icon(Icons.Default.FlightTakeoff, contentDescription = \"Arm\")"},{"type":"DELETE","lineNumber":85,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":86,"oldContent":"                        modifier = Modifier.size(56.dp)"},{"type":"DELETE","lineNumber":87,"oldContent":"                    ) {"},{"type":"DELETE","lineNumber":88,"oldContent":"                        Icon(Icons.Default.Build, contentDescription = \"Change Mode\")"},{"type":"INSERT","lineNumber":194,"content":""},{"type":"INSERT","lineNumber":195,"content":"                FloatingActionButton("},{"type":"INSERT","lineNumber":196,"content":"                    onClick = { mapType = if (mapType == MapType.SATELLITE) MapType.NORMAL else MapType.SATELLITE },"},{"type":"INSERT","lineNumber":197,"content":"                    modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":198,"content":"                ) {"},{"type":"INSERT","lineNumber":199,"content":"                    Icon(Icons.Default.Map, contentDescription = \"Toggle Map Type\")"},{"type":"INSERT","lineNumber":200,"content":"                }"},{"type":"INSERT","lineNumber":201,"content":""},{"type":"INSERT","lineNumber":202,"content":"                FloatingActionButton("},{"type":"INSERT","lineNumber":203,"content":"                    onClick = { /* TODO: handle Change Mode action */ },"},{"type":"INSERT","lineNumber":204,"content":"                    modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":205,"content":"                ) {"},{"type":"INSERT","lineNumber":206,"content":"                    Icon(Icons.Default.Build, contentDescription = \"Change Mode\")"},{"type":"INSERT","lineNumber":207,"content":"                }"},{"type":"INSERT","lineNumber":208,"content":"            }"},{"type":"INSERT","lineNumber":209,"content":""},{"type":"INSERT","lineNumber":210,"content":"            // Bottom panel: upload and list"},{"type":"INSERT","lineNumber":211,"content":"            Column(modifier = Modifier.align(Alignment.BottomCenter).padding(12.dp)) {"},{"type":"INSERT","lineNumber":212,"content":"                Button("},{"type":"INSERT","lineNumber":213,"content":"                    onClick = {"},{"type":"INSERT","lineNumber":214,"content":"                        telemetryViewModel.uploadMission(waypoints) { success, error ->"},{"type":"INSERT","lineNumber":215,"content":"                            if (success) {"},{"type":"INSERT","lineNumber":216,"content":"                                Toast.makeText(context, \"Mission uploaded\", Toast.LENGTH_SHORT).show()"},{"type":"INSERT","lineNumber":217,"content":"                                // After upload, request a readback to confirm what the FC stored"},{"type":"INSERT","lineNumber":218,"content":"                                coroutineScope.launch { "},{"type":"INSERT","lineNumber":219,"content":"                                    telemetryViewModel.readMissionFromFcu() "},{"type":"INSERT","lineNumber":220,"content":"                                    // Navigate to main screen to show uploaded waypoints"},{"type":"INSERT","lineNumber":221,"content":"                                    navController.navigate(Screen.Main.route) { "},{"type":"INSERT","lineNumber":222,"content":"                                        popUpTo(Screen.Plan.route) { inclusive = true } "},{"type":"INSERT","lineNumber":223,"content":"                                    }"},{"type":"INSERT","lineNumber":224,"content":"                                }"},{"type":"INSERT","lineNumber":225,"content":"                            } else {"},{"type":"INSERT","lineNumber":226,"content":"                                Toast.makeText(context, error ?: \"Mission upload failed\", Toast.LENGTH_SHORT).show()"},{"type":"INSERT","lineNumber":227,"content":"                            }"},{"type":"INSERT","lineNumber":228,"content":"                        }"},{"type":"INSERT","lineNumber":229,"content":"                    },"},{"type":"INSERT","lineNumber":230,"content":"                    enabled = waypoints.isNotEmpty(),"},{"type":"INSERT","lineNumber":231,"content":"                    modifier = Modifier.fillMaxWidth()"},{"type":"INSERT","lineNumber":232,"content":"                ) {"},{"type":"INSERT","lineNumber":233,"content":"                    Text(\"Upload Mission (${waypoints.size})\")"},{"type":"INSERT","lineNumber":234,"content":"                }"},{"type":"INSERT","lineNumber":235,"content":""},{"type":"INSERT","lineNumber":236,"content":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"INSERT","lineNumber":237,"content":""},{"type":"INSERT","lineNumber":238,"content":"                Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {"},{"type":"INSERT","lineNumber":239,"content":"                    Button(onClick = { telemetryViewModel.readMissionFromFcu(); Toast.makeText(context, \"Requested mission readback (check logs)\", Toast.LENGTH_SHORT).show() }) {"},{"type":"INSERT","lineNumber":240,"content":"                        Text(\"Read Mission (debug)\")"},{"type":"INSERT","lineNumber":242,"content":"                    Button(onClick = { telemetryViewModel.startMission { s, e -> Toast.makeText(context, if (s) \"Start sent\" else (e ?: \"Start failed\"), Toast.LENGTH_SHORT).show() } }) {"},{"type":"INSERT","lineNumber":243,"content":"                        Text(\"Start Mission\")"},{"type":"INSERT","lineNumber":244,"content":"                    }"},{"type":"INSERT","lineNumber":246,"content":""},{"type":"INSERT","lineNumber":247,"content":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"INSERT","lineNumber":248,"content":""},{"type":"INSERT","lineNumber":249,"content":"                // Waypoint list"},{"type":"INSERT","lineNumber":250,"content":"                Column(modifier = Modifier.fillMaxWidth().background(MaterialTheme.colorScheme.surfaceVariant).padding(8.dp)) {"},{"type":"INSERT","lineNumber":251,"content":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleSmall)"},{"type":"INSERT","lineNumber":252,"content":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"INSERT","lineNumber":253,"content":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"},{"type":"INSERT","lineNumber":254,"content":"                    }"},{"type":"INSERT","lineNumber":255,"content":"                }"},{"type":"DELETE","lineNumber":96,"oldContent":"                .padding(paddingValues)"},{"type":"DELETE","lineNumber":97,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":98,"oldContent":"            // Top navigation bar"},{"type":"DELETE","lineNumber":99,"oldContent":"            TopNavBar("},{"type":"DELETE","lineNumber":100,"oldContent":"                telemetryState = telemetryState,"},{"type":"DELETE","lineNumber":101,"oldContent":"                authViewModel = authViewModel,"},{"type":"DELETE","lineNumber":102,"oldContent":"                navController = navController"},{"type":"DELETE","lineNumber":103,"oldContent":"            )"},{"type":"DELETE","lineNumber":104,"oldContent":""},{"type":"DELETE","lineNumber":105,"oldContent":"            Box(modifier = Modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":106,"oldContent":""},{"type":"DELETE","lineNumber":107,"oldContent":"                // Left-side floating buttons (below TopNavBar)"},{"type":"DELETE","lineNumber":108,"oldContent":"                Column("},{"type":"DELETE","lineNumber":109,"oldContent":"                    modifier = Modifier"},{"type":"DELETE","lineNumber":110,"oldContent":"                        .align(Alignment.TopStart)"},{"type":"DELETE","lineNumber":111,"oldContent":"                    verticalArrangement = Arrangement.spacedBy(12.dp)"},{"type":"DELETE","lineNumber":112,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":113,"oldContent":"                        onClick = { telemetryViewModel.arm() },"},{"type":"DELETE","lineNumber":114,"oldContent":"                        modifier = Modifier.size(56.dp)"},{"type":"DELETE","lineNumber":115,"oldContent":"                    ) {"},{"type":"DELETE","lineNumber":116,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":117,"oldContent":"                        onClick = { /* TODO: handle Change Mode action */ },"}]},{"timestamp":1757998407073,"changes":[{"type":"MODIFY","lineNumber":4,"content":"import androidx.compose.foundation.layout.*","oldContent":"import androidx.compose.foundation.layout.*"},{"type":"MODIFY","lineNumber":7,"content":"import androidx.compose.runtime.*","oldContent":"import androidx.compose.runtime.*"},{"type":"MODIFY","lineNumber":10,"content":"import androidx.compose.ui.unit.dp","oldContent":"import androidx.compose.ui.unit.dp"},{"type":"DELETE","lineNumber":15,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":17,"oldContent":"fun PlanScreen("},{"type":"DELETE","lineNumber":20,"oldContent":"    telemetryViewModel: SharedViewModel,"},{"type":"DELETE","lineNumber":23,"oldContent":"    authViewModel: AuthViewModel,"},{"type":"DELETE","lineNumber":26,"oldContent":"    navController: NavHostController"},{"type":"DELETE","lineNumber":29,"oldContent":") {"},{"type":"DELETE","lineNumber":31,"oldContent":"    val telemetryState by telemetryViewModel.telemetryState.collectAsState()"},{"type":"DELETE","lineNumber":34,"oldContent":""},{"type":"DELETE","lineNumber":35,"oldContent":""},{"type":"DELETE","lineNumber":36,"oldContent":"    // State to toggle plan action buttons"},{"type":"DELETE","lineNumber":37,"oldContent":"    var showPlanActions by remember { mutableStateOf(false) }"},{"type":"DELETE","lineNumber":38,"oldContent":""},{"type":"DELETE","lineNumber":39,"oldContent":"    Scaffold("},{"type":"DELETE","lineNumber":40,"oldContent":"        floatingActionButton = {"},{"type":"INSERT","lineNumber":27,"content":"@Composable"},{"type":"INSERT","lineNumber":28,"content":"fun PlanScreen("},{"type":"INSERT","lineNumber":29,"content":"    telemetryViewModel: SharedViewModel,"},{"type":"INSERT","lineNumber":30,"content":"    authViewModel: AuthViewModel,"},{"type":"INSERT","lineNumber":31,"content":"    navController: NavHostController"},{"type":"INSERT","lineNumber":32,"content":") {"},{"type":"INSERT","lineNumber":33,"content":"    val telemetryState by telemetryViewModel.telemetryState.collectAsState()"},{"type":"DELETE","lineNumber":42,"oldContent":"            Column("},{"type":"INSERT","lineNumber":35,"content":""},{"type":"DELETE","lineNumber":45,"oldContent":"                horizontalAlignment = Alignment.End"},{"type":"DELETE","lineNumber":48,"oldContent":"            ) {"},{"type":"DELETE","lineNumber":51,"oldContent":"                // Extra buttons shown above \"Create Plan\""},{"type":"DELETE","lineNumber":52,"oldContent":"                if (showPlanActions) {"},{"type":"DELETE","lineNumber":53,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":54,"oldContent":"                        modifier = Modifier"},{"type":"INSERT","lineNumber":42,"content":""},{"type":"INSERT","lineNumber":43,"content":"    // State to toggle plan action buttons"},{"type":"INSERT","lineNumber":44,"content":"    var showPlanActions by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":45,"content":""},{"type":"DELETE","lineNumber":56,"oldContent":"                            .padding(bottom = 12.dp)"},{"type":"DELETE","lineNumber":58,"oldContent":"                    }"},{"type":"DELETE","lineNumber":60,"oldContent":""},{"type":"DELETE","lineNumber":62,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":66,"oldContent":"                        modifier = Modifier"},{"type":"DELETE","lineNumber":68,"oldContent":"                            .padding(bottom = 12.dp)"},{"type":"DELETE","lineNumber":71,"oldContent":"                            .size(56.dp)"},{"type":"DELETE","lineNumber":73,"oldContent":"                    ) {"},{"type":"DELETE","lineNumber":75,"oldContent":"                    }"},{"type":"DELETE","lineNumber":79,"oldContent":""},{"type":"DELETE","lineNumber":81,"oldContent":"                            .padding(bottom = 12.dp)"},{"type":"DELETE","lineNumber":83,"oldContent":"                            .size(56.dp)"},{"type":"DELETE","lineNumber":86,"oldContent":"                    ) {"},{"type":"DELETE","lineNumber":89,"oldContent":"                        Icon(Icons.Default.ClearAll, contentDescription = \"Clear Plan\")"},{"type":"DELETE","lineNumber":93,"oldContent":"                    }"},{"type":"DELETE","lineNumber":95,"oldContent":"}"},{"type":"DELETE","lineNumber":97,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":106,"oldContent":"                Column(modifier = Modifier.padding(16.dp)) {"},{"type":"DELETE","lineNumber":110,"oldContent":"        }"},{"type":"DELETE","lineNumber":112,"oldContent":""},{"type":"DELETE","lineNumber":115,"oldContent":"    }"},{"type":"DELETE","lineNumber":120,"oldContent":"                    }"},{"type":"DELETE","lineNumber":122,"oldContent":"                }"},{"type":"DELETE","lineNumber":124,"oldContent":"            }"},{"type":"DELETE","lineNumber":126,"oldContent":"        }"},{"type":"DELETE","lineNumber":129,"oldContent":"    }"},{"type":"DELETE","lineNumber":130,"oldContent":"}"},{"type":"DELETE","lineNumber":132,"oldContent":""},{"type":"INSERT","lineNumber":98,"content":"    Scaffold("},{"type":"INSERT","lineNumber":99,"content":"        floatingActionButton = {"},{"type":"INSERT","lineNumber":100,"content":"            Column("},{"type":"INSERT","lineNumber":101,"content":"                horizontalAlignment = Alignment.End"},{"type":"INSERT","lineNumber":102,"content":"            ) {"},{"type":"INSERT","lineNumber":103,"content":"                // Extra buttons shown above \"Create Plan\""},{"type":"INSERT","lineNumber":104,"content":"                if (showPlanActions) {"},{"type":"INSERT","lineNumber":106,"content":"                    FloatingActionButton("},{"type":"INSERT","lineNumber":116,"content":"                        modifier = Modifier"},{"type":"INSERT","lineNumber":117,"content":"                            .padding(bottom = 12.dp)"},{"type":"DELETE","lineNumber":146,"oldContent":"                }"},{"type":"DELETE","lineNumber":148,"oldContent":"                    }"},{"type":"DELETE","lineNumber":150,"oldContent":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"},{"type":"DELETE","lineNumber":151,"oldContent":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"DELETE","lineNumber":152,"oldContent":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleSmall)"},{"type":"DELETE","lineNumber":153,"oldContent":"                Column(modifier = Modifier.fillMaxWidth().background(MaterialTheme.colorScheme.surfaceVariant).padding(8.dp)) {"},{"type":"INSERT","lineNumber":121,"content":"                    }"},{"type":"INSERT","lineNumber":122,"content":""},{"type":"INSERT","lineNumber":123,"content":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":155,"oldContent":"                // Waypoint list"},{"type":"DELETE","lineNumber":157,"oldContent":""},{"type":"DELETE","lineNumber":159,"oldContent":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"DELETE","lineNumber":161,"oldContent":""},{"type":"DELETE","lineNumber":163,"oldContent":"                    }"},{"type":"DELETE","lineNumber":165,"oldContent":"                        Text(\"Start Mission\")"},{"type":"DELETE","lineNumber":166,"oldContent":"                    Button(onClick = { telemetryViewModel.startMission { s, e -> Toast.makeText(context, if (s) \"Start sent\" else (e ?: \"Start failed\"), Toast.LENGTH_SHORT).show() } }) {"},{"type":"DELETE","lineNumber":167,"oldContent":"                        Text(\"Read Mission (debug)\")"},{"type":"DELETE","lineNumber":168,"oldContent":"                    Button(onClick = { telemetryViewModel.readMissionFromFcu(); Toast.makeText(context, \"Requested mission readback (check logs)\", Toast.LENGTH_SHORT).show() }) {"},{"type":"DELETE","lineNumber":169,"oldContent":"                Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {"},{"type":"INSERT","lineNumber":130,"content":"                        modifier = Modifier"},{"type":"INSERT","lineNumber":131,"content":"                            .padding(bottom = 12.dp)"},{"type":"INSERT","lineNumber":132,"content":"                            .size(56.dp)"},{"type":"INSERT","lineNumber":133,"content":"                    ) {"},{"type":"INSERT","lineNumber":135,"content":"                    }"},{"type":"DELETE","lineNumber":172,"oldContent":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"DELETE","lineNumber":173,"oldContent":""},{"type":"DELETE","lineNumber":175,"oldContent":"                }"},{"type":"DELETE","lineNumber":177,"oldContent":"                    Text(\"Upload Mission (${waypoints.size})\")"},{"type":"DELETE","lineNumber":179,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":180,"oldContent":"                    modifier = Modifier.fillMaxWidth()"},{"type":"DELETE","lineNumber":181,"oldContent":"                    enabled = waypoints.isNotEmpty(),"},{"type":"DELETE","lineNumber":182,"oldContent":"                    },"},{"type":"DELETE","lineNumber":183,"oldContent":"                        }"},{"type":"DELETE","lineNumber":184,"oldContent":"                            }"},{"type":"INSERT","lineNumber":140,"content":"                            .padding(bottom = 12.dp)"},{"type":"INSERT","lineNumber":141,"content":"                            .size(56.dp)"},{"type":"INSERT","lineNumber":142,"content":"                    ) {"},{"type":"INSERT","lineNumber":143,"content":"                        Icon(Icons.Default.ClearAll, contentDescription = \"Clear Plan\")"},{"type":"INSERT","lineNumber":144,"content":"                    }"},{"type":"DELETE","lineNumber":186,"oldContent":"                                Toast.makeText(context, error ?: \"Mission upload failed\", Toast.LENGTH_SHORT).show()"},{"type":"DELETE","lineNumber":188,"oldContent":"                            } else {"},{"type":"DELETE","lineNumber":189,"oldContent":"                                }"},{"type":"DELETE","lineNumber":190,"oldContent":"                                    }"},{"type":"INSERT","lineNumber":147,"content":"                // Main Create Plan button"},{"type":"INSERT","lineNumber":148,"content":"                FloatingActionButton("},{"type":"DELETE","lineNumber":192,"oldContent":"                                        popUpTo(Screen.Plan.route) { inclusive = true } "},{"type":"DELETE","lineNumber":194,"oldContent":"                                    navController.navigate(Screen.Main.route) { "},{"type":"DELETE","lineNumber":196,"oldContent":"                                    // Navigate to main screen to show uploaded waypoints"},{"type":"DELETE","lineNumber":198,"oldContent":"                                    telemetryViewModel.readMissionFromFcu() "},{"type":"DELETE","lineNumber":200,"oldContent":"                                coroutineScope.launch { "},{"type":"DELETE","lineNumber":201,"oldContent":"                                // After upload, request a readback to confirm what the FC stored"},{"type":"DELETE","lineNumber":202,"oldContent":"                                Toast.makeText(context, \"Mission uploaded\", Toast.LENGTH_SHORT).show()"},{"type":"INSERT","lineNumber":154,"content":"            }"},{"type":"INSERT","lineNumber":155,"content":"        }"},{"type":"DELETE","lineNumber":204,"oldContent":"                            if (success) {"},{"type":"DELETE","lineNumber":206,"oldContent":"                        telemetryViewModel.uploadMission(waypoints) { success, error ->"},{"type":"DELETE","lineNumber":208,"oldContent":"                    onClick = {"},{"type":"DELETE","lineNumber":210,"oldContent":"                Button("},{"type":"DELETE","lineNumber":212,"oldContent":"            Column(modifier = Modifier.align(Alignment.BottomCenter).padding(12.dp)) {"},{"type":"DELETE","lineNumber":214,"oldContent":"            // Bottom panel: upload and list"},{"type":"DELETE","lineNumber":216,"oldContent":""},{"type":"DELETE","lineNumber":218,"oldContent":"            }"},{"type":"DELETE","lineNumber":220,"oldContent":"                }"},{"type":"DELETE","lineNumber":222,"oldContent":"                    Icon(Icons.Default.Build, contentDescription = \"Change Mode\")"},{"type":"DELETE","lineNumber":224,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":225,"oldContent":"                    modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":167,"content":""},{"type":"DELETE","lineNumber":227,"oldContent":"                    onClick = { /* TODO: handle Change Mode action */ },"},{"type":"DELETE","lineNumber":229,"oldContent":"                FloatingActionButton("},{"type":"DELETE","lineNumber":231,"oldContent":""},{"type":"DELETE","lineNumber":233,"oldContent":"                }"},{"type":"DELETE","lineNumber":235,"oldContent":"                    Icon(Icons.Default.Map, contentDescription = \"Toggle Map Type\")"},{"type":"DELETE","lineNumber":237,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":239,"oldContent":"                    modifier = Modifier.size(56.dp)"},{"type":"DELETE","lineNumber":241,"oldContent":"                    onClick = { mapType = if (mapType == MapType.SATELLITE) MapType.NORMAL else MapType.SATELLITE },"},{"type":"DELETE","lineNumber":243,"oldContent":"                FloatingActionButton("},{"type":"DELETE","lineNumber":245,"oldContent":""},{"type":"DELETE","lineNumber":247,"oldContent":"                    Icon(Icons.Default.FlightTakeoff, contentDescription = \"Arm\")"},{"type":"DELETE","lineNumber":249,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":251,"oldContent":"                    modifier = Modifier.size(56.dp)"},{"type":"DELETE","lineNumber":253,"oldContent":"                    onClick = { telemetryViewModel.arm() },"},{"type":"DELETE","lineNumber":255,"oldContent":"                FloatingActionButton("},{"type":"DELETE","lineNumber":257,"oldContent":"            ) {"},{"type":"DELETE","lineNumber":259,"oldContent":"                verticalArrangement = Arrangement.spacedBy(12.dp)"},{"type":"INSERT","lineNumber":186,"content":"                verticalArrangement = Arrangement.spacedBy(12.dp)"},{"type":"INSERT","lineNumber":187,"content":"            ) {"},{"type":"INSERT","lineNumber":188,"content":"                FloatingActionButton("},{"type":"INSERT","lineNumber":189,"content":"                    onClick = { telemetryViewModel.arm() },"},{"type":"INSERT","lineNumber":190,"content":"                    modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":191,"content":"                ) {"},{"type":"INSERT","lineNumber":192,"content":"                    Icon(Icons.Default.FlightTakeoff, contentDescription = \"Arm\")"},{"type":"INSERT","lineNumber":193,"content":"                }"},{"type":"INSERT","lineNumber":194,"content":""},{"type":"INSERT","lineNumber":195,"content":"                FloatingActionButton("},{"type":"INSERT","lineNumber":196,"content":"                    onClick = { mapType = if (mapType == MapType.SATELLITE) MapType.NORMAL else MapType.SATELLITE },"},{"type":"INSERT","lineNumber":197,"content":"                    modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":198,"content":"                ) {"},{"type":"INSERT","lineNumber":199,"content":"                    Icon(Icons.Default.Map, contentDescription = \"Toggle Map Type\")"},{"type":"INSERT","lineNumber":200,"content":"                }"},{"type":"INSERT","lineNumber":201,"content":""},{"type":"INSERT","lineNumber":202,"content":"                FloatingActionButton("},{"type":"INSERT","lineNumber":203,"content":"                    onClick = { /* TODO: handle Change Mode action */ },"},{"type":"INSERT","lineNumber":204,"content":"                    modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":205,"content":"                ) {"},{"type":"INSERT","lineNumber":206,"content":"                    Icon(Icons.Default.Build, contentDescription = \"Change Mode\")"},{"type":"INSERT","lineNumber":207,"content":"                }"},{"type":"INSERT","lineNumber":208,"content":"            }"},{"type":"INSERT","lineNumber":209,"content":""},{"type":"INSERT","lineNumber":210,"content":"            // Bottom panel: upload and list"},{"type":"INSERT","lineNumber":211,"content":"            Column(modifier = Modifier.align(Alignment.BottomCenter).padding(12.dp)) {"},{"type":"INSERT","lineNumber":212,"content":"                Button("},{"type":"INSERT","lineNumber":213,"content":"                    onClick = {"},{"type":"INSERT","lineNumber":214,"content":"                        telemetryViewModel.uploadMission(waypoints) { success, error ->"},{"type":"INSERT","lineNumber":215,"content":"                            if (success) {"},{"type":"INSERT","lineNumber":216,"content":"                                Toast.makeText(context, \"Mission uploaded\", Toast.LENGTH_SHORT).show()"},{"type":"INSERT","lineNumber":217,"content":"                                // After upload, request a readback to confirm what the FC stored"},{"type":"INSERT","lineNumber":218,"content":"                                coroutineScope.launch {"},{"type":"INSERT","lineNumber":219,"content":"                                    telemetryViewModel.readMissionFromFcu()"},{"type":"INSERT","lineNumber":220,"content":"                                    // Navigate to main screen to show uploaded waypoints"},{"type":"INSERT","lineNumber":221,"content":"                                    navController.navigate(Screen.Main.route) {"},{"type":"INSERT","lineNumber":222,"content":"                                        popUpTo(Screen.Plan.route) { inclusive = true }"},{"type":"INSERT","lineNumber":223,"content":"                                    }"},{"type":"INSERT","lineNumber":224,"content":"                                }"},{"type":"INSERT","lineNumber":225,"content":"                            } else {"},{"type":"INSERT","lineNumber":226,"content":"                                Toast.makeText(context, error ?: \"Mission upload failed\", Toast.LENGTH_SHORT).show()"},{"type":"INSERT","lineNumber":227,"content":"                            }"},{"type":"INSERT","lineNumber":228,"content":"                        }"},{"type":"INSERT","lineNumber":229,"content":"                    },"},{"type":"INSERT","lineNumber":230,"content":"                    enabled = waypoints.isNotEmpty(),"},{"type":"INSERT","lineNumber":231,"content":"                    modifier = Modifier.fillMaxWidth()"},{"type":"INSERT","lineNumber":232,"content":"                ) {"},{"type":"INSERT","lineNumber":233,"content":"                    Text(\"Upload Mission (${waypoints.size})\")"},{"type":"INSERT","lineNumber":234,"content":"                }"},{"type":"INSERT","lineNumber":235,"content":""},{"type":"INSERT","lineNumber":236,"content":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"INSERT","lineNumber":237,"content":""},{"type":"INSERT","lineNumber":238,"content":"                Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {"},{"type":"INSERT","lineNumber":239,"content":"                    Button(onClick = { telemetryViewModel.readMissionFromFcu(); Toast.makeText(context, \"Requested mission readback (check logs)\", Toast.LENGTH_SHORT).show() }) {"},{"type":"INSERT","lineNumber":240,"content":"                        Text(\"Read Mission (debug)\")"},{"type":"INSERT","lineNumber":241,"content":"                    }"},{"type":"INSERT","lineNumber":242,"content":"                    Button(onClick = { telemetryViewModel.startMission { s, e -> Toast.makeText(context, if (s) \"Start sent\" else (e ?: \"Start failed\"), Toast.LENGTH_SHORT).show() } }) {"},{"type":"INSERT","lineNumber":243,"content":"                        Text(\"Start Mission\")"},{"type":"INSERT","lineNumber":244,"content":"                    }"},{"type":"INSERT","lineNumber":245,"content":"                }"},{"type":"INSERT","lineNumber":246,"content":""},{"type":"INSERT","lineNumber":247,"content":"                Spacer(modifier = Modifier.height(8.dp))"},{"type":"INSERT","lineNumber":248,"content":""},{"type":"INSERT","lineNumber":249,"content":"                // Waypoint list"},{"type":"INSERT","lineNumber":250,"content":"                Column(modifier = Modifier.fillMaxWidth().background(MaterialTheme.colorScheme.surfaceVariant).padding(8.dp)) {"},{"type":"INSERT","lineNumber":251,"content":"                    Text(\"Waypoints:\", style = MaterialTheme.typography.titleSmall)"},{"type":"INSERT","lineNumber":252,"content":"                    waypoints.forEachIndexed { idx, wp ->"},{"type":"INSERT","lineNumber":253,"content":"                        Text(\"#${idx + 1}: Lat=${wp.x / 1e7}, Lon=${wp.y / 1e7}, Alt=${wp.z}\")"},{"type":"INSERT","lineNumber":254,"content":"                    }"},{"type":"INSERT","lineNumber":255,"content":"                }"},{"type":"INSERT","lineNumber":256,"content":"            }"},{"type":"INSERT","lineNumber":257,"content":"        }"},{"type":"INSERT","lineNumber":258,"content":"    }"},{"type":"INSERT","lineNumber":259,"content":"}"},{"type":"INSERT","lineNumber":260,"content":""}]},{"timestamp":1758011006874,"changes":[{"type":"INSERT","lineNumber":3,"content":"import androidx.compose.foundation.background"},{"type":"DELETE","lineNumber":4,"oldContent":"import androidx.compose.foundation.layout.*"},{"type":"INSERT","lineNumber":6,"content":"import androidx.compose.material3.FloatingActionButton"},{"type":"DELETE","lineNumber":7,"oldContent":"import androidx.compose.runtime.*"},{"type":"INSERT","lineNumber":9,"content":"import androidx.compose.ui.Modifier"},{"type":"DELETE","lineNumber":10,"oldContent":"import androidx.compose.ui.unit.dp"},{"type":"DELETE","lineNumber":22,"oldContent":"@Composable"},{"type":"MODIFY","lineNumber":24,"content":"import com.example.aerogcsclone.navigation.Screen","oldContent":"fun PlanScreen("},{"type":"INSERT","lineNumber":25,"content":"import kotlinx.coroutines.launch"},{"type":"INSERT","lineNumber":26,"content":""},{"type":"INSERT","lineNumber":27,"content":"@Composable"},{"type":"INSERT","lineNumber":28,"content":"fun PlanScreen("},{"type":"DELETE","lineNumber":28,"oldContent":"import com.example.aerogcsclone.navigation.Screen"},{"type":"DELETE","lineNumber":31,"oldContent":"import kotlinx.coroutines.launch"},{"type":"DELETE","lineNumber":33,"oldContent":""},{"type":"DELETE","lineNumber":34,"oldContent":""},{"type":"DELETE","lineNumber":37,"oldContent":"    // State to toggle plan action buttons"},{"type":"DELETE","lineNumber":39,"oldContent":"    var showPlanActions by remember { mutableStateOf(false) }"},{"type":"MODIFY","lineNumber":42,"content":"","oldContent":""},{"type":"INSERT","lineNumber":43,"content":"    // State to toggle plan action buttons"},{"type":"INSERT","lineNumber":44,"content":"    var showPlanActions by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":45,"content":""},{"type":"DELETE","lineNumber":72,"oldContent":"    Scaffold("},{"type":"DELETE","lineNumber":74,"oldContent":"        floatingActionButton = {"},{"type":"DELETE","lineNumber":76,"oldContent":"            Column("},{"type":"DELETE","lineNumber":78,"oldContent":"                horizontalAlignment = Alignment.End"},{"type":"DELETE","lineNumber":80,"oldContent":"            ) {"},{"type":"DELETE","lineNumber":82,"oldContent":"                // Extra buttons shown above \"Create Plan\""},{"type":"DELETE","lineNumber":84,"oldContent":"                if (showPlanActions) {"},{"type":"DELETE","lineNumber":87,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":94,"oldContent":"                        modifier = Modifier"},{"type":"DELETE","lineNumber":96,"oldContent":"                            .padding(bottom = 12.dp)"},{"type":"DELETE","lineNumber":100,"oldContent":"                    }"},{"type":"DELETE","lineNumber":102,"oldContent":""},{"type":"DELETE","lineNumber":103,"oldContent":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":108,"oldContent":"                        modifier = Modifier"},{"type":"DELETE","lineNumber":109,"oldContent":"                            .padding(bottom = 12.dp)"},{"type":"DELETE","lineNumber":111,"oldContent":"                            .size(56.dp)"},{"type":"DELETE","lineNumber":112,"oldContent":"                    ) {"},{"type":"DELETE","lineNumber":115,"oldContent":"                    }"},{"type":"INSERT","lineNumber":98,"content":"    Scaffold("},{"type":"INSERT","lineNumber":99,"content":"        floatingActionButton = {"},{"type":"INSERT","lineNumber":100,"content":"            Column("},{"type":"INSERT","lineNumber":101,"content":"                horizontalAlignment = Alignment.End"},{"type":"INSERT","lineNumber":102,"content":"            ) {"},{"type":"INSERT","lineNumber":103,"content":"                // Extra buttons shown above \"Create Plan\""},{"type":"INSERT","lineNumber":104,"content":"                if (showPlanActions) {"},{"type":"INSERT","lineNumber":106,"content":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":121,"oldContent":"                            .padding(bottom = 12.dp)"},{"type":"DELETE","lineNumber":123,"oldContent":"                            .size(56.dp)"},{"type":"DELETE","lineNumber":125,"oldContent":"                    ) {"},{"type":"DELETE","lineNumber":127,"oldContent":"                        Icon(Icons.Default.ClearAll, contentDescription = \"Clear Plan\")"},{"type":"DELETE","lineNumber":129,"oldContent":"                    }"},{"type":"INSERT","lineNumber":116,"content":"                        modifier = Modifier"},{"type":"INSERT","lineNumber":117,"content":"                            .padding(bottom = 12.dp)"},{"type":"DELETE","lineNumber":132,"oldContent":"                // Main Create Plan button"},{"type":"DELETE","lineNumber":134,"oldContent":"                FloatingActionButton("},{"type":"DELETE","lineNumber":136,"oldContent":"            }"},{"type":"INSERT","lineNumber":121,"content":"                    }"},{"type":"INSERT","lineNumber":122,"content":""},{"type":"INSERT","lineNumber":123,"content":"                    FloatingActionButton("},{"type":"DELETE","lineNumber":138,"oldContent":"        }"},{"type":"DELETE","lineNumber":144,"oldContent":""},{"type":"INSERT","lineNumber":130,"content":"                        modifier = Modifier"},{"type":"INSERT","lineNumber":131,"content":"                            .padding(bottom = 12.dp)"},{"type":"INSERT","lineNumber":132,"content":"                            .size(56.dp)"},{"type":"INSERT","lineNumber":133,"content":"                    ) {"},{"type":"INSERT","lineNumber":135,"content":"                    }"},{"type":"INSERT","lineNumber":140,"content":"                            .padding(bottom = 12.dp)"},{"type":"INSERT","lineNumber":141,"content":"                            .size(56.dp)"},{"type":"INSERT","lineNumber":142,"content":"                    ) {"},{"type":"INSERT","lineNumber":143,"content":"                        Icon(Icons.Default.ClearAll, contentDescription = \"Clear Plan\")"},{"type":"INSERT","lineNumber":144,"content":"                    }"},{"type":"INSERT","lineNumber":146,"content":""},{"type":"INSERT","lineNumber":147,"content":"                // Main Create Plan button"},{"type":"INSERT","lineNumber":148,"content":"                FloatingActionButton("},{"type":"INSERT","lineNumber":149,"content":"                    onClick = { showPlanActions = !showPlanActions },"},{"type":"INSERT","lineNumber":150,"content":"                    modifier = Modifier.size(56.dp)"},{"type":"INSERT","lineNumber":151,"content":"                ) {"},{"type":"INSERT","lineNumber":152,"content":"                    Icon(Icons.Default.Menu, contentDescription = \"Create Plan\")"},{"type":"INSERT","lineNumber":153,"content":"                }"},{"type":"INSERT","lineNumber":154,"content":"            }"},{"type":"INSERT","lineNumber":155,"content":"        }"},{"type":"INSERT","lineNumber":156,"content":"    ) { paddingValues ->"},{"type":"INSERT","lineNumber":157,"content":"        Box(modifier = Modifier.fillMaxSize().padding(paddingValues)) {"},{"type":"INSERT","lineNumber":158,"content":"            // Map background - pass points and onMapClick callback, camera state, and mapType"},{"type":"INSERT","lineNumber":159,"content":"            GcsMap("},{"type":"INSERT","lineNumber":160,"content":"                telemetryState = telemetryState,"},{"type":"INSERT","lineNumber":161,"content":"                points = points,"},{"type":"INSERT","lineNumber":162,"content":"                onMapClick = onMapClick,"},{"type":"INSERT","lineNumber":163,"content":"                cameraPositionState = cameraPositionState,"},{"type":"INSERT","lineNumber":164,"content":"                mapType = mapType,"},{"type":"INSERT","lineNumber":165,"content":"                autoCenter = false // do not force camera while planning"},{"type":"INSERT","lineNumber":166,"content":"            )"},{"type":"INSERT","lineNumber":167,"content":""},{"type":"INSERT","lineNumber":168,"content":"            // Small connection / FCU status indicator to help debugging"},{"type":"INSERT","lineNumber":169,"content":"            Column(modifier = Modifier"},{"type":"INSERT","lineNumber":170,"content":"                .align(Alignment.TopEnd)"},{"type":"INSERT","lineNumber":171,"content":"                .padding(12.dp)) {"},{"type":"INSERT","lineNumber":172,"content":"                Text(\"Connected: ${telemetryState.connected}\", style = MaterialTheme.typography.bodySmall, color = MaterialTheme.colorScheme.onSurface)"},{"type":"INSERT","lineNumber":173,"content":"                Text(\"FCU detected: ${telemetryState.fcuDetected}\", style = MaterialTheme.typography.bodySmall, color = MaterialTheme.colorScheme.onSurface)"},{"type":"INSERT","lineNumber":174,"content":"            }"},{"type":"INSERT","lineNumber":175,"content":""},{"type":"INSERT","lineNumber":176,"content":"            // Crosshair overlay at center (small so it doesn't cover the whole map)"},{"type":"INSERT","lineNumber":177,"content":"            Box(modifier = Modifier.size(36.dp).align(Alignment.Center), contentAlignment = Alignment.Center) {"},{"type":"INSERT","lineNumber":178,"content":"                Icon(Icons.Default.Add, contentDescription = \"Crosshair\", tint = MaterialTheme.colorScheme.primary, modifier = Modifier.size(28.dp))"},{"type":"INSERT","lineNumber":179,"content":"            }"},{"type":"INSERT","lineNumber":180,"content":""},{"type":"INSERT","lineNumber":181,"content":"            // Left-side floating buttons (below TopNavBar)"},{"type":"INSERT","lineNumber":182,"content":"            Column("},{"type":"INSERT","lineNumber":183,"content":"                modifier = Modifier"},{"type":"INSERT","lineNumber":184,"content":"                    .align(Alignment.TopStart)"},{"type":"INSERT","lineNumber":185,"content":"                    .padding(start = 16.dp, top = 72.dp),"},{"type":"DELETE","lineNumber":153,"oldContent":""},{"type":"DELETE","lineNumber":158,"oldContent":"                    onClick = { showPlanActions = !showPlanActions },"},{"type":"DELETE","lineNumber":161,"oldContent":"                    modifier = Modifier.size(56.dp)"},{"type":"DELETE","lineNumber":164,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":167,"oldContent":"                    Icon(Icons.Default.Menu, contentDescription = \"Create Plan\")"},{"type":"DELETE","lineNumber":171,"oldContent":"                }"},{"type":"DELETE","lineNumber":175,"oldContent":"    ) { paddingValues ->"},{"type":"DELETE","lineNumber":178,"oldContent":"        Box(modifier = Modifier.fillMaxSize().padding(paddingValues)) {"},{"type":"DELETE","lineNumber":181,"oldContent":"            // Map background - pass points and onMapClick callback, camera state, and mapType"},{"type":"DELETE","lineNumber":184,"oldContent":"            GcsMap("},{"type":"DELETE","lineNumber":187,"oldContent":"                telemetryState = telemetryState,"},{"type":"DELETE","lineNumber":190,"oldContent":"                points = points,"},{"type":"DELETE","lineNumber":193,"oldContent":"                onMapClick = onMapClick,"},{"type":"DELETE","lineNumber":196,"oldContent":"                cameraPositionState = cameraPositionState,"},{"type":"DELETE","lineNumber":199,"oldContent":"                mapType = mapType,"},{"type":"DELETE","lineNumber":202,"oldContent":"                autoCenter = false // do not force camera while planning"},{"type":"DELETE","lineNumber":205,"oldContent":"            )"},{"type":"DELETE","lineNumber":209,"oldContent":"            // Small connection / FCU status indicator to help debugging"},{"type":"DELETE","lineNumber":212,"oldContent":"            Column(modifier = Modifier"},{"type":"DELETE","lineNumber":215,"oldContent":"                .align(Alignment.TopEnd)"},{"type":"DELETE","lineNumber":218,"oldContent":"                .padding(12.dp)) {"},{"type":"DELETE","lineNumber":221,"oldContent":"                Text(\"Connected: ${telemetryState.connected}\", style = MaterialTheme.typography.bodySmall, color = MaterialTheme.colorScheme.onSurface)"},{"type":"DELETE","lineNumber":224,"oldContent":"                Text(\"FCU detected: ${telemetryState.fcuDetected}\", style = MaterialTheme.typography.bodySmall, color = MaterialTheme.colorScheme.onSurface)"},{"type":"DELETE","lineNumber":227,"oldContent":"            }"},{"type":"DELETE","lineNumber":230,"oldContent":""},{"type":"DELETE","lineNumber":233,"oldContent":"            // Crosshair overlay at center (small so it doesn't cover the whole map)"},{"type":"DELETE","lineNumber":236,"oldContent":"            Box(modifier = Modifier.size(36.dp).align(Alignment.Center), contentAlignment = Alignment.Center) {"},{"type":"DELETE","lineNumber":239,"oldContent":"                Icon(Icons.Default.Add, contentDescription = \"Crosshair\", tint = MaterialTheme.colorScheme.primary, modifier = Modifier.size(28.dp))"},{"type":"DELETE","lineNumber":242,"oldContent":"            }"},{"type":"DELETE","lineNumber":245,"oldContent":""},{"type":"DELETE","lineNumber":248,"oldContent":"            // Left-side floating buttons (below TopNavBar)"},{"type":"DELETE","lineNumber":251,"oldContent":"            Column("},{"type":"DELETE","lineNumber":254,"oldContent":"                modifier = Modifier"},{"type":"DELETE","lineNumber":257,"oldContent":"                    .align(Alignment.TopStart)"},{"type":"DELETE","lineNumber":260,"oldContent":"                    .padding(start = 16.dp, top = 72.dp),"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/Telemetry/TelemetryRepository.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/Telemetry/TelemetryRepository.kt","baseContent":"package com.example.aerogcsclone.Telemetry\n\nimport android.util.Log\nimport com.divpundir.mavlink.adapters.coroutines.asCoroutine\nimport com.divpundir.mavlink.adapters.coroutines.tryConnect\nimport com.divpundir.mavlink.adapters.coroutines.trySendUnsignedV2\nimport com.divpundir.mavlink.api.wrap\nimport com.divpundir.mavlink.connection.StreamState\nimport com.divpundir.mavlink.connection.tcp.TcpClientMavConnection\nimport com.divpundir.mavlink.definitions.common.*\nimport com.divpundir.mavlink.definitions.minimal.*\nimport com.google.android.gms.maps.model.LatLng\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.flow.*\nimport kotlinx.coroutines.isActive\nimport kotlinx.coroutines.launch\n\nclass MavlinkTelemetryRepository(\n    private val host: String,\n    private val port: Int\n) {\n    private var mission by mutableStateOf<List<LatLng>>(emptyList())\n    private val gcsSystemId: UByte = 200u\n    private val gcsComponentId: UByte = 1u\n    private val _state = MutableStateFlow(TelemetryState())\n    val state: StateFlow<TelemetryState> = _state.asStateFlow()\n\n    private var fcuSystemId: UByte = 0u\n    private var fcuComponentId: UByte = 0u\n\n    // Diagnostic info\n    private val _lastFailure = MutableStateFlow<Throwable?>(null)\n    val lastFailure: StateFlow<Throwable?> = _lastFailure.asStateFlow()\n\n    // Connection\n    private val connection = TcpClientMavConnection(host, port, CommonDialect).asCoroutine()\n\n    fun start() {\n        val scope = AppScope\n\n        suspend fun reconnect(scope: kotlinx.coroutines.CoroutineScope) {\n            while (scope.isActive) {\n                try {\n                    if (connection.tryConnect(scope)) {\n                        return // Exit on successful connection\n                    }\n                } catch (e: Exception) {\n                    Log.e(\"MavlinkRepo\", \"Connection attempt failed\", e)\n                    _lastFailure.value = e\n                }\n                delay(1000)\n            }\n        }\n\n        // Manage connection state + reconnects\n        scope.launch {\n            reconnect(this) // Initial connection attempt\n            connection.streamState.collect { st ->\n                when (st) {\n                    is StreamState.Active -> {\n                        if (!state.value.connected) {\n                            Log.i(\"MavlinkRepo\", \"Connection Active\")\n                            _state.update { it.copy(connected = true) }\n                        }\n                    }\n                    is StreamState.Inactive -> {\n                        if (state.value.connected) {\n                            Log.i(\"MavlinkRepo\", \"Connection Inactive, reconnecting...\")\n                            _state.update { it.copy(connected = false, fcuDetected = false) }\n                            reconnect(this)\n                        }\n                    }\n                }\n            }\n        }\n\n        // Send GCS heartbeat\n        scope.launch {\n            val heartbeat = Heartbeat(\n                type = MavType.GCS.wrap(),\n                autopilot = MavAutopilot.INVALID.wrap(),\n                baseMode = emptyList<MavModeFlag>().wrap(),\n                customMode = 0u,\n                mavlinkVersion = 3u\n            )\n            while (isActive) {\n                if (state.value.connected) {\n                    try {\n                        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, heartbeat)\n                    } catch (e: Exception) {\n                        Log.e(\"MavlinkRepo\", \"Failed to send heartbeat\", e)\n                        _lastFailure.value = e\n                    }\n                }\n                delay(1000)\n            }\n        }\n\n        // Shared message stream\n        val mavFrameStream = connection.mavFrame\n            .shareIn(scope, SharingStarted.Eagerly, replay = 0)\n\n        // Log raw messages\n        scope.launch {\n            mavFrameStream.collect {\n                Log.d(\"MavlinkRepo\", \"Frame: ${it.message.javaClass.simpleName} (sysId=${it.systemId}, compId=${it.componentId})\")\n            }\n        }\n\n        // Detect FCU\n        scope.launch {\n            mavFrameStream\n                .filter { it.message is Heartbeat && (it.message as Heartbeat).type != MavType.GCS.wrap() }\n                .collect {\n                    if (!state.value.fcuDetected) {\n                        fcuSystemId = it.systemId\n                        fcuComponentId = it.componentId\n                        Log.i(\"MavlinkRepo\", \"FCU detected sysId=$fcuSystemId compId=$fcuComponentId\")\n                        _state.update { it.copy(fcuDetected = true) }\n\n                        // Set message intervals\n                        launch {\n                            suspend fun setMessageRate(messageId: UInt, hz: Float) {\n                                val intervalUsec = if (hz <= 0f) 0f else (1_000_000f / hz)\n                                val cmd = CommandLong(\n                                    targetSystem = fcuSystemId,\n                                    targetComponent = fcuComponentId,\n                                    command = MavCmd.SET_MESSAGE_INTERVAL.wrap(),\n                                    confirmation = 0u,\n                                    param1 = messageId.toFloat(),\n                                    param2 = intervalUsec,\n                                    param3 = 0f,\n                                    param4 = 0f,\n                                    param5 = 0f,\n                                    param6 = 0f,\n                                    param7 = 0f\n                                )\n                                try {\n                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, cmd)\n                                } catch (e: Exception) {\n                                    Log.e(\"MavlinkRepo\", \"Failed to send SET_MESSAGE_INTERVAL\", e)\n                                    _lastFailure.value = e\n                                }\n                            }\n\n                            setMessageRate(1u, 1f)   // SYS_STATUS\n                            setMessageRate(24u, 1f)  // GPS_RAW_INT\n                            setMessageRate(33u, 5f)  // GLOBAL_POSITION_INT\n                            setMessageRate(74u, 5f)  // VFR_HUD\n                            setMessageRate(147u, 1f) // BATTERY_STATUS\n                        }\n                    }\n                }\n        }\n\n        // Collectors\n\n        // VFR_HUD\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .filterIsInstance<VfrHud>()\n                .collect { hud ->\n                    _state.update {\n                        it.copy(\n                            altitudeMsl = hud.alt,\n                            airspeed = hud.airspeed.takeIf { v -> v > 0f },\n                            groundspeed = hud.groundspeed.takeIf { v -> v > 0f }\n                        )\n                    }\n                }\n        }\n\n        // GLOBAL_POSITION_INT\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .filterIsInstance<GlobalPositionInt>()\n                .collect { gp ->\n                    val altAMSLm = gp.alt / 1000f\n                    val relAltM = gp.relativeAlt / 1000f\n                    val lat = gp.lat.takeIf { it != Int.MIN_VALUE }?.let { it / 10_000_000.0 }\n                    val lon = gp.lon.takeIf { it != Int.MIN_VALUE }?.let { it / 10_000_000.0 }\n                    _state.update {\n                        it.copy(\n                            altitudeMsl = altAMSLm,\n                            altitudeRelative = relAltM,\n                            latitude = lat,\n                            longitude = lon\n                        )\n                    }\n                }\n        }\n\n        // BATTERY_STATUS\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .filterIsInstance<BatteryStatus>()\n                .collect { b ->\n                    val currentA = if (b.currentBattery.toInt() == -1) null else b.currentBattery / 100f\n                    _state.update { it.copy(currentA = currentA) }\n                }\n        }\n        //HEARTBEAT for mode, armed, armable\n        scope.launch {\n            mavFrameStream\n                .filter{ frame-> state.value.fcuDetected && frame.systemId == fcuSystemId }\n                .map{frame -> frame.message}\n                .filterIsInstance<Heartbeat>()\n                .collect{ hb->\n                    val armed = (hb.baseMode.value and MavModeFlag.SAFETY_ARMED.value )!= 0u\n                    val mode = when (hb.customMode) {\n                        0u -> \"Stabilize\"\n                        1u -> \"Acro\"\n                        2u -> \"Alt Hold\"\n                        3u -> \"Auto\"\n                        4u -> \"Guided\"\n                        5u -> \"Loiter\"\n                        6u -> \"RTL\"\n                        7u -> \"Circle\"\n                        9u -> \"Land\"\n                        11u -> \"Drift\"\n                        13u -> \"Sport\"\n                        14u -> \"Flip\"\n                        15u -> \"AutoTune\"\n                        16u -> \"Pos Hold\"\n                        17u -> \"Brake\"\n                        18u -> \"Throw\"\n                        19u -> \"Avoid_ADSB\"\n                        20u -> \"Guided_NoGPS\"\n                        21u -> \"Smart_RTL\"\n                        22u -> \"FlowHold\"\n                        23u -> \"Follow\"\n                        24u -> \"ZigZag\"\n                        25u -> \"SystemID\"\n                        26u -> \"AutoRotate\"\n                        27u -> \"Auto_RTL\"\n                        else -> \"Unknown\"\n                    }\n                    _state.update { it.copy(armed=armed , mode = mode)}\n                }\n        }\n        // SYS_STATUS\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .filterIsInstance<SysStatus>()\n                .collect { s ->\n                    val vBatt = if (s.voltageBattery.toUInt() == 0xFFFFu) null else s.voltageBattery.toFloat() / 1000f\n                    val pct = if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()\n                    val SENSOR_3D_GYRO = 1u\n                    val present = (s.onboardControlSensorsPresent.value and SENSOR_3D_GYRO) != 0u\n                    val enabled = (s.onboardControlSensorsEnabled.value and SENSOR_3D_GYRO) != 0u\n                    val healthy = (s.onboardControlSensorsHealth.value and SENSOR_3D_GYRO) != 0u\n                    val armable = present && enabled && healthy\n                    _state.update { it.copy(voltage = vBatt, batteryPercent = pct , armable = armable) }\n                }\n        }\n\n        // GPS_RAW_INT\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .filterIsInstance<GpsRawInt>()\n                .collect { gps ->\n                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }\n                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f\n                    _state.update { it.copy(sats = sats, hdop = hdop) }\n                }\n        }\n\n        // Mission handling\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .collect { message ->\n                    when (message) {\n                        is MissionRequest -> {\n                            val seq = message.seq.toInt()\n                            if (seq < mission.size) {\n                                val waypoint = mission[seq]\n                                val missionItem = MissionItemInt(\n                                    targetSystem = fcuSystemId,\n                                    targetComponent = fcuComponentId,\n                                    seq = seq.toUShort(),\n                                    frame = MavFrame.GLOBAL_RELATIVE_ALT.wrap(),\n                                    command = MavCmd.NAV_WAYPOINT.wrap(),\n                                    current = if (seq == 0) 1u else 0u,\n                                    autocontinue = 1u,\n                                    param1 = 0f,\n                                    param2 = 0f,\n                                    param3 = 0f,\n                                    param4 = 0f,\n                                    x = (waypoint.latitude * 1e7).toInt(),\n                                    y = (waypoint.longitude * 1e7).toInt(),\n                                    z = 100f, // Default altitude\n                                    missionType = MavMissionType.MISSION.wrap()\n                                )\n                                try {\n                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)\n                                } catch (e: Exception) {\n                                    Log.e(\"MavlinkRepo\", \"Failed to send mission item\", e)\n                                    _lastFailure.value = e\n                                }\n                            }\n                        }\n                        is MissionAck -> {\n                            Log.i(\"MavlinkRepo\", \"Mission upload acknowledged with result: ${message.type.value}\")\n                            if (message.type == MavMissionResult.MAV_MISSION_ACCEPTED.wrap()) {\n                                _state.update { it.copy(missionLoaded = true) }\n                            }\n                        }\n                    }\n                }\n        }\n    }\n\n    suspend fun sendCommand(command: MavCmd, param1: Float = 0f, param2: Float = 0f, param3: Float = 0f, param4: Float = 0f, param5: Float = 0f, param6: Float = 0f, param7: Float = 0f) {\n        val commandLong = CommandLong(\n            targetSystem = fcuSystemId,\n            targetComponent = fcuComponentId,\n            command = command.wrap(),\n            confirmation = 0u,\n            param1 = param1,\n            param2 = param2,\n            param3 = param3,\n            param4 = param4,\n            param5 = param5,\n            param6 = param6,\n            param7 = param7\n        )\n        try {\n            connection.trySendUnsignedV2(\n               gcsSystemId,\n                gcsComponentId, commandLong)\n        } catch (e: Exception) {\n            Log.e(\"MavlinkRepo\", \"Failed to send command\", e)\n            _lastFailure.value = e\n        }\n    }\n\n    suspend fun arm() {\n        if (state.value.armable) {\n            sendCommand(\n                MavCmd.COMPONENT_ARM_DISARM,\n                1f\n            )\n        } else {\n            Log.w(\"MavlinkRepo\", \"Arm command rejected, vehicle not armable\")\n        }\n    }\n\n    suspend fun disarm() {\n        sendCommand(\n            MavCmd.COMPONENT_ARM_DISARM,\n            0f\n        )\n    }\n\n    suspend fun changeMode(mode: MavMode) {\n        sendCommand(\n            MavCmd.DO_SET_MODE,\n            mode.value.toFloat(),\n            0f\n        )\n    }\n\n    suspend fun takeoff(altitude: Float) {\n        sendCommand(\n            MavCmd.NAV_TAKEOFF,\n            -1f,\n            0f,\n            0f,\n            0f,\n            0f,\n            0f,\n            altitude\n        )\n    }\n\n    suspend fun land() {\n        sendCommand(MavCmd.NAV_LAND)\n    }\n\n    suspend fun loadMission(waypoints: List<LatLng>) {\n        mission = waypoints\n        val missionCount = MissionCount(\n            targetSystem = fcuSystemId,\n            targetComponent = fcuComponentId,\n            count = mission.size.toUShort(),\n            missionType = MavMissionType.MISSION.wrap()\n        )\n        try {\n            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionCount)\n        } catch (e: Exception) {\n            Log.e(\"MavlinkRepo\", \"Failed to send mission count\", e)\n            _lastFailure.value = e\n        }\n    }\n\n    suspend fun startMission() {\n        sendCommand(MavCmd.MISSION_START)\n    }\n}\n","baseTimestamp":1757909141732,"deltas":[{"timestamp":1758003606053,"changes":[{"type":"INSERT","lineNumber":2,"content":"import android.R.attr.mode"},{"type":"DELETE","lineNumber":11,"oldContent":"import com.google.android.gms.maps.model.LatLng"},{"type":"INSERT","lineNumber":13,"content":"import kotlinx.coroutines.delay"},{"type":"DELETE","lineNumber":16,"oldContent":""},{"type":"MODIFY","lineNumber":25,"content":"    private val port: Int","oldContent":""},{"type":"MODIFY","lineNumber":45,"content":"        suspend fun reconnect(scope: kotlinx.coroutines.CoroutineScope) {","oldContent":"        suspend fun reconnect(scope: kotlinx.coroutines.CoroutineScope) {"},{"type":"INSERT","lineNumber":150,"content":"                            setMessageRate(1u, 1f)   // SYS_STATUS"},{"type":"DELETE","lineNumber":157,"oldContent":"                }"},{"type":"INSERT","lineNumber":344,"content":"    }"},{"type":"DELETE","lineNumber":345,"oldContent":"    suspend fun arm() {"},{"type":"DELETE","lineNumber":361,"oldContent":"            altitude"},{"type":"DELETE","lineNumber":364,"oldContent":"    }"},{"type":"INSERT","lineNumber":363,"content":"            altitude"},{"type":"INSERT","lineNumber":365,"content":"    }"},{"type":"MODIFY","lineNumber":374,"content":"     */","oldContent":"            0f,"},{"type":"MODIFY","lineNumber":395,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":399,"content":"","oldContent":""},{"type":"DELETE","lineNumber":416,"oldContent":"                        val senderSys = frame.systemId"},{"type":"DELETE","lineNumber":418,"oldContent":"                        val senderComp = frame.componentId"},{"type":"DELETE","lineNumber":420,"oldContent":"        }"},{"type":"INSERT","lineNumber":418,"content":"                        val senderSys = frame.systemId"},{"type":"INSERT","lineNumber":419,"content":"                        val senderComp = frame.componentId"},{"type":"INSERT","lineNumber":420,"content":"                        when (val msg = frame.message) {"},{"type":"DELETE","lineNumber":462,"oldContent":"                                    Log.i(\"MavlinkRepo\", \"Sent MISSION_ITEM_INT seq=$seq to sys=$senderSys comp=$senderComp (responding to MissionRequest)\")"},{"type":"MODIFY","lineNumber":464,"content":"                                    Log.i(\"MavlinkRepo\", \"Sent MISSION_ITEM_INT seq=$seq to sys=$senderSys comp=$senderComp (responding to MissionRequest)\")","oldContent":"                                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":465,"content":"                                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":538,"oldContent":""},{"type":"DELETE","lineNumber":539,"oldContent":"}"},{"type":"DELETE","lineNumber":540,"oldContent":"        return false"},{"type":"DELETE","lineNumber":541,"oldContent":"        Log.e(\"MavlinkRepo\", \"Fallback start failed: vehicle did not switch to AUTO mode\")"},{"type":"INSERT","lineNumber":538,"content":"    suspend fun requestMissionAndLog(timeoutMs: Long = 5000) {"},{"type":"INSERT","lineNumber":539,"content":"        if (!state.value.fcuDetected) {"},{"type":"INSERT","lineNumber":540,"content":"            Log.w(\"MavlinkRepo\", \"FCU not detected; cannot request mission\")"},{"type":"INSERT","lineNumber":541,"content":"            return"},{"type":"MODIFY","lineNumber":545,"content":"            val expectedCountDeferred = CompletableDeferred<Int?>()","oldContent":"        }"},{"type":"DELETE","lineNumber":548,"oldContent":"            delay(200)"},{"type":"INSERT","lineNumber":549,"content":""},{"type":"DELETE","lineNumber":552,"oldContent":"                            expectedCountDeferred.complete(msg.count.toInt())"},{"type":"DELETE","lineNumber":556,"oldContent":"                        is MissionItemInt -> {"},{"type":"DELETE","lineNumber":558,"oldContent":"                            val lat = msg.x / 1e7"},{"type":"INSERT","lineNumber":556,"content":"                            expectedCountDeferred.complete(msg.count.toInt())"},{"type":"INSERT","lineNumber":558,"content":"                        is MissionItemInt -> {"},{"type":"INSERT","lineNumber":559,"content":"                            val lat = msg.x / 1e7"},{"type":"MODIFY","lineNumber":593,"content":"","oldContent":"            }"},{"type":"DELETE","lineNumber":599,"oldContent":"                    val reqItem = MissionRequestInt(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = seq.toUShort())"},{"type":"MODIFY","lineNumber":601,"content":"                    val reqItem = MissionRequestInt(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = seq.toUShort())","oldContent":"                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, reqItem)"},{"type":"INSERT","lineNumber":602,"content":"                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, reqItem)"},{"type":"DELETE","lineNumber":613,"oldContent":"                    Log.w(\"MavlinkRepo\", \"Did not receive item for seq=$seq within timeout\")"},{"type":"DELETE","lineNumber":616,"oldContent":""},{"type":"INSERT","lineNumber":615,"content":"                    Log.w(\"MavlinkRepo\", \"Did not receive item for seq=$seq within timeout\")"},{"type":"INSERT","lineNumber":617,"content":""},{"type":"INSERT","lineNumber":675,"content":"                        }"},{"type":"INSERT","lineNumber":676,"content":"                    }"},{"type":"DELETE","lineNumber":677,"oldContent":"                        }"},{"type":"INSERT","lineNumber":679,"content":""},{"type":"DELETE","lineNumber":679,"oldContent":"                    }"},{"type":"DELETE","lineNumber":682,"oldContent":""},{"type":"DELETE","lineNumber":689,"oldContent":"                }"},{"type":"MODIFY","lineNumber":691,"content":"                }","oldContent":"            } else {"},{"type":"INSERT","lineNumber":692,"content":"            } else {"},{"type":"DELETE","lineNumber":708,"oldContent":"        try {"},{"type":"DELETE","lineNumber":710,"oldContent":"            Log.i(\"MavlinkRepo\", \"Fallback: Requesting mode change to AUTO via DO_SET_MODE\")"},{"type":"DELETE","lineNumber":711,"oldContent":"            sendCommand(MavCmd.DO_SET_MODE, MavMode.3u.toFloat(), 0f)"},{"type":"DELETE","lineNumber":713,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":715,"oldContent":"        }"},{"type":"INSERT","lineNumber":711,"content":"        try {"},{"type":"INSERT","lineNumber":712,"content":"            Log.i(\"MavlinkRepo\", \"Fallback: Requesting mode change to AUTO via DO_SET_MODE\")"},{"type":"INSERT","lineNumber":713,"content":"            changeMode(3u) // AUTO mode"},{"type":"INSERT","lineNumber":714,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":716,"content":"        }"},{"type":"DELETE","lineNumber":718,"oldContent":"        while (System.currentTimeMillis() - startWaitMode < modeWaitMs) {"},{"type":"DELETE","lineNumber":720,"oldContent":"}"},{"type":"DELETE","lineNumber":723,"oldContent":"    }"},{"type":"INSERT","lineNumber":721,"content":"        while (System.currentTimeMillis() - startWaitMode < modeWaitMs) {"},{"type":"INSERT","lineNumber":722,"content":"            if (state.value.mode?.contains(\"Auto\", ignoreCase = true) == true) {"},{"type":"INSERT","lineNumber":723,"content":"                Log.i(\"MavlinkRepo\", \"Fallback: Vehicle switched to AUTO mode\")"},{"type":"INSERT","lineNumber":725,"content":"                delay(500)"},{"type":"MODIFY","lineNumber":728,"content":"            delay(200)","oldContent":"                delay(500)"},{"type":"INSERT","lineNumber":729,"content":"        }"},{"type":"DELETE","lineNumber":730,"oldContent":""},{"type":"DELETE","lineNumber":733,"oldContent":""},{"type":"INSERT","lineNumber":735,"content":""}]},{"timestamp":1758003738129,"changes":[{"type":"INSERT","lineNumber":21,"content":"object MavMode {"},{"type":"INSERT","lineNumber":22,"content":"    const val STABILIZE: UInt = 0u"},{"type":"INSERT","lineNumber":23,"content":"    const val LOITER: UInt = 5u"},{"type":"INSERT","lineNumber":24,"content":"    const val AUTO: UInt = 3u"},{"type":"INSERT","lineNumber":25,"content":"    // Add other modes as needed"},{"type":"INSERT","lineNumber":26,"content":"}"},{"type":"INSERT","lineNumber":50,"content":""},{"type":"DELETE","lineNumber":45,"oldContent":"        suspend fun reconnect(scope: kotlinx.coroutines.CoroutineScope) {"},{"type":"DELETE","lineNumber":346,"oldContent":"    suspend fun changeMode(mode: MavMode) {"},{"type":"INSERT","lineNumber":352,"content":"    suspend fun changeMode(customMode: UInt) {"},{"type":"INSERT","lineNumber":353,"content":"        // For MAV_CMD_DO_SET_MODE in ArduPilot:"},{"type":"INSERT","lineNumber":354,"content":"        // param1: Base mode - should always be 1 (MAV_MODE_FLAG_CUSTOM_MODE_ENABLED) "},{"type":"INSERT","lineNumber":355,"content":"        // param2: Custom mode (0=Stabilize, 3=Auto, 5=Loiter, etc.)"},{"type":"INSERT","lineNumber":356,"content":"        // The armed status is handled automatically by ArduPilot, not via the base mode flags"},{"type":"INSERT","lineNumber":357,"content":"        "},{"type":"DELETE","lineNumber":349,"oldContent":"            mode.value.toFloat(),"},{"type":"DELETE","lineNumber":350,"oldContent":"            0f"},{"type":"INSERT","lineNumber":360,"content":"            1f,                   // param1: MAV_MODE_FLAG_CUSTOM_MODE_ENABLED (always 1)"},{"type":"INSERT","lineNumber":361,"content":"            customMode.toFloat(), // param2: custom mode (0=Stabilize, 3=Auto, 5=Loiter, etc.)"},{"type":"INSERT","lineNumber":362,"content":"            0f,                   // param3: custom sub mode (usually 0)"},{"type":"INSERT","lineNumber":363,"content":"            0f,                   // param4: empty"},{"type":"INSERT","lineNumber":364,"content":"            0f,                   // param5: empty"},{"type":"INSERT","lineNumber":365,"content":"            0f,                   // param6: empty"},{"type":"INSERT","lineNumber":366,"content":"            0f                    // param7: empty"},{"type":"INSERT","lineNumber":368,"content":"        Log.i(\"MavlinkRepo\", \"Sent DO_SET_MODE: baseMode=1 customMode=$customMode\")"},{"type":"DELETE","lineNumber":362,"oldContent":"            altitude"},{"type":"DELETE","lineNumber":364,"oldContent":"    }"},{"type":"INSERT","lineNumber":380,"content":"            altitude"},{"type":"INSERT","lineNumber":382,"content":"    }"},{"type":"INSERT","lineNumber":411,"content":"            Log.i(\"MavlinkRepo\", \"Sent MISSION_COUNT=${missionItems.size}\")"},{"type":"DELETE","lineNumber":395,"oldContent":""},{"type":"INSERT","lineNumber":415,"content":"            var firstRequestReceived = false"},{"type":"DELETE","lineNumber":399,"oldContent":""},{"type":"INSERT","lineNumber":434,"content":"                    .collect { frame ->"},{"type":"DELETE","lineNumber":419,"oldContent":"                    .collect { frame ->"},{"type":"INSERT","lineNumber":480,"content":"                                    sentSeqs.add(seq)"},{"type":"DELETE","lineNumber":465,"oldContent":"                                    sentSeqs.add(seq)"},{"type":"DELETE","lineNumber":548,"oldContent":""},{"type":"INSERT","lineNumber":566,"content":""},{"type":"DELETE","lineNumber":555,"oldContent":"                            expectedCountDeferred.complete(msg.count.toInt())"},{"type":"INSERT","lineNumber":573,"content":"                            expectedCountDeferred.complete(msg.count.toInt())"},{"type":"INSERT","lineNumber":574,"content":"                        }"},{"type":"DELETE","lineNumber":559,"oldContent":"                        }"},{"type":"INSERT","lineNumber":617,"content":"                try {"},{"type":"DELETE","lineNumber":602,"oldContent":"                try {"},{"type":"DELETE","lineNumber":614,"oldContent":"                    Log.w(\"MavlinkRepo\", \"Did not receive item for seq=$seq within timeout\")"},{"type":"DELETE","lineNumber":616,"oldContent":""},{"type":"INSERT","lineNumber":632,"content":"                    Log.w(\"MavlinkRepo\", \"Did not receive item for seq=$seq within timeout\")"},{"type":"INSERT","lineNumber":634,"content":""},{"type":"DELETE","lineNumber":676,"oldContent":"                }"},{"type":"INSERT","lineNumber":694,"content":"                }"},{"type":"DELETE","lineNumber":679,"oldContent":"            val result = withTimeoutOrNull(perAttemptTimeout) { ackDeferred.await() }"},{"type":"INSERT","lineNumber":697,"content":"            val result = withTimeoutOrNull(perAttemptTimeout) { ackDeferred.await() }"},{"type":"INSERT","lineNumber":707,"content":"                    return false"},{"type":"DELETE","lineNumber":692,"oldContent":"                    return false"},{"type":"INSERT","lineNumber":726,"content":""},{"type":"INSERT","lineNumber":727,"content":"        // Request mode change to AUTO using DO_SET_MODE"},{"type":"DELETE","lineNumber":711,"oldContent":""},{"type":"DELETE","lineNumber":714,"oldContent":"        // Request mode change to AUTO using DO_SET_MODE"},{"type":"DELETE","lineNumber":715,"oldContent":"        }"},{"type":"INSERT","lineNumber":733,"content":"        }"},{"type":"DELETE","lineNumber":719,"oldContent":"        while (System.currentTimeMillis() - startWaitMode < modeWaitMs) {"},{"type":"DELETE","lineNumber":721,"oldContent":"            if (state.value.mode?.contains(\"Auto\", ignoreCase = true) == true) {"},{"type":"INSERT","lineNumber":738,"content":"        while (System.currentTimeMillis() - startWaitMode < modeWaitMs) {"},{"type":"INSERT","lineNumber":739,"content":"            if (state.value.mode?.contains(\"Auto\", ignoreCase = true) == true) {"},{"type":"DELETE","lineNumber":728,"oldContent":"                delay(500)"},{"type":"INSERT","lineNumber":747,"content":""}]},{"timestamp":1758003860269,"changes":[{"type":"MODIFY","lineNumber":18,"content":"import kotlin.math.absoluteValue","oldContent":"    private val host: String,"},{"type":"DELETE","lineNumber":22,"oldContent":""},{"type":"DELETE","lineNumber":24,"oldContent":""},{"type":"DELETE","lineNumber":26,"oldContent":"class MavlinkTelemetryRepository("},{"type":"DELETE","lineNumber":28,"oldContent":"    private val host: String,"},{"type":"DELETE","lineNumber":30,"oldContent":"    private val port: Int"},{"type":"INSERT","lineNumber":27,"content":""},{"type":"INSERT","lineNumber":28,"content":""},{"type":"INSERT","lineNumber":29,"content":"class MavlinkTelemetryRepository("},{"type":"INSERT","lineNumber":30,"content":"    private val host: String,"},{"type":"INSERT","lineNumber":31,"content":"    private val port: Int"},{"type":"DELETE","lineNumber":34,"oldContent":""},{"type":"DELETE","lineNumber":35,"oldContent":"    // Connection"},{"type":"INSERT","lineNumber":34,"content":"    private val gcsComponentId: UByte = 1u"},{"type":"INSERT","lineNumber":35,"content":"    private val _state = MutableStateFlow(TelemetryState())"},{"type":"MODIFY","lineNumber":38,"content":"    private var fcuSystemId: UByte = 0u","oldContent":"    fun start() {"},{"type":"INSERT","lineNumber":50,"content":""},{"type":"DELETE","lineNumber":55,"oldContent":""},{"type":"MODIFY","lineNumber":64,"content":"","oldContent":"                        }"},{"type":"INSERT","lineNumber":157,"content":"                            setMessageRate(24u, 1f)  // GPS_RAW_INT"},{"type":"DELETE","lineNumber":164,"oldContent":"        }"},{"type":"MODIFY","lineNumber":351,"content":"","oldContent":"    suspend fun arm() {"},{"type":"INSERT","lineNumber":352,"content":"    suspend fun changeMode(customMode: UInt) {"},{"type":"INSERT","lineNumber":353,"content":"        // For MAV_CMD_DO_SET_MODE in ArduPilot:"},{"type":"INSERT","lineNumber":354,"content":"        // param1: Base mode - should always be 1 (MAV_MODE_FLAG_CUSTOM_MODE_ENABLED)"},{"type":"INSERT","lineNumber":355,"content":"        // param2: Custom mode (0=Stabilize, 3=Auto, 5=Loiter, etc.)"},{"type":"INSERT","lineNumber":356,"content":"        // The armed status is handled automatically by ArduPilot, not via the base mode flags"},{"type":"INSERT","lineNumber":357,"content":""},{"type":"INSERT","lineNumber":360,"content":"            1f,                   // param1: MAV_MODE_FLAG_CUSTOM_MODE_ENABLED (always 1)"},{"type":"INSERT","lineNumber":361,"content":"            customMode.toFloat(), // param2: custom mode (0=Stabilize, 3=Auto, 5=Loiter, etc.)"},{"type":"INSERT","lineNumber":362,"content":"            0f,                   // param3: custom sub mode (usually 0)"},{"type":"INSERT","lineNumber":363,"content":"            0f,                   // param4: empty"},{"type":"INSERT","lineNumber":364,"content":"            0f,                   // param5: empty"},{"type":"INSERT","lineNumber":365,"content":"            0f,                   // param6: empty"},{"type":"INSERT","lineNumber":366,"content":"            0f                    // param7: empty"},{"type":"DELETE","lineNumber":355,"oldContent":"    suspend fun changeMode(customMode: UInt) {"},{"type":"INSERT","lineNumber":368,"content":"        Log.i(\"MavlinkRepo\", \"Sent DO_SET_MODE: baseMode=1 customMode=$customMode\")"},{"type":"DELETE","lineNumber":357,"oldContent":"        // For MAV_CMD_DO_SET_MODE in ArduPilot:"},{"type":"DELETE","lineNumber":359,"oldContent":"        // param1: Base mode - should always be 1 (MAV_MODE_FLAG_CUSTOM_MODE_ENABLED) "},{"type":"DELETE","lineNumber":361,"oldContent":"        // param2: Custom mode (0=Stabilize, 3=Auto, 5=Loiter, etc.)"},{"type":"DELETE","lineNumber":363,"oldContent":"        // The armed status is handled automatically by ArduPilot, not via the base mode flags"},{"type":"DELETE","lineNumber":365,"oldContent":"        "},{"type":"DELETE","lineNumber":369,"oldContent":"            1f,                   // param1: MAV_MODE_FLAG_CUSTOM_MODE_ENABLED (always 1)"},{"type":"DELETE","lineNumber":371,"oldContent":"            customMode.toFloat(), // param2: custom mode (0=Stabilize, 3=Auto, 5=Loiter, etc.)"},{"type":"DELETE","lineNumber":373,"oldContent":"            0f,                   // param3: custom sub mode (usually 0)"},{"type":"DELETE","lineNumber":374,"oldContent":"            0f,                   // param4: empty"},{"type":"DELETE","lineNumber":376,"oldContent":"            0f,                   // param5: empty"},{"type":"DELETE","lineNumber":377,"oldContent":"            0f,                   // param6: empty"},{"type":"INSERT","lineNumber":380,"content":"            altitude"},{"type":"DELETE","lineNumber":379,"oldContent":"            0f                    // param7: empty"},{"type":"INSERT","lineNumber":382,"content":"    }"},{"type":"DELETE","lineNumber":382,"oldContent":"        Log.i(\"MavlinkRepo\", \"Sent DO_SET_MODE: baseMode=1 customMode=$customMode\")"},{"type":"DELETE","lineNumber":395,"oldContent":"            altitude"},{"type":"DELETE","lineNumber":398,"oldContent":"    }"},{"type":"INSERT","lineNumber":411,"content":"            Log.i(\"MavlinkRepo\", \"Sent MISSION_COUNT=${missionItems.size}\")"},{"type":"INSERT","lineNumber":415,"content":"            var firstRequestReceived = false"},{"type":"DELETE","lineNumber":426,"oldContent":"            Log.i(\"MavlinkRepo\", \"Sent MISSION_COUNT=${missionItems.size}\")"},{"type":"DELETE","lineNumber":431,"oldContent":"            var firstRequestReceived = false"},{"type":"INSERT","lineNumber":434,"content":"                    .collect { frame ->"},{"type":"DELETE","lineNumber":437,"oldContent":"            job.cancel()"},{"type":"INSERT","lineNumber":438,"content":"                            is MissionRequestInt -> {"},{"type":"DELETE","lineNumber":450,"oldContent":"                    .collect { frame ->"},{"type":"INSERT","lineNumber":480,"content":"                                    sentSeqs.add(seq)"},{"type":"DELETE","lineNumber":496,"oldContent":"                                    sentSeqs.add(seq)"},{"type":"DELETE","lineNumber":549,"oldContent":""},{"type":"DELETE","lineNumber":550,"oldContent":"}"},{"type":"INSERT","lineNumber":549,"content":"            return false"},{"type":"INSERT","lineNumber":550,"content":"        }"},{"type":"MODIFY","lineNumber":554,"content":"    @Suppress(\"DEPRECATION\")","oldContent":"        Log.e(\"MavlinkRepo\", \"Fallback start failed: vehicle did not switch to AUTO mode\")"},{"type":"INSERT","lineNumber":566,"content":""},{"type":"INSERT","lineNumber":573,"content":"                            expectedCountDeferred.complete(msg.count.toInt())"},{"type":"INSERT","lineNumber":574,"content":"                        }"},{"type":"DELETE","lineNumber":580,"oldContent":""},{"type":"DELETE","lineNumber":588,"oldContent":"                            expectedCountDeferred.complete(msg.count.toInt())"},{"type":"DELETE","lineNumber":590,"oldContent":"                        }"},{"type":"INSERT","lineNumber":617,"content":"                try {"},{"type":"DELETE","lineNumber":631,"oldContent":"                try {"},{"type":"INSERT","lineNumber":632,"content":"                    Log.w(\"MavlinkRepo\", \"Did not receive item for seq=$seq within timeout\")"},{"type":"INSERT","lineNumber":634,"content":""},{"type":"DELETE","lineNumber":647,"oldContent":"                    Log.w(\"MavlinkRepo\", \"Did not receive item for seq=$seq within timeout\")"},{"type":"DELETE","lineNumber":650,"oldContent":""},{"type":"INSERT","lineNumber":694,"content":"                }"},{"type":"INSERT","lineNumber":697,"content":"            val result = withTimeoutOrNull(perAttemptTimeout) { ackDeferred.await() }"},{"type":"INSERT","lineNumber":707,"content":"                    return false"},{"type":"DELETE","lineNumber":708,"oldContent":"                }"},{"type":"DELETE","lineNumber":712,"oldContent":"            val result = withTimeoutOrNull(perAttemptTimeout) { ackDeferred.await() }"},{"type":"DELETE","lineNumber":723,"oldContent":"                    return false"},{"type":"INSERT","lineNumber":726,"content":""},{"type":"INSERT","lineNumber":727,"content":"        // Request mode change to AUTO using DO_SET_MODE"},{"type":"INSERT","lineNumber":733,"content":"        }"},{"type":"INSERT","lineNumber":738,"content":"        while (System.currentTimeMillis() - startWaitMode < modeWaitMs) {"},{"type":"INSERT","lineNumber":739,"content":"            if (state.value.mode?.contains(\"Auto\", ignoreCase = true) == true) {"},{"type":"DELETE","lineNumber":738,"oldContent":""},{"type":"DELETE","lineNumber":740,"oldContent":"        // Request mode change to AUTO using DO_SET_MODE"},{"type":"DELETE","lineNumber":744,"oldContent":"        Log.e(\"MavlinkRepo\", \"Fallback start failed: vehicle did not switch to AUTO mode\")"},{"type":"DELETE","lineNumber":746,"oldContent":"        }"},{"type":"INSERT","lineNumber":748,"content":"        Log.e(\"MavlinkRepo\", \"Fallback start failed: vehicle did not switch to AUTO mode\")"},{"type":"INSERT","lineNumber":749,"content":"        return false"},{"type":"INSERT","lineNumber":751,"content":"}"},{"type":"DELETE","lineNumber":749,"oldContent":""},{"type":"DELETE","lineNumber":750,"oldContent":"            if (state.value.mode?.contains(\"Auto\", ignoreCase = true) == true) {"},{"type":"DELETE","lineNumber":751,"oldContent":"        while (System.currentTimeMillis() - startWaitMode < modeWaitMs) {"}]},{"timestamp":1758003897761,"changes":[{"type":"DELETE","lineNumber":24,"oldContent":""},{"type":"INSERT","lineNumber":25,"content":"    // Add other modes as needed"},{"type":"INSERT","lineNumber":26,"content":"}"},{"type":"INSERT","lineNumber":28,"content":""},{"type":"DELETE","lineNumber":28,"oldContent":"    // Add other modes as needed"},{"type":"DELETE","lineNumber":31,"oldContent":"}"},{"type":"MODIFY","lineNumber":32,"content":") {","oldContent":"    private val _lastFailure = MutableStateFlow<Throwable?>(null)"},{"type":"DELETE","lineNumber":353,"oldContent":"        sendCommand("},{"type":"DELETE","lineNumber":355,"oldContent":"            MavCmd.DO_SET_MODE,"},{"type":"DELETE","lineNumber":356,"oldContent":"        // param1: Base mode - should always be 1 (MAV_MODE_FLAG_CUSTOM_MODE_ENABLED)"},{"type":"DELETE","lineNumber":357,"oldContent":"        )"},{"type":"INSERT","lineNumber":354,"content":"        // param1: Base mode - should always be 1 (MAV_MODE_FLAG_CUSTOM_MODE_ENABLED) "},{"type":"DELETE","lineNumber":360,"oldContent":"    }"},{"type":"DELETE","lineNumber":361,"oldContent":""},{"type":"DELETE","lineNumber":362,"oldContent":""},{"type":"INSERT","lineNumber":357,"content":"        "},{"type":"INSERT","lineNumber":358,"content":"        sendCommand("},{"type":"INSERT","lineNumber":359,"content":"            MavCmd.DO_SET_MODE,"},{"type":"DELETE","lineNumber":364,"oldContent":"    suspend fun takeoff(altitude: Float) {"},{"type":"DELETE","lineNumber":367,"oldContent":"        sendCommand("},{"type":"DELETE","lineNumber":370,"oldContent":"            MavCmd.NAV_TAKEOFF,"},{"type":"INSERT","lineNumber":367,"content":"        )"},{"type":"INSERT","lineNumber":368,"content":"    }"},{"type":"INSERT","lineNumber":369,"content":""},{"type":"INSERT","lineNumber":370,"content":"    suspend fun takeoff(altitude: Float) {"},{"type":"INSERT","lineNumber":371,"content":"        sendCommand("},{"type":"INSERT","lineNumber":372,"content":"            MavCmd.NAV_TAKEOFF,"},{"type":"DELETE","lineNumber":375,"oldContent":"        Log.i(\"MavlinkRepo\", \"Sent DO_SET_MODE: baseMode=1 customMode=$customMode\")"},{"type":"MODIFY","lineNumber":380,"content":"        )","oldContent":"        )"},{"type":"INSERT","lineNumber":381,"content":"    }"},{"type":"DELETE","lineNumber":384,"oldContent":"    }"},{"type":"MODIFY","lineNumber":415,"content":"","oldContent":""},{"type":"DELETE","lineNumber":573,"oldContent":"                        is MissionItemInt -> {"},{"type":"DELETE","lineNumber":575,"oldContent":"                            val lat = msg.x / 1e7"},{"type":"INSERT","lineNumber":574,"content":"                        is MissionItemInt -> {"},{"type":"INSERT","lineNumber":575,"content":"                            val lat = msg.x / 1e7"},{"type":"MODIFY","lineNumber":634,"content":"                perSeqMap.remove(seq)","oldContent":"                perSeqMap.remove(seq)"},{"type":"MODIFY","lineNumber":697,"content":"            job.cancel()","oldContent":"            job.cancel()"},{"type":"INSERT","lineNumber":706,"content":"                    return false"},{"type":"DELETE","lineNumber":709,"oldContent":"                    return false"},{"type":"MODIFY","lineNumber":727,"content":"        try {","oldContent":"        try {"},{"type":"INSERT","lineNumber":732,"content":"        }"},{"type":"DELETE","lineNumber":735,"oldContent":"        }"},{"type":"INSERT","lineNumber":737,"content":"        while (System.currentTimeMillis() - startWaitMode < modeWaitMs) {"},{"type":"INSERT","lineNumber":738,"content":"            if (state.value.mode?.contains(\"Auto\", ignoreCase = true) == true) {"},{"type":"DELETE","lineNumber":741,"oldContent":"        while (System.currentTimeMillis() - startWaitMode < modeWaitMs) {"},{"type":"DELETE","lineNumber":742,"oldContent":"            if (state.value.mode?.contains(\"Auto\", ignoreCase = true) == true) {"},{"type":"DELETE","lineNumber":748,"oldContent":"    }"},{"type":"DELETE","lineNumber":750,"oldContent":""},{"type":"INSERT","lineNumber":749,"content":"    }"},{"type":"INSERT","lineNumber":751,"content":""}]},{"timestamp":1758003901242,"changes":[{"type":"MODIFY","lineNumber":25,"content":"    // Add other modes as needed","oldContent":"    // Add other modes as needed"},{"type":"MODIFY","lineNumber":29,"content":"class MavlinkTelemetryRepository(","oldContent":"class MavlinkTelemetryRepository("},{"type":"MODIFY","lineNumber":354,"content":"        // param1: Base mode - should always be 1 (MAV_MODE_FLAG_CUSTOM_MODE_ENABLED) ","oldContent":"        // param1: Base mode - should always be 1 (MAV_MODE_FLAG_CUSTOM_MODE_ENABLED) "},{"type":"INSERT","lineNumber":355,"content":"        // param2: Custom mode (0=Stabilize, 3=Auto, 5=Loiter, etc.)"},{"type":"INSERT","lineNumber":356,"content":"        // The armed status is handled automatically by ArduPilot, not via the base mode flags"},{"type":"DELETE","lineNumber":357,"oldContent":"        // param2: Custom mode (0=Stabilize, 3=Auto, 5=Loiter, etc.)"},{"type":"DELETE","lineNumber":359,"oldContent":"        // The armed status is handled automatically by ArduPilot, not via the base mode flags"},{"type":"INSERT","lineNumber":363,"content":"            0f,                   // param4: empty"},{"type":"INSERT","lineNumber":364,"content":"            0f,                   // param5: empty"},{"type":"INSERT","lineNumber":365,"content":"            0f,                   // param6: empty"},{"type":"DELETE","lineNumber":365,"oldContent":"            0f,                   // param4: empty"},{"type":"DELETE","lineNumber":367,"oldContent":"            0f,                   // param5: empty"},{"type":"DELETE","lineNumber":370,"oldContent":"            0f,                   // param6: empty"},{"type":"DELETE","lineNumber":372,"oldContent":"            0f                    // param7: empty"},{"type":"INSERT","lineNumber":378,"content":"            altitude"},{"type":"DELETE","lineNumber":381,"oldContent":"            altitude"},{"type":"MODIFY","lineNumber":414,"content":"","oldContent":""},{"type":"DELETE","lineNumber":544,"oldContent":""},{"type":"DELETE","lineNumber":545,"oldContent":"}"},{"type":"DELETE","lineNumber":546,"oldContent":"    }"},{"type":"DELETE","lineNumber":547,"oldContent":"        return false"},{"type":"INSERT","lineNumber":543,"content":"            }"},{"type":"INSERT","lineNumber":544,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":545,"content":"            Log.e(\"MavlinkRepo\", \"Mission upload failed\", e)"},{"type":"INSERT","lineNumber":546,"content":"            _lastFailure.value = e"},{"type":"DELETE","lineNumber":572,"oldContent":"                        is MissionItemInt -> {"},{"type":"DELETE","lineNumber":574,"oldContent":"                            val lat = msg.x / 1e7"},{"type":"INSERT","lineNumber":573,"content":"                        is MissionItemInt -> {"},{"type":"INSERT","lineNumber":574,"content":"                            val lat = msg.x / 1e7"},{"type":"MODIFY","lineNumber":633,"content":"                perSeqMap.remove(seq)","oldContent":"                perSeqMap.remove(seq)"},{"type":"MODIFY","lineNumber":696,"content":"            job.cancel()","oldContent":"            job.cancel()"},{"type":"MODIFY","lineNumber":705,"content":"                    return false","oldContent":"                    return false"},{"type":"DELETE","lineNumber":716,"oldContent":"}"},{"type":"INSERT","lineNumber":715,"content":""},{"type":"MODIFY","lineNumber":726,"content":"        try {","oldContent":"        try {"},{"type":"MODIFY","lineNumber":731,"content":"        }","oldContent":"        }"},{"type":"MODIFY","lineNumber":736,"content":"        while (System.currentTimeMillis() - startWaitMode < modeWaitMs) {","oldContent":"        while (System.currentTimeMillis() - startWaitMode < modeWaitMs) {"},{"type":"DELETE","lineNumber":747,"oldContent":"    }"},{"type":"DELETE","lineNumber":749,"oldContent":""},{"type":"INSERT","lineNumber":748,"content":"    }"},{"type":"INSERT","lineNumber":750,"content":""}]},{"timestamp":1758003929182,"changes":[{"type":"INSERT","lineNumber":24,"content":"    const val AUTO: UInt = 3u"},{"type":"DELETE","lineNumber":25,"oldContent":"    // Add other modes as needed"},{"type":"INSERT","lineNumber":28,"content":""},{"type":"DELETE","lineNumber":29,"oldContent":"class MavlinkTelemetryRepository("},{"type":"MODIFY","lineNumber":36,"content":"    val state: StateFlow<TelemetryState> = _state.asStateFlow()","oldContent":"    private val connection = TcpClientMavConnection(host, port, CommonDialect).asCoroutine()"},{"type":"MODIFY","lineNumber":39,"content":"    private var fcuComponentId: UByte = 0u","oldContent":"        val scope = AppScope"},{"type":"MODIFY","lineNumber":67,"content":"            reconnect(this) // Initial connection attempt","oldContent":"                        if (state.value.connected) {"},{"type":"DELETE","lineNumber":353,"oldContent":"        // param1: Base mode - should always be 1 (MAV_MODE_FLAG_CUSTOM_MODE_ENABLED) "},{"type":"DELETE","lineNumber":354,"oldContent":"        // param1: Base mode - should always be 1 (MAV_MODE_FLAG_CUSTOM_MODE_ENABLED) "},{"type":"INSERT","lineNumber":353,"content":"        // For MAV_CMD_DO_SET_MODE in ArduPilot:"},{"type":"INSERT","lineNumber":354,"content":"        // param1: Base mode - should always be 1 (MAV_MODE_FLAG_CUSTOM_MODE_ENABLED)"},{"type":"MODIFY","lineNumber":357,"content":"","oldContent":"        "},{"type":"DELETE","lineNumber":364,"oldContent":"        )"},{"type":"MODIFY","lineNumber":366,"content":"        )","oldContent":"    }"},{"type":"INSERT","lineNumber":367,"content":"    }"},{"type":"MODIFY","lineNumber":378,"content":"            altitude","oldContent":"            altitude"},{"type":"MODIFY","lineNumber":414,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":543,"content":"            }","oldContent":"            }"},{"type":"DELETE","lineNumber":571,"oldContent":"                        is MissionItemInt -> {"},{"type":"MODIFY","lineNumber":573,"content":"                        is MissionItemInt -> {","oldContent":"                            val lat = msg.x / 1e7"},{"type":"INSERT","lineNumber":574,"content":"                            val lat = msg.x / 1e7"},{"type":"MODIFY","lineNumber":633,"content":"                perSeqMap.remove(seq)","oldContent":"                perSeqMap.remove(seq)"},{"type":"MODIFY","lineNumber":696,"content":"            job.cancel()","oldContent":"            job.cancel()"},{"type":"MODIFY","lineNumber":705,"content":"                    return false","oldContent":"                    return false"},{"type":"MODIFY","lineNumber":715,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":726,"content":"        try {","oldContent":"        try {"},{"type":"MODIFY","lineNumber":731,"content":"        }","oldContent":"        }"},{"type":"MODIFY","lineNumber":736,"content":"        while (System.currentTimeMillis() - startWaitMode < modeWaitMs) {","oldContent":"        while (System.currentTimeMillis() - startWaitMode < modeWaitMs) {"},{"type":"DELETE","lineNumber":746,"oldContent":"    }"},{"type":"MODIFY","lineNumber":748,"content":"    }","oldContent":""},{"type":"INSERT","lineNumber":750,"content":""}]},{"timestamp":1758004043067,"changes":[{"type":"MODIFY","lineNumber":356,"content":"        // The armed status is handled automatically by ArduPilot, not via the base mode flags","oldContent":"        "},{"type":"MODIFY","lineNumber":359,"content":"            Mav,","oldContent":"            MavCmd.DO_SET_MODE,"},{"type":"INSERT","lineNumber":365,"content":"            0f,                   // param6: empty"},{"type":"DELETE","lineNumber":367,"oldContent":"            0f,                   // param6: empty"},{"type":"INSERT","lineNumber":377,"content":"            0f,"},{"type":"DELETE","lineNumber":378,"oldContent":"            altitude"},{"type":"INSERT","lineNumber":413,"content":"            var firstRequestReceived = false"},{"type":"DELETE","lineNumber":414,"oldContent":""},{"type":"DELETE","lineNumber":538,"oldContent":"    }"},{"type":"DELETE","lineNumber":539,"oldContent":"        return false"},{"type":"DELETE","lineNumber":540,"oldContent":"        Log.e(\"MavlinkRepo\", \"Fallback start failed: vehicle did not switch to AUTO mode\")"},{"type":"DELETE","lineNumber":541,"oldContent":"        }"},{"type":"INSERT","lineNumber":538,"content":"                Log.i(\"MavlinkRepo\", \"Mission upload acknowledged by FCU\")"},{"type":"INSERT","lineNumber":539,"content":"                return true"},{"type":"INSERT","lineNumber":540,"content":"            } else {"},{"type":"INSERT","lineNumber":541,"content":"                Log.e(\"MavlinkRepo\", \"Mission upload timed out waiting for ACK\")"},{"type":"INSERT","lineNumber":542,"content":"                return false"},{"type":"DELETE","lineNumber":543,"oldContent":"            }"},{"type":"INSERT","lineNumber":572,"content":"                        }"},{"type":"DELETE","lineNumber":574,"oldContent":"                        }"},{"type":"INSERT","lineNumber":592,"content":"            }"},{"type":"DELETE","lineNumber":593,"oldContent":""},{"type":"DELETE","lineNumber":595,"oldContent":"        return false"},{"type":"DELETE","lineNumber":596,"oldContent":"            delay(200)"},{"type":"INSERT","lineNumber":595,"content":"            try {"},{"type":"INSERT","lineNumber":596,"content":"                val req = MissionRequestList(targetSystem = fcuSystemId, targetComponent = fcuComponentId)"},{"type":"INSERT","lineNumber":632,"content":""},{"type":"DELETE","lineNumber":633,"oldContent":"                perSeqMap.remove(seq)"},{"type":"INSERT","lineNumber":695,"content":"            val result = withTimeoutOrNull(perAttemptTimeout) { ackDeferred.await() }"},{"type":"DELETE","lineNumber":696,"oldContent":"            job.cancel()"},{"type":"INSERT","lineNumber":704,"content":"                    // Don't retry on a negative ACK; break and return failure"},{"type":"DELETE","lineNumber":705,"oldContent":"                    return false"},{"type":"DELETE","lineNumber":713,"oldContent":"}"},{"type":"INSERT","lineNumber":714,"content":"        Log.e(\"MavlinkRepo\", \"MISSION_START not acknowledged after $maxAttempts attempts - trying fallback start (set current + change mode to AUTO)\")"},{"type":"INSERT","lineNumber":725,"content":"        // Request mode change to AUTO using DO_SET_MODE"},{"type":"DELETE","lineNumber":726,"oldContent":"        try {"},{"type":"INSERT","lineNumber":730,"content":"            Log.w(\"MavlinkRepo\", \"Fallback: Failed to send DO_SET_MODE\", e)"},{"type":"DELETE","lineNumber":731,"oldContent":"        }"},{"type":"INSERT","lineNumber":735,"content":"        val startWaitMode = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":736,"oldContent":"        while (System.currentTimeMillis() - startWaitMode < modeWaitMs) {"},{"type":"MODIFY","lineNumber":745,"content":"","oldContent":"}"},{"type":"DELETE","lineNumber":747,"oldContent":"    }"},{"type":"DELETE","lineNumber":749,"oldContent":""},{"type":"INSERT","lineNumber":748,"content":"    }"},{"type":"INSERT","lineNumber":750,"content":""}]},{"timestamp":1758004045582,"changes":[{"type":"MODIFY","lineNumber":359,"content":"            MavCmd.DO_SET_MODE,","oldContent":"            Mav,"},{"type":"INSERT","lineNumber":535,"content":"            resendJob.cancel()"},{"type":"DELETE","lineNumber":536,"oldContent":""},{"type":"MODIFY","lineNumber":590,"content":"                    }","oldContent":""},{"type":"MODIFY","lineNumber":593,"content":"","oldContent":"}"},{"type":"INSERT","lineNumber":713,"content":""},{"type":"DELETE","lineNumber":715,"oldContent":""},{"type":"DELETE","lineNumber":747,"oldContent":"    }"},{"type":"DELETE","lineNumber":749,"oldContent":""},{"type":"INSERT","lineNumber":748,"content":"    }"},{"type":"INSERT","lineNumber":750,"content":""}]},{"timestamp":1758011946176,"changes":[{"type":"MODIFY","lineNumber":37,"content":"","oldContent":"        val scope = AppScope"},{"type":"INSERT","lineNumber":158,"content":"                            setMessageRate(33u, 5f)  // GLOBAL_POSITION_INT"},{"type":"INSERT","lineNumber":159,"content":"                            setMessageRate(74u, 5f)  // VFR_HUD"},{"type":"DELETE","lineNumber":164,"oldContent":"        // Collectors"},{"type":"DELETE","lineNumber":165,"oldContent":""},{"type":"DELETE","lineNumber":353,"oldContent":"        // For MAV_CMD_DO_SET_MODE in ArduPilot:"},{"type":"DELETE","lineNumber":354,"oldContent":"        // param1: Base mode - should always be 1 (MAV_MODE_FLAG_CUSTOM_MODE_ENABLED)"},{"type":"DELETE","lineNumber":355,"oldContent":"        // param2: Custom mode (0=Stabilize, 3=Auto, 5=Loiter, etc.)"},{"type":"DELETE","lineNumber":356,"oldContent":"        // The armed status is handled automatically by ArduPilot, not via the base mode flags"},{"type":"INSERT","lineNumber":353,"content":"        // MAVLink base mode flags (from MAV_MODE_FLAG)"},{"type":"INSERT","lineNumber":354,"content":"        val MAV_MODE_FLAG_CUSTOM_MODE_ENABLED: UInt = 1u"},{"type":"INSERT","lineNumber":355,"content":"        val MAV_MODE_FLAG_TEST_ENABLED: UInt = 2u"},{"type":"INSERT","lineNumber":356,"content":"        val MAV_MODE_FLAG_AUTO_ENABLED: UInt = 4u"},{"type":"INSERT","lineNumber":357,"content":"        val MAV_MODE_FLAG_GUIDED_ENABLED: UInt = 8u"},{"type":"INSERT","lineNumber":358,"content":"        val MAV_MODE_FLAG_STABILIZE_ENABLED: UInt = 16u"},{"type":"INSERT","lineNumber":359,"content":"        val MAV_MODE_FLAG_HIL_ENABLED: UInt = 32u"},{"type":"INSERT","lineNumber":360,"content":"        val MAV_MODE_FLAG_MANUAL_INPUT_ENABLED: UInt = 64u"},{"type":"INSERT","lineNumber":361,"content":"        val MAV_MODE_FLAG_SAFETY_ARMED: UInt = 128u"},{"type":"INSERT","lineNumber":363,"content":"        // Determine appropriate base mode for the requested custom mode."},{"type":"INSERT","lineNumber":364,"content":"        // ArduPilot commonly accepts baseMode = CUSTOM_MODE_ENABLED | AUTO_ENABLED when switching to AUTO."},{"type":"INSERT","lineNumber":365,"content":"        val baseModeFlags: UInt = when (customMode) {"},{"type":"INSERT","lineNumber":366,"content":"            MavMode.AUTO -> (MAV_MODE_FLAG_CUSTOM_MODE_ENABLED or MAV_MODE_FLAG_AUTO_ENABLED)"},{"type":"INSERT","lineNumber":367,"content":"            MavMode.STABILIZE -> (MAV_MODE_FLAG_CUSTOM_MODE_ENABLED or MAV_MODE_FLAG_STABILIZE_ENABLED)"},{"type":"INSERT","lineNumber":368,"content":"            MavMode.LOITER -> (MAV_MODE_FLAG_CUSTOM_MODE_ENABLED or MAV_MODE_FLAG_AUTO_ENABLED)"},{"type":"INSERT","lineNumber":369,"content":"            else -> MAV_MODE_FLAG_CUSTOM_MODE_ENABLED"},{"type":"INSERT","lineNumber":370,"content":"        }"},{"type":"INSERT","lineNumber":371,"content":""},{"type":"INSERT","lineNumber":372,"content":"        // send as float params (COMMAND_LONG uses float fields)"},{"type":"DELETE","lineNumber":360,"oldContent":"            1f,                   // param1: MAV_MODE_FLAG_CUSTOM_MODE_ENABLED (always 1)"},{"type":"DELETE","lineNumber":361,"oldContent":"            customMode.toFloat(), // param2: custom mode (0=Stabilize, 3=Auto, 5=Loiter, etc.)"},{"type":"DELETE","lineNumber":362,"oldContent":"            0f,                   // param3: custom sub mode (usually 0)"},{"type":"DELETE","lineNumber":363,"oldContent":"            0f,                   // param4: empty"},{"type":"DELETE","lineNumber":364,"oldContent":"            0f,                   // param5: empty"},{"type":"DELETE","lineNumber":365,"oldContent":"            0f,                   // param6: empty"},{"type":"INSERT","lineNumber":375,"content":"            baseModeFlags.toFloat(),   // param1: base mode flags"},{"type":"INSERT","lineNumber":376,"content":"            customMode.toFloat(),      // param2: custom mode"},{"type":"INSERT","lineNumber":377,"content":"            0f,                        // param3: custom sub mode"},{"type":"INSERT","lineNumber":378,"content":"            0f, 0f, 0f, 0f"},{"type":"INSERT","lineNumber":380,"content":"        Log.i(\"MavlinkRepo\", \"Sent DO_SET_MODE: baseMode=$baseModeFlags customMode=$customMode\")"},{"type":"DELETE","lineNumber":533,"oldContent":""},{"type":"INSERT","lineNumber":547,"content":"            // cancel collector and resend jobs"},{"type":"DELETE","lineNumber":536,"oldContent":"    }"},{"type":"INSERT","lineNumber":550,"content":""},{"type":"DELETE","lineNumber":589,"oldContent":""},{"type":"INSERT","lineNumber":603,"content":"                        else -> {}"},{"type":"DELETE","lineNumber":687,"oldContent":""},{"type":"INSERT","lineNumber":701,"content":"                            }"},{"type":"DELETE","lineNumber":747,"oldContent":"    }"},{"type":"DELETE","lineNumber":749,"oldContent":""},{"type":"INSERT","lineNumber":762,"content":"    }"},{"type":"INSERT","lineNumber":764,"content":""}]},{"timestamp":1758012040289,"changes":[{"type":"DELETE","lineNumber":71,"oldContent":"                        }"},{"type":"DELETE","lineNumber":72,"oldContent":"                }"},{"type":"INSERT","lineNumber":71,"content":"                        if (!state.value.connected) {"},{"type":"INSERT","lineNumber":72,"content":"                            Log.i(\"MavlinkRepo\", \"Connection Active\")"},{"type":"DELETE","lineNumber":125,"oldContent":"                            suspend fun setMessageRate(messageId: UInt, hz: Float) {"},{"type":"DELETE","lineNumber":126,"oldContent":"                                val cmd = CommandLong("},{"type":"INSERT","lineNumber":125,"content":"                    if (!state.value.fcuDetected) {"},{"type":"INSERT","lineNumber":126,"content":"                        fcuSystemId = it.systemId"},{"type":"INSERT","lineNumber":136,"content":"                                    targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":137,"content":"                                    targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":138,"content":"                                    command = MavCmd.SET_MESSAGE_INTERVAL.wrap(),"},{"type":"INSERT","lineNumber":139,"content":"                                    confirmation = 0u,"},{"type":"INSERT","lineNumber":140,"content":"                                    param1 = messageId.toFloat(),"},{"type":"INSERT","lineNumber":141,"content":"                                    param2 = intervalUsec,"},{"type":"INSERT","lineNumber":142,"content":"                                    param3 = 0f,"},{"type":"INSERT","lineNumber":143,"content":"                                    param4 = 0f,"},{"type":"INSERT","lineNumber":144,"content":"                                    param5 = 0f,"},{"type":"INSERT","lineNumber":145,"content":"                                    param6 = 0f,"},{"type":"DELETE","lineNumber":137,"oldContent":"                                try {"},{"type":"DELETE","lineNumber":138,"oldContent":"                                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":139,"oldContent":"                                    Log.e(\"MavlinkRepo\", \"Failed to send SET_MESSAGE_INTERVAL\", e)"},{"type":"DELETE","lineNumber":140,"oldContent":"                                }"},{"type":"DELETE","lineNumber":141,"oldContent":""},{"type":"DELETE","lineNumber":142,"oldContent":"                            setMessageRate(24u, 1f)  // GPS_RAW_INT"},{"type":"DELETE","lineNumber":143,"oldContent":"                            setMessageRate(74u, 5f)  // VFR_HUD"},{"type":"DELETE","lineNumber":144,"oldContent":"                        }"},{"type":"DELETE","lineNumber":145,"oldContent":"                }"},{"type":"DELETE","lineNumber":146,"oldContent":""},{"type":"DELETE","lineNumber":159,"oldContent":"                .collect { hud ->"},{"type":"DELETE","lineNumber":161,"oldContent":"                    _state.update {"},{"type":"DELETE","lineNumber":162,"oldContent":"                        it.copy("},{"type":"DELETE","lineNumber":163,"oldContent":"                            altitudeMsl = hud.alt,"},{"type":"DELETE","lineNumber":164,"oldContent":"                            groundspeed = hud.groundspeed.takeIf { v -> v > 0f }"},{"type":"DELETE","lineNumber":165,"oldContent":"                        )"},{"type":"INSERT","lineNumber":160,"content":"                            setMessageRate(147u, 1f) // BATTERY_STATUS"},{"type":"INSERT","lineNumber":161,"content":"                        }"},{"type":"INSERT","lineNumber":162,"content":"                    }"},{"type":"INSERT","lineNumber":163,"content":"                }"},{"type":"INSERT","lineNumber":164,"content":"        }"},{"type":"INSERT","lineNumber":165,"content":""},{"type":"INSERT","lineNumber":166,"content":"        // Collector to log COMMAND_ACK messages for diagnostics"},{"type":"INSERT","lineNumber":167,"content":"        scope.launch {"},{"type":"INSERT","lineNumber":168,"content":"            mavFrameStream"},{"type":"INSERT","lineNumber":169,"content":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":167,"oldContent":"                .collect { gp ->"},{"type":"DELETE","lineNumber":168,"oldContent":"                    val altAMSLm = gp.alt / 1000f"},{"type":"DELETE","lineNumber":169,"oldContent":"                    val relAltM = gp.relativeAlt / 1000f"},{"type":"DELETE","lineNumber":170,"oldContent":"                    val lon = gp.lon.takeIf { it != Int.MIN_VALUE }?.let { it / 10_000_000.0 }"},{"type":"DELETE","lineNumber":284,"oldContent":"                    when (message) {"},{"type":"DELETE","lineNumber":285,"oldContent":"                        is MissionRequest -> {"},{"type":"DELETE","lineNumber":286,"oldContent":"                            val seq = message.seq.toInt()"},{"type":"DELETE","lineNumber":287,"oldContent":"                            if (seq < mission.size) {"},{"type":"DELETE","lineNumber":288,"oldContent":"                                val waypoint = mission[seq]"},{"type":"DELETE","lineNumber":289,"oldContent":"                                val missionItem = MissionItemInt("},{"type":"DELETE","lineNumber":290,"oldContent":"                                    targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":284,"content":"                    val vBatt = if (s.voltageBattery.toUInt() == 0xFFFFu) null else s.voltageBattery.toFloat() / 1000f"},{"type":"INSERT","lineNumber":285,"content":"                    val pct = if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()"},{"type":"INSERT","lineNumber":286,"content":"                    val SENSOR_3D_GYRO = 1u"},{"type":"INSERT","lineNumber":287,"content":"                    val present = (s.onboardControlSensorsPresent.value and SENSOR_3D_GYRO) != 0u"},{"type":"INSERT","lineNumber":288,"content":"                    val enabled = (s.onboardControlSensorsEnabled.value and SENSOR_3D_GYRO) != 0u"},{"type":"INSERT","lineNumber":289,"content":"                    val healthy = (s.onboardControlSensorsHealth.value and SENSOR_3D_GYRO) != 0u"},{"type":"INSERT","lineNumber":290,"content":"                    val armable = present && enabled && healthy"},{"type":"DELETE","lineNumber":299,"oldContent":"                                    param3 = 0f,"},{"type":"DELETE","lineNumber":300,"oldContent":"                                    param4 = 0f,"},{"type":"INSERT","lineNumber":299,"content":"                .map { it.message }"},{"type":"INSERT","lineNumber":300,"content":"                .filterIsInstance<GpsRawInt>()"},{"type":"DELETE","lineNumber":314,"oldContent":"                            }"},{"type":"DELETE","lineNumber":315,"oldContent":"                        is MissionAck -> {"},{"type":"DELETE","lineNumber":316,"oldContent":"                            if (message.type == MavMissionResult.MAV_MISSION_ACCEPTED.wrap()) {"},{"type":"DELETE","lineNumber":317,"oldContent":"                                _state.update { it.copy(missionLoaded = true) }"},{"type":"DELETE","lineNumber":318,"oldContent":"                            }"},{"type":"DELETE","lineNumber":319,"oldContent":"                        }"},{"type":"INSERT","lineNumber":314,"content":"            confirmation = 0u,"},{"type":"INSERT","lineNumber":315,"content":"            param1 = param1,"},{"type":"INSERT","lineNumber":316,"content":"            param2 = param2,"},{"type":"INSERT","lineNumber":317,"content":"            param3 = param3,"},{"type":"INSERT","lineNumber":318,"content":"            param4 = param4,"},{"type":"INSERT","lineNumber":319,"content":"            param5 = param5,"},{"type":"MODIFY","lineNumber":336,"content":"            sendCommand(","oldContent":"            param6 = param6,"},{"type":"MODIFY","lineNumber":345,"content":"    suspend fun disarm() {","oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":353,"oldContent":"        // MAVLink base mode flags (from MAV_MODE_FLAG)"},{"type":"DELETE","lineNumber":354,"oldContent":"        val MAV_MODE_FLAG_CUSTOM_MODE_ENABLED: UInt = 1u"},{"type":"DELETE","lineNumber":355,"oldContent":"        val MAV_MODE_FLAG_TEST_ENABLED: UInt = 2u"},{"type":"DELETE","lineNumber":356,"oldContent":"        val MAV_MODE_FLAG_AUTO_ENABLED: UInt = 4u"},{"type":"DELETE","lineNumber":357,"oldContent":"        val MAV_MODE_FLAG_GUIDED_ENABLED: UInt = 8u"},{"type":"DELETE","lineNumber":358,"oldContent":""},{"type":"DELETE","lineNumber":359,"oldContent":"        val MAV_MODE_FLAG_STABILIZE_ENABLED: UInt = 16u"},{"type":"INSERT","lineNumber":353,"content":"        // For MAV_CMD_DO_SET_MODE in ArduPilot:"},{"type":"INSERT","lineNumber":354,"content":"        // param1: Base mode - should always be 1 (MAV_MODE_FLAG_CUSTOM_MODE_ENABLED)"},{"type":"INSERT","lineNumber":355,"content":"        // The armed status is handled automatically by ArduPilot, not via the base mode flags"},{"type":"DELETE","lineNumber":361,"oldContent":"        val MAV_MODE_FLAG_HIL_ENABLED: UInt = 32u"},{"type":"DELETE","lineNumber":362,"oldContent":"            MavCmd.DO_SET_MODE,"},{"type":"DELETE","lineNumber":363,"oldContent":"        val MAV_MODE_FLAG_MANUAL_INPUT_ENABLED: UInt = 64u"},{"type":"DELETE","lineNumber":364,"oldContent":"        val MAV_MODE_FLAG_SAFETY_ARMED: UInt = 128u"},{"type":"DELETE","lineNumber":365,"oldContent":"        // Determine appropriate base mode for the requested custom mode."},{"type":"DELETE","lineNumber":366,"oldContent":"        // ArduPilot commonly accepts baseMode = CUSTOM_MODE_ENABLED | AUTO_ENABLED when switching to AUTO."},{"type":"DELETE","lineNumber":367,"oldContent":"        val baseModeFlags: UInt = when (customMode) {"},{"type":"DELETE","lineNumber":368,"oldContent":"            MavMode.AUTO -> (MAV_MODE_FLAG_CUSTOM_MODE_ENABLED or MAV_MODE_FLAG_AUTO_ENABLED)"},{"type":"INSERT","lineNumber":357,"content":"            0f,                   // param3: custom sub mode (usually 0)"},{"type":"INSERT","lineNumber":358,"content":"            0f,                   // param6: empty"},{"type":"DELETE","lineNumber":370,"oldContent":"            MavMode.STABILIZE -> (MAV_MODE_FLAG_CUSTOM_MODE_ENABLED or MAV_MODE_FLAG_STABILIZE_ENABLED)"},{"type":"DELETE","lineNumber":372,"oldContent":"            MavMode.LOITER -> (MAV_MODE_FLAG_CUSTOM_MODE_ENABLED or MAV_MODE_FLAG_AUTO_ENABLED)"},{"type":"DELETE","lineNumber":374,"oldContent":"            else -> MAV_MODE_FLAG_CUSTOM_MODE_ENABLED"},{"type":"DELETE","lineNumber":376,"oldContent":"        }"},{"type":"DELETE","lineNumber":378,"oldContent":""},{"type":"DELETE","lineNumber":380,"oldContent":"        // send as float params (COMMAND_LONG uses float fields)"},{"type":"DELETE","lineNumber":381,"oldContent":"            -1f,"},{"type":"DELETE","lineNumber":382,"oldContent":"            0f,"},{"type":"DELETE","lineNumber":383,"oldContent":"            0f,"},{"type":"DELETE","lineNumber":384,"oldContent":"            baseModeFlags.toFloat(),   // param1: base mode flags"},{"type":"DELETE","lineNumber":385,"oldContent":"            0f,"},{"type":"DELETE","lineNumber":386,"oldContent":"            customMode.toFloat(),      // param2: custom mode"},{"type":"DELETE","lineNumber":387,"oldContent":"            0f,"},{"type":"DELETE","lineNumber":388,"oldContent":"            0f,                        // param3: custom sub mode"},{"type":"DELETE","lineNumber":389,"oldContent":"            0f,"},{"type":"DELETE","lineNumber":390,"oldContent":"            0f, 0f, 0f, 0f"},{"type":"DELETE","lineNumber":391,"oldContent":"            altitude"},{"type":"DELETE","lineNumber":392,"oldContent":"        )"},{"type":"DELETE","lineNumber":393,"oldContent":"        Log.i(\"MavlinkRepo\", \"Sent DO_SET_MODE: baseMode=$baseModeFlags customMode=$customMode\")"},{"type":"DELETE","lineNumber":394,"oldContent":"    }"},{"type":"INSERT","lineNumber":365,"content":"        // 1) Preferred: send SET_MODE message (base_mode: u8, custom_mode: u32)"},{"type":"INSERT","lineNumber":366,"content":"        try {"},{"type":"INSERT","lineNumber":367,"content":"            val setModeMsg = SetMode("},{"type":"INSERT","lineNumber":368,"content":"                targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":369,"content":"                baseMode = baseModeFlags.toUByte(),"},{"type":"INSERT","lineNumber":370,"content":"                customMode = customMode"},{"type":"INSERT","lineNumber":371,"content":"            )"},{"type":"INSERT","lineNumber":372,"content":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, setModeMsg)"},{"type":"INSERT","lineNumber":373,"content":"            Log.i(\"MavlinkRepo\", \"Sent SET_MODE: baseMode=$baseModeFlags customMode=$customMode\")"},{"type":"INSERT","lineNumber":374,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":375,"content":"            Log.w(\"MavlinkRepo\", \"Failed to send SET_MODE\", e)"},{"type":"INSERT","lineNumber":376,"content":"        }"},{"type":"INSERT","lineNumber":378,"content":"        // Wait briefly to see if heartbeat reports the new custom mode"},{"type":"INSERT","lineNumber":379,"content":"        val waitMs = 3000L"},{"type":"INSERT","lineNumber":380,"content":"        val startTime = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":381,"content":"        var modeObserved = false"},{"type":"INSERT","lineNumber":382,"content":"        while (System.currentTimeMillis() - startTime < waitMs) {"},{"type":"INSERT","lineNumber":383,"content":"            val modeStr = state.value.mode"},{"type":"INSERT","lineNumber":384,"content":"            if (modeStr != null) {"},{"type":"INSERT","lineNumber":385,"content":"                // check common mode names"},{"type":"INSERT","lineNumber":386,"content":"                when (customMode) {"},{"type":"INSERT","lineNumber":387,"content":"                    MavMode.AUTO -> if (modeStr.contains(\"Auto\", ignoreCase = true)) modeObserved = true"},{"type":"INSERT","lineNumber":388,"content":"                    MavMode.STABILIZE -> if (modeStr.contains(\"Stabilize\", ignoreCase = true)) modeObserved = true"},{"type":"INSERT","lineNumber":389,"content":"                    MavMode.LOITER -> if (modeStr.contains(\"Loiter\", ignoreCase = true)) modeObserved = true"},{"type":"INSERT","lineNumber":390,"content":"                    else -> {}"},{"type":"INSERT","lineNumber":391,"content":"                }"},{"type":"INSERT","lineNumber":392,"content":"            }"},{"type":"INSERT","lineNumber":393,"content":"            if (modeObserved) break"},{"type":"INSERT","lineNumber":394,"content":"            delay(250)"},{"type":"INSERT","lineNumber":395,"content":"        }"},{"type":"INSERT","lineNumber":396,"content":""},{"type":"INSERT","lineNumber":397,"content":"        if (modeObserved) {"},{"type":"INSERT","lineNumber":398,"content":"            Log.i(\"MavlinkRepo\", \"Mode change observed via SET_MODE: customMode=$customMode\")"},{"type":"INSERT","lineNumber":399,"content":"            return"},{"type":"INSERT","lineNumber":400,"content":"        }"},{"type":"INSERT","lineNumber":401,"content":""},{"type":"INSERT","lineNumber":402,"content":"        // 2) Fallback: send COMMAND_LONG MAV_CMD_DO_SET_MODE and wait for COMMAND_ACK"},{"type":"INSERT","lineNumber":403,"content":"        try {"},{"type":"INSERT","lineNumber":404,"content":"            Log.i(\"MavlinkRepo\", \"SET_MODE did not take effect; sending DO_SET_MODE fallback (baseMode=$baseModeFlags customMode=$customMode)\")"},{"type":"INSERT","lineNumber":405,"content":"            sendCommand("},{"type":"INSERT","lineNumber":406,"content":"                MavCmd.DO_SET_MODE,"},{"type":"INSERT","lineNumber":407,"content":"                baseModeFlags.toFloat(),   // param1: base mode flags"},{"type":"INSERT","lineNumber":408,"content":"                customMode.toFloat(),      // param2: custom mode"},{"type":"INSERT","lineNumber":409,"content":"                0f,                        // param3: custom sub mode"},{"type":"INSERT","lineNumber":410,"content":"                0f, 0f, 0f, 0f"},{"type":"INSERT","lineNumber":411,"content":"            )"},{"type":"INSERT","lineNumber":412,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":413,"content":"            Log.w(\"MavlinkRepo\", \"Failed to send DO_SET_MODE\", e)"},{"type":"INSERT","lineNumber":414,"content":"        }"},{"type":"INSERT","lineNumber":415,"content":""},{"type":"INSERT","lineNumber":416,"content":"        // wait for COMMAND_ACK for DO_SET_MODE"},{"type":"INSERT","lineNumber":417,"content":"        val ackDeferred = CompletableDeferred<Boolean?>()"},{"type":"INSERT","lineNumber":418,"content":"        val job = AppScope.launch {"},{"type":"INSERT","lineNumber":419,"content":"            connection.mavFrame.collect { frame ->"},{"type":"INSERT","lineNumber":420,"content":"                val msg = frame.message"},{"type":"INSERT","lineNumber":421,"content":"                if (msg is CommandAck) {"},{"type":"INSERT","lineNumber":422,"content":"                    try {"},{"type":"INSERT","lineNumber":423,"content":"                        if (msg.command == MavCmd.DO_SET_MODE.wrap()) {"},{"type":"INSERT","lineNumber":424,"content":"                            val res = msg.result.value"},{"type":"INSERT","lineNumber":425,"content":"                            Log.i(\"MavlinkRepo\", \"COMMAND_ACK for DO_SET_MODE result=$res\")"},{"type":"INSERT","lineNumber":426,"content":"                            if (!ackDeferred.isCompleted) {"},{"type":"INSERT","lineNumber":427,"content":"                                ackDeferred.complete(if (res == 0u) true else false)"},{"type":"INSERT","lineNumber":428,"content":"                            }"},{"type":"INSERT","lineNumber":429,"content":"                        }"},{"type":"INSERT","lineNumber":430,"content":"                    } catch (t: Throwable) {"},{"type":"INSERT","lineNumber":431,"content":"                        Log.w(\"MavlinkRepo\", \"Error while processing COMMAND_ACK for DO_SET_MODE\", t)"},{"type":"INSERT","lineNumber":432,"content":"                    }"},{"type":"INSERT","lineNumber":433,"content":"                }"},{"type":"INSERT","lineNumber":434,"content":"            }"},{"type":"INSERT","lineNumber":435,"content":"        }"},{"type":"INSERT","lineNumber":436,"content":""},{"type":"INSERT","lineNumber":437,"content":"        val ackResult = withTimeoutOrNull(1500L) { ackDeferred.await() }"},{"type":"INSERT","lineNumber":438,"content":"        job.cancel()"},{"type":"INSERT","lineNumber":439,"content":""},{"type":"INSERT","lineNumber":440,"content":"        if (ackResult == true) {"},{"type":"INSERT","lineNumber":441,"content":"            Log.i(\"MavlinkRepo\", \"DO_SET_MODE acknowledged (accepted)\")"},{"type":"INSERT","lineNumber":442,"content":"            return"},{"type":"INSERT","lineNumber":443,"content":"        } else {"},{"type":"INSERT","lineNumber":444,"content":"            Log.e(\"MavlinkRepo\", \"Mode change to customMode=$customMode failed or not acknowledged\")"},{"type":"INSERT","lineNumber":445,"content":"        }"},{"type":"INSERT","lineNumber":446,"content":""},{"type":"DELETE","lineNumber":511,"oldContent":"}"},{"type":"DELETE","lineNumber":512,"oldContent":"    }"},{"type":"DELETE","lineNumber":513,"oldContent":"        Log.e(\"MavlinkRepo\", \"Fallback start failed: vehicle did not switch to AUTO mode\")"},{"type":"DELETE","lineNumber":514,"oldContent":"            delay(200)"},{"type":"DELETE","lineNumber":515,"oldContent":"                return true"},{"type":"INSERT","lineNumber":562,"content":"            val firstRequestTimeout = 5000L // increase wait to allow FC more time to request"},{"type":"INSERT","lineNumber":563,"content":"             val startWait = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":564,"content":"             while (!firstRequestReceived && !ackDeferred.isCompleted && System.currentTimeMillis() - startWait < firstRequestTimeout) {"},{"type":"INSERT","lineNumber":565,"content":"                 delay(100)"},{"type":"INSERT","lineNumber":566,"content":"             }"},{"type":"DELETE","lineNumber":517,"oldContent":"                delay(500)"},{"type":"INSERT","lineNumber":568,"content":"             if (!firstRequestReceived) {"},{"type":"INSERT","lineNumber":576,"content":"                        targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":577,"content":"                        seq = seq.toUShort()"},{"type":"INSERT","lineNumber":578,"content":"                    )"},{"type":"INSERT","lineNumber":579,"content":"                    try {"},{"type":"INSERT","lineNumber":580,"content":"                        // log full item contents for diagnostics"},{"type":"INSERT","lineNumber":581,"content":"                        Log.d(\"MavlinkRepo\", \"Sending fallback item seq=$seq cmd=${missionItem.command} frame=${missionItem.frame} x=${missionItem.x} y=${missionItem.y} z=${missionItem.z}\")"},{"type":"INSERT","lineNumber":582,"content":"                         connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"INSERT","lineNumber":583,"content":"                         sentSeqs.add(seq)"},{"type":"INSERT","lineNumber":584,"content":"                         Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_ITEM_INT seq=$seq\")"},{"type":"INSERT","lineNumber":585,"content":"                         // give FC a bit more time to process unsolicited item and possibly request next"},{"type":"INSERT","lineNumber":586,"content":"                         delay(300)"},{"type":"INSERT","lineNumber":587,"content":"                     } catch (e: Exception) {"},{"type":"INSERT","lineNumber":588,"content":"                         Log.e(\"MavlinkRepo\", \"Fallback: Failed to send mission item seq=$seq\", e)"},{"type":"INSERT","lineNumber":589,"content":"                     }"},{"type":"INSERT","lineNumber":590,"content":"                 }"},{"type":"INSERT","lineNumber":591,"content":"             }"},{"type":"DELETE","lineNumber":526,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":527,"oldContent":"            sendCommand(MavCmd.DO_SET_MODE, MavMode.AUTO.toFloat(), 0f)"},{"type":"DELETE","lineNumber":528,"oldContent":"            Log.i(\"MavlinkRepo\", \"Fallback: Requesting mode change to AUTO via DO_SET_MODE\")"},{"type":"DELETE","lineNumber":529,"oldContent":"        try {"},{"type":"DELETE","lineNumber":530,"oldContent":"        // Request mode change to AUTO using DO_SET_MODE"},{"type":"DELETE","lineNumber":531,"oldContent":"        }"},{"type":"DELETE","lineNumber":532,"oldContent":"            Log.w(\"MavlinkRepo\", \"Fallback: Failed to send MISSION_SET_CURRENT\", e)"},{"type":"DELETE","lineNumber":533,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":593,"content":"            // Wait for ACK with timeout"},{"type":"INSERT","lineNumber":594,"content":"            val ackReceived = withTimeoutOrNull(timeoutMs) {"},{"type":"INSERT","lineNumber":595,"content":"                ackDeferred.await()"},{"type":"INSERT","lineNumber":596,"content":"            } ?: false"},{"type":"DELETE","lineNumber":535,"oldContent":"        }"},{"type":"DELETE","lineNumber":536,"oldContent":"                    return false"},{"type":"DELETE","lineNumber":537,"oldContent":"                    // Don't retry on a negative ACK; break and return failure"},{"type":"DELETE","lineNumber":538,"oldContent":"                    Log.e(\"MavlinkRepo\", \"Mission start rejected by FCU on attempt $attempt with result=$result\")"},{"type":"DELETE","lineNumber":539,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":540,"oldContent":"                    Log.i(\"MavlinkRepo\", \"Mission start acknowledged by FCU on attempt $attempt\")"},{"type":"DELETE","lineNumber":541,"oldContent":""},{"type":"DELETE","lineNumber":542,"oldContent":"                if (result == 0u) {"},{"type":"DELETE","lineNumber":543,"oldContent":"            if (result != null) {"},{"type":"DELETE","lineNumber":544,"oldContent":""},{"type":"DELETE","lineNumber":545,"oldContent":"            val result = withTimeoutOrNull(perAttemptTimeout) { ackDeferred.await() }"},{"type":"DELETE","lineNumber":546,"oldContent":""},{"type":"INSERT","lineNumber":598,"content":"            // cancel collector and resend jobs"},{"type":"INSERT","lineNumber":601,"content":""},{"type":"DELETE","lineNumber":559,"oldContent":"            // cancel collector and resend jobs"},{"type":"DELETE","lineNumber":564,"oldContent":"        return false"},{"type":"DELETE","lineNumber":571,"oldContent":"                // Give FC a moment to start the mission"},{"type":"INSERT","lineNumber":623,"content":"        try {"},{"type":"DELETE","lineNumber":598,"oldContent":"        }"},{"type":"DELETE","lineNumber":599,"oldContent":""},{"type":"DELETE","lineNumber":600,"oldContent":"            job.cancel()"},{"type":"DELETE","lineNumber":601,"oldContent":"                }"},{"type":"DELETE","lineNumber":602,"oldContent":""},{"type":"INSERT","lineNumber":649,"content":"                            perSeqMap[msg.seq.toInt()]?.let { d -> if (!d.isCompleted) d.complete(Unit) }"},{"type":"INSERT","lineNumber":650,"content":"                        }"},{"type":"INSERT","lineNumber":651,"content":"                        is MissionAck -> {"},{"type":"INSERT","lineNumber":652,"content":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_ACK type=${msg.type}\")"},{"type":"INSERT","lineNumber":653,"content":"                        }"},{"type":"INSERT","lineNumber":654,"content":"                        else -> {}"},{"type":"DELETE","lineNumber":615,"oldContent":"                Log.i(\"MavlinkRepo\", \"Fallback: Vehicle switched to AUTO mode\")"},{"type":"DELETE","lineNumber":616,"oldContent":"                        else -> {}"},{"type":"INSERT","lineNumber":667,"content":""},{"type":"DELETE","lineNumber":653,"oldContent":"    }"},{"type":"INSERT","lineNumber":704,"content":""},{"type":"DELETE","lineNumber":665,"oldContent":"            Log.i(\"MavlinkRepo\", \"Fallback: Requesting mode change to AUTO via DO_SET_MODE\")"},{"type":"INSERT","lineNumber":716,"content":"            return false"},{"type":"DELETE","lineNumber":670,"oldContent":""},{"type":"INSERT","lineNumber":721,"content":"            val setCurrent = MissionSetCurrent(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = first.toUShort())"},{"type":"DELETE","lineNumber":686,"oldContent":""},{"type":"DELETE","lineNumber":687,"oldContent":"}"},{"type":"INSERT","lineNumber":737,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":738,"content":"                Log.e(\"MavlinkRepo\", \"Failed to send MISSION_START on attempt $attempt\", e)"},{"type":"DELETE","lineNumber":689,"oldContent":"        return false"},{"type":"DELETE","lineNumber":690,"oldContent":"        Log.e(\"MavlinkRepo\", \"Fallback start failed: vehicle did not switch to AUTO mode\")"},{"type":"DELETE","lineNumber":692,"oldContent":"        }"},{"type":"DELETE","lineNumber":693,"oldContent":"            delay(200)"},{"type":"DELETE","lineNumber":694,"oldContent":"            if (state.value.mode?.contains(\"Auto\", ignoreCase = true) == true) {"},{"type":"DELETE","lineNumber":695,"oldContent":"        while (System.currentTimeMillis() - startWaitMode < modeWaitMs) {"},{"type":"DELETE","lineNumber":696,"oldContent":"        val startWaitMode = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":697,"oldContent":"        val modeWaitMs = 5000L"},{"type":"DELETE","lineNumber":698,"oldContent":"        // Request mode change to AUTO using DO_SET_MODE"},{"type":"DELETE","lineNumber":699,"oldContent":""},{"type":"DELETE","lineNumber":700,"oldContent":"        }"},{"type":"INSERT","lineNumber":741,"content":"            // wait for COMMAND_ACK for MISSION_START"},{"type":"INSERT","lineNumber":742,"content":"            val ackDeferred = CompletableDeferred<UInt?>()"},{"type":"INSERT","lineNumber":743,"content":"            val job = AppScope.launch {"},{"type":"INSERT","lineNumber":744,"content":"                connection.mavFrame.collect { frame ->"},{"type":"INSERT","lineNumber":745,"content":"                    val msg = frame.message"},{"type":"INSERT","lineNumber":746,"content":"                    if (msg is CommandAck) {"},{"type":"INSERT","lineNumber":747,"content":"                        try {"},{"type":"INSERT","lineNumber":748,"content":"                            if (msg.command == MavCmd.MISSION_START.wrap()) {"},{"type":"INSERT","lineNumber":749,"content":"                                val resultVal = msg.result.value"},{"type":"INSERT","lineNumber":750,"content":"                                Log.i(\"MavlinkRepo\", \"Observed COMMAND_ACK for MISSION_START result=$resultVal on attempt $attempt\")"},{"type":"INSERT","lineNumber":751,"content":"                                if (!ackDeferred.isCompleted) ackDeferred.complete(resultVal)"},{"type":"INSERT","lineNumber":752,"content":"                            }"},{"type":"DELETE","lineNumber":702,"oldContent":"}"},{"type":"INSERT","lineNumber":754,"content":"                            Log.w(\"MavlinkRepo\", \"Error while processing COMMAND_ACK\", t)"},{"type":"DELETE","lineNumber":711,"oldContent":"        // Fallback approach: set mission current and change mode to AUTO (many FCs start mission when switched to AUTO)"},{"type":"INSERT","lineNumber":763,"content":"            if (result != null) {"},{"type":"DELETE","lineNumber":713,"oldContent":"                delay(500L)"},{"type":"DELETE","lineNumber":714,"oldContent":"                            }"},{"type":"DELETE","lineNumber":715,"oldContent":"                    return false"},{"type":"INSERT","lineNumber":765,"content":"                    Log.i(\"MavlinkRepo\", \"Mission start acknowledged by FCU on attempt $attempt\")"},{"type":"INSERT","lineNumber":766,"content":"                    return true"},{"type":"DELETE","lineNumber":717,"oldContent":""},{"type":"INSERT","lineNumber":768,"content":"                    Log.e(\"MavlinkRepo\", \"Mission start rejected by FCU on attempt $attempt with result=$result\")"},{"type":"DELETE","lineNumber":724,"oldContent":"                delay(500)"},{"type":"DELETE","lineNumber":725,"oldContent":"                // Give FC a moment to start the mission"},{"type":"INSERT","lineNumber":775,"content":"                delay(500L)"},{"type":"INSERT","lineNumber":776,"content":"            }"},{"type":"DELETE","lineNumber":730,"oldContent":"}"},{"type":"DELETE","lineNumber":731,"oldContent":"        return false"},{"type":"DELETE","lineNumber":732,"oldContent":"    }"},{"type":"DELETE","lineNumber":733,"oldContent":"        Log.e(\"MavlinkRepo\", \"Fallback start failed: vehicle did not switch to AUTO mode\")"},{"type":"DELETE","lineNumber":734,"oldContent":""},{"type":"DELETE","lineNumber":735,"oldContent":"            }"},{"type":"DELETE","lineNumber":736,"oldContent":"        while (System.currentTimeMillis() - startWaitMode < modeWaitMs) {"},{"type":"INSERT","lineNumber":781,"content":"        // Fallback approach: set mission current and change mode to AUTO (many FCs start mission when switched to AUTO)"},{"type":"INSERT","lineNumber":782,"content":"        try {"},{"type":"INSERT","lineNumber":783,"content":"            val setCurrent = MissionSetCurrent(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = first.toUShort())"},{"type":"INSERT","lineNumber":784,"content":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, setCurrent)"},{"type":"INSERT","lineNumber":785,"content":"            Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_SET_CURRENT seq=$first\")"},{"type":"INSERT","lineNumber":786,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":787,"content":"            Log.w(\"MavlinkRepo\", \"Fallback: Failed to send MISSION_SET_CURRENT\", e)"},{"type":"DELETE","lineNumber":753,"oldContent":"        }"},{"type":"INSERT","lineNumber":804,"content":"                // Give FC a moment to start the mission"},{"type":"DELETE","lineNumber":755,"oldContent":""},{"type":"DELETE","lineNumber":756,"oldContent":"            if (state.value.mode?.contains(\"Auto\", ignoreCase = true) == true) {"},{"type":"INSERT","lineNumber":806,"content":"                return true"},{"type":"INSERT","lineNumber":807,"content":"            }"},{"type":"INSERT","lineNumber":808,"content":"            delay(200)"},{"type":"DELETE","lineNumber":758,"oldContent":"}"},{"type":"DELETE","lineNumber":760,"oldContent":""},{"type":"DELETE","lineNumber":761,"oldContent":""},{"type":"INSERT","lineNumber":811,"content":"        Log.e(\"MavlinkRepo\", \"Fallback start failed: vehicle did not switch to AUTO mode\")"},{"type":"INSERT","lineNumber":812,"content":"        return false"},{"type":"INSERT","lineNumber":814,"content":"}"},{"type":"INSERT","lineNumber":815,"content":""}]},{"timestamp":1758012135622,"changes":[{"type":"MODIFY","lineNumber":20,"content":"// MAVLink flight modes (ArduPilot values)","oldContent":") {"},{"type":"DELETE","lineNumber":41,"oldContent":""},{"type":"DELETE","lineNumber":42,"oldContent":"        suspend fun reconnect(scope: kotlinx.coroutines.CoroutineScope) {"},{"type":"INSERT","lineNumber":41,"content":"    // Diagnostic info"},{"type":"INSERT","lineNumber":42,"content":"    private val _lastFailure = MutableStateFlow<Throwable?>(null)"},{"type":"MODIFY","lineNumber":53,"content":"                try {","oldContent":"            }"},{"type":"DELETE","lineNumber":55,"oldContent":"        // Manage connection state + reconnects"},{"type":"DELETE","lineNumber":56,"oldContent":"        scope.launch {"},{"type":"INSERT","lineNumber":55,"content":"                        return // Exit on successful connection"},{"type":"INSERT","lineNumber":56,"content":"                    }"},{"type":"MODIFY","lineNumber":58,"content":"                    Log.e(\"MavlinkRepo\", \"Connection attempt failed\", e)","oldContent":"            connection.streamState.collect { st ->"},{"type":"MODIFY","lineNumber":60,"content":"                }","oldContent":"                    is StreamState.Active -> {"},{"type":"MODIFY","lineNumber":63,"content":"        }","oldContent":"                            _state.update { it.copy(connected = true) }"},{"type":"MODIFY","lineNumber":66,"content":"        scope.launch {","oldContent":"                    }"},{"type":"DELETE","lineNumber":69,"oldContent":"                            Log.i(\"MavlinkRepo\", \"Connection Inactive, reconnecting...\")"},{"type":"DELETE","lineNumber":70,"oldContent":"                            _state.update { it.copy(connected = false, fcuDetected = false) }"},{"type":"INSERT","lineNumber":69,"content":"                when (st) {"},{"type":"INSERT","lineNumber":70,"content":"                    is StreamState.Active -> {"},{"type":"MODIFY","lineNumber":74,"content":"                        }","oldContent":"                }"},{"type":"DELETE","lineNumber":77,"oldContent":""},{"type":"DELETE","lineNumber":78,"oldContent":"        // Send GCS heartbeat"},{"type":"INSERT","lineNumber":77,"content":"                        if (state.value.connected) {"},{"type":"INSERT","lineNumber":78,"content":"                            Log.i(\"MavlinkRepo\", \"Connection Inactive, reconnecting...\")"},{"type":"DELETE","lineNumber":95,"oldContent":"                delay(1000)"},{"type":"DELETE","lineNumber":96,"oldContent":"        }"},{"type":"INSERT","lineNumber":95,"content":"            )"},{"type":"INSERT","lineNumber":96,"content":"            while (isActive) {"},{"type":"MODIFY","lineNumber":104,"content":"                }","oldContent":"        scope.launch {"},{"type":"DELETE","lineNumber":121,"oldContent":"                        // Set message intervals"},{"type":"DELETE","lineNumber":122,"oldContent":"                        launch {"},{"type":"DELETE","lineNumber":123,"oldContent":"                            suspend fun setMessageRate(messageId: UInt, hz: Float) {"},{"type":"INSERT","lineNumber":121,"content":"        scope.launch {"},{"type":"INSERT","lineNumber":122,"content":"            mavFrameStream"},{"type":"INSERT","lineNumber":123,"content":"                .filter { it.message is Heartbeat && (it.message as Heartbeat).type != MavType.GCS.wrap() }"},{"type":"MODIFY","lineNumber":130,"content":"","oldContent":"                                    confirmation = 0u,"},{"type":"DELETE","lineNumber":134,"oldContent":"                                    param4 = 0f,"},{"type":"DELETE","lineNumber":135,"oldContent":"                                    param5 = 0f,"},{"type":"INSERT","lineNumber":134,"content":"                                val intervalUsec = if (hz <= 0f) 0f else (1_000_000f / hz)"},{"type":"INSERT","lineNumber":135,"content":"                                val cmd = CommandLong("},{"type":"DELETE","lineNumber":137,"oldContent":"                                    param7 = 0f"},{"type":"INSERT","lineNumber":146,"content":"                                    param7 = 0f"},{"type":"MODIFY","lineNumber":160,"content":"                            setMessageRate(147u, 1f) // BATTERY_STATUS","oldContent":"                            setMessageRate(147u, 1f) // BATTERY_STATUS"},{"type":"DELETE","lineNumber":167,"oldContent":"                        it.copy("},{"type":"INSERT","lineNumber":170,"content":"                .map { it.message }"},{"type":"DELETE","lineNumber":196,"oldContent":"                    _state.update {"},{"type":"INSERT","lineNumber":197,"content":"                            altitudeMsl = hud.alt,"},{"type":"MODIFY","lineNumber":199,"content":"                            groundspeed = hud.groundspeed.takeIf { v -> v > 0f }","oldContent":"                            latitude = lat,"},{"type":"DELETE","lineNumber":201,"oldContent":"                        )"},{"type":"INSERT","lineNumber":202,"content":"                }"},{"type":"INSERT","lineNumber":205,"content":"        // GLOBAL_POSITION_INT"},{"type":"INSERT","lineNumber":208,"content":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":208,"oldContent":"                .filterIsInstance<BatteryStatus>()"},{"type":"DELETE","lineNumber":209,"oldContent":"                .map { it.message }"},{"type":"DELETE","lineNumber":211,"oldContent":"                    _state.update { it.copy(currentA = currentA) }"},{"type":"DELETE","lineNumber":212,"oldContent":"                }"},{"type":"DELETE","lineNumber":213,"oldContent":"        //HEARTBEAT for mode, armed, armable"},{"type":"DELETE","lineNumber":214,"oldContent":"        scope.launch {"},{"type":"DELETE","lineNumber":215,"oldContent":"                .filter{ frame-> state.value.fcuDetected && frame.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":216,"oldContent":"                .map{frame -> frame.message}"},{"type":"DELETE","lineNumber":217,"oldContent":"                .collect{ hb->"},{"type":"DELETE","lineNumber":218,"oldContent":"                    val mode = when (hb.customMode) {"},{"type":"DELETE","lineNumber":219,"oldContent":"                        1u -> \"Acro\""},{"type":"INSERT","lineNumber":211,"content":"                .collect { gp ->"},{"type":"INSERT","lineNumber":212,"content":"                    val altAMSLm = gp.alt / 1000f"},{"type":"INSERT","lineNumber":213,"content":"                    val relAltM = gp.relativeAlt / 1000f"},{"type":"INSERT","lineNumber":214,"content":"                    val lat = gp.lat.takeIf { it != Int.MIN_VALUE }?.let { it / 10_000_000.0 }"},{"type":"INSERT","lineNumber":215,"content":"                    val lon = gp.lon.takeIf { it != Int.MIN_VALUE }?.let { it / 10_000_000.0 }"},{"type":"INSERT","lineNumber":216,"content":"                    _state.update {"},{"type":"INSERT","lineNumber":217,"content":"                        it.copy("},{"type":"INSERT","lineNumber":218,"content":"                            altitudeMsl = altAMSLm,"},{"type":"INSERT","lineNumber":219,"content":"                            altitudeRelative = relAltM,"},{"type":"DELETE","lineNumber":248,"oldContent":"        scope.launch {"},{"type":"DELETE","lineNumber":249,"oldContent":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":250,"oldContent":"                .filterIsInstance<SysStatus>()"},{"type":"DELETE","lineNumber":251,"oldContent":"                    val vBatt = if (s.voltageBattery.toUInt() == 0xFFFFu) null else s.voltageBattery.toFloat() / 1000f"},{"type":"DELETE","lineNumber":252,"oldContent":"                    val SENSOR_3D_GYRO = 1u"},{"type":"DELETE","lineNumber":253,"oldContent":"                    val enabled = (s.onboardControlSensorsEnabled.value and SENSOR_3D_GYRO) != 0u"},{"type":"DELETE","lineNumber":254,"oldContent":"                    val armable = present && enabled && healthy"},{"type":"DELETE","lineNumber":255,"oldContent":"                }"},{"type":"DELETE","lineNumber":256,"oldContent":""},{"type":"DELETE","lineNumber":257,"oldContent":"        // GPS_RAW_INT"},{"type":"DELETE","lineNumber":258,"oldContent":"        scope.launch {"},{"type":"DELETE","lineNumber":259,"oldContent":"            mavFrameStream"},{"type":"DELETE","lineNumber":260,"oldContent":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":261,"oldContent":"                .map { it.message }"},{"type":"DELETE","lineNumber":262,"oldContent":"                .filterIsInstance<GpsRawInt>()"},{"type":"DELETE","lineNumber":263,"oldContent":"                .collect { gps ->"},{"type":"INSERT","lineNumber":248,"content":"                        1u -> \"Acro\""},{"type":"INSERT","lineNumber":249,"content":"                        2u -> \"Alt Hold\""},{"type":"INSERT","lineNumber":250,"content":"                        3u -> \"Auto\""},{"type":"INSERT","lineNumber":251,"content":"                        4u -> \"Guided\""},{"type":"INSERT","lineNumber":252,"content":"                        5u -> \"Loiter\""},{"type":"INSERT","lineNumber":253,"content":"                        6u -> \"RTL\""},{"type":"INSERT","lineNumber":254,"content":"                        7u -> \"Circle\""},{"type":"INSERT","lineNumber":255,"content":"                        9u -> \"Land\""},{"type":"INSERT","lineNumber":256,"content":"                        11u -> \"Drift\""},{"type":"INSERT","lineNumber":257,"content":"                        13u -> \"Sport\""},{"type":"INSERT","lineNumber":258,"content":"                        14u -> \"Flip\""},{"type":"INSERT","lineNumber":259,"content":"                        15u -> \"AutoTune\""},{"type":"INSERT","lineNumber":260,"content":"                        16u -> \"Pos Hold\""},{"type":"INSERT","lineNumber":261,"content":"                        17u -> \"Brake\""},{"type":"INSERT","lineNumber":262,"content":"                        18u -> \"Throw\""},{"type":"INSERT","lineNumber":263,"content":"                        19u -> \"Avoid_ADSB\""},{"type":"DELETE","lineNumber":282,"oldContent":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":283,"oldContent":"                .map { it.message }"},{"type":"INSERT","lineNumber":282,"content":"                .filterIsInstance<SysStatus>()"},{"type":"INSERT","lineNumber":283,"content":"                .collect { s ->"},{"type":"DELETE","lineNumber":297,"oldContent":"                                    autocontinue = 1u,"},{"type":"DELETE","lineNumber":298,"oldContent":"                                    param1 = 0f,"},{"type":"INSERT","lineNumber":297,"content":"            mavFrameStream"},{"type":"INSERT","lineNumber":298,"content":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":311,"oldContent":"                                }"},{"type":"DELETE","lineNumber":312,"oldContent":"                            }"},{"type":"INSERT","lineNumber":311,"content":"            targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":312,"content":"            targetComponent = fcuComponentId,"},{"type":"MODIFY","lineNumber":325,"content":"               gcsSystemId,","oldContent":""},{"type":"DELETE","lineNumber":334,"oldContent":"            param3 = param3,"},{"type":"DELETE","lineNumber":335,"oldContent":"            param4 = param4,"},{"type":"INSERT","lineNumber":334,"content":"    suspend fun arm() {"},{"type":"INSERT","lineNumber":335,"content":"        if (state.value.armable) {"},{"type":"MODIFY","lineNumber":339,"content":"            )","oldContent":"        )"},{"type":"MODIFY","lineNumber":343,"content":"    }","oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":353,"oldContent":"        // For MAV_CMD_DO_SET_MODE in ArduPilot:"},{"type":"DELETE","lineNumber":354,"oldContent":"        // param1: Base mode - should always be 1 (MAV_MODE_FLAG_CUSTOM_MODE_ENABLED)"},{"type":"DELETE","lineNumber":355,"oldContent":"        // The armed status is handled automatically by ArduPilot, not via the base mode flags"},{"type":"INSERT","lineNumber":353,"content":"        // MAVLink base mode flags (from MAV_MODE_FLAG)"},{"type":"INSERT","lineNumber":354,"content":"        val MAV_MODE_FLAG_CUSTOM_MODE_ENABLED: UInt = 1u"},{"type":"INSERT","lineNumber":355,"content":"        val MAV_MODE_FLAG_AUTO_ENABLED: UInt = 4u"},{"type":"INSERT","lineNumber":356,"content":"        val MAV_MODE_FLAG_STABILIZE_ENABLED: UInt = 16u"},{"type":"INSERT","lineNumber":357,"content":"        val MAV_MODE_FLAG_SAFETY_ARMED: UInt = 128u"},{"type":"INSERT","lineNumber":358,"content":""},{"type":"INSERT","lineNumber":359,"content":"        val flagsBase: UInt = when (customMode) {"},{"type":"INSERT","lineNumber":360,"content":"            MavMode.AUTO -> (MAV_MODE_FLAG_CUSTOM_MODE_ENABLED or MAV_MODE_FLAG_AUTO_ENABLED)"},{"type":"INSERT","lineNumber":361,"content":"            MavMode.STABILIZE -> (MAV_MODE_FLAG_CUSTOM_MODE_ENABLED or MAV_MODE_FLAG_STABILIZE_ENABLED)"},{"type":"INSERT","lineNumber":362,"content":"            MavMode.LOITER -> (MAV_MODE_FLAG_CUSTOM_MODE_ENABLED or MAV_MODE_FLAG_AUTO_ENABLED)"},{"type":"INSERT","lineNumber":363,"content":"            else -> MAV_MODE_FLAG_CUSTOM_MODE_ENABLED"},{"type":"INSERT","lineNumber":364,"content":"        }"},{"type":"INSERT","lineNumber":365,"content":""},{"type":"INSERT","lineNumber":366,"content":"        val flagsWithArmed = flagsBase or MAV_MODE_FLAG_SAFETY_ARMED"},{"type":"INSERT","lineNumber":367,"content":""},{"type":"INSERT","lineNumber":368,"content":"        suspend fun observedModeWithin(timeoutMs: Long, check: () -> Boolean): Boolean {"},{"type":"INSERT","lineNumber":369,"content":"            val start = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":370,"content":"            while (System.currentTimeMillis() - start < timeoutMs) {"},{"type":"INSERT","lineNumber":371,"content":"                if (check()) return true"},{"type":"INSERT","lineNumber":372,"content":"                delay(250)"},{"type":"INSERT","lineNumber":373,"content":"            }"},{"type":"INSERT","lineNumber":374,"content":"            return false"},{"type":"INSERT","lineNumber":375,"content":"        }"},{"type":"INSERT","lineNumber":376,"content":""},{"type":"INSERT","lineNumber":377,"content":"        // Helper to try SET_MODE and observe telemetry"},{"type":"INSERT","lineNumber":378,"content":"        suspend fun trySetMode(baseFlags: UInt): Boolean {"},{"type":"INSERT","lineNumber":379,"content":"            try {"},{"type":"INSERT","lineNumber":380,"content":"                val setModeMsg = SetMode("},{"type":"INSERT","lineNumber":381,"content":"                    targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":382,"content":"                    baseMode = baseFlags.toUByte(),"},{"type":"INSERT","lineNumber":383,"content":"                    customMode = customMode"},{"type":"INSERT","lineNumber":384,"content":"                )"},{"type":"INSERT","lineNumber":385,"content":"                connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, setModeMsg)"},{"type":"INSERT","lineNumber":386,"content":"                Log.i(\"MavlinkRepo\", \"Sent SET_MODE: baseMode=$baseFlags customMode=$customMode\")"},{"type":"INSERT","lineNumber":387,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":388,"content":"                Log.w(\"MavlinkRepo\", \"Failed to send SET_MODE\", e)"},{"type":"INSERT","lineNumber":389,"content":"                return false"},{"type":"INSERT","lineNumber":390,"content":"            }"},{"type":"INSERT","lineNumber":391,"content":""},{"type":"INSERT","lineNumber":392,"content":"            val ok = observedModeWithin(2500L) {"},{"type":"INSERT","lineNumber":393,"content":"                val modeStr = state.value.mode"},{"type":"INSERT","lineNumber":394,"content":"                when (customMode) {"},{"type":"INSERT","lineNumber":395,"content":"                    MavMode.AUTO -> modeStr?.contains(\"Auto\", ignoreCase = true) == true"},{"type":"INSERT","lineNumber":396,"content":"                    MavMode.STABILIZE -> modeStr?.contains(\"Stabilize\", ignoreCase = true) == true"},{"type":"INSERT","lineNumber":397,"content":"                    MavMode.LOITER -> modeStr?.contains(\"Loiter\", ignoreCase = true) == true"},{"type":"INSERT","lineNumber":398,"content":"                    else -> false"},{"type":"INSERT","lineNumber":399,"content":"                }"},{"type":"INSERT","lineNumber":400,"content":"            }"},{"type":"INSERT","lineNumber":401,"content":"            if (ok) Log.i(\"MavlinkRepo\", \"Mode change observed via SET_MODE: customMode=$customMode base=$baseFlags\")"},{"type":"INSERT","lineNumber":402,"content":"            return ok"},{"type":"INSERT","lineNumber":403,"content":"        }"},{"type":"INSERT","lineNumber":404,"content":""},{"type":"INSERT","lineNumber":405,"content":"        // Helper to try DO_SET_MODE (COMMAND_LONG) and wait for COMMAND_ACK accepted"},{"type":"INSERT","lineNumber":406,"content":"        suspend fun tryDoSetMode(baseFlags: UInt): Boolean {"},{"type":"INSERT","lineNumber":407,"content":"            try {"},{"type":"INSERT","lineNumber":408,"content":"                sendCommand("},{"type":"INSERT","lineNumber":409,"content":"                    MavCmd.DO_SET_MODE,"},{"type":"INSERT","lineNumber":410,"content":"                    baseFlags.toFloat(),"},{"type":"INSERT","lineNumber":411,"content":"                    customMode.toFloat(),"},{"type":"INSERT","lineNumber":412,"content":"                    0f, 0f, 0f, 0f, 0f"},{"type":"INSERT","lineNumber":413,"content":"                )"},{"type":"INSERT","lineNumber":414,"content":"                Log.i(\"MavlinkRepo\", \"Sent DO_SET_MODE: baseMode=$baseFlags customMode=$customMode\")"},{"type":"INSERT","lineNumber":415,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":416,"content":"                Log.w(\"MavlinkRepo\", \"Failed to send DO_SET_MODE\", e)"},{"type":"INSERT","lineNumber":417,"content":"                return false"},{"type":"INSERT","lineNumber":418,"content":"            }"},{"type":"INSERT","lineNumber":419,"content":""},{"type":"INSERT","lineNumber":420,"content":"            val ackDeferred = CompletableDeferred<Boolean?>()"},{"type":"INSERT","lineNumber":421,"content":"            val job = AppScope.launch {"},{"type":"INSERT","lineNumber":422,"content":"                connection.mavFrame.collect { frame ->"},{"type":"INSERT","lineNumber":423,"content":"                    val msg = frame.message"},{"type":"INSERT","lineNumber":424,"content":"                    if (msg is CommandAck) {"},{"type":"INSERT","lineNumber":425,"content":"                        try {"},{"type":"INSERT","lineNumber":426,"content":"                            if (msg.command == MavCmd.DO_SET_MODE.wrap()) {"},{"type":"INSERT","lineNumber":427,"content":"                                val res = msg.result.value"},{"type":"INSERT","lineNumber":428,"content":"                                Log.i(\"MavlinkRepo\", \"COMMAND_ACK for DO_SET_MODE result=$res\")"},{"type":"INSERT","lineNumber":429,"content":"                                if (!ackDeferred.isCompleted) ackDeferred.complete(if (res == 0u) true else false)"},{"type":"INSERT","lineNumber":430,"content":"                            }"},{"type":"INSERT","lineNumber":431,"content":"                        } catch (t: Throwable) {"},{"type":"INSERT","lineNumber":432,"content":"                            Log.w(\"MavlinkRepo\", \"Error while processing COMMAND_ACK for DO_SET_MODE\", t)"},{"type":"INSERT","lineNumber":433,"content":"                        }"},{"type":"INSERT","lineNumber":434,"content":"                    }"},{"type":"INSERT","lineNumber":435,"content":"                }"},{"type":"INSERT","lineNumber":436,"content":"            }"},{"type":"INSERT","lineNumber":437,"content":""},{"type":"INSERT","lineNumber":438,"content":"            val ack = withTimeoutOrNull(1500L) { ackDeferred.await() }"},{"type":"INSERT","lineNumber":439,"content":"            job.cancel()"},{"type":"INSERT","lineNumber":440,"content":"            if (ack == true) Log.i(\"MavlinkRepo\", \"DO_SET_MODE accepted base=$baseFlags custom=$customMode\")"},{"type":"INSERT","lineNumber":441,"content":"            return ack == true"},{"type":"INSERT","lineNumber":442,"content":"        }"},{"type":"INSERT","lineNumber":443,"content":""},{"type":"INSERT","lineNumber":444,"content":"        // Attempt sequence:"},{"type":"INSERT","lineNumber":445,"content":"        // 1) SET_MODE without armed flag"},{"type":"INSERT","lineNumber":446,"content":"        // 2) SET_MODE with armed flag (if armed)"},{"type":"INSERT","lineNumber":447,"content":"        // 3) DO_SET_MODE without armed flag"},{"type":"INSERT","lineNumber":448,"content":"        // 4) DO_SET_MODE with armed flag"},{"type":"INSERT","lineNumber":449,"content":""},{"type":"INSERT","lineNumber":450,"content":"        // Log current telemetry to aid diagnosis"},{"type":"INSERT","lineNumber":451,"content":"        Log.i(\"MavlinkRepo\", \"Attempting mode change to $customMode. Telemetry: armed=${state.value.armed} mode=${state.value.mode} armable=${state.value.armable}\")"},{"type":"INSERT","lineNumber":452,"content":""},{"type":"INSERT","lineNumber":453,"content":"        if (trySetMode(flagsBase)) return"},{"type":"INSERT","lineNumber":454,"content":"        if (state.value.armed && trySetMode(flagsWithArmed)) return"},{"type":"INSERT","lineNumber":455,"content":""},{"type":"INSERT","lineNumber":456,"content":"        if (tryDoSetMode(flagsBase)) return"},{"type":"INSERT","lineNumber":457,"content":"        if (state.value.armed && tryDoSetMode(flagsWithArmed)) return"},{"type":"INSERT","lineNumber":458,"content":""},{"type":"INSERT","lineNumber":459,"content":"        // Last-resort permutations: some FCs expect param1=customMode and param2=0 (legacy)"},{"type":"INSERT","lineNumber":460,"content":"        try {"},{"type":"INSERT","lineNumber":461,"content":"            sendCommand(MavCmd.DO_SET_MODE, customMode.toFloat(), 0f)"},{"type":"INSERT","lineNumber":462,"content":"            Log.i(\"MavlinkRepo\", \"Sent DO_SET_MODE legacy: p1=customMode p2=0 -> $customMode\")"},{"type":"INSERT","lineNumber":463,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":464,"content":"            Log.w(\"MavlinkRepo\", \"Failed to send DO_SET_MODE legacy\", e)"},{"type":"INSERT","lineNumber":465,"content":"        }"},{"type":"INSERT","lineNumber":466,"content":""},{"type":"INSERT","lineNumber":467,"content":"        // wait briefly for telemetry"},{"type":"INSERT","lineNumber":468,"content":"        if (observedModeWithin(2000L) {"},{"type":"INSERT","lineNumber":469,"content":"                val modeStr = state.value.mode"},{"type":"INSERT","lineNumber":470,"content":"                when (customMode) {"},{"type":"INSERT","lineNumber":471,"content":"                    MavMode.AUTO -> modeStr?.contains(\"Auto\", ignoreCase = true) == true"},{"type":"INSERT","lineNumber":472,"content":"                    MavMode.STABILIZE -> modeStr?.contains(\"Stabilize\", ignoreCase = true) == true"},{"type":"INSERT","lineNumber":473,"content":"                    MavMode.LOITER -> modeStr?.contains(\"Loiter\", ignoreCase = true) == true"},{"type":"INSERT","lineNumber":474,"content":"                    else -> false"},{"type":"INSERT","lineNumber":475,"content":"                }"},{"type":"INSERT","lineNumber":476,"content":"            }) {"},{"type":"INSERT","lineNumber":477,"content":"            Log.i(\"MavlinkRepo\", \"Mode change observed after legacy DO_SET_MODE: $customMode\")"},{"type":"INSERT","lineNumber":478,"content":"            return"},{"type":"INSERT","lineNumber":479,"content":"        }"},{"type":"INSERT","lineNumber":480,"content":""},{"type":"INSERT","lineNumber":481,"content":"        Log.e(\"MavlinkRepo\", \"All attempts to change mode to customMode=$customMode failed\")"},{"type":"INSERT","lineNumber":482,"content":"            1f,                   // param1: MAV_MODE_FLAG_CUSTOM_MODE_ENABLED (always 1)"},{"type":"INSERT","lineNumber":483,"content":"            customMode.toFloat(), // param2: custom mode (0=Stabilize, 3=Auto, 5=Loiter, etc.)"},{"type":"INSERT","lineNumber":485,"content":"            0f,                   // param4: empty"},{"type":"INSERT","lineNumber":486,"content":"            0f,                   // param5: empty"},{"type":"DELETE","lineNumber":358,"oldContent":"        sendCommand("},{"type":"DELETE","lineNumber":359,"oldContent":"        // 1) Preferred: send SET_MODE message (base_mode: u8, custom_mode: u32)"},{"type":"DELETE","lineNumber":360,"oldContent":"        try {"},{"type":"DELETE","lineNumber":361,"oldContent":"            val setModeMsg = SetMode("},{"type":"DELETE","lineNumber":362,"oldContent":"                targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":363,"oldContent":"                baseMode = baseModeFlags.toUByte(),"},{"type":"DELETE","lineNumber":365,"oldContent":"                customMode = customMode"},{"type":"DELETE","lineNumber":366,"oldContent":"            )"},{"type":"DELETE","lineNumber":368,"oldContent":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, setModeMsg)"},{"type":"DELETE","lineNumber":369,"oldContent":"            Log.i(\"MavlinkRepo\", \"Sent SET_MODE: baseMode=$baseModeFlags customMode=$customMode\")"},{"type":"DELETE","lineNumber":371,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":372,"oldContent":"            Log.w(\"MavlinkRepo\", \"Failed to send SET_MODE\", e)"},{"type":"DELETE","lineNumber":374,"oldContent":"        }"},{"type":"DELETE","lineNumber":376,"oldContent":"        // Wait briefly to see if heartbeat reports the new custom mode"},{"type":"DELETE","lineNumber":377,"oldContent":"        val waitMs = 3000L"},{"type":"DELETE","lineNumber":379,"oldContent":"        val startTime = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":380,"oldContent":"        var modeObserved = false"},{"type":"DELETE","lineNumber":381,"oldContent":"        while (System.currentTimeMillis() - startTime < waitMs) {"},{"type":"DELETE","lineNumber":382,"oldContent":"            val modeStr = state.value.mode"},{"type":"DELETE","lineNumber":383,"oldContent":"            if (modeStr != null) {"},{"type":"DELETE","lineNumber":384,"oldContent":"                // check common mode names"},{"type":"DELETE","lineNumber":385,"oldContent":"                when (customMode) {"},{"type":"DELETE","lineNumber":386,"oldContent":"                    MavMode.AUTO -> if (modeStr.contains(\"Auto\", ignoreCase = true)) modeObserved = true"},{"type":"DELETE","lineNumber":387,"oldContent":"                    MavMode.STABILIZE -> if (modeStr.contains(\"Stabilize\", ignoreCase = true)) modeObserved = true"},{"type":"DELETE","lineNumber":388,"oldContent":"                    MavMode.LOITER -> if (modeStr.contains(\"Loiter\", ignoreCase = true)) modeObserved = true"},{"type":"DELETE","lineNumber":389,"oldContent":"                    else -> {}"},{"type":"DELETE","lineNumber":390,"oldContent":"                }"},{"type":"DELETE","lineNumber":391,"oldContent":"            }"},{"type":"DELETE","lineNumber":392,"oldContent":"            if (modeObserved) break"},{"type":"DELETE","lineNumber":393,"oldContent":"            delay(250)"},{"type":"DELETE","lineNumber":394,"oldContent":"        }"},{"type":"INSERT","lineNumber":494,"content":"            -1f,"},{"type":"INSERT","lineNumber":495,"content":"            0f,"},{"type":"INSERT","lineNumber":496,"content":"            0f,"},{"type":"INSERT","lineNumber":497,"content":"            0f,"},{"type":"INSERT","lineNumber":498,"content":"            0f,"},{"type":"INSERT","lineNumber":499,"content":"            0f,"},{"type":"INSERT","lineNumber":500,"content":"            altitude"},{"type":"INSERT","lineNumber":501,"content":"        )"},{"type":"INSERT","lineNumber":502,"content":"    }"},{"type":"DELETE","lineNumber":396,"oldContent":""},{"type":"DELETE","lineNumber":398,"oldContent":"        if (modeObserved) {"},{"type":"DELETE","lineNumber":400,"oldContent":"            Log.i(\"MavlinkRepo\", \"Mode change observed via SET_MODE: customMode=$customMode\")"},{"type":"DELETE","lineNumber":402,"oldContent":"            return"},{"type":"DELETE","lineNumber":404,"oldContent":"        }"},{"type":"DELETE","lineNumber":406,"oldContent":""},{"type":"DELETE","lineNumber":408,"oldContent":"        // 2) Fallback: send COMMAND_LONG MAV_CMD_DO_SET_MODE and wait for COMMAND_ACK"},{"type":"DELETE","lineNumber":410,"oldContent":"        try {"},{"type":"DELETE","lineNumber":412,"oldContent":"            Log.i(\"MavlinkRepo\", \"SET_MODE did not take effect; sending DO_SET_MODE fallback (baseMode=$baseModeFlags customMode=$customMode)\")"},{"type":"DELETE","lineNumber":414,"oldContent":"            sendCommand("},{"type":"DELETE","lineNumber":416,"oldContent":"                MavCmd.DO_SET_MODE,"},{"type":"DELETE","lineNumber":418,"oldContent":"                baseModeFlags.toFloat(),   // param1: base mode flags"},{"type":"DELETE","lineNumber":420,"oldContent":"                customMode.toFloat(),      // param2: custom mode"},{"type":"DELETE","lineNumber":422,"oldContent":"                0f,                        // param3: custom sub mode"},{"type":"DELETE","lineNumber":423,"oldContent":""},{"type":"DELETE","lineNumber":424,"oldContent":"                0f, 0f, 0f, 0f"},{"type":"INSERT","lineNumber":517,"content":"        }"},{"type":"DELETE","lineNumber":426,"oldContent":"            )"},{"type":"DELETE","lineNumber":427,"oldContent":"        sendCommand(MavCmd.NAV_LAND)"},{"type":"DELETE","lineNumber":428,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":519,"content":"            Log.w(\"MavlinkRepo\", \"No mission items to upload\")"},{"type":"DELETE","lineNumber":430,"oldContent":"            Log.w(\"MavlinkRepo\", \"Failed to send DO_SET_MODE\", e)"},{"type":"DELETE","lineNumber":431,"oldContent":""},{"type":"DELETE","lineNumber":434,"oldContent":""},{"type":"DELETE","lineNumber":436,"oldContent":"        // wait for COMMAND_ACK for DO_SET_MODE"},{"type":"DELETE","lineNumber":437,"oldContent":"        val missionCount = MissionCount("},{"type":"DELETE","lineNumber":438,"oldContent":"        val ackDeferred = CompletableDeferred<Boolean?>()"},{"type":"DELETE","lineNumber":439,"oldContent":"            targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":440,"oldContent":"        val job = AppScope.launch {"},{"type":"DELETE","lineNumber":441,"oldContent":"            targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":442,"oldContent":"            connection.mavFrame.collect { frame ->"},{"type":"DELETE","lineNumber":443,"oldContent":"            count = mission.size.toUShort(),"},{"type":"DELETE","lineNumber":444,"oldContent":"                val msg = frame.message"},{"type":"DELETE","lineNumber":445,"oldContent":"            missionType = MavMissionType.MISSION.wrap()"},{"type":"DELETE","lineNumber":446,"oldContent":"                if (msg is CommandAck) {"},{"type":"DELETE","lineNumber":447,"oldContent":"        )"},{"type":"DELETE","lineNumber":448,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":449,"oldContent":"        try {"},{"type":"DELETE","lineNumber":450,"oldContent":"                        if (msg.command == MavCmd.DO_SET_MODE.wrap()) {"},{"type":"INSERT","lineNumber":524,"content":"            // Send MissionCount"},{"type":"INSERT","lineNumber":525,"content":"            val missionCount = MissionCount("},{"type":"INSERT","lineNumber":526,"content":"                targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":527,"content":"                targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":528,"content":"                count = missionItems.size.toUShort()"},{"type":"INSERT","lineNumber":529,"content":"            )"},{"type":"INSERT","lineNumber":530,"content":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionCount)"},{"type":"DELETE","lineNumber":452,"oldContent":"                            val res = msg.result.value"},{"type":"DELETE","lineNumber":454,"oldContent":"                            Log.i(\"MavlinkRepo\", \"COMMAND_ACK for DO_SET_MODE result=$res\")"},{"type":"DELETE","lineNumber":455,"oldContent":"            Log.e(\"MavlinkRepo\", \"Failed to send mission count\", e)"},{"type":"DELETE","lineNumber":456,"oldContent":"                            if (!ackDeferred.isCompleted) {"},{"type":"DELETE","lineNumber":457,"oldContent":"            _lastFailure.value = e"},{"type":"DELETE","lineNumber":458,"oldContent":"                                ackDeferred.complete(if (res == 0u) true else false)"},{"type":"INSERT","lineNumber":533,"content":"            val ackDeferred = CompletableDeferred<Boolean>()"},{"type":"INSERT","lineNumber":534,"content":"            val sentSeqs = mutableSetOf<Int>()"},{"type":"DELETE","lineNumber":460,"oldContent":"                            }"},{"type":"DELETE","lineNumber":462,"oldContent":"                        }"},{"type":"DELETE","lineNumber":463,"oldContent":""},{"type":"DELETE","lineNumber":464,"oldContent":"                    } catch (t: Throwable) {"},{"type":"INSERT","lineNumber":537,"content":"            // Resend MISSION_COUNT periodically until first request or timeout"},{"type":"DELETE","lineNumber":466,"oldContent":"                        Log.w(\"MavlinkRepo\", \"Error while processing COMMAND_ACK for DO_SET_MODE\", t)"},{"type":"DELETE","lineNumber":468,"oldContent":"                    }"},{"type":"DELETE","lineNumber":470,"oldContent":"                }"},{"type":"DELETE","lineNumber":472,"oldContent":"            }"},{"type":"DELETE","lineNumber":474,"oldContent":"        }"},{"type":"DELETE","lineNumber":476,"oldContent":""},{"type":"DELETE","lineNumber":478,"oldContent":"        val ackResult = withTimeoutOrNull(1500L) { ackDeferred.await() }"},{"type":"DELETE","lineNumber":480,"oldContent":"        job.cancel()"},{"type":"DELETE","lineNumber":482,"oldContent":""},{"type":"DELETE","lineNumber":484,"oldContent":"        if (ackResult == true) {"},{"type":"DELETE","lineNumber":486,"oldContent":"            Log.i(\"MavlinkRepo\", \"DO_SET_MODE acknowledged (accepted)\")"},{"type":"DELETE","lineNumber":488,"oldContent":"            return"},{"type":"DELETE","lineNumber":490,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":492,"oldContent":"            Log.e(\"MavlinkRepo\", \"Mode change to customMode=$customMode failed or not acknowledged\")"},{"type":"DELETE","lineNumber":494,"oldContent":"        }"},{"type":"DELETE","lineNumber":496,"oldContent":""},{"type":"DELETE","lineNumber":504,"oldContent":"            sendCommand(MavCmd.DO_SET_MODE, MavMode.AUTO.toFloat(), 0f)"},{"type":"DELETE","lineNumber":505,"oldContent":"            Log.i(\"MavlinkRepo\", \"Fallback: Requesting mode change to AUTO via DO_SET_MODE\")"},{"type":"DELETE","lineNumber":506,"oldContent":"        try {"},{"type":"DELETE","lineNumber":507,"oldContent":"        // Request mode change to AUTO using DO_SET_MODE"},{"type":"DELETE","lineNumber":508,"oldContent":"        }"},{"type":"DELETE","lineNumber":509,"oldContent":"            Log.w(\"MavlinkRepo\", \"Fallback: Failed to send MISSION_SET_CURRENT\", e)"},{"type":"DELETE","lineNumber":510,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":511,"oldContent":""},{"type":"DELETE","lineNumber":512,"oldContent":"        }"},{"type":"INSERT","lineNumber":561,"content":"                                val seq = msg.seq.toInt()"},{"type":"INSERT","lineNumber":562,"content":"                                if (seq < 0 || seq >= missionItems.size) {"},{"type":"INSERT","lineNumber":563,"content":"                                    Log.w(\"MavlinkRepo\", \"FC requested invalid seq=$seq (MissionRequestInt)\")"},{"type":"INSERT","lineNumber":564,"content":"                                    return@collect"},{"type":"INSERT","lineNumber":565,"content":"                                }"},{"type":"INSERT","lineNumber":566,"content":"                                val item = missionItems[seq]"},{"type":"INSERT","lineNumber":567,"content":"                                val missionItem = item.copy("},{"type":"INSERT","lineNumber":568,"content":"                                    targetSystem = senderSys.toUByte(),"},{"type":"INSERT","lineNumber":569,"content":"                                    targetComponent = senderComp.toUByte(),"},{"type":"DELETE","lineNumber":517,"oldContent":"                    return true"},{"type":"DELETE","lineNumber":518,"oldContent":"                    Log.i(\"MavlinkRepo\", \"Mission start acknowledged by FCU on attempt $attempt\")"},{"type":"DELETE","lineNumber":519,"oldContent":"                if (result == 0u) {"},{"type":"DELETE","lineNumber":520,"oldContent":"            if (result != null) {"},{"type":"DELETE","lineNumber":521,"oldContent":""},{"type":"DELETE","lineNumber":522,"oldContent":"            val result = withTimeoutOrNull(perAttemptTimeout) { ackDeferred.await() }"},{"type":"DELETE","lineNumber":523,"oldContent":"        val maxAttempts = 3"},{"type":"DELETE","lineNumber":524,"oldContent":""},{"type":"DELETE","lineNumber":525,"oldContent":"            // small delay to allow FC to process"},{"type":"DELETE","lineNumber":526,"oldContent":"        }"},{"type":"DELETE","lineNumber":527,"oldContent":"                }"},{"type":"DELETE","lineNumber":528,"oldContent":"                    true"},{"type":"DELETE","lineNumber":529,"oldContent":""},{"type":"INSERT","lineNumber":574,"content":"                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"INSERT","lineNumber":575,"content":"                                    sentSeqs.add(seq)"},{"type":"INSERT","lineNumber":576,"content":"                                    Log.i(\"MavlinkRepo\", \"Sent MISSION_ITEM_INT seq=$seq to sys=$senderSys comp=$senderComp\")"},{"type":"INSERT","lineNumber":577,"content":"                                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":578,"content":"                                    Log.e(\"MavlinkRepo\", \"Failed to send mission item seq=$seq\", e)"},{"type":"INSERT","lineNumber":579,"content":"                                }"},{"type":"INSERT","lineNumber":580,"content":"                            }"},{"type":"INSERT","lineNumber":581,"content":"                            is MissionRequest -> {"},{"type":"INSERT","lineNumber":582,"content":"                                // Vehicle requested the float MissionRequest message (deprecated in some dialects)"},{"type":"INSERT","lineNumber":583,"content":"                                // Respond with MISSION_ITEM_INT (not float) for compatibility with Mission Planner"},{"type":"INSERT","lineNumber":584,"content":"                                Log.d(\"MavlinkRepo\", \"Received MissionRequest (float) from sys=$senderSys comp=$senderComp seq=${msg.seq}\")"},{"type":"INSERT","lineNumber":585,"content":"                                firstRequestReceived = true"},{"type":"INSERT","lineNumber":586,"content":"                                val seq = msg.seq.toInt()"},{"type":"DELETE","lineNumber":558,"oldContent":"        Log.e(\"MavlinkRepo\", \"Fallback start failed: vehicle did not switch to AUTO mode\")"},{"type":"INSERT","lineNumber":615,"content":"                    }"},{"type":"DELETE","lineNumber":561,"oldContent":"        }"},{"type":"INSERT","lineNumber":618,"content":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"INSERT","lineNumber":619,"content":"            val firstRequestTimeout = 5000L // increase wait to allow FC more time to request"},{"type":"INSERT","lineNumber":620,"content":"             val startWait = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":621,"content":"             while (!firstRequestReceived && !ackDeferred.isCompleted && System.currentTimeMillis() - startWait < firstRequestTimeout) {"},{"type":"INSERT","lineNumber":622,"content":"                 delay(100)"},{"type":"INSERT","lineNumber":623,"content":"             }"},{"type":"INSERT","lineNumber":625,"content":"             if (!firstRequestReceived) {"},{"type":"INSERT","lineNumber":633,"content":"                        targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":634,"content":"                        seq = seq.toUShort()"},{"type":"INSERT","lineNumber":635,"content":"                    )"},{"type":"INSERT","lineNumber":636,"content":"                    try {"},{"type":"INSERT","lineNumber":637,"content":"                        // log full item contents for diagnostics"},{"type":"INSERT","lineNumber":638,"content":"                        Log.d(\"MavlinkRepo\", \"Sending fallback item seq=$seq cmd=${missionItem.command} frame=${missionItem.frame} x=${missionItem.x} y=${missionItem.y} z=${missionItem.z}\")"},{"type":"INSERT","lineNumber":639,"content":"                         connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"INSERT","lineNumber":640,"content":"                         sentSeqs.add(seq)"},{"type":"INSERT","lineNumber":641,"content":"                         Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_ITEM_INT seq=$seq\")"},{"type":"INSERT","lineNumber":642,"content":"                         // give FC a bit more time to process unsolicited item and possibly request next"},{"type":"INSERT","lineNumber":643,"content":"                         delay(300)"},{"type":"INSERT","lineNumber":644,"content":"                     } catch (e: Exception) {"},{"type":"INSERT","lineNumber":645,"content":"                         Log.e(\"MavlinkRepo\", \"Fallback: Failed to send mission item seq=$seq\", e)"},{"type":"INSERT","lineNumber":646,"content":"                     }"},{"type":"INSERT","lineNumber":647,"content":"                 }"},{"type":"INSERT","lineNumber":648,"content":"             }"},{"type":"DELETE","lineNumber":571,"oldContent":"            // small delay to allow FC to process"},{"type":"INSERT","lineNumber":650,"content":"            // Wait for ACK with timeout"},{"type":"INSERT","lineNumber":651,"content":"            val ackReceived = withTimeoutOrNull(timeoutMs) {"},{"type":"INSERT","lineNumber":652,"content":"                ackDeferred.await()"},{"type":"INSERT","lineNumber":653,"content":"            } ?: false"},{"type":"INSERT","lineNumber":654,"content":""},{"type":"INSERT","lineNumber":655,"content":"            // cancel collector and resend jobs"},{"type":"INSERT","lineNumber":658,"content":""},{"type":"DELETE","lineNumber":586,"oldContent":"            val firstRequestTimeout = 5000L // increase wait to allow FC more time to request"},{"type":"DELETE","lineNumber":587,"oldContent":"            }"},{"type":"DELETE","lineNumber":588,"oldContent":"             val startWait = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":671,"content":"    }"},{"type":"DELETE","lineNumber":590,"oldContent":"             while (!firstRequestReceived && !ackDeferred.isCompleted && System.currentTimeMillis() - startWait < firstRequestTimeout) {"},{"type":"DELETE","lineNumber":591,"oldContent":"                 delay(100)"},{"type":"DELETE","lineNumber":593,"oldContent":"             }"},{"type":"DELETE","lineNumber":596,"oldContent":"             if (!firstRequestReceived) {"},{"type":"INSERT","lineNumber":680,"content":"        try {"},{"type":"DELETE","lineNumber":604,"oldContent":"                        targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":606,"oldContent":"                        seq = seq.toUShort()"},{"type":"DELETE","lineNumber":608,"oldContent":"                    )"},{"type":"DELETE","lineNumber":610,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":612,"oldContent":"                        // log full item contents for diagnostics"},{"type":"DELETE","lineNumber":614,"oldContent":"                        Log.d(\"MavlinkRepo\", \"Sending fallback item seq=$seq cmd=${missionItem.command} frame=${missionItem.frame} x=${missionItem.x} y=${missionItem.y} z=${missionItem.z}\")"},{"type":"DELETE","lineNumber":616,"oldContent":"                         connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"DELETE","lineNumber":618,"oldContent":"                         sentSeqs.add(seq)"},{"type":"DELETE","lineNumber":620,"oldContent":"                         Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_ITEM_INT seq=$seq\")"},{"type":"DELETE","lineNumber":622,"oldContent":"                         // give FC a bit more time to process unsolicited item and possibly request next"},{"type":"DELETE","lineNumber":624,"oldContent":"                         delay(300)"},{"type":"DELETE","lineNumber":626,"oldContent":"                     } catch (e: Exception) {"},{"type":"DELETE","lineNumber":628,"oldContent":"                         Log.e(\"MavlinkRepo\", \"Fallback: Failed to send mission item seq=$seq\", e)"},{"type":"DELETE","lineNumber":630,"oldContent":"                     }"},{"type":"DELETE","lineNumber":632,"oldContent":"                 }"},{"type":"DELETE","lineNumber":634,"oldContent":"             }"},{"type":"DELETE","lineNumber":637,"oldContent":"            // Wait for ACK with timeout"},{"type":"DELETE","lineNumber":639,"oldContent":"            val ackReceived = withTimeoutOrNull(timeoutMs) {"},{"type":"DELETE","lineNumber":641,"oldContent":"                ackDeferred.await()"},{"type":"DELETE","lineNumber":643,"oldContent":"            } ?: false"},{"type":"DELETE","lineNumber":646,"oldContent":"            // cancel collector and resend jobs"},{"type":"DELETE","lineNumber":647,"oldContent":""},{"type":"INSERT","lineNumber":706,"content":"                            perSeqMap[msg.seq.toInt()]?.let { d -> if (!d.isCompleted) d.complete(Unit) }"},{"type":"INSERT","lineNumber":707,"content":"                        }"},{"type":"INSERT","lineNumber":708,"content":"                        is MissionAck -> {"},{"type":"INSERT","lineNumber":709,"content":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_ACK type=${msg.type}\")"},{"type":"INSERT","lineNumber":710,"content":"                        }"},{"type":"INSERT","lineNumber":711,"content":"                        else -> {}"},{"type":"INSERT","lineNumber":724,"content":""},{"type":"DELETE","lineNumber":666,"oldContent":"        try {"},{"type":"DELETE","lineNumber":678,"oldContent":"                    if (msg is CommandAck) {"},{"type":"DELETE","lineNumber":679,"oldContent":"                    val msg = frame.message"},{"type":"INSERT","lineNumber":742,"content":"                    Log.e(\"MavlinkRepo\", \"Failed to send MISSION_REQUEST_INT seq=$seq\", e)"},{"type":"INSERT","lineNumber":743,"content":"                }"},{"type":"DELETE","lineNumber":682,"oldContent":"            val ackDeferred = CompletableDeferred<UInt?>()"},{"type":"INSERT","lineNumber":746,"content":"                val got = withTimeoutOrNull(1500L) {"},{"type":"DELETE","lineNumber":693,"oldContent":"                            perSeqMap[msg.seq.toInt()]?.let { d -> if (!d.isCompleted) d.complete(Unit) }"},{"type":"DELETE","lineNumber":695,"oldContent":"                        }"},{"type":"DELETE","lineNumber":697,"oldContent":"                        is MissionAck -> {"},{"type":"DELETE","lineNumber":699,"oldContent":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_ACK type=${msg.type}\")"},{"type":"DELETE","lineNumber":701,"oldContent":"                        }"},{"type":"DELETE","lineNumber":702,"oldContent":"                        else -> {}"},{"type":"INSERT","lineNumber":761,"content":""},{"type":"DELETE","lineNumber":714,"oldContent":"        // Request mode change to AUTO using DO_SET_MODE"},{"type":"INSERT","lineNumber":773,"content":"            return false"},{"type":"INSERT","lineNumber":774,"content":"        }"},{"type":"DELETE","lineNumber":716,"oldContent":""},{"type":"INSERT","lineNumber":778,"content":"            val setCurrent = MissionSetCurrent(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = first.toUShort())"},{"type":"DELETE","lineNumber":721,"oldContent":"            Log.w(\"MavlinkRepo\", \"Failed to send MISSION_SET_CURRENT\", e)"},{"type":"INSERT","lineNumber":781,"content":"            // small delay to allow FC to process"},{"type":"DELETE","lineNumber":727,"oldContent":"            }"},{"type":"DELETE","lineNumber":728,"oldContent":"                return true"},{"type":"INSERT","lineNumber":787,"content":"        val maxAttempts = 3"},{"type":"INSERT","lineNumber":788,"content":"        val perAttemptTimeout = 1500L"},{"type":"DELETE","lineNumber":730,"oldContent":"            Log.w(\"MavlinkRepo\", \"Fallback: Failed to send DO_SET_MODE\", e)"},{"type":"DELETE","lineNumber":731,"oldContent":"            val setCurrent = MissionSetCurrent(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = first.toUShort())"},{"type":"DELETE","lineNumber":732,"oldContent":"        try {"},{"type":"DELETE","lineNumber":733,"oldContent":"        // Fallback approach: set mission current and change mode to AUTO (many FCs start mission when switched to AUTO)"},{"type":"INSERT","lineNumber":790,"content":"        for (attempt in 1..maxAttempts) {"},{"type":"INSERT","lineNumber":791,"content":"            try {"},{"type":"INSERT","lineNumber":792,"content":"                Log.i(\"MavlinkRepo\", \"Attempt $attempt: Sending MISSION_START first=$first last=$last to sys=$fcuSystemId comp=$fcuComponentId\")"},{"type":"INSERT","lineNumber":793,"content":"                sendCommand(MavCmd.MISSION_START, first.toFloat(), last.toFloat())"},{"type":"INSERT","lineNumber":794,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":795,"content":"                Log.e(\"MavlinkRepo\", \"Failed to send MISSION_START on attempt $attempt\", e)"},{"type":"DELETE","lineNumber":735,"oldContent":"                if (result == 0u) {"},{"type":"DELETE","lineNumber":736,"oldContent":"                // Give FC a moment to start the mission"},{"type":"DELETE","lineNumber":737,"oldContent":"                        }"},{"type":"INSERT","lineNumber":798,"content":"            // wait for COMMAND_ACK for MISSION_START"},{"type":"INSERT","lineNumber":799,"content":"            val ackDeferred = CompletableDeferred<UInt?>()"},{"type":"INSERT","lineNumber":800,"content":"            val job = AppScope.launch {"},{"type":"INSERT","lineNumber":801,"content":"                connection.mavFrame.collect { frame ->"},{"type":"INSERT","lineNumber":802,"content":"                    val msg = frame.message"},{"type":"INSERT","lineNumber":803,"content":"                    if (msg is CommandAck) {"},{"type":"INSERT","lineNumber":804,"content":"                        try {"},{"type":"INSERT","lineNumber":805,"content":"                            if (msg.command == MavCmd.MISSION_START.wrap()) {"},{"type":"INSERT","lineNumber":806,"content":"                                val resultVal = msg.result.value"},{"type":"INSERT","lineNumber":807,"content":"                                Log.i(\"MavlinkRepo\", \"Observed COMMAND_ACK for MISSION_START result=$resultVal on attempt $attempt\")"},{"type":"INSERT","lineNumber":808,"content":"                                if (!ackDeferred.isCompleted) ackDeferred.complete(resultVal)"},{"type":"INSERT","lineNumber":809,"content":"                            }"},{"type":"INSERT","lineNumber":810,"content":"                        } catch (t: Throwable) {"},{"type":"INSERT","lineNumber":811,"content":"                            Log.w(\"MavlinkRepo\", \"Error while processing COMMAND_ACK\", t)"},{"type":"INSERT","lineNumber":812,"content":"                        }"},{"type":"DELETE","lineNumber":745,"oldContent":"        return false"},{"type":"DELETE","lineNumber":746,"oldContent":"        while (System.currentTimeMillis() - startWaitMode < modeWaitMs) {"},{"type":"DELETE","lineNumber":747,"oldContent":"            return false"},{"type":"DELETE","lineNumber":748,"oldContent":"            sendCommand(MavCmd.DO_SET_MODE, MavMode.AUTO.toFloat(), 0f)"},{"type":"INSERT","lineNumber":819,"content":""},{"type":"INSERT","lineNumber":820,"content":"            if (result != null) {"},{"type":"INSERT","lineNumber":821,"content":"                if (result == 0u) {"},{"type":"INSERT","lineNumber":822,"content":"                    Log.i(\"MavlinkRepo\", \"Mission start acknowledged by FCU on attempt $attempt\")"},{"type":"INSERT","lineNumber":823,"content":"                    return true"},{"type":"INSERT","lineNumber":824,"content":"                } else {"},{"type":"INSERT","lineNumber":825,"content":"                    Log.e(\"MavlinkRepo\", \"Mission start rejected by FCU on attempt $attempt with result=$result\")"},{"type":"DELETE","lineNumber":752,"oldContent":"            val setCurrent = MissionSetCurrent(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = first.toUShort())"},{"type":"INSERT","lineNumber":832,"content":"                delay(500L)"},{"type":"INSERT","lineNumber":834,"content":"        }"},{"type":"DELETE","lineNumber":760,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":761,"oldContent":"                delay(500)"},{"type":"DELETE","lineNumber":762,"oldContent":"                Log.e(\"MavlinkRepo\", \"Failed to send MISSION_START on attempt $attempt\", e)"},{"type":"INSERT","lineNumber":838,"content":"        // Fallback approach: set mission current and change mode to AUTO (many FCs start mission when switched to AUTO)"},{"type":"INSERT","lineNumber":839,"content":"        try {"},{"type":"INSERT","lineNumber":840,"content":"            val setCurrent = MissionSetCurrent(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = first.toUShort())"},{"type":"INSERT","lineNumber":841,"content":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, setCurrent)"},{"type":"INSERT","lineNumber":842,"content":"            Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_SET_CURRENT seq=$first\")"},{"type":"INSERT","lineNumber":843,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":844,"content":"            Log.w(\"MavlinkRepo\", \"Fallback: Failed to send MISSION_SET_CURRENT\", e)"},{"type":"INSERT","lineNumber":845,"content":"        }"},{"type":"DELETE","lineNumber":766,"oldContent":"            // wait for COMMAND_ACK for MISSION_START"},{"type":"DELETE","lineNumber":768,"oldContent":"            val ackDeferred = CompletableDeferred<UInt?>()"},{"type":"DELETE","lineNumber":770,"oldContent":"            val job = AppScope.launch {"},{"type":"DELETE","lineNumber":772,"oldContent":"                connection.mavFrame.collect { frame ->"},{"type":"DELETE","lineNumber":774,"oldContent":"                    val msg = frame.message"},{"type":"DELETE","lineNumber":776,"oldContent":"                    if (msg is CommandAck) {"},{"type":"DELETE","lineNumber":777,"oldContent":"        }"},{"type":"DELETE","lineNumber":778,"oldContent":"                        try {"},{"type":"DELETE","lineNumber":779,"oldContent":"        // Request mode change to AUTO using DO_SET_MODE"},{"type":"DELETE","lineNumber":780,"oldContent":"                            if (msg.command == MavCmd.MISSION_START.wrap()) {"},{"type":"DELETE","lineNumber":781,"oldContent":"}"},{"type":"DELETE","lineNumber":782,"oldContent":"                                val resultVal = msg.result.value"},{"type":"INSERT","lineNumber":854,"content":""},{"type":"INSERT","lineNumber":855,"content":"        // Wait for telemetry mode to reflect AUTO for a short period"},{"type":"INSERT","lineNumber":856,"content":"        val modeWaitMs = 5000L"},{"type":"DELETE","lineNumber":784,"oldContent":"                                Log.i(\"MavlinkRepo\", \"Observed COMMAND_ACK for MISSION_START result=$resultVal on attempt $attempt\")"},{"type":"DELETE","lineNumber":786,"oldContent":"                                if (!ackDeferred.isCompleted) ackDeferred.complete(resultVal)"},{"type":"DELETE","lineNumber":788,"oldContent":"                            }"},{"type":"DELETE","lineNumber":789,"oldContent":"        Log.e(\"MavlinkRepo\", \"Fallback start failed: vehicle did not switch to AUTO mode\")"},{"type":"DELETE","lineNumber":790,"oldContent":"                            Log.w(\"MavlinkRepo\", \"Error while processing COMMAND_ACK\", t)"},{"type":"DELETE","lineNumber":791,"oldContent":"        while (System.currentTimeMillis() - startWaitMode < modeWaitMs) {"},{"type":"DELETE","lineNumber":792,"oldContent":""},{"type":"DELETE","lineNumber":793,"oldContent":""},{"type":"DELETE","lineNumber":794,"oldContent":""},{"type":"DELETE","lineNumber":795,"oldContent":"            if (result != null) {"},{"type":"DELETE","lineNumber":796,"oldContent":"}"},{"type":"DELETE","lineNumber":797,"oldContent":"        return false"},{"type":"DELETE","lineNumber":798,"oldContent":"                    Log.i(\"MavlinkRepo\", \"Mission start acknowledged by FCU on attempt $attempt\")"},{"type":"DELETE","lineNumber":799,"oldContent":"        Log.e(\"MavlinkRepo\", \"Fallback start failed: vehicle did not switch to AUTO mode\")"},{"type":"DELETE","lineNumber":800,"oldContent":"                    return true"},{"type":"DELETE","lineNumber":801,"oldContent":"            delay(200)"},{"type":"DELETE","lineNumber":802,"oldContent":"            }"},{"type":"DELETE","lineNumber":803,"oldContent":"                    Log.e(\"MavlinkRepo\", \"Mission start rejected by FCU on attempt $attempt with result=$result\")"},{"type":"DELETE","lineNumber":804,"oldContent":"                return true"},{"type":"INSERT","lineNumber":860,"content":"                Log.i(\"MavlinkRepo\", \"Fallback: Vehicle switched to AUTO mode\")"},{"type":"DELETE","lineNumber":806,"oldContent":"            Log.w(\"MavlinkRepo\", \"Fallback: Failed to send MISSION_SET_CURRENT\", e)"},{"type":"DELETE","lineNumber":807,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":808,"oldContent":"            Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_SET_CURRENT seq=$first\")"},{"type":"DELETE","lineNumber":809,"oldContent":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, setCurrent)"},{"type":"DELETE","lineNumber":810,"oldContent":"            val setCurrent = MissionSetCurrent(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = first.toUShort())"},{"type":"DELETE","lineNumber":811,"oldContent":"                delay(500L)"},{"type":"DELETE","lineNumber":812,"oldContent":"        try {"},{"type":"INSERT","lineNumber":862,"content":"                delay(500)"},{"type":"INSERT","lineNumber":863,"content":"                return true"},{"type":"DELETE","lineNumber":814,"oldContent":"        // Fallback approach: set mission current and change mode to AUTO (many FCs start mission when switched to AUTO)"},{"type":"INSERT","lineNumber":865,"content":"            delay(200)"},{"type":"INSERT","lineNumber":866,"content":"        }"},{"type":"INSERT","lineNumber":867,"content":""},{"type":"INSERT","lineNumber":868,"content":"        Log.e(\"MavlinkRepo\", \"Fallback start failed: vehicle did not switch to AUTO mode\")"},{"type":"INSERT","lineNumber":869,"content":"        return false"},{"type":"INSERT","lineNumber":870,"content":"    }"},{"type":"INSERT","lineNumber":871,"content":"}"},{"type":"INSERT","lineNumber":872,"content":""}]},{"timestamp":1758012247211,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import android.R.attr.mode"},{"type":"MODIFY","lineNumber":44,"content":"    // Connection","oldContent":"                        return // Exit on successful connection"},{"type":"DELETE","lineNumber":52,"oldContent":"            }"},{"type":"INSERT","lineNumber":51,"content":"            while (scope.isActive) {"},{"type":"DELETE","lineNumber":57,"oldContent":"            reconnect(this) // Initial connection attempt"},{"type":"INSERT","lineNumber":56,"content":"                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":59,"oldContent":"                when (st) {"},{"type":"INSERT","lineNumber":58,"content":"                    _lastFailure.value = e"},{"type":"DELETE","lineNumber":68,"oldContent":"                            Log.i(\"MavlinkRepo\", \"Connection Inactive, reconnecting...\")"},{"type":"INSERT","lineNumber":67,"content":"            connection.streamState.collect { st ->"},{"type":"DELETE","lineNumber":76,"oldContent":""},{"type":"INSERT","lineNumber":75,"content":"                    is StreamState.Inactive -> {"},{"type":"DELETE","lineNumber":81,"oldContent":"                autopilot = MavAutopilot.INVALID.wrap(),"},{"type":"DELETE","lineNumber":82,"oldContent":"                customMode = 0u,"},{"type":"DELETE","lineNumber":83,"oldContent":"            )"},{"type":"DELETE","lineNumber":84,"oldContent":"            while (isActive) {"},{"type":"DELETE","lineNumber":85,"oldContent":"                if (state.value.connected) {"},{"type":"INSERT","lineNumber":80,"content":"                        }"},{"type":"INSERT","lineNumber":81,"content":"                    }"},{"type":"INSERT","lineNumber":82,"content":"                }"},{"type":"INSERT","lineNumber":83,"content":"            }"},{"type":"INSERT","lineNumber":84,"content":"        }"},{"type":"DELETE","lineNumber":98,"oldContent":"        }"},{"type":"DELETE","lineNumber":99,"oldContent":""},{"type":"INSERT","lineNumber":97,"content":"                    try {"},{"type":"INSERT","lineNumber":98,"content":"                        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, heartbeat)"},{"type":"MODIFY","lineNumber":106,"content":"        }","oldContent":"            mavFrameStream.collect {"},{"type":"DELETE","lineNumber":109,"oldContent":"        // Detect FCU"},{"type":"INSERT","lineNumber":108,"content":"        // Shared message stream"},{"type":"DELETE","lineNumber":115,"oldContent":"                    if (!state.value.fcuDetected) {"},{"type":"INSERT","lineNumber":114,"content":"            mavFrameStream.collect {"},{"type":"DELETE","lineNumber":128,"oldContent":"                                    command = MavCmd.SET_MESSAGE_INTERVAL.wrap(),"},{"type":"DELETE","lineNumber":129,"oldContent":"                                    confirmation = 0u,"},{"type":"INSERT","lineNumber":127,"content":"                        Log.i(\"MavlinkRepo\", \"FCU detected sysId=$fcuSystemId compId=$fcuComponentId\")"},{"type":"INSERT","lineNumber":128,"content":"                        _state.update { it.copy(fcuDetected = true) }"},{"type":"DELETE","lineNumber":132,"oldContent":"                                    param3 = 0f,"},{"type":"DELETE","lineNumber":133,"oldContent":"                                    param4 = 0f,"},{"type":"INSERT","lineNumber":131,"content":"                        launch {"},{"type":"INSERT","lineNumber":132,"content":"                            suspend fun setMessageRate(messageId: UInt, hz: Float) {"},{"type":"MODIFY","lineNumber":145,"content":"                                    param7 = 0f","oldContent":"                                    param7 = 0f"},{"type":"DELETE","lineNumber":154,"oldContent":"                    }"},{"type":"DELETE","lineNumber":155,"oldContent":"                }"},{"type":"INSERT","lineNumber":153,"content":"                            }"},{"type":"INSERT","lineNumber":154,"content":""},{"type":"INSERT","lineNumber":158,"content":"                            setMessageRate(74u, 5f)  // VFR_HUD"},{"type":"DELETE","lineNumber":160,"oldContent":"                            setMessageRate(147u, 1f) // BATTERY_STATUS"},{"type":"DELETE","lineNumber":169,"oldContent":"                .map { it.message }"},{"type":"DELETE","lineNumber":171,"oldContent":"                    }"},{"type":"DELETE","lineNumber":172,"oldContent":"        }"},{"type":"DELETE","lineNumber":173,"oldContent":"        // GLOBAL_POSITION_INT"},{"type":"DELETE","lineNumber":174,"oldContent":"        scope.launch {"},{"type":"DELETE","lineNumber":175,"oldContent":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":176,"oldContent":"                .filterIsInstance<GlobalPositionInt>()"},{"type":"DELETE","lineNumber":177,"oldContent":"                .collect { gp ->"},{"type":"DELETE","lineNumber":178,"oldContent":"                    val relAltM = gp.relativeAlt / 1000f"},{"type":"DELETE","lineNumber":179,"oldContent":"                    val lon = gp.lon.takeIf { it != Int.MIN_VALUE }?.let { it / 10_000_000.0 }"},{"type":"INSERT","lineNumber":169,"content":"                .map { it.message }"},{"type":"INSERT","lineNumber":170,"content":"                .filterIsInstance<CommandAck>()"},{"type":"INSERT","lineNumber":171,"content":"                .collect { ack ->"},{"type":"INSERT","lineNumber":172,"content":"                    try {"},{"type":"INSERT","lineNumber":173,"content":""},{"type":"INSERT","lineNumber":174,"content":"                   Log.i("},{"type":"INSERT","lineNumber":175,"content":"                       \"MavlinkRepo\","},{"type":"INSERT","lineNumber":176,"content":"                       \"COMMAND_ACK received: command=${ack.command} result=${ack.result} progress=${ack.progress}\""},{"type":"INSERT","lineNumber":177,"content":"                   )"},{"type":"INSERT","lineNumber":178,"content":""},{"type":"INSERT","lineNumber":195,"content":"                        it.copy("},{"type":"DELETE","lineNumber":197,"oldContent":"        // BATTERY_STATUS"},{"type":"INSERT","lineNumber":200,"content":"                    }"},{"type":"DELETE","lineNumber":202,"oldContent":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":203,"oldContent":"                .map { it.message }"},{"type":"DELETE","lineNumber":204,"oldContent":"                .filterIsInstance<BatteryStatus>()"},{"type":"DELETE","lineNumber":205,"oldContent":"        // GLOBAL_POSITION_INT"},{"type":"DELETE","lineNumber":206,"oldContent":"                    val currentA = if (b.currentBattery.toInt() == -1) null else b.currentBattery / 100f"},{"type":"DELETE","lineNumber":207,"oldContent":"                    _state.update { it.copy(currentA = currentA) }"},{"type":"INSERT","lineNumber":203,"content":""},{"type":"INSERT","lineNumber":204,"content":"        // GLOBAL_POSITION_INT"},{"type":"INSERT","lineNumber":205,"content":"        scope.launch {"},{"type":"INSERT","lineNumber":206,"content":"            mavFrameStream"},{"type":"INSERT","lineNumber":208,"content":"                .map { it.message }"},{"type":"DELETE","lineNumber":220,"oldContent":"                        3u -> \"Auto\""},{"type":"DELETE","lineNumber":221,"oldContent":"                        4u -> \"Guided\""},{"type":"DELETE","lineNumber":222,"oldContent":"                        5u -> \"Loiter\""},{"type":"DELETE","lineNumber":223,"oldContent":"                        6u -> \"RTL\""},{"type":"DELETE","lineNumber":224,"oldContent":"                        7u -> \"Circle\""},{"type":"DELETE","lineNumber":225,"oldContent":"                        9u -> \"Land\""},{"type":"DELETE","lineNumber":226,"oldContent":"                        11u -> \"Drift\""},{"type":"DELETE","lineNumber":227,"oldContent":"                        13u -> \"Sport\""},{"type":"DELETE","lineNumber":228,"oldContent":"                        14u -> \"Flip\""},{"type":"DELETE","lineNumber":229,"oldContent":"                        15u -> \"AutoTune\""},{"type":"INSERT","lineNumber":219,"content":"                            latitude = lat,"},{"type":"INSERT","lineNumber":220,"content":"                            longitude = lon"},{"type":"INSERT","lineNumber":221,"content":"                        )"},{"type":"INSERT","lineNumber":222,"content":"                    }"},{"type":"INSERT","lineNumber":223,"content":"                }"},{"type":"INSERT","lineNumber":224,"content":"        }"},{"type":"INSERT","lineNumber":225,"content":""},{"type":"INSERT","lineNumber":226,"content":"        // BATTERY_STATUS"},{"type":"INSERT","lineNumber":227,"content":"        scope.launch {"},{"type":"INSERT","lineNumber":228,"content":"            mavFrameStream"},{"type":"MODIFY","lineNumber":280,"content":"                .map { it.message }","oldContent":"            mavFrameStream"},{"type":"DELETE","lineNumber":294,"oldContent":"                                    frame = MavFrame.GLOBAL_RELATIVE_ALT.wrap(),"},{"type":"DELETE","lineNumber":295,"oldContent":"                                    current = if (seq == 0) 1u else 0u,"},{"type":"DELETE","lineNumber":296,"oldContent":"                                    autocontinue = 1u,"},{"type":"INSERT","lineNumber":293,"content":""},{"type":"INSERT","lineNumber":294,"content":"        // GPS_RAW_INT"},{"type":"INSERT","lineNumber":295,"content":"        scope.launch {"},{"type":"DELETE","lineNumber":301,"oldContent":"                                    x = (waypoint.latitude * 1e7).toInt(),"},{"type":"DELETE","lineNumber":302,"oldContent":"                                    y = (waypoint.longitude * 1e7).toInt(),"},{"type":"DELETE","lineNumber":303,"oldContent":"                                    z = 100f, // Default altitude"},{"type":"DELETE","lineNumber":304,"oldContent":"                                    missionType = MavMissionType.MISSION.wrap()"},{"type":"INSERT","lineNumber":300,"content":"                .collect { gps ->"},{"type":"INSERT","lineNumber":301,"content":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"INSERT","lineNumber":302,"content":"                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"INSERT","lineNumber":303,"content":"                    _state.update { it.copy(sats = sats, hdop = hdop) }"},{"type":"DELETE","lineNumber":321,"oldContent":"                }"},{"type":"DELETE","lineNumber":322,"oldContent":"        }"},{"type":"INSERT","lineNumber":320,"content":"            param7 = param7"},{"type":"INSERT","lineNumber":321,"content":"        )"},{"type":"DELETE","lineNumber":329,"oldContent":"            targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":330,"oldContent":"            confirmation = 0u,"},{"type":"INSERT","lineNumber":328,"content":"            Log.e(\"MavlinkRepo\", \"Failed to send command\", e)"},{"type":"INSERT","lineNumber":329,"content":"            _lastFailure.value = e"},{"type":"DELETE","lineNumber":333,"oldContent":"            param3 = param3,"},{"type":"INSERT","lineNumber":332,"content":""},{"type":"DELETE","lineNumber":338,"oldContent":"        )"},{"type":"INSERT","lineNumber":337,"content":"                1f"},{"type":"DELETE","lineNumber":341,"oldContent":"               gcsSystemId,"},{"type":"DELETE","lineNumber":342,"oldContent":"                gcsComponentId, commandLong)"},{"type":"INSERT","lineNumber":340,"content":"            Log.w(\"MavlinkRepo\", \"Arm command rejected, vehicle not armable\")"},{"type":"INSERT","lineNumber":341,"content":"        }"},{"type":"INSERT","lineNumber":351,"content":"    // Replaced changeMode with a simple, standards-compliant DO_SET_MODE flow."},{"type":"DELETE","lineNumber":353,"oldContent":"        // MAVLink base mode flags (from MAV_MODE_FLAG)"},{"type":"DELETE","lineNumber":354,"oldContent":"        val MAV_MODE_FLAG_CUSTOM_MODE_ENABLED: UInt = 1u"},{"type":"DELETE","lineNumber":355,"oldContent":"        val MAV_MODE_FLAG_AUTO_ENABLED: UInt = 4u"},{"type":"DELETE","lineNumber":356,"oldContent":"        val MAV_MODE_FLAG_STABILIZE_ENABLED: UInt = 16u"},{"type":"INSERT","lineNumber":353,"content":"        // For MAV_CMD_DO_SET_MODE in ArduPilot:"},{"type":"INSERT","lineNumber":354,"content":"        val MAV_MODE_FLAG_CUSTOM_MODE_ENABLED = 1u"},{"type":"INSERT","lineNumber":355,"content":"        val MAV_MODE_FLAG_AUTO_ENABLED = 4u"},{"type":"INSERT","lineNumber":356,"content":"        val MAV_MODE_FLAG_STABILIZE_ENABLED = 16u"},{"type":"INSERT","lineNumber":357,"content":"        sendCommand("},{"type":"INSERT","lineNumber":358,"content":"        val baseFlags: UInt = when (customMode) {"},{"type":"INSERT","lineNumber":359,"content":"            1f,                   // param1: MAV_MODE_FLAG_CUSTOM_MODE_ENABLED (always 1)"},{"type":"INSERT","lineNumber":360,"content":"            customMode.toFloat(), // param2: custom mode (0=Stabilize, 3=Auto, 5=Loiter, etc.)"},{"type":"DELETE","lineNumber":358,"oldContent":"        val MAV_MODE_FLAG_SAFETY_ARMED: UInt = 128u"},{"type":"INSERT","lineNumber":362,"content":"            0f,                   // param4: empty"},{"type":"INSERT","lineNumber":363,"content":"            0f,                   // param5: empty"},{"type":"DELETE","lineNumber":360,"oldContent":""},{"type":"DELETE","lineNumber":361,"oldContent":"        val flagsBase: UInt = when (customMode) {"},{"type":"DELETE","lineNumber":362,"oldContent":"            MavMode.AUTO -> (MAV_MODE_FLAG_CUSTOM_MODE_ENABLED or MAV_MODE_FLAG_AUTO_ENABLED)"},{"type":"DELETE","lineNumber":363,"oldContent":"            MavMode.STABILIZE -> (MAV_MODE_FLAG_CUSTOM_MODE_ENABLED or MAV_MODE_FLAG_STABILIZE_ENABLED)"},{"type":"DELETE","lineNumber":364,"oldContent":"            MavMode.LOITER -> (MAV_MODE_FLAG_CUSTOM_MODE_ENABLED or MAV_MODE_FLAG_AUTO_ENABLED)"},{"type":"DELETE","lineNumber":365,"oldContent":"            else -> MAV_MODE_FLAG_CUSTOM_MODE_ENABLED"},{"type":"DELETE","lineNumber":366,"oldContent":"        }"},{"type":"DELETE","lineNumber":367,"oldContent":"        )"},{"type":"DELETE","lineNumber":368,"oldContent":""},{"type":"DELETE","lineNumber":369,"oldContent":"        val flagsWithArmed = flagsBase or MAV_MODE_FLAG_SAFETY_ARMED"},{"type":"DELETE","lineNumber":370,"oldContent":""},{"type":"DELETE","lineNumber":371,"oldContent":"    }"},{"type":"DELETE","lineNumber":372,"oldContent":"        suspend fun observedModeWithin(timeoutMs: Long, check: () -> Boolean): Boolean {"},{"type":"DELETE","lineNumber":373,"oldContent":"            val start = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":374,"oldContent":"            while (System.currentTimeMillis() - start < timeoutMs) {"},{"type":"DELETE","lineNumber":375,"oldContent":""},{"type":"DELETE","lineNumber":376,"oldContent":"                if (check()) return true"},{"type":"DELETE","lineNumber":377,"oldContent":"                delay(250)"},{"type":"DELETE","lineNumber":378,"oldContent":"            }"},{"type":"DELETE","lineNumber":379,"oldContent":"    suspend fun takeoff(altitude: Float) {"},{"type":"DELETE","lineNumber":380,"oldContent":"            return false"},{"type":"DELETE","lineNumber":381,"oldContent":"        }"},{"type":"DELETE","lineNumber":382,"oldContent":"        sendCommand("},{"type":"DELETE","lineNumber":383,"oldContent":""},{"type":"DELETE","lineNumber":384,"oldContent":"        // Helper to try SET_MODE and observe telemetry"},{"type":"DELETE","lineNumber":385,"oldContent":"        suspend fun trySetMode(baseFlags: UInt): Boolean {"},{"type":"DELETE","lineNumber":386,"oldContent":"            MavCmd.NAV_TAKEOFF,"},{"type":"DELETE","lineNumber":387,"oldContent":"            try {"},{"type":"DELETE","lineNumber":388,"oldContent":"                val setModeMsg = SetMode("},{"type":"DELETE","lineNumber":389,"oldContent":"                    targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":390,"oldContent":"                    baseMode = baseFlags.toUByte(),"},{"type":"DELETE","lineNumber":391,"oldContent":"                    customMode = customMode"},{"type":"DELETE","lineNumber":392,"oldContent":"                )"},{"type":"DELETE","lineNumber":393,"oldContent":"                connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, setModeMsg)"},{"type":"DELETE","lineNumber":394,"oldContent":"                Log.i(\"MavlinkRepo\", \"Sent SET_MODE: baseMode=$baseFlags customMode=$customMode\")"},{"type":"DELETE","lineNumber":395,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":396,"oldContent":"                Log.w(\"MavlinkRepo\", \"Failed to send SET_MODE\", e)"},{"type":"DELETE","lineNumber":397,"oldContent":"                return false"},{"type":"DELETE","lineNumber":398,"oldContent":"            }"},{"type":"DELETE","lineNumber":399,"oldContent":""},{"type":"DELETE","lineNumber":400,"oldContent":"            val ok = observedModeWithin(2500L) {"},{"type":"DELETE","lineNumber":401,"oldContent":"                val modeStr = state.value.mode"},{"type":"DELETE","lineNumber":402,"oldContent":"                when (customMode) {"},{"type":"DELETE","lineNumber":403,"oldContent":"                    MavMode.AUTO -> modeStr?.contains(\"Auto\", ignoreCase = true) == true"},{"type":"DELETE","lineNumber":404,"oldContent":""},{"type":"DELETE","lineNumber":405,"oldContent":"                    MavMode.STABILIZE -> modeStr?.contains(\"Stabilize\", ignoreCase = true) == true"},{"type":"DELETE","lineNumber":406,"oldContent":"                    MavMode.LOITER -> modeStr?.contains(\"Loiter\", ignoreCase = true) == true"},{"type":"DELETE","lineNumber":407,"oldContent":"    suspend fun land() {"},{"type":"DELETE","lineNumber":408,"oldContent":"                    else -> false"},{"type":"DELETE","lineNumber":409,"oldContent":"                }"},{"type":"DELETE","lineNumber":410,"oldContent":"        sendCommand(MavCmd.NAV_LAND)"},{"type":"DELETE","lineNumber":411,"oldContent":"            }"},{"type":"DELETE","lineNumber":412,"oldContent":"            if (ok) Log.i(\"MavlinkRepo\", \"Mode change observed via SET_MODE: customMode=$customMode base=$baseFlags\")"},{"type":"DELETE","lineNumber":413,"oldContent":"    }"},{"type":"DELETE","lineNumber":414,"oldContent":"            return ok"},{"type":"DELETE","lineNumber":415,"oldContent":"        }"},{"type":"DELETE","lineNumber":416,"oldContent":""},{"type":"DELETE","lineNumber":417,"oldContent":""},{"type":"DELETE","lineNumber":418,"oldContent":"        // Helper to try DO_SET_MODE (COMMAND_LONG) and wait for COMMAND_ACK accepted"},{"type":"DELETE","lineNumber":419,"oldContent":"    /**"},{"type":"DELETE","lineNumber":420,"oldContent":"        suspend fun tryDoSetMode(baseFlags: UInt): Boolean {"},{"type":"DELETE","lineNumber":421,"oldContent":"            try {"},{"type":"DELETE","lineNumber":422,"oldContent":"     * Uploads a mission using the MAVLink mission protocol handshake."},{"type":"DELETE","lineNumber":423,"oldContent":"                sendCommand("},{"type":"DELETE","lineNumber":424,"oldContent":"                    MavCmd.DO_SET_MODE,"},{"type":"DELETE","lineNumber":425,"oldContent":"     * Returns true if ACK received, false otherwise."},{"type":"DELETE","lineNumber":426,"oldContent":"                    baseFlags.toFloat(),"},{"type":"DELETE","lineNumber":427,"oldContent":"                    customMode.toFloat(),"},{"type":"DELETE","lineNumber":428,"oldContent":"     */"},{"type":"DELETE","lineNumber":429,"oldContent":"                    0f, 0f, 0f, 0f, 0f"},{"type":"DELETE","lineNumber":430,"oldContent":"                )"},{"type":"DELETE","lineNumber":431,"oldContent":"    @Suppress(\"DEPRECATION\")"},{"type":"DELETE","lineNumber":432,"oldContent":"                Log.i(\"MavlinkRepo\", \"Sent DO_SET_MODE: baseMode=$baseFlags customMode=$customMode\")"},{"type":"DELETE","lineNumber":433,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":434,"oldContent":"    suspend fun uploadMissionWithAck(missionItems: List<MissionItemInt>, timeoutMs: Long = 15000): Boolean {"},{"type":"DELETE","lineNumber":435,"oldContent":"                Log.w(\"MavlinkRepo\", \"Failed to send DO_SET_MODE\", e)"},{"type":"DELETE","lineNumber":436,"oldContent":"                return false"},{"type":"DELETE","lineNumber":437,"oldContent":"        if (!state.value.fcuDetected) {"},{"type":"DELETE","lineNumber":438,"oldContent":"            }"},{"type":"DELETE","lineNumber":439,"oldContent":""},{"type":"DELETE","lineNumber":440,"oldContent":"            Log.e(\"MavlinkRepo\", \"FCU not detected, cannot upload mission\")"},{"type":"DELETE","lineNumber":441,"oldContent":"            val ackDeferred = CompletableDeferred<Boolean?>()"},{"type":"DELETE","lineNumber":442,"oldContent":"            val job = AppScope.launch {"},{"type":"DELETE","lineNumber":443,"oldContent":"            throw IllegalStateException(\"FCU not detected\")"},{"type":"DELETE","lineNumber":444,"oldContent":"                connection.mavFrame.collect { frame ->"},{"type":"DELETE","lineNumber":445,"oldContent":"                    val msg = frame.message"},{"type":"DELETE","lineNumber":446,"oldContent":"                    if (msg is CommandAck) {"},{"type":"DELETE","lineNumber":447,"oldContent":"                        try {"},{"type":"DELETE","lineNumber":448,"oldContent":"        if (missionItems.isEmpty()) {"},{"type":"DELETE","lineNumber":449,"oldContent":"                            if (msg.command == MavCmd.DO_SET_MODE.wrap()) {"},{"type":"DELETE","lineNumber":450,"oldContent":"                                val res = msg.result.value"},{"type":"DELETE","lineNumber":451,"oldContent":"                                Log.i(\"MavlinkRepo\", \"COMMAND_ACK for DO_SET_MODE result=$res\")"},{"type":"DELETE","lineNumber":452,"oldContent":"                                if (!ackDeferred.isCompleted) ackDeferred.complete(if (res == 0u) true else false)"},{"type":"DELETE","lineNumber":453,"oldContent":"            return false"},{"type":"DELETE","lineNumber":454,"oldContent":"                            }"},{"type":"DELETE","lineNumber":455,"oldContent":"                        } catch (t: Throwable) {"},{"type":"DELETE","lineNumber":456,"oldContent":"                            Log.w(\"MavlinkRepo\", \"Error while processing COMMAND_ACK for DO_SET_MODE\", t)"},{"type":"DELETE","lineNumber":457,"oldContent":"        }"},{"type":"DELETE","lineNumber":458,"oldContent":"                        }"},{"type":"DELETE","lineNumber":459,"oldContent":""},{"type":"DELETE","lineNumber":460,"oldContent":"                    }"},{"type":"DELETE","lineNumber":461,"oldContent":"                }"},{"type":"INSERT","lineNumber":365,"content":"        // Send COMMAND_LONG MAV_CMD_DO_SET_MODE (preferred per common.xml for ArduPilot compatibility)"},{"type":"DELETE","lineNumber":463,"oldContent":"            }"},{"type":"DELETE","lineNumber":464,"oldContent":""},{"type":"DELETE","lineNumber":465,"oldContent":"            val ack = withTimeoutOrNull(1500L) { ackDeferred.await() }"},{"type":"DELETE","lineNumber":466,"oldContent":"            job.cancel()"},{"type":"DELETE","lineNumber":467,"oldContent":"            if (ack == true) Log.i(\"MavlinkRepo\", \"DO_SET_MODE accepted base=$baseFlags custom=$customMode\")"},{"type":"DELETE","lineNumber":468,"oldContent":"            return ack == true"},{"type":"DELETE","lineNumber":469,"oldContent":"        }"},{"type":"DELETE","lineNumber":470,"oldContent":""},{"type":"DELETE","lineNumber":471,"oldContent":"        // Attempt sequence:"},{"type":"DELETE","lineNumber":472,"oldContent":"        // 1) SET_MODE without armed flag"},{"type":"DELETE","lineNumber":473,"oldContent":"        // 2) SET_MODE with armed flag (if armed)"},{"type":"DELETE","lineNumber":474,"oldContent":"        // 3) DO_SET_MODE without armed flag"},{"type":"DELETE","lineNumber":475,"oldContent":"        // 4) DO_SET_MODE with armed flag"},{"type":"DELETE","lineNumber":476,"oldContent":""},{"type":"DELETE","lineNumber":477,"oldContent":"        // Log current telemetry to aid diagnosis"},{"type":"DELETE","lineNumber":478,"oldContent":"        Log.i(\"MavlinkRepo\", \"Attempting mode change to $customMode. Telemetry: armed=${state.value.armed} mode=${state.value.mode} armable=${state.value.armable}\")"},{"type":"DELETE","lineNumber":479,"oldContent":"            Log.i(\"MavlinkRepo\", \"Sent MISSION_COUNT=${missionItems.size}\")"},{"type":"DELETE","lineNumber":480,"oldContent":""},{"type":"DELETE","lineNumber":481,"oldContent":"        if (trySetMode(flagsBase)) return"},{"type":"DELETE","lineNumber":482,"oldContent":""},{"type":"DELETE","lineNumber":483,"oldContent":"        if (state.value.armed && trySetMode(flagsWithArmed)) return"},{"type":"DELETE","lineNumber":484,"oldContent":""},{"type":"DELETE","lineNumber":485,"oldContent":"        if (tryDoSetMode(flagsBase)) return"},{"type":"DELETE","lineNumber":486,"oldContent":"        if (state.value.armed && tryDoSetMode(flagsWithArmed)) return"},{"type":"DELETE","lineNumber":487,"oldContent":""},{"type":"DELETE","lineNumber":488,"oldContent":"        // Last-resort permutations: some FCs expect param1=customMode and param2=0 (legacy)"},{"type":"DELETE","lineNumber":489,"oldContent":"            var firstRequestReceived = false"},{"type":"DELETE","lineNumber":490,"oldContent":"        try {"},{"type":"DELETE","lineNumber":491,"oldContent":"            sendCommand(MavCmd.DO_SET_MODE, customMode.toFloat(), 0f)"},{"type":"DELETE","lineNumber":492,"oldContent":""},{"type":"DELETE","lineNumber":493,"oldContent":"            Log.i(\"MavlinkRepo\", \"Sent DO_SET_MODE legacy: p1=customMode p2=0 -> $customMode\")"},{"type":"INSERT","lineNumber":367,"content":"            sendCommand("},{"type":"INSERT","lineNumber":368,"content":"                MavCmd.DO_SET_MODE,"},{"type":"INSERT","lineNumber":369,"content":"                baseFlags.toFloat(),   // param1: base mode flags (as float)"},{"type":"INSERT","lineNumber":370,"content":"                customMode.toFloat(),  // param2: custom mode index"},{"type":"INSERT","lineNumber":371,"content":"                0f, 0f, 0f, 0f, 0f"},{"type":"INSERT","lineNumber":372,"content":"            )"},{"type":"INSERT","lineNumber":373,"content":"            Log.i(\"MavlinkRepo\", \"Sent DO_SET_MODE: baseMode=$baseFlags customMode=$customMode\")"},{"type":"DELETE","lineNumber":495,"oldContent":"            Log.w(\"MavlinkRepo\", \"Failed to send DO_SET_MODE legacy\", e)"},{"type":"INSERT","lineNumber":375,"content":"            Log.w(\"MavlinkRepo\", \"Failed to send DO_SET_MODE\", e)"},{"type":"DELETE","lineNumber":497,"oldContent":"            val resendJob = AppScope.launch {"},{"type":"DELETE","lineNumber":498,"oldContent":""},{"type":"DELETE","lineNumber":499,"oldContent":"        // wait briefly for telemetry"},{"type":"DELETE","lineNumber":500,"oldContent":"                while (isActive && !firstRequestReceived && !ackDeferred.isCompleted) {"},{"type":"DELETE","lineNumber":501,"oldContent":"        if (observedModeWithin(2000L) {"},{"type":"DELETE","lineNumber":502,"oldContent":"                val modeStr = state.value.mode"},{"type":"DELETE","lineNumber":503,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":504,"oldContent":"                when (customMode) {"},{"type":"DELETE","lineNumber":505,"oldContent":"                    MavMode.AUTO -> modeStr?.contains(\"Auto\", ignoreCase = true) == true"},{"type":"DELETE","lineNumber":507,"oldContent":"                    MavMode.STABILIZE -> modeStr?.contains(\"Stabilize\", ignoreCase = true) == true"},{"type":"DELETE","lineNumber":508,"oldContent":"                    MavMode.LOITER -> modeStr?.contains(\"Loiter\", ignoreCase = true) == true"},{"type":"DELETE","lineNumber":509,"oldContent":"                        Log.d(\"MavlinkRepo\", \"Resent MISSION_COUNT\")"},{"type":"DELETE","lineNumber":510,"oldContent":"                    else -> false"},{"type":"DELETE","lineNumber":511,"oldContent":"                }"},{"type":"DELETE","lineNumber":512,"oldContent":"                    } catch (e: Exception) {"},{"type":"DELETE","lineNumber":513,"oldContent":"            }) {"},{"type":"DELETE","lineNumber":514,"oldContent":"            Log.i(\"MavlinkRepo\", \"Mode change observed after legacy DO_SET_MODE: $customMode\")"},{"type":"DELETE","lineNumber":515,"oldContent":"                        Log.e(\"MavlinkRepo\", \"Failed to resend MISSION_COUNT\", e)"},{"type":"DELETE","lineNumber":516,"oldContent":"            return"},{"type":"DELETE","lineNumber":517,"oldContent":"        }"},{"type":"INSERT","lineNumber":378,"content":"        // Wait for COMMAND_ACK for DO_SET_MODE"},{"type":"INSERT","lineNumber":379,"content":"        val ackDeferred = CompletableDeferred<Boolean?>()"},{"type":"INSERT","lineNumber":380,"content":"        val ackCollector = AppScope.launch {"},{"type":"INSERT","lineNumber":381,"content":"            connection.mavFrame.collect { frame ->"},{"type":"INSERT","lineNumber":382,"content":"                val msg = frame.message"},{"type":"INSERT","lineNumber":383,"content":"                if (msg is CommandAck) {"},{"type":"INSERT","lineNumber":384,"content":"                    try {"},{"type":"INSERT","lineNumber":385,"content":"                        if (msg.command == MavCmd.DO_SET_MODE.wrap()) {"},{"type":"INSERT","lineNumber":386,"content":"                            val res = msg.result.value"},{"type":"INSERT","lineNumber":387,"content":"                            Log.i(\"MavlinkRepo\", \"COMMAND_ACK for DO_SET_MODE result=$res\")"},{"type":"INSERT","lineNumber":388,"content":"                            if (!ackDeferred.isCompleted) ackDeferred.complete(if (res == 0u) true else false)"},{"type":"INSERT","lineNumber":389,"content":"                        }"},{"type":"INSERT","lineNumber":390,"content":"                    } catch (t: Throwable) {"},{"type":"INSERT","lineNumber":391,"content":"                        Log.w(\"MavlinkRepo\", \"Error while processing COMMAND_ACK for DO_SET_MODE\", t)"},{"type":"DELETE","lineNumber":519,"oldContent":""},{"type":"DELETE","lineNumber":520,"oldContent":"        Log.e(\"MavlinkRepo\", \"All attempts to change mode to customMode=$customMode failed\")"},{"type":"DELETE","lineNumber":521,"oldContent":"                    delay(700)"},{"type":"DELETE","lineNumber":522,"oldContent":"            1f,                   // param1: MAV_MODE_FLAG_CUSTOM_MODE_ENABLED (always 1)"},{"type":"DELETE","lineNumber":523,"oldContent":"            customMode.toFloat(), // param2: custom mode (0=Stabilize, 3=Auto, 5=Loiter, etc.)"},{"type":"DELETE","lineNumber":525,"oldContent":"            0f,                   // param4: empty"},{"type":"DELETE","lineNumber":527,"oldContent":"            0f,                   // param5: empty"},{"type":"DELETE","lineNumber":528,"oldContent":""},{"type":"DELETE","lineNumber":529,"oldContent":"            // Collector job"},{"type":"DELETE","lineNumber":530,"oldContent":"            val job = AppScope.launch {"},{"type":"DELETE","lineNumber":531,"oldContent":"                connection.mavFrame"},{"type":"DELETE","lineNumber":532,"oldContent":"            -1f,"},{"type":"DELETE","lineNumber":533,"oldContent":"            0f,"},{"type":"DELETE","lineNumber":534,"oldContent":"                    //.filter { it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":535,"oldContent":"            0f,"},{"type":"DELETE","lineNumber":536,"oldContent":"            0f,"},{"type":"DELETE","lineNumber":537,"oldContent":"                    .collect { frame ->"},{"type":"DELETE","lineNumber":538,"oldContent":"            0f,"},{"type":"DELETE","lineNumber":539,"oldContent":"                        val senderSys = frame.systemId"},{"type":"DELETE","lineNumber":540,"oldContent":"            0f,"},{"type":"DELETE","lineNumber":541,"oldContent":"                        val senderComp = frame.componentId"},{"type":"DELETE","lineNumber":542,"oldContent":"            altitude"},{"type":"DELETE","lineNumber":543,"oldContent":"                        when (val msg = frame.message) {"},{"type":"DELETE","lineNumber":544,"oldContent":"        )"},{"type":"DELETE","lineNumber":545,"oldContent":"                            is MissionRequestInt -> {"},{"type":"DELETE","lineNumber":546,"oldContent":"    }"},{"type":"DELETE","lineNumber":547,"oldContent":"                                Log.d(\"MavlinkRepo\", \"Received MissionRequestInt from sys=$senderSys comp=$senderComp seq=${msg.seq}\")"},{"type":"DELETE","lineNumber":548,"oldContent":"                                firstRequestReceived = true"},{"type":"DELETE","lineNumber":549,"oldContent":"                                    seq = seq.toUShort()"},{"type":"DELETE","lineNumber":550,"oldContent":"                                )"},{"type":"DELETE","lineNumber":551,"oldContent":"                                try {"},{"type":"DELETE","lineNumber":552,"oldContent":"                                    // Always send the requested item (allow retransmits)"},{"type":"DELETE","lineNumber":554,"oldContent":"            Log.w(\"MavlinkRepo\", \"No mission items to upload\")"},{"type":"DELETE","lineNumber":555,"oldContent":"            // Send MissionCount"},{"type":"DELETE","lineNumber":556,"oldContent":"            val missionCount = MissionCount("},{"type":"DELETE","lineNumber":557,"oldContent":"                targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":558,"oldContent":"                targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":559,"oldContent":"                count = missionItems.size.toUShort()"},{"type":"DELETE","lineNumber":560,"oldContent":"            )"},{"type":"DELETE","lineNumber":561,"oldContent":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionCount)"},{"type":"INSERT","lineNumber":396,"content":"                                Log.d(\"MavlinkRepo\", \"Received MissionRequestInt from sys=$senderSys comp=$senderComp seq=${msg.seq}\")"},{"type":"INSERT","lineNumber":397,"content":"        val ack = withTimeoutOrNull(1500L) { ackDeferred.await() }"},{"type":"INSERT","lineNumber":398,"content":"        ackCollector.cancel()"},{"type":"INSERT","lineNumber":399,"content":"                                }"},{"type":"INSERT","lineNumber":400,"content":"        if (ack != true) {"},{"type":"INSERT","lineNumber":401,"content":"            Log.w(\"MavlinkRepo\", \"DO_SET_MODE not accepted (ack=$ack). Will still monitor telemetry for mode change.\")"},{"type":"INSERT","lineNumber":402,"content":"        } else {"},{"type":"INSERT","lineNumber":403,"content":"            Log.i(\"MavlinkRepo\", \"DO_SET_MODE accepted by FCU\")"},{"type":"DELETE","lineNumber":564,"oldContent":"                                    return@collect"},{"type":"DELETE","lineNumber":565,"oldContent":"            val ackDeferred = CompletableDeferred<Boolean>()"},{"type":"DELETE","lineNumber":566,"oldContent":"                                }"},{"type":"DELETE","lineNumber":567,"oldContent":"            val sentSeqs = mutableSetOf<Int>()"},{"type":"INSERT","lineNumber":406,"content":"        // After ACK (or even if none), wait up to a short timeout for telemetry to reflect the new mode"},{"type":"INSERT","lineNumber":407,"content":"        val modeObserved = withTimeoutOrNull(3000L) {"},{"type":"INSERT","lineNumber":408,"content":"            while (true) {"},{"type":"DELETE","lineNumber":569,"oldContent":"                                val missionItemInt = itemInt.copy("},{"type":"INSERT","lineNumber":410,"content":"                val ok = when (customMode) {"},{"type":"DELETE","lineNumber":571,"oldContent":"            // Resend MISSION_COUNT periodically until first request or timeout"},{"type":"DELETE","lineNumber":576,"oldContent":"                                    // Always resend when requested"},{"type":"DELETE","lineNumber":577,"oldContent":"                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItemInt)"},{"type":"DELETE","lineNumber":578,"oldContent":"                                    sentSeqs.add(seq)"},{"type":"DELETE","lineNumber":579,"oldContent":"                                    Log.i(\"MavlinkRepo\", \"Sent MISSION_ITEM_INT seq=$seq to sys=$senderSys comp=$senderComp (responding to MissionRequest)\")"},{"type":"INSERT","lineNumber":416,"content":"                if (ok) return@withTimeoutOrNull true"},{"type":"INSERT","lineNumber":417,"content":"                delay(200)"},{"type":"INSERT","lineNumber":418,"content":"            }"},{"type":"INSERT","lineNumber":419,"content":"        } ?: false"},{"type":"DELETE","lineNumber":581,"oldContent":"                                    Log.e(\"MavlinkRepo\", \"Failed to send mission item(seq=$seq) as MissionItemInt\", e)"},{"type":"DELETE","lineNumber":582,"oldContent":"                                }"},{"type":"DELETE","lineNumber":583,"oldContent":"                            }"},{"type":"DELETE","lineNumber":584,"oldContent":"                            is MissionAck -> {"},{"type":"DELETE","lineNumber":585,"oldContent":"                                Log.i(\"MavlinkRepo\", \"Received MISSION_ACK from sys=$senderSys comp=$senderComp: ${msg.type}\")"},{"type":"DELETE","lineNumber":586,"oldContent":"                                if (!ackDeferred.isCompleted) ackDeferred.complete(true)"},{"type":"DELETE","lineNumber":587,"oldContent":"                                return@collect"},{"type":"DELETE","lineNumber":588,"oldContent":"                            }"},{"type":"INSERT","lineNumber":421,"content":"        if (modeObserved) {"},{"type":"INSERT","lineNumber":422,"content":"            Log.i(\"MavlinkRepo\", \"Mode change observed via telemetry to customMode=$customMode\")"},{"type":"INSERT","lineNumber":423,"content":"        } else {"},{"type":"INSERT","lineNumber":424,"content":"            Log.e(\"MavlinkRepo\", \"Mode change to customMode=$customMode not observed within timeout\")"},{"type":"INSERT","lineNumber":425,"content":"        }"},{"type":"DELETE","lineNumber":590,"oldContent":"    }"},{"type":"DELETE","lineNumber":591,"oldContent":"        Log.e(\"MavlinkRepo\", \"Fallback start failed: vehicle did not switch to AUTO mode\")"},{"type":"DELETE","lineNumber":592,"oldContent":""},{"type":"INSERT","lineNumber":427,"content":"                                // ignore other messages"},{"type":"INSERT","lineNumber":428,"content":"                            }"},{"type":"INSERT","lineNumber":429,"content":"                        }"},{"type":"INSERT","lineNumber":430,"content":"                    }"},{"type":"DELETE","lineNumber":594,"oldContent":"                return true"},{"type":"DELETE","lineNumber":595,"oldContent":"                                val seq = msg.seq.toInt()"},{"type":"DELETE","lineNumber":596,"oldContent":"                                if (seq < 0 || seq >= missionItems.size) {"},{"type":"DELETE","lineNumber":598,"oldContent":"                                    Log.w(\"MavlinkRepo\", \"FC requested invalid seq=$seq (MissionRequestInt)\")"},{"type":"INSERT","lineNumber":433,"content":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"INSERT","lineNumber":434,"content":"            val firstRequestTimeout = 5000L // increase wait to allow FC more time to request"},{"type":"INSERT","lineNumber":435,"content":"             val startWait = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":436,"content":"             while (!firstRequestReceived && !ackDeferred.isCompleted && System.currentTimeMillis() - startWait < firstRequestTimeout) {"},{"type":"INSERT","lineNumber":437,"content":"                 delay(100)"},{"type":"INSERT","lineNumber":438,"content":"             }"},{"type":"INSERT","lineNumber":439,"content":""},{"type":"INSERT","lineNumber":440,"content":"             if (!firstRequestReceived) {"},{"type":"DELETE","lineNumber":600,"oldContent":"                                    return@collect"},{"type":"DELETE","lineNumber":602,"oldContent":"                                }"},{"type":"DELETE","lineNumber":604,"oldContent":"                                val item = missionItems[seq]"},{"type":"DELETE","lineNumber":606,"oldContent":"                                val missionItem = item.copy("},{"type":"DELETE","lineNumber":608,"oldContent":"                                    targetSystem = senderSys.toUByte(),"},{"type":"DELETE","lineNumber":610,"oldContent":"                                    targetComponent = senderComp.toUByte(),"},{"type":"DELETE","lineNumber":612,"oldContent":"            } else {"},{"type":"INSERT","lineNumber":448,"content":"                        targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":449,"content":"                        seq = seq.toUShort()"},{"type":"INSERT","lineNumber":450,"content":"                    )"},{"type":"INSERT","lineNumber":451,"content":"                    try {"},{"type":"INSERT","lineNumber":452,"content":"                        // log full item contents for diagnostics"},{"type":"INSERT","lineNumber":453,"content":"                        Log.d(\"MavlinkRepo\", \"Sending fallback item seq=$seq cmd=${missionItem.command} frame=${missionItem.frame} x=${missionItem.x} y=${missionItem.y} z=${missionItem.z}\")"},{"type":"INSERT","lineNumber":454,"content":"                         connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"INSERT","lineNumber":455,"content":"                         sentSeqs.add(seq)"},{"type":"INSERT","lineNumber":456,"content":"                         Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_ITEM_INT seq=$seq\")"},{"type":"INSERT","lineNumber":457,"content":"                         // give FC a bit more time to process unsolicited item and possibly request next"},{"type":"INSERT","lineNumber":458,"content":"                         delay(300)"},{"type":"INSERT","lineNumber":459,"content":"                     } catch (e: Exception) {"},{"type":"INSERT","lineNumber":460,"content":"                         Log.e(\"MavlinkRepo\", \"Fallback: Failed to send mission item seq=$seq\", e)"},{"type":"INSERT","lineNumber":461,"content":"                     }"},{"type":"INSERT","lineNumber":462,"content":"                 }"},{"type":"INSERT","lineNumber":463,"content":"             }"},{"type":"INSERT","lineNumber":464,"content":""},{"type":"INSERT","lineNumber":465,"content":"            // Wait for ACK with timeout"},{"type":"INSERT","lineNumber":466,"content":"            val ackReceived = withTimeoutOrNull(timeoutMs) {"},{"type":"INSERT","lineNumber":467,"content":"                ackDeferred.await()"},{"type":"INSERT","lineNumber":468,"content":"            } ?: false"},{"type":"INSERT","lineNumber":469,"content":""},{"type":"INSERT","lineNumber":470,"content":"            // cancel collector and resend jobs"},{"type":"DELETE","lineNumber":615,"oldContent":"                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"INSERT","lineNumber":473,"content":""},{"type":"DELETE","lineNumber":617,"oldContent":"                                    sentSeqs.add(seq)"},{"type":"DELETE","lineNumber":619,"oldContent":"                                    Log.i(\"MavlinkRepo\", \"Sent MISSION_ITEM_INT seq=$seq to sys=$senderSys comp=$senderComp\")"},{"type":"DELETE","lineNumber":621,"oldContent":"                                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":623,"oldContent":"                                    Log.e(\"MavlinkRepo\", \"Failed to send mission item seq=$seq\", e)"},{"type":"DELETE","lineNumber":625,"oldContent":"                                }"},{"type":"DELETE","lineNumber":627,"oldContent":"                            }"},{"type":"DELETE","lineNumber":629,"oldContent":"                            is MissionRequest -> {"},{"type":"DELETE","lineNumber":631,"oldContent":"                                // Vehicle requested the float MissionRequest message (deprecated in some dialects)"},{"type":"DELETE","lineNumber":633,"oldContent":"                                // Respond with MISSION_ITEM_INT (not float) for compatibility with Mission Planner"},{"type":"DELETE","lineNumber":635,"oldContent":"                                Log.d(\"MavlinkRepo\", \"Received MissionRequest (float) from sys=$senderSys comp=$senderComp seq=${msg.seq}\")"},{"type":"DELETE","lineNumber":637,"oldContent":"                                firstRequestReceived = true"},{"type":"DELETE","lineNumber":639,"oldContent":"                                val seq = msg.seq.toInt()"},{"type":"INSERT","lineNumber":486,"content":"    }"},{"type":"DELETE","lineNumber":647,"oldContent":"                // Give FC a moment to start the mission"},{"type":"INSERT","lineNumber":494,"content":"        }"},{"type":"INSERT","lineNumber":495,"content":"        try {"},{"type":"DELETE","lineNumber":656,"oldContent":"                    }"},{"type":"DELETE","lineNumber":659,"oldContent":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"DELETE","lineNumber":660,"oldContent":"            val firstRequestTimeout = 5000L // increase wait to allow FC more time to request"},{"type":"DELETE","lineNumber":662,"oldContent":"             val startWait = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":663,"oldContent":"             while (!firstRequestReceived && !ackDeferred.isCompleted && System.currentTimeMillis() - startWait < firstRequestTimeout) {"},{"type":"DELETE","lineNumber":665,"oldContent":"                 delay(100)"},{"type":"DELETE","lineNumber":666,"oldContent":"             }"},{"type":"DELETE","lineNumber":668,"oldContent":"             if (!firstRequestReceived) {"},{"type":"DELETE","lineNumber":673,"oldContent":"                        targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":675,"oldContent":"                        seq = seq.toUShort()"},{"type":"DELETE","lineNumber":676,"oldContent":"                    )"},{"type":"DELETE","lineNumber":677,"oldContent":"            val job = AppScope.launch {"},{"type":"DELETE","lineNumber":678,"oldContent":"                    try {"},{"type":"INSERT","lineNumber":514,"content":"                            received.add(msg.seq.toInt() to \"INT: lat=$lat lon=$lon alt=${msg.z}\")"},{"type":"DELETE","lineNumber":680,"oldContent":"                        // log full item contents for diagnostics"},{"type":"DELETE","lineNumber":681,"oldContent":"                        Log.d(\"MavlinkRepo\", \"Sending fallback item seq=$seq cmd=${missionItem.command} frame=${missionItem.frame} x=${missionItem.x} y=${missionItem.y} z=${missionItem.z}\")"},{"type":"DELETE","lineNumber":683,"oldContent":"                         connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"DELETE","lineNumber":684,"oldContent":"                         sentSeqs.add(seq)"},{"type":"DELETE","lineNumber":686,"oldContent":"                         Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_ITEM_INT seq=$seq\")"},{"type":"DELETE","lineNumber":687,"oldContent":"                         // give FC a bit more time to process unsolicited item and possibly request next"},{"type":"DELETE","lineNumber":689,"oldContent":"                         delay(300)"},{"type":"DELETE","lineNumber":690,"oldContent":"                     } catch (e: Exception) {"},{"type":"DELETE","lineNumber":692,"oldContent":"                         Log.e(\"MavlinkRepo\", \"Fallback: Failed to send mission item seq=$seq\", e)"},{"type":"DELETE","lineNumber":694,"oldContent":"                     }"},{"type":"DELETE","lineNumber":695,"oldContent":"                 }"},{"type":"DELETE","lineNumber":696,"oldContent":"             }"},{"type":"INSERT","lineNumber":521,"content":"                            perSeqMap[msg.seq.toInt()]?.let { d -> if (!d.isCompleted) d.complete(Unit) }"},{"type":"INSERT","lineNumber":522,"content":"                        }"},{"type":"INSERT","lineNumber":523,"content":"                        is MissionAck -> {"},{"type":"INSERT","lineNumber":524,"content":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_ACK type=${msg.type}\")"},{"type":"INSERT","lineNumber":525,"content":"                        }"},{"type":"INSERT","lineNumber":526,"content":"                        else -> {}"},{"type":"DELETE","lineNumber":699,"oldContent":"            // Wait for ACK with timeout"},{"type":"DELETE","lineNumber":701,"oldContent":"            val ackReceived = withTimeoutOrNull(timeoutMs) {"},{"type":"DELETE","lineNumber":703,"oldContent":"                ackDeferred.await()"},{"type":"DELETE","lineNumber":705,"oldContent":"            } ?: false"},{"type":"DELETE","lineNumber":707,"oldContent":""},{"type":"DELETE","lineNumber":709,"oldContent":"            // cancel collector and resend jobs"},{"type":"DELETE","lineNumber":713,"oldContent":""},{"type":"INSERT","lineNumber":539,"content":""},{"type":"DELETE","lineNumber":726,"oldContent":"    }"},{"type":"DELETE","lineNumber":734,"oldContent":"        try {"},{"type":"INSERT","lineNumber":557,"content":"                    Log.e(\"MavlinkRepo\", \"Failed to send MISSION_REQUEST_INT seq=$seq\", e)"},{"type":"INSERT","lineNumber":558,"content":"                }"},{"type":"DELETE","lineNumber":736,"oldContent":"            delay(200)"},{"type":"INSERT","lineNumber":560,"content":"                // wait up to 1500ms for the item"},{"type":"INSERT","lineNumber":561,"content":"                val got = withTimeoutOrNull(1500L) {"},{"type":"DELETE","lineNumber":738,"oldContent":"                    Log.w(\"MavlinkRepo\", \"Did not receive item for seq=$seq within timeout\")"},{"type":"DELETE","lineNumber":739,"oldContent":"}"},{"type":"DELETE","lineNumber":740,"oldContent":"    }"},{"type":"INSERT","lineNumber":563,"content":"                    true"},{"type":"INSERT","lineNumber":564,"content":"                } ?: false"},{"type":"INSERT","lineNumber":566,"content":"                if (!got) {"},{"type":"DELETE","lineNumber":743,"oldContent":"                return true"},{"type":"INSERT","lineNumber":568,"content":"                }"},{"type":"DELETE","lineNumber":748,"oldContent":"        try {"},{"type":"INSERT","lineNumber":573,"content":"            // give a moment for any remaining frames"},{"type":"INSERT","lineNumber":576,"content":""},{"type":"DELETE","lineNumber":754,"oldContent":"                            perSeqMap[msg.seq.toInt()]?.let { d -> if (!d.isCompleted) d.complete(Unit) }"},{"type":"DELETE","lineNumber":756,"oldContent":"                        }"},{"type":"DELETE","lineNumber":758,"oldContent":"                        is MissionAck -> {"},{"type":"DELETE","lineNumber":760,"oldContent":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_ACK type=${msg.type}\")"},{"type":"DELETE","lineNumber":762,"oldContent":"                        }"},{"type":"DELETE","lineNumber":764,"oldContent":"                        else -> {}"},{"type":"INSERT","lineNumber":588,"content":"            return false"},{"type":"INSERT","lineNumber":589,"content":"        }"},{"type":"DELETE","lineNumber":769,"oldContent":"        Log.e(\"MavlinkRepo\", \"Fallback start failed: vehicle did not switch to AUTO mode\")"},{"type":"DELETE","lineNumber":770,"oldContent":""},{"type":"INSERT","lineNumber":591,"content":"        // First, tell FC which mission item to start from (some firmwares expect this)"},{"type":"INSERT","lineNumber":592,"content":"        try {"},{"type":"INSERT","lineNumber":593,"content":"            val setCurrent = MissionSetCurrent(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = first.toUShort())"},{"type":"INSERT","lineNumber":596,"content":"            // small delay to allow FC to process"},{"type":"DELETE","lineNumber":774,"oldContent":"        }"},{"type":"DELETE","lineNumber":775,"oldContent":""},{"type":"DELETE","lineNumber":776,"oldContent":"            Log.w(\"MavlinkRepo\", \"Fallback: Failed to send MISSION_SET_CURRENT\", e)"},{"type":"DELETE","lineNumber":778,"oldContent":""},{"type":"DELETE","lineNumber":779,"oldContent":"        return false"},{"type":"DELETE","lineNumber":780,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":781,"oldContent":""},{"type":"DELETE","lineNumber":782,"oldContent":"                    }"},{"type":"DELETE","lineNumber":783,"oldContent":"                }"},{"type":"DELETE","lineNumber":784,"oldContent":"            }"},{"type":"DELETE","lineNumber":785,"oldContent":"                    Log.e(\"MavlinkRepo\", \"Failed to send MISSION_REQUEST_INT seq=$seq\", e)"},{"type":"DELETE","lineNumber":786,"oldContent":""},{"type":"DELETE","lineNumber":787,"oldContent":"                }"},{"type":"DELETE","lineNumber":788,"oldContent":"            val result = withTimeoutOrNull(perAttemptTimeout) { ackDeferred.await() }"},{"type":"DELETE","lineNumber":789,"oldContent":"            job.cancel()"},{"type":"DELETE","lineNumber":790,"oldContent":"                val got = withTimeoutOrNull(1500L) {"},{"type":"DELETE","lineNumber":791,"oldContent":"                    // Don't retry on a negative ACK; break and return failure"},{"type":"DELETE","lineNumber":792,"oldContent":"                    return false"},{"type":"DELETE","lineNumber":793,"oldContent":"                }"},{"type":"DELETE","lineNumber":794,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":795,"oldContent":"        while (System.currentTimeMillis() - startWaitMode < modeWaitMs) {"},{"type":"INSERT","lineNumber":599,"content":"            Log.w(\"MavlinkRepo\", \"Failed to send MISSION_SET_CURRENT\", e)"},{"type":"DELETE","lineNumber":797,"oldContent":"            Log.i(\"MavlinkRepo\", \"Fallback: Requesting mode change to AUTO via DO_SET_MODE\")"},{"type":"DELETE","lineNumber":799,"oldContent":"        Log.e(\"MavlinkRepo\", \"MISSION_START not acknowledged after $maxAttempts attempts - trying fallback start (set current + change mode to AUTO)\")"},{"type":"DELETE","lineNumber":800,"oldContent":""},{"type":"DELETE","lineNumber":801,"oldContent":""},{"type":"DELETE","lineNumber":802,"oldContent":""},{"type":"DELETE","lineNumber":803,"oldContent":"        // Request mode change to AUTO using DO_SET_MODE"},{"type":"DELETE","lineNumber":804,"oldContent":"        try {"},{"type":"DELETE","lineNumber":805,"oldContent":"        }"},{"type":"DELETE","lineNumber":806,"oldContent":""},{"type":"DELETE","lineNumber":807,"oldContent":"    }"},{"type":"DELETE","lineNumber":808,"oldContent":"            return false"},{"type":"DELETE","lineNumber":809,"oldContent":"            Log.w(\"MavlinkRepo\", \"Fallback: Failed to send DO_SET_MODE\", e)"},{"type":"DELETE","lineNumber":810,"oldContent":"        }"},{"type":"DELETE","lineNumber":811,"oldContent":"        }"},{"type":"DELETE","lineNumber":812,"oldContent":"            val setCurrent = MissionSetCurrent(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = first.toUShort())"},{"type":"DELETE","lineNumber":813,"oldContent":"            // small delay to allow FC to process"},{"type":"DELETE","lineNumber":814,"oldContent":"        val startWaitMode = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":815,"oldContent":""},{"type":"DELETE","lineNumber":817,"oldContent":"    }"},{"type":"INSERT","lineNumber":604,"content":""},{"type":"INSERT","lineNumber":611,"content":"            }"},{"type":"INSERT","lineNumber":612,"content":""},{"type":"DELETE","lineNumber":833,"oldContent":"        try {"},{"type":"DELETE","lineNumber":841,"oldContent":"        Log.e(\"MavlinkRepo\", \"Fallback start failed: vehicle did not switch to AUTO mode\")"},{"type":"DELETE","lineNumber":842,"oldContent":"        }"},{"type":"DELETE","lineNumber":843,"oldContent":"            delay(200)"},{"type":"DELETE","lineNumber":844,"oldContent":"                return true"},{"type":"DELETE","lineNumber":845,"oldContent":"                delay(500)"},{"type":"INSERT","lineNumber":628,"content":"                    }"},{"type":"INSERT","lineNumber":629,"content":"                }"},{"type":"INSERT","lineNumber":630,"content":"            }"},{"type":"DELETE","lineNumber":847,"oldContent":"                Log.i(\"MavlinkRepo\", \"Fallback: Vehicle switched to AUTO mode\")"},{"type":"INSERT","lineNumber":632,"content":"            val result = withTimeoutOrNull(perAttemptTimeout) { ackDeferred.await() }"},{"type":"INSERT","lineNumber":633,"content":"            job.cancel()"},{"type":"INSERT","lineNumber":634,"content":""},{"type":"DELETE","lineNumber":849,"oldContent":"        val modeWaitMs = 5000L"},{"type":"DELETE","lineNumber":851,"oldContent":"        // Wait for telemetry mode to reflect AUTO for a short period"},{"type":"DELETE","lineNumber":853,"oldContent":""},{"type":"DELETE","lineNumber":855,"oldContent":"        }"},{"type":"DELETE","lineNumber":857,"oldContent":"            Log.w(\"MavlinkRepo\", \"Fallback: Failed to send MISSION_SET_CURRENT\", e)"},{"type":"DELETE","lineNumber":859,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":860,"oldContent":"            Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_SET_CURRENT seq=$first\")"},{"type":"DELETE","lineNumber":861,"oldContent":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, setCurrent)"},{"type":"INSERT","lineNumber":641,"content":"                    // Don't retry on a negative ACK; break and return failure"},{"type":"INSERT","lineNumber":642,"content":"                    return false"},{"type":"INSERT","lineNumber":643,"content":"                }"},{"type":"INSERT","lineNumber":644,"content":"            } else {"},{"type":"INSERT","lineNumber":645,"content":"                Log.w(\"MavlinkRepo\", \"No COMMAND_ACK for MISSION_START on attempt $attempt (timeout)\")"},{"type":"INSERT","lineNumber":646,"content":"                // try again after short delay"},{"type":"INSERT","lineNumber":647,"content":"                delay(500L)"},{"type":"INSERT","lineNumber":648,"content":"            }"},{"type":"INSERT","lineNumber":649,"content":"        }"},{"type":"INSERT","lineNumber":650,"content":""},{"type":"INSERT","lineNumber":651,"content":"        Log.e(\"MavlinkRepo\", \"MISSION_START not acknowledged after $maxAttempts attempts - trying fallback start (set current + change mode to AUTO)\")"},{"type":"INSERT","lineNumber":652,"content":""},{"type":"INSERT","lineNumber":653,"content":"        // Fallback approach: set mission current and change mode to AUTO (many FCs start mission when switched to AUTO)"},{"type":"INSERT","lineNumber":654,"content":"        try {"},{"type":"INSERT","lineNumber":656,"content":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, setCurrent)"},{"type":"INSERT","lineNumber":657,"content":"            Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_SET_CURRENT seq=$first\")"},{"type":"INSERT","lineNumber":658,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":659,"content":"            Log.w(\"MavlinkRepo\", \"Fallback: Failed to send MISSION_SET_CURRENT\", e)"},{"type":"INSERT","lineNumber":660,"content":"        }"},{"type":"INSERT","lineNumber":661,"content":""},{"type":"INSERT","lineNumber":662,"content":"        // Request mode change to AUTO using DO_SET_MODE"},{"type":"DELETE","lineNumber":864,"oldContent":"        // Fallback approach: set mission current and change mode to AUTO (many FCs start mission when switched to AUTO)"},{"type":"INSERT","lineNumber":664,"content":"            Log.i(\"MavlinkRepo\", \"Fallback: Requesting mode change to AUTO via DO_SET_MODE\")"},{"type":"INSERT","lineNumber":665,"content":"            changeMode(3u) // AUTO mode"},{"type":"INSERT","lineNumber":666,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":667,"content":"            Log.w(\"MavlinkRepo\", \"Fallback: Failed to send DO_SET_MODE\", e)"},{"type":"DELETE","lineNumber":866,"oldContent":"                delay(500L)"},{"type":"INSERT","lineNumber":669,"content":""},{"type":"INSERT","lineNumber":670,"content":"        // Wait for telemetry mode to reflect AUTO for a short period"},{"type":"INSERT","lineNumber":671,"content":"        val modeWaitMs = 5000L"},{"type":"INSERT","lineNumber":672,"content":"        val startWaitMode = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":673,"content":"        while (System.currentTimeMillis() - startWaitMode < modeWaitMs) {"},{"type":"INSERT","lineNumber":674,"content":"            if (state.value.mode?.contains(\"Auto\", ignoreCase = true) == true) {"},{"type":"INSERT","lineNumber":675,"content":"                Log.i(\"MavlinkRepo\", \"Fallback: Vehicle switched to AUTO mode\")"},{"type":"INSERT","lineNumber":676,"content":"                // Give FC a moment to start the mission"},{"type":"INSERT","lineNumber":677,"content":"                delay(500)"},{"type":"INSERT","lineNumber":678,"content":"                return true"},{"type":"INSERT","lineNumber":679,"content":"            }"},{"type":"INSERT","lineNumber":680,"content":"            delay(200)"},{"type":"INSERT","lineNumber":681,"content":"        }"},{"type":"INSERT","lineNumber":682,"content":""},{"type":"INSERT","lineNumber":683,"content":"        Log.e(\"MavlinkRepo\", \"Fallback start failed: vehicle did not switch to AUTO mode\")"},{"type":"INSERT","lineNumber":684,"content":"        return false"},{"type":"INSERT","lineNumber":685,"content":"    }"},{"type":"INSERT","lineNumber":686,"content":"}"},{"type":"INSERT","lineNumber":687,"content":""}]},{"timestamp":1758012257211,"changes":[{"type":"INSERT","lineNumber":2,"content":"import android.R.attr.mode"},{"type":"INSERT","lineNumber":44,"content":""},{"type":"DELETE","lineNumber":44,"oldContent":"                        return // Exit on successful connection"},{"type":"DELETE","lineNumber":48,"oldContent":"                    _lastFailure.value = e"},{"type":"INSERT","lineNumber":49,"content":"        val scope = AppScope"},{"type":"DELETE","lineNumber":50,"oldContent":"            while (scope.isActive) {"},{"type":"INSERT","lineNumber":52,"content":"            while (scope.isActive) {"},{"type":"DELETE","lineNumber":55,"oldContent":"                } catch (e: Exception) {"},{"type":"MODIFY","lineNumber":57,"content":"                } catch (e: Exception) {","oldContent":"                    _lastFailure.value = e"},{"type":"INSERT","lineNumber":59,"content":"                    _lastFailure.value = e"},{"type":"DELETE","lineNumber":64,"oldContent":"                    }"},{"type":"INSERT","lineNumber":65,"content":"        // Manage connection state + reconnects"},{"type":"DELETE","lineNumber":66,"oldContent":"            connection.streamState.collect { st ->"},{"type":"INSERT","lineNumber":68,"content":"            connection.streamState.collect { st ->"},{"type":"DELETE","lineNumber":72,"oldContent":"                }"},{"type":"INSERT","lineNumber":73,"content":"                            _state.update { it.copy(connected = true) }"},{"type":"DELETE","lineNumber":74,"oldContent":"                    is StreamState.Inactive -> {"},{"type":"INSERT","lineNumber":76,"content":"                    is StreamState.Inactive -> {"},{"type":"DELETE","lineNumber":78,"oldContent":"            val heartbeat = Heartbeat("},{"type":"MODIFY","lineNumber":79,"content":"                            _state.update { it.copy(connected = false, fcuDetected = false) }","oldContent":"                        }"},{"type":"INSERT","lineNumber":81,"content":"                        }"},{"type":"DELETE","lineNumber":90,"oldContent":"                        Log.e(\"MavlinkRepo\", \"Failed to send heartbeat\", e)"},{"type":"DELETE","lineNumber":91,"oldContent":"                        _lastFailure.value = e"},{"type":"DELETE","lineNumber":92,"oldContent":"                    }"},{"type":"DELETE","lineNumber":93,"oldContent":"                }"},{"type":"INSERT","lineNumber":91,"content":"                autopilot = MavAutopilot.INVALID.wrap(),"},{"type":"INSERT","lineNumber":92,"content":"                baseMode = emptyList<MavModeFlag>().wrap(),"},{"type":"INSERT","lineNumber":93,"content":"                customMode = 0u,"},{"type":"INSERT","lineNumber":94,"content":"                mavlinkVersion = 3u"},{"type":"INSERT","lineNumber":97,"content":"                if (state.value.connected) {"},{"type":"DELETE","lineNumber":97,"oldContent":"        }"},{"type":"DELETE","lineNumber":99,"oldContent":"        val mavFrameStream = connection.mavFrame"},{"type":"INSERT","lineNumber":100,"content":"                    } catch (e: Exception) {"},{"type":"DELETE","lineNumber":105,"oldContent":"        }"},{"type":"DELETE","lineNumber":107,"oldContent":"        // Shared message stream"},{"type":"INSERT","lineNumber":108,"content":""},{"type":"INSERT","lineNumber":109,"content":"        // Shared message stream"},{"type":"DELETE","lineNumber":110,"oldContent":"        // Detect FCU"},{"type":"INSERT","lineNumber":111,"content":"            .shareIn(scope, SharingStarted.Eagerly, replay = 0)"},{"type":"DELETE","lineNumber":113,"oldContent":"            mavFrameStream.collect {"},{"type":"INSERT","lineNumber":115,"content":"            mavFrameStream.collect {"},{"type":"DELETE","lineNumber":118,"oldContent":"                        _state.update { it.copy(fcuDetected = true) }"},{"type":"INSERT","lineNumber":120,"content":"        // Detect FCU"},{"type":"DELETE","lineNumber":123,"oldContent":"                                val intervalUsec = if (hz <= 0f) 0f else (1_000_000f / hz)"},{"type":"INSERT","lineNumber":124,"content":"                .collect {"},{"type":"DELETE","lineNumber":126,"oldContent":"                        Log.i(\"MavlinkRepo\", \"FCU detected sysId=$fcuSystemId compId=$fcuComponentId\")"},{"type":"INSERT","lineNumber":128,"content":"                        Log.i(\"MavlinkRepo\", \"FCU detected sysId=$fcuSystemId compId=$fcuComponentId\")"},{"type":"DELETE","lineNumber":130,"oldContent":"                        launch {"},{"type":"INSERT","lineNumber":132,"content":"                        launch {"},{"type":"DELETE","lineNumber":144,"oldContent":"                                    param7 = 0f"},{"type":"INSERT","lineNumber":146,"content":"                                    param7 = 0f"},{"type":"DELETE","lineNumber":147,"oldContent":"                            setMessageRate(24u, 1f)  // GPS_RAW_INT"},{"type":"DELETE","lineNumber":148,"oldContent":"                            setMessageRate(74u, 5f)  // VFR_HUD"},{"type":"DELETE","lineNumber":149,"oldContent":"                        }"},{"type":"INSERT","lineNumber":148,"content":"                                try {"},{"type":"INSERT","lineNumber":149,"content":"                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, cmd)"},{"type":"INSERT","lineNumber":150,"content":"                                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":152,"oldContent":"                            }"},{"type":"INSERT","lineNumber":154,"content":"                            }"},{"type":"DELETE","lineNumber":157,"oldContent":"                            setMessageRate(74u, 5f)  // VFR_HUD"},{"type":"INSERT","lineNumber":159,"content":"                            setMessageRate(74u, 5f)  // VFR_HUD"},{"type":"INSERT","lineNumber":169,"content":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":170,"oldContent":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":190,"oldContent":"                            altitudeMsl = altAMSLm,"},{"type":"DELETE","lineNumber":191,"oldContent":"                            latitude = lat,"},{"type":"DELETE","lineNumber":192,"oldContent":"                            longitude = lon"},{"type":"DELETE","lineNumber":193,"oldContent":"                    }"},{"type":"INSERT","lineNumber":191,"content":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":192,"content":"                .map { it.message }"},{"type":"INSERT","lineNumber":193,"content":"                .filterIsInstance<VfrHud>()"},{"type":"INSERT","lineNumber":194,"content":"                .collect { hud ->"},{"type":"INSERT","lineNumber":195,"content":"                    _state.update {"},{"type":"DELETE","lineNumber":195,"oldContent":"                }"},{"type":"DELETE","lineNumber":197,"oldContent":"        scope.launch {"},{"type":"INSERT","lineNumber":198,"content":"                            airspeed = hud.airspeed.takeIf { v -> v > 0f },"},{"type":"DELETE","lineNumber":199,"oldContent":"                    }"},{"type":"INSERT","lineNumber":201,"content":"                    }"},{"type":"INSERT","lineNumber":203,"content":"        }"},{"type":"DELETE","lineNumber":206,"oldContent":"                .map { it.message }"},{"type":"DELETE","lineNumber":207,"oldContent":"        }"},{"type":"INSERT","lineNumber":209,"content":"                .map { it.message }"},{"type":"DELETE","lineNumber":218,"oldContent":"                            latitude = lat,"},{"type":"INSERT","lineNumber":220,"content":"                            latitude = lat,"},{"type":"DELETE","lineNumber":236,"oldContent":"                        23u -> \"Follow\""},{"type":"DELETE","lineNumber":237,"oldContent":"                        24u -> \"ZigZag\""},{"type":"DELETE","lineNumber":238,"oldContent":"                        25u -> \"SystemID\""},{"type":"DELETE","lineNumber":239,"oldContent":"                        26u -> \"AutoRotate\""},{"type":"DELETE","lineNumber":240,"oldContent":"                        27u -> \"Auto_RTL\""},{"type":"DELETE","lineNumber":241,"oldContent":"                        else -> \"Unknown\""},{"type":"INSERT","lineNumber":237,"content":"        }"},{"type":"INSERT","lineNumber":238,"content":"        //HEARTBEAT for mode, armed, armable"},{"type":"INSERT","lineNumber":239,"content":"        scope.launch {"},{"type":"INSERT","lineNumber":240,"content":"            mavFrameStream"},{"type":"INSERT","lineNumber":241,"content":"                .filter{ frame-> state.value.fcuDetected && frame.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":242,"content":"                .map{frame -> frame.message}"},{"type":"DELETE","lineNumber":271,"oldContent":"                .filterIsInstance<GpsRawInt>()"},{"type":"DELETE","lineNumber":272,"oldContent":"                .collect { gps ->"},{"type":"DELETE","lineNumber":273,"oldContent":"                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"INSERT","lineNumber":272,"content":"                        else -> \"Unknown\""},{"type":"INSERT","lineNumber":273,"content":"                    }"},{"type":"INSERT","lineNumber":274,"content":"                    _state.update { it.copy(armed=armed , mode = mode)}"},{"type":"DELETE","lineNumber":276,"oldContent":"                }"},{"type":"DELETE","lineNumber":277,"oldContent":"        }"},{"type":"DELETE","lineNumber":278,"oldContent":"        // Mission handling"},{"type":"DELETE","lineNumber":279,"oldContent":"                .map { it.message }"},{"type":"INSERT","lineNumber":277,"content":"        // SYS_STATUS"},{"type":"INSERT","lineNumber":278,"content":"        scope.launch {"},{"type":"INSERT","lineNumber":279,"content":"            mavFrameStream"},{"type":"INSERT","lineNumber":281,"content":"                .map { it.message }"},{"type":"DELETE","lineNumber":291,"oldContent":"                                    seq = seq.toUShort(),"},{"type":"INSERT","lineNumber":292,"content":"                }"},{"type":"INSERT","lineNumber":293,"content":"        }"},{"type":"DELETE","lineNumber":293,"oldContent":"                                    frame = MavFrame.GLOBAL_RELATIVE_ALT.wrap(),"},{"type":"DELETE","lineNumber":299,"oldContent":"                .collect { gps ->"},{"type":"INSERT","lineNumber":301,"content":"                .collect { gps ->"},{"type":"DELETE","lineNumber":308,"oldContent":"                                    Log.e(\"MavlinkRepo\", \"Failed to send mission item\", e)"},{"type":"MODIFY","lineNumber":309,"content":"    suspend fun sendCommand(command: MavCmd, param1: Float = 0f, param2: Float = 0f, param3: Float = 0f, param4: Float = 0f, param5: Float = 0f, param6: Float = 0f, param7: Float = 0f) {","oldContent":"                                    _lastFailure.value = e"},{"type":"INSERT","lineNumber":310,"content":"        val commandLong = CommandLong("},{"type":"DELETE","lineNumber":312,"oldContent":"                        }"},{"type":"INSERT","lineNumber":313,"content":"            command = command.wrap(),"},{"type":"INSERT","lineNumber":320,"content":"            param6 = param6,"},{"type":"DELETE","lineNumber":320,"oldContent":"                    }"},{"type":"DELETE","lineNumber":323,"oldContent":""},{"type":"INSERT","lineNumber":324,"content":"            connection.trySendUnsignedV2("},{"type":"DELETE","lineNumber":326,"oldContent":"            targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":327,"content":"            Log.d(\"MavlinkRepo\", \"Sent COMMAND_LONG: cmd=${command} p1=$param1 p2=$param2 p3=$param3 p4=$param4 p5=$param5 p6=$param6 p7=$param7\")"},{"type":"INSERT","lineNumber":328,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":328,"oldContent":"            targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":332,"content":"    }"},{"type":"DELETE","lineNumber":332,"oldContent":"            param2 = param2,"},{"type":"DELETE","lineNumber":336,"oldContent":"                1f"},{"type":"INSERT","lineNumber":338,"content":"                1f"},{"type":"DELETE","lineNumber":339,"oldContent":"            Log.w(\"MavlinkRepo\", \"Arm command rejected, vehicle not armable\")"},{"type":"INSERT","lineNumber":341,"content":"            Log.w(\"MavlinkRepo\", \"Arm command rejected, vehicle not armable\")"},{"type":"DELETE","lineNumber":343,"oldContent":"            Log.e(\"MavlinkRepo\", \"Failed to send command\", e)"},{"type":"INSERT","lineNumber":344,"content":""},{"type":"DELETE","lineNumber":346,"oldContent":"    }"},{"type":"MODIFY","lineNumber":347,"content":"            MavCmd.COMPONENT_ARM_DISARM,","oldContent":""},{"type":"INSERT","lineNumber":348,"content":"            0f"},{"type":"DELETE","lineNumber":350,"oldContent":"    // Replaced changeMode with a simple, standards-compliant DO_SET_MODE flow."},{"type":"DELETE","lineNumber":354,"oldContent":"        val MAV_MODE_FLAG_CUSTOM_MODE_ENABLED = 1u"},{"type":"DELETE","lineNumber":355,"oldContent":"        val MAV_MODE_FLAG_AUTO_ENABLED = 4u"},{"type":"DELETE","lineNumber":356,"oldContent":"        val MAV_MODE_FLAG_STABILIZE_ENABLED = 16u"},{"type":"INSERT","lineNumber":354,"content":"        // param1: Base mode - should always be 1 (MAV_MODE_FLAG_CUSTOM_MODE_ENABLED)"},{"type":"INSERT","lineNumber":355,"content":"        // param2: Custom mode (0=Stabilize, 3=Auto, 5=Loiter, etc.)"},{"type":"INSERT","lineNumber":356,"content":"        // The armed status is handled automatically by ArduPilot, not via the base mode flags"},{"type":"INSERT","lineNumber":357,"content":""},{"type":"DELETE","lineNumber":358,"oldContent":"            0f,                   // param3: custom sub mode (usually 0)"},{"type":"MODIFY","lineNumber":359,"content":"            MavCmd.DO_SET_MODE,","oldContent":"        val baseFlags: UInt = when (customMode) {"},{"type":"MODIFY","lineNumber":362,"content":"            0f,                   // param3: custom sub mode (usually 0)","oldContent":"            0f,                   // param6: empty"},{"type":"DELETE","lineNumber":365,"oldContent":"        // Send COMMAND_LONG MAV_CMD_DO_SET_MODE (preferred per common.xml for ArduPilot compatibility)"},{"type":"DELETE","lineNumber":366,"oldContent":"            sendCommand("},{"type":"DELETE","lineNumber":367,"oldContent":"                MavCmd.DO_SET_MODE,"},{"type":"DELETE","lineNumber":368,"oldContent":"                baseFlags.toFloat(),   // param1: base mode flags (as float)"},{"type":"DELETE","lineNumber":369,"oldContent":"                customMode.toFloat(),  // param2: custom mode index"},{"type":"DELETE","lineNumber":370,"oldContent":"                0f, 0f, 0f, 0f, 0f"},{"type":"INSERT","lineNumber":365,"content":"            0f,                   // param6: empty"},{"type":"INSERT","lineNumber":366,"content":"        )"},{"type":"INSERT","lineNumber":367,"content":"    }"},{"type":"INSERT","lineNumber":368,"content":""},{"type":"INSERT","lineNumber":369,"content":"    suspend fun takeoff(altitude: Float) {"},{"type":"INSERT","lineNumber":370,"content":"        sendCommand("},{"type":"INSERT","lineNumber":371,"content":"            MavCmd.NAV_TAKEOFF,"},{"type":"INSERT","lineNumber":372,"content":"            -1f,"},{"type":"INSERT","lineNumber":373,"content":"            0f,"},{"type":"INSERT","lineNumber":374,"content":"            0f,"},{"type":"INSERT","lineNumber":375,"content":"            0f,"},{"type":"INSERT","lineNumber":376,"content":"            0f,"},{"type":"INSERT","lineNumber":377,"content":"            0f,"},{"type":"INSERT","lineNumber":378,"content":"            altitude"},{"type":"INSERT","lineNumber":379,"content":"        )"},{"type":"INSERT","lineNumber":380,"content":"    }"},{"type":"INSERT","lineNumber":381,"content":""},{"type":"INSERT","lineNumber":382,"content":"    suspend fun land() {"},{"type":"INSERT","lineNumber":383,"content":"        sendCommand(MavCmd.NAV_LAND)"},{"type":"INSERT","lineNumber":384,"content":"    }"},{"type":"INSERT","lineNumber":385,"content":""},{"type":"INSERT","lineNumber":386,"content":"    /**"},{"type":"INSERT","lineNumber":387,"content":"     * Uploads a mission using the MAVLink mission protocol handshake."},{"type":"INSERT","lineNumber":388,"content":"     * Returns true if ACK received, false otherwise."},{"type":"INSERT","lineNumber":389,"content":"     */"},{"type":"INSERT","lineNumber":390,"content":"    @Suppress(\"DEPRECATION\")"},{"type":"INSERT","lineNumber":391,"content":"    suspend fun uploadMissionWithAck(missionItems: List<MissionItemInt>, timeoutMs: Long = 15000): Boolean {"},{"type":"INSERT","lineNumber":392,"content":"        if (!state.value.fcuDetected) {"},{"type":"INSERT","lineNumber":393,"content":"            Log.e(\"MavlinkRepo\", \"FCU not detected, cannot upload mission\")"},{"type":"INSERT","lineNumber":394,"content":"            throw IllegalStateException(\"FCU not detected\")"},{"type":"INSERT","lineNumber":395,"content":"        }"},{"type":"INSERT","lineNumber":396,"content":"        if (missionItems.isEmpty()) {"},{"type":"INSERT","lineNumber":397,"content":"            Log.w(\"MavlinkRepo\", \"No mission items to upload\")"},{"type":"INSERT","lineNumber":398,"content":"            return false"},{"type":"INSERT","lineNumber":399,"content":"        }"},{"type":"INSERT","lineNumber":400,"content":""},{"type":"INSERT","lineNumber":401,"content":"        try {"},{"type":"INSERT","lineNumber":402,"content":"            // Send MissionCount"},{"type":"INSERT","lineNumber":403,"content":"            val missionCount = MissionCount("},{"type":"INSERT","lineNumber":404,"content":"                targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":405,"content":"                targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":406,"content":"                count = missionItems.size.toUShort()"},{"type":"DELETE","lineNumber":372,"oldContent":"            Log.i(\"MavlinkRepo\", \"Sent DO_SET_MODE: baseMode=$baseFlags customMode=$customMode\")"},{"type":"DELETE","lineNumber":373,"oldContent":"            Log.w(\"MavlinkRepo\", \"Failed to send DO_SET_MODE\", e)"},{"type":"DELETE","lineNumber":374,"oldContent":"        // Wait for COMMAND_ACK for DO_SET_MODE"},{"type":"DELETE","lineNumber":375,"oldContent":"        val ackDeferred = CompletableDeferred<Boolean?>()"},{"type":"DELETE","lineNumber":376,"oldContent":"        val ackCollector = AppScope.launch {"},{"type":"DELETE","lineNumber":377,"oldContent":"            connection.mavFrame.collect { frame ->"},{"type":"DELETE","lineNumber":378,"oldContent":"                val msg = frame.message"},{"type":"DELETE","lineNumber":379,"oldContent":"                if (msg is CommandAck) {"},{"type":"INSERT","lineNumber":408,"content":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionCount)"},{"type":"INSERT","lineNumber":409,"content":"            Log.i(\"MavlinkRepo\", \"Sent MISSION_COUNT=${missionItems.size}\")"},{"type":"INSERT","lineNumber":410,"content":""},{"type":"INSERT","lineNumber":411,"content":"            val ackDeferred = CompletableDeferred<Boolean>()"},{"type":"INSERT","lineNumber":412,"content":"            val sentSeqs = mutableSetOf<Int>()"},{"type":"INSERT","lineNumber":413,"content":"            var firstRequestReceived = false"},{"type":"INSERT","lineNumber":414,"content":""},{"type":"INSERT","lineNumber":415,"content":"            // Resend MISSION_COUNT periodically until first request or timeout"},{"type":"INSERT","lineNumber":416,"content":"            val resendJob = AppScope.launch {"},{"type":"INSERT","lineNumber":417,"content":"                while (isActive && !firstRequestReceived && !ackDeferred.isCompleted) {"},{"type":"DELETE","lineNumber":381,"oldContent":"                        if (msg.command == MavCmd.DO_SET_MODE.wrap()) {"},{"type":"DELETE","lineNumber":382,"oldContent":"                            val res = msg.result.value"},{"type":"DELETE","lineNumber":383,"oldContent":"                            Log.i(\"MavlinkRepo\", \"COMMAND_ACK for DO_SET_MODE result=$res\")"},{"type":"DELETE","lineNumber":384,"oldContent":"                            if (!ackDeferred.isCompleted) ackDeferred.complete(if (res == 0u) true else false)"},{"type":"DELETE","lineNumber":385,"oldContent":"                        }"},{"type":"DELETE","lineNumber":386,"oldContent":"                    } catch (t: Throwable) {"},{"type":"DELETE","lineNumber":387,"oldContent":"                        Log.w(\"MavlinkRepo\", \"Error while processing COMMAND_ACK for DO_SET_MODE\", t)"},{"type":"INSERT","lineNumber":419,"content":"                        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionCount)"},{"type":"INSERT","lineNumber":420,"content":"                        Log.d(\"MavlinkRepo\", \"Resent MISSION_COUNT\")"},{"type":"INSERT","lineNumber":421,"content":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":422,"content":"                        Log.e(\"MavlinkRepo\", \"Failed to resend MISSION_COUNT\", e)"},{"type":"INSERT","lineNumber":423,"content":"                    }"},{"type":"INSERT","lineNumber":424,"content":"                    delay(700)"},{"type":"INSERT","lineNumber":425,"content":"                }"},{"type":"INSERT","lineNumber":426,"content":"            }"},{"type":"INSERT","lineNumber":427,"content":""},{"type":"INSERT","lineNumber":428,"content":"            // Collector job"},{"type":"INSERT","lineNumber":429,"content":"            val job = AppScope.launch {"},{"type":"INSERT","lineNumber":430,"content":"                connection.mavFrame"},{"type":"INSERT","lineNumber":431,"content":"                    //.filter { it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":432,"content":"                    .collect { frame ->"},{"type":"INSERT","lineNumber":433,"content":"                        val senderSys = frame.systemId"},{"type":"INSERT","lineNumber":434,"content":"                        val senderComp = frame.componentId"},{"type":"INSERT","lineNumber":435,"content":"                        when (val msg = frame.message) {"},{"type":"INSERT","lineNumber":436,"content":"                            is MissionRequestInt -> {"},{"type":"DELETE","lineNumber":389,"oldContent":"        val ack = withTimeoutOrNull(1500L) { ackDeferred.await() }"},{"type":"DELETE","lineNumber":390,"oldContent":"        ackCollector.cancel()"},{"type":"INSERT","lineNumber":438,"content":"                                firstRequestReceived = true"},{"type":"INSERT","lineNumber":439,"content":"                                val seq = msg.seq.toInt()"},{"type":"INSERT","lineNumber":440,"content":"                                if (seq < 0 || seq >= missionItems.size) {"},{"type":"INSERT","lineNumber":441,"content":"                                    Log.w(\"MavlinkRepo\", \"FC requested invalid seq=$seq (MissionRequestInt)\")"},{"type":"INSERT","lineNumber":442,"content":"                                    return@collect"},{"type":"DELETE","lineNumber":392,"oldContent":"        if (ack != true) {"},{"type":"DELETE","lineNumber":393,"oldContent":"            Log.w(\"MavlinkRepo\", \"DO_SET_MODE not accepted (ack=$ack). Will still monitor telemetry for mode change.\")"},{"type":"DELETE","lineNumber":394,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":395,"oldContent":"            Log.i(\"MavlinkRepo\", \"DO_SET_MODE accepted by FCU\")"},{"type":"DELETE","lineNumber":396,"oldContent":"        // After ACK (or even if none), wait up to a short timeout for telemetry to reflect the new mode"},{"type":"DELETE","lineNumber":397,"oldContent":"        val modeObserved = withTimeoutOrNull(3000L) {"},{"type":"DELETE","lineNumber":398,"oldContent":"            while (true) {"},{"type":"DELETE","lineNumber":399,"oldContent":"                val ok = when (customMode) {"},{"type":"DELETE","lineNumber":400,"oldContent":"                if (ok) return@withTimeoutOrNull true"},{"type":"DELETE","lineNumber":401,"oldContent":"                delay(200)"},{"type":"DELETE","lineNumber":402,"oldContent":"            }"},{"type":"DELETE","lineNumber":403,"oldContent":"        } ?: false"},{"type":"DELETE","lineNumber":404,"oldContent":"        if (modeObserved) {"},{"type":"DELETE","lineNumber":405,"oldContent":"            Log.i(\"MavlinkRepo\", \"Mode change observed via telemetry to customMode=$customMode\")"},{"type":"DELETE","lineNumber":406,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":407,"oldContent":"            Log.e(\"MavlinkRepo\", \"Mode change to customMode=$customMode not observed within timeout\")"},{"type":"DELETE","lineNumber":408,"oldContent":"        }"},{"type":"INSERT","lineNumber":444,"content":"                                val item = missionItems[seq]"},{"type":"INSERT","lineNumber":445,"content":"                                val missionItem = item.copy("},{"type":"INSERT","lineNumber":446,"content":"                                    targetSystem = senderSys.toUByte(),"},{"type":"INSERT","lineNumber":447,"content":"                                    targetComponent = senderComp.toUByte(),"},{"type":"INSERT","lineNumber":448,"content":"                                    seq = seq.toUShort()"},{"type":"INSERT","lineNumber":449,"content":"                                )"},{"type":"INSERT","lineNumber":450,"content":"                                try {"},{"type":"INSERT","lineNumber":451,"content":"                                    // Always send the requested item (allow retransmits)"},{"type":"INSERT","lineNumber":452,"content":"                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"INSERT","lineNumber":453,"content":"                                    sentSeqs.add(seq)"},{"type":"INSERT","lineNumber":454,"content":"                                    Log.i(\"MavlinkRepo\", \"Sent MISSION_ITEM_INT seq=$seq to sys=$senderSys comp=$senderComp\")"},{"type":"INSERT","lineNumber":455,"content":"                                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":456,"content":"                                    Log.e(\"MavlinkRepo\", \"Failed to send mission item seq=$seq\", e)"},{"type":"INSERT","lineNumber":457,"content":"                                }"},{"type":"INSERT","lineNumber":458,"content":"                            }"},{"type":"INSERT","lineNumber":459,"content":"                            is MissionRequest -> {"},{"type":"INSERT","lineNumber":460,"content":"                                // Vehicle requested the float MissionRequest message (deprecated in some dialects)"},{"type":"INSERT","lineNumber":461,"content":"                                // Respond with MISSION_ITEM_INT (not float) for compatibility with Mission Planner"},{"type":"INSERT","lineNumber":462,"content":"                                Log.d(\"MavlinkRepo\", \"Received MissionRequest (float) from sys=$senderSys comp=$senderComp seq=${msg.seq}\")"},{"type":"INSERT","lineNumber":463,"content":"                                firstRequestReceived = true"},{"type":"INSERT","lineNumber":464,"content":"                                val seq = msg.seq.toInt()"},{"type":"INSERT","lineNumber":465,"content":"                                if (seq < 0 || seq >= missionItems.size) {"},{"type":"INSERT","lineNumber":466,"content":"                                    Log.w(\"MavlinkRepo\", \"FC requested invalid seq=$seq (MissionRequest)\")"},{"type":"INSERT","lineNumber":467,"content":"                                    return@collect"},{"type":"INSERT","lineNumber":468,"content":"                                }"},{"type":"INSERT","lineNumber":469,"content":"                                val itemInt = missionItems[seq]"},{"type":"INSERT","lineNumber":470,"content":"                                val missionItemInt = itemInt.copy("},{"type":"INSERT","lineNumber":471,"content":"                                    targetSystem = senderSys.toUByte(),"},{"type":"INSERT","lineNumber":472,"content":"                                    targetComponent = senderComp.toUByte(),"},{"type":"INSERT","lineNumber":473,"content":"                                    seq = seq.toUShort()"},{"type":"INSERT","lineNumber":474,"content":"                                )"},{"type":"INSERT","lineNumber":475,"content":"                                try {"},{"type":"INSERT","lineNumber":476,"content":"                                    // Always resend when requested"},{"type":"INSERT","lineNumber":477,"content":"                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItemInt)"},{"type":"INSERT","lineNumber":478,"content":"                                    sentSeqs.add(seq)"},{"type":"INSERT","lineNumber":479,"content":"                                    Log.i(\"MavlinkRepo\", \"Sent MISSION_ITEM_INT seq=$seq to sys=$senderSys comp=$senderComp (responding to MissionRequest)\")"},{"type":"INSERT","lineNumber":480,"content":"                                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":481,"content":"                                    Log.e(\"MavlinkRepo\", \"Failed to send mission item(seq=$seq) as MissionItemInt\", e)"},{"type":"INSERT","lineNumber":482,"content":"                                }"},{"type":"INSERT","lineNumber":483,"content":"                            }"},{"type":"INSERT","lineNumber":484,"content":"                            is MissionAck -> {"},{"type":"INSERT","lineNumber":485,"content":"                                Log.i(\"MavlinkRepo\", \"Received MISSION_ACK from sys=$senderSys comp=$senderComp: ${msg.type}\")"},{"type":"INSERT","lineNumber":486,"content":"                                if (!ackDeferred.isCompleted) ackDeferred.complete(true)"},{"type":"INSERT","lineNumber":487,"content":"                                return@collect"},{"type":"INSERT","lineNumber":488,"content":"                            }"},{"type":"INSERT","lineNumber":489,"content":"                            else -> {"},{"type":"INSERT","lineNumber":494,"content":"            }"},{"type":"INSERT","lineNumber":495,"content":""},{"type":"INSERT","lineNumber":504,"content":"                Log.w(\"MavlinkRepo\", \"No MissionRequest received within $firstRequestTimeout ms; falling back to send all items\")"},{"type":"INSERT","lineNumber":505,"content":"                // Send all items sequentially"},{"type":"INSERT","lineNumber":506,"content":"                for (seq in 0 until missionItems.size) {"},{"type":"INSERT","lineNumber":507,"content":"                    if (sentSeqs.contains(seq)) continue"},{"type":"INSERT","lineNumber":508,"content":"                    val item = missionItems[seq]"},{"type":"INSERT","lineNumber":509,"content":"                    val missionItem = item.copy("},{"type":"INSERT","lineNumber":510,"content":"                        targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":436,"oldContent":"        try {"},{"type":"DELETE","lineNumber":445,"oldContent":""},{"type":"DELETE","lineNumber":446,"oldContent":"    }"},{"type":"DELETE","lineNumber":447,"oldContent":"        }"},{"type":"DELETE","lineNumber":448,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":449,"oldContent":"        try {"},{"type":"DELETE","lineNumber":450,"oldContent":"        }"},{"type":"DELETE","lineNumber":451,"oldContent":"                        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionCount)"},{"type":"DELETE","lineNumber":452,"oldContent":"                            received.add(msg.seq.toInt() to \"INT: lat=$lat lon=$lon alt=${msg.z}\")"},{"type":"DELETE","lineNumber":453,"oldContent":"                    }"},{"type":"DELETE","lineNumber":454,"oldContent":"                            perSeqMap[msg.seq.toInt()]?.let { d -> if (!d.isCompleted) d.complete(Unit) }"},{"type":"DELETE","lineNumber":455,"oldContent":"                        }"},{"type":"DELETE","lineNumber":456,"oldContent":"                        is MissionAck -> {"},{"type":"DELETE","lineNumber":457,"oldContent":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_ACK type=${msg.type}\")"},{"type":"DELETE","lineNumber":458,"oldContent":"        sendCommand(MavCmd.MISSION_START)"},{"type":"DELETE","lineNumber":459,"oldContent":"                        }"},{"type":"DELETE","lineNumber":460,"oldContent":"                        else -> {}"},{"type":"DELETE","lineNumber":461,"oldContent":"    }"},{"type":"DELETE","lineNumber":462,"oldContent":""},{"type":"DELETE","lineNumber":463,"oldContent":"        }"},{"type":"DELETE","lineNumber":464,"oldContent":"                    Log.e(\"MavlinkRepo\", \"Failed to send MISSION_REQUEST_INT seq=$seq\", e)"},{"type":"DELETE","lineNumber":465,"oldContent":"                }"},{"type":"DELETE","lineNumber":466,"oldContent":"                // wait up to 1500ms for the item"},{"type":"DELETE","lineNumber":467,"oldContent":"                val got = withTimeoutOrNull(1500L) {"},{"type":"DELETE","lineNumber":468,"oldContent":"                                if (seq < 0 || seq >= missionItems.size) {"},{"type":"DELETE","lineNumber":469,"oldContent":"                    true"},{"type":"DELETE","lineNumber":470,"oldContent":"                                    Log.w(\"MavlinkRepo\", \"FC requested invalid seq=$seq (MissionRequest)\")"},{"type":"DELETE","lineNumber":471,"oldContent":"                } ?: false"},{"type":"DELETE","lineNumber":472,"oldContent":"                if (!got) {"},{"type":"DELETE","lineNumber":473,"oldContent":"                }"},{"type":"DELETE","lineNumber":474,"oldContent":"                                val itemInt = missionItems[seq]"},{"type":"DELETE","lineNumber":475,"oldContent":"                                    targetSystem = senderSys.toUByte(),"},{"type":"DELETE","lineNumber":476,"oldContent":"                                    targetComponent = senderComp.toUByte(),"},{"type":"DELETE","lineNumber":477,"oldContent":"            // give a moment for any remaining frames"},{"type":"DELETE","lineNumber":478,"oldContent":"                                    seq = seq.toUShort()"},{"type":"DELETE","lineNumber":479,"oldContent":"                                )"},{"type":"DELETE","lineNumber":480,"oldContent":"                                try {"},{"type":"DELETE","lineNumber":481,"oldContent":""},{"type":"DELETE","lineNumber":482,"oldContent":"                                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":483,"oldContent":"            return false"},{"type":"DELETE","lineNumber":484,"oldContent":"        }"},{"type":"DELETE","lineNumber":485,"oldContent":"                            else -> {"},{"type":"DELETE","lineNumber":486,"oldContent":"        // First, tell FC which mission item to start from (some firmwares expect this)"},{"type":"DELETE","lineNumber":487,"oldContent":"        try {"},{"type":"DELETE","lineNumber":488,"oldContent":"            val setCurrent = MissionSetCurrent(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = first.toUShort())"},{"type":"DELETE","lineNumber":489,"oldContent":""},{"type":"DELETE","lineNumber":490,"oldContent":"            // small delay to allow FC to process"},{"type":"DELETE","lineNumber":491,"oldContent":""},{"type":"DELETE","lineNumber":492,"oldContent":"            Log.w(\"MavlinkRepo\", \"Failed to send MISSION_SET_CURRENT\", e)"},{"type":"DELETE","lineNumber":493,"oldContent":"                Log.w(\"MavlinkRepo\", \"No MissionRequest received within $firstRequestTimeout ms; falling back to send all items\")"},{"type":"DELETE","lineNumber":494,"oldContent":"                // Send all items sequentially"},{"type":"DELETE","lineNumber":495,"oldContent":"                for (seq in 0 until missionItems.size) {"},{"type":"DELETE","lineNumber":496,"oldContent":""},{"type":"DELETE","lineNumber":497,"oldContent":"                    if (sentSeqs.contains(seq)) continue"},{"type":"DELETE","lineNumber":498,"oldContent":"                    val item = missionItems[seq]"},{"type":"DELETE","lineNumber":499,"oldContent":"                    val missionItem = item.copy("},{"type":"DELETE","lineNumber":500,"oldContent":"            }"},{"type":"DELETE","lineNumber":501,"oldContent":"                        targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":502,"oldContent":""},{"type":"INSERT","lineNumber":536,"content":""},{"type":"DELETE","lineNumber":511,"oldContent":"                    }"},{"type":"DELETE","lineNumber":513,"oldContent":"                }"},{"type":"DELETE","lineNumber":514,"oldContent":"            }"},{"type":"DELETE","lineNumber":516,"oldContent":"            val result = withTimeoutOrNull(perAttemptTimeout) { ackDeferred.await() }"},{"type":"DELETE","lineNumber":518,"oldContent":"            job.cancel()"},{"type":"DELETE","lineNumber":519,"oldContent":""},{"type":"INSERT","lineNumber":549,"content":"    }"},{"type":"DELETE","lineNumber":524,"oldContent":"                    // Don't retry on a negative ACK; break and return failure"},{"type":"DELETE","lineNumber":526,"oldContent":"                    return false"},{"type":"DELETE","lineNumber":528,"oldContent":"                }"},{"type":"DELETE","lineNumber":530,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":532,"oldContent":"                Log.w(\"MavlinkRepo\", \"No COMMAND_ACK for MISSION_START on attempt $attempt (timeout)\")"},{"type":"DELETE","lineNumber":534,"oldContent":"                // try again after short delay"},{"type":"DELETE","lineNumber":536,"oldContent":"                delay(500L)"},{"type":"DELETE","lineNumber":537,"oldContent":"            }"},{"type":"DELETE","lineNumber":538,"oldContent":"            val received = mutableListOf<Pair<Int, String>>()"},{"type":"INSERT","lineNumber":558,"content":"        try {"},{"type":"INSERT","lineNumber":559,"content":"            val received = mutableListOf<Pair<Int, String>>()"},{"type":"DELETE","lineNumber":542,"oldContent":""},{"type":"DELETE","lineNumber":543,"oldContent":"        Log.e(\"MavlinkRepo\", \"MISSION_START not acknowledged after $maxAttempts attempts - trying fallback start (set current + change mode to AUTO)\")"},{"type":"DELETE","lineNumber":545,"oldContent":""},{"type":"DELETE","lineNumber":547,"oldContent":"        // Fallback approach: set mission current and change mode to AUTO (many FCs start mission when switched to AUTO)"},{"type":"DELETE","lineNumber":549,"oldContent":"        try {"},{"type":"DELETE","lineNumber":552,"oldContent":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, setCurrent)"},{"type":"DELETE","lineNumber":553,"oldContent":"            Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_SET_CURRENT seq=$first\")"},{"type":"DELETE","lineNumber":555,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":557,"oldContent":"            Log.w(\"MavlinkRepo\", \"Fallback: Failed to send MISSION_SET_CURRENT\", e)"},{"type":"DELETE","lineNumber":558,"oldContent":"        }"},{"type":"DELETE","lineNumber":559,"oldContent":""},{"type":"DELETE","lineNumber":561,"oldContent":"        // Request mode change to AUTO using DO_SET_MODE"},{"type":"DELETE","lineNumber":562,"oldContent":"            Log.i(\"MavlinkRepo\", \"Fallback: Requesting mode change to AUTO via DO_SET_MODE\")"},{"type":"DELETE","lineNumber":564,"oldContent":"            changeMode(3u) // AUTO mode"},{"type":"DELETE","lineNumber":565,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":566,"oldContent":"            Log.w(\"MavlinkRepo\", \"Fallback: Failed to send DO_SET_MODE\", e)"},{"type":"DELETE","lineNumber":568,"oldContent":""},{"type":"DELETE","lineNumber":570,"oldContent":"        // Wait for telemetry mode to reflect AUTO for a short period"},{"type":"DELETE","lineNumber":572,"oldContent":"        val modeWaitMs = 5000L"},{"type":"DELETE","lineNumber":574,"oldContent":"        val startWaitMode = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":576,"oldContent":"        while (System.currentTimeMillis() - startWaitMode < modeWaitMs) {"},{"type":"DELETE","lineNumber":577,"oldContent":"            if (state.value.mode?.contains(\"Auto\", ignoreCase = true) == true) {"},{"type":"DELETE","lineNumber":579,"oldContent":"                Log.i(\"MavlinkRepo\", \"Fallback: Vehicle switched to AUTO mode\")"},{"type":"DELETE","lineNumber":580,"oldContent":"                // Give FC a moment to start the mission"},{"type":"DELETE","lineNumber":581,"oldContent":"                delay(500)"},{"type":"DELETE","lineNumber":582,"oldContent":"                return true"},{"type":"DELETE","lineNumber":583,"oldContent":"            }"},{"type":"INSERT","lineNumber":577,"content":"                            received.add(msg.seq.toInt() to \"INT: lat=$lat lon=$lon alt=${msg.z}\")"},{"type":"DELETE","lineNumber":585,"oldContent":"            delay(200)"},{"type":"DELETE","lineNumber":586,"oldContent":"        }"},{"type":"DELETE","lineNumber":587,"oldContent":""},{"type":"DELETE","lineNumber":589,"oldContent":"        Log.e(\"MavlinkRepo\", \"Fallback start failed: vehicle did not switch to AUTO mode\")"},{"type":"DELETE","lineNumber":590,"oldContent":"        return false"},{"type":"DELETE","lineNumber":591,"oldContent":"    }"},{"type":"DELETE","lineNumber":593,"oldContent":"}"},{"type":"DELETE","lineNumber":594,"oldContent":""},{"type":"DELETE","lineNumber":595,"oldContent":"        try {"},{"type":"DELETE","lineNumber":596,"oldContent":""},{"type":"DELETE","lineNumber":597,"oldContent":"                    seqDeferred.await()"},{"type":"INSERT","lineNumber":581,"content":"                            // MissionItem is deprecated; log for diagnostics"},{"type":"INSERT","lineNumber":582,"content":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_ITEM seq=${msg.seq} x=${msg.x} y=${msg.y} z=${msg.z}\")"},{"type":"INSERT","lineNumber":583,"content":"                            received.add(msg.seq.toInt() to \"FLT: x=${msg.x} y=${msg.y} z=${msg.z}\")"},{"type":"INSERT","lineNumber":584,"content":"                            perSeqMap[msg.seq.toInt()]?.let { d -> if (!d.isCompleted) d.complete(Unit) }"},{"type":"INSERT","lineNumber":585,"content":"                        }"},{"type":"INSERT","lineNumber":586,"content":"                        is MissionAck -> {"},{"type":"INSERT","lineNumber":587,"content":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_ACK type=${msg.type}\")"},{"type":"INSERT","lineNumber":588,"content":"                        }"},{"type":"INSERT","lineNumber":589,"content":"                        else -> {}"},{"type":"INSERT","lineNumber":602,"content":""},{"type":"DELETE","lineNumber":627,"oldContent":"            delay(200)"},{"type":"DELETE","lineNumber":628,"oldContent":"        }"},{"type":"DELETE","lineNumber":629,"oldContent":"            Log.i(\"MavlinkRepo\", \"Sent MISSION_SET_CURRENT seq=$first to sys=$fcuSystemId comp=$fcuComponentId\")"},{"type":"INSERT","lineNumber":620,"content":"                    Log.e(\"MavlinkRepo\", \"Failed to send MISSION_REQUEST_INT seq=$seq\", e)"},{"type":"INSERT","lineNumber":621,"content":"                }"},{"type":"INSERT","lineNumber":622,"content":""},{"type":"INSERT","lineNumber":623,"content":"                // wait up to 1500ms for the item"},{"type":"INSERT","lineNumber":624,"content":"                val got = withTimeoutOrNull(1500L) {"},{"type":"INSERT","lineNumber":625,"content":"                    seqDeferred.await()"},{"type":"INSERT","lineNumber":626,"content":"                    true"},{"type":"INSERT","lineNumber":627,"content":"                } ?: false"},{"type":"INSERT","lineNumber":628,"content":""},{"type":"INSERT","lineNumber":629,"content":"                if (!got) {"},{"type":"INSERT","lineNumber":631,"content":"                }"},{"type":"DELETE","lineNumber":633,"oldContent":"        // Try sending MISSION_START multiple times and wait for COMMAND_ACK each attempt."},{"type":"MODIFY","lineNumber":634,"content":"            }","oldContent":"    suspend fun startMission(first: Int, last: Int): Boolean {"},{"type":"MODIFY","lineNumber":636,"content":"            // give a moment for any remaining frames","oldContent":"}"},{"type":"INSERT","lineNumber":637,"content":"            delay(200)"},{"type":"INSERT","lineNumber":638,"content":"            job.cancel()"},{"type":"INSERT","lineNumber":639,"content":""},{"type":"INSERT","lineNumber":642,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":643,"content":"            Log.e(\"MavlinkRepo\", \"Error during mission readback\", e)"},{"type":"INSERT","lineNumber":644,"content":"        }"},{"type":"DELETE","lineNumber":640,"oldContent":"        Log.e(\"MavlinkRepo\", \"Fallback start failed: vehicle did not switch to AUTO mode\")"},{"type":"DELETE","lineNumber":642,"oldContent":"            }"},{"type":"DELETE","lineNumber":643,"oldContent":"        while (System.currentTimeMillis() - startWaitMode < modeWaitMs) {"},{"type":"INSERT","lineNumber":647,"content":"    suspend fun startMission(first: Int, last: Int): Boolean {"},{"type":"INSERT","lineNumber":648,"content":"        // Try sending MISSION_START multiple times and wait for COMMAND_ACK each attempt."},{"type":"INSERT","lineNumber":649,"content":"        if (!state.value.fcuDetected) {"},{"type":"INSERT","lineNumber":650,"content":"            Log.w(\"MavlinkRepo\", \"Cannot start mission - FCU not detected\")"},{"type":"INSERT","lineNumber":651,"content":"            return false"},{"type":"INSERT","lineNumber":653,"content":""},{"type":"INSERT","lineNumber":654,"content":"        // First, tell FC which mission item to start from (some firmwares expect this)"},{"type":"INSERT","lineNumber":655,"content":"        try {"},{"type":"INSERT","lineNumber":656,"content":"            val setCurrent = MissionSetCurrent(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = first.toUShort())"},{"type":"INSERT","lineNumber":657,"content":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, setCurrent)"},{"type":"INSERT","lineNumber":658,"content":"            Log.i(\"MavlinkRepo\", \"Sent MISSION_SET_CURRENT seq=$first to sys=$fcuSystemId comp=$fcuComponentId\")"},{"type":"INSERT","lineNumber":659,"content":"            // small delay to allow FC to process"},{"type":"INSERT","lineNumber":660,"content":"            delay(200)"},{"type":"DELETE","lineNumber":646,"oldContent":"            sendCommand(MavCmd.DO_SET_MODE, MavMode.AUTO.toFloat(), 0f)"},{"type":"DELETE","lineNumber":647,"oldContent":"            Log.i(\"MavlinkRepo\", \"Fallback: Requesting mode change to AUTO via DO_SET_MODE\")"},{"type":"INSERT","lineNumber":662,"content":"            Log.w(\"MavlinkRepo\", \"Failed to send MISSION_SET_CURRENT\", e)"},{"type":"INSERT","lineNumber":663,"content":"        }"},{"type":"DELETE","lineNumber":649,"oldContent":"                }"},{"type":"DELETE","lineNumber":650,"oldContent":""},{"type":"DELETE","lineNumber":651,"oldContent":"    }"},{"type":"DELETE","lineNumber":652,"oldContent":"            }"},{"type":"DELETE","lineNumber":653,"oldContent":"        while (System.currentTimeMillis() - startWaitMode < modeWaitMs) {"},{"type":"DELETE","lineNumber":654,"oldContent":""},{"type":"INSERT","lineNumber":667,"content":""},{"type":"INSERT","lineNumber":674,"content":"            }"},{"type":"INSERT","lineNumber":675,"content":""},{"type":"INSERT","lineNumber":691,"content":"                    }"},{"type":"INSERT","lineNumber":692,"content":"                }"},{"type":"INSERT","lineNumber":693,"content":"            }"},{"type":"INSERT","lineNumber":695,"content":"            val result = withTimeoutOrNull(perAttemptTimeout) { ackDeferred.await() }"},{"type":"INSERT","lineNumber":696,"content":"            job.cancel()"},{"type":"INSERT","lineNumber":697,"content":""},{"type":"INSERT","lineNumber":701,"content":"                    return true"},{"type":"INSERT","lineNumber":702,"content":"                } else {"},{"type":"INSERT","lineNumber":703,"content":"                    Log.e(\"MavlinkRepo\", \"Mission start rejected by FCU on attempt $attempt with result=$result\")"},{"type":"INSERT","lineNumber":704,"content":"                    // Don't retry on a negative ACK; break and return failure"},{"type":"INSERT","lineNumber":705,"content":"                    return false"},{"type":"INSERT","lineNumber":706,"content":"                }"},{"type":"INSERT","lineNumber":707,"content":"            } else {"},{"type":"INSERT","lineNumber":708,"content":"                Log.w(\"MavlinkRepo\", \"No COMMAND_ACK for MISSION_START on attempt $attempt (timeout)\")"},{"type":"INSERT","lineNumber":709,"content":"                // try again after short delay"},{"type":"INSERT","lineNumber":710,"content":"                delay(500L)"},{"type":"INSERT","lineNumber":711,"content":"            }"},{"type":"INSERT","lineNumber":712,"content":"        }"},{"type":"INSERT","lineNumber":713,"content":""},{"type":"INSERT","lineNumber":714,"content":"        Log.e(\"MavlinkRepo\", \"MISSION_START not acknowledged after $maxAttempts attempts - trying fallback start (set current + change mode to AUTO)\")"},{"type":"INSERT","lineNumber":715,"content":""},{"type":"INSERT","lineNumber":716,"content":"        // Fallback approach: set mission current and change mode to AUTO (many FCs start mission when switched to AUTO)"},{"type":"INSERT","lineNumber":717,"content":"        try {"},{"type":"INSERT","lineNumber":718,"content":"            val setCurrent = MissionSetCurrent(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = first.toUShort())"},{"type":"INSERT","lineNumber":719,"content":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, setCurrent)"},{"type":"INSERT","lineNumber":720,"content":"            Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_SET_CURRENT seq=$first\")"},{"type":"INSERT","lineNumber":721,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":722,"content":"            Log.w(\"MavlinkRepo\", \"Fallback: Failed to send MISSION_SET_CURRENT\", e)"},{"type":"INSERT","lineNumber":723,"content":"        }"},{"type":"INSERT","lineNumber":724,"content":""},{"type":"INSERT","lineNumber":725,"content":"        // Request mode change to AUTO using DO_SET_MODE"},{"type":"INSERT","lineNumber":726,"content":"        try {"},{"type":"INSERT","lineNumber":727,"content":"            Log.i(\"MavlinkRepo\", \"Fallback: Requesting mode change to AUTO via DO_SET_MODE\")"},{"type":"INSERT","lineNumber":728,"content":"            changeMode(3u) // AUTO mode"},{"type":"INSERT","lineNumber":729,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":730,"content":"            Log.w(\"MavlinkRepo\", \"Fallback: Failed to send DO_SET_MODE\", e)"},{"type":"INSERT","lineNumber":731,"content":"        }"},{"type":"INSERT","lineNumber":732,"content":""},{"type":"INSERT","lineNumber":733,"content":"        // Wait for telemetry mode to reflect AUTO for a short period"},{"type":"INSERT","lineNumber":734,"content":"        val modeWaitMs = 5000L"},{"type":"INSERT","lineNumber":735,"content":"        val startWaitMode = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":736,"content":"        while (System.currentTimeMillis() - startWaitMode < modeWaitMs) {"},{"type":"INSERT","lineNumber":737,"content":"            if (state.value.mode?.contains(\"Auto\", ignoreCase = true) == true) {"},{"type":"INSERT","lineNumber":738,"content":"                Log.i(\"MavlinkRepo\", \"Fallback: Vehicle switched to AUTO mode\")"},{"type":"INSERT","lineNumber":739,"content":"                // Give FC a moment to start the mission"},{"type":"INSERT","lineNumber":740,"content":"                delay(500)"},{"type":"INSERT","lineNumber":741,"content":"                return true"},{"type":"INSERT","lineNumber":742,"content":"            }"},{"type":"INSERT","lineNumber":743,"content":"            delay(200)"},{"type":"INSERT","lineNumber":744,"content":"        }"},{"type":"INSERT","lineNumber":745,"content":""},{"type":"INSERT","lineNumber":746,"content":"        Log.e(\"MavlinkRepo\", \"Fallback start failed: vehicle did not switch to AUTO mode\")"},{"type":"INSERT","lineNumber":747,"content":"        return false"},{"type":"INSERT","lineNumber":748,"content":"    }"},{"type":"INSERT","lineNumber":749,"content":"}"},{"type":"INSERT","lineNumber":750,"content":""}]},{"timestamp":1758012518389,"changes":[{"type":"INSERT","lineNumber":12,"content":"import com.divpundir.mavlink.api.MavEnumValue"},{"type":"DELETE","lineNumber":33,"oldContent":"    val lastFailure: StateFlow<Throwable?> = _lastFailure.asStateFlow()"},{"type":"INSERT","lineNumber":34,"content":"    private val gcsSystemId: UByte = 255u"},{"type":"DELETE","lineNumber":44,"oldContent":"    // Connection"},{"type":"INSERT","lineNumber":46,"content":"    // Connection"},{"type":"DELETE","lineNumber":47,"oldContent":"                } catch (e: Exception) {"},{"type":"MODIFY","lineNumber":48,"content":"","oldContent":"                    Log.e(\"MavlinkRepo\", \"Connection attempt failed\", e)"},{"type":"INSERT","lineNumber":49,"content":"    fun start() {"},{"type":"DELETE","lineNumber":54,"oldContent":""},{"type":"INSERT","lineNumber":55,"content":"                    if (connection.tryConnect(scope)) {"},{"type":"DELETE","lineNumber":61,"oldContent":"                        if (!state.value.connected) {"},{"type":"INSERT","lineNumber":62,"content":"                delay(1000)"},{"type":"MODIFY","lineNumber":76,"content":"                    }","oldContent":"        }"},{"type":"DELETE","lineNumber":87,"oldContent":"            while (isActive) {"},{"type":"DELETE","lineNumber":88,"oldContent":"                if (state.value.connected) {"},{"type":"DELETE","lineNumber":89,"oldContent":"                        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, heartbeat)"},{"type":"INSERT","lineNumber":88,"content":"        // Send GCS heartbeat"},{"type":"INSERT","lineNumber":89,"content":"        scope.launch {"},{"type":"INSERT","lineNumber":90,"content":"            val heartbeat = Heartbeat("},{"type":"DELETE","lineNumber":97,"oldContent":"                    try {"},{"type":"INSERT","lineNumber":99,"content":"                    try {"},{"type":"DELETE","lineNumber":105,"oldContent":"            mavFrameStream.collect {"},{"type":"INSERT","lineNumber":106,"content":"                delay(1000)"},{"type":"DELETE","lineNumber":107,"oldContent":""},{"type":"INSERT","lineNumber":109,"content":""},{"type":"DELETE","lineNumber":117,"oldContent":"                        fcuComponentId = it.componentId"},{"type":"MODIFY","lineNumber":118,"content":"            }","oldContent":"                        Log.i(\"MavlinkRepo\", \"FCU detected sysId=$fcuSystemId compId=$fcuComponentId\")"},{"type":"INSERT","lineNumber":119,"content":"        }"},{"type":"MODIFY","lineNumber":128,"content":"                        fcuComponentId = it.componentId","oldContent":"                                    targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":131,"oldContent":"                                    param2 = intervalUsec,"},{"type":"INSERT","lineNumber":132,"content":"                        // Set message intervals"},{"type":"DELETE","lineNumber":152,"oldContent":"                        }"},{"type":"MODIFY","lineNumber":153,"content":"                                    _lastFailure.value = e","oldContent":"                    }"},{"type":"INSERT","lineNumber":154,"content":"                                }"},{"type":"DELETE","lineNumber":169,"oldContent":"                .map { it.message }"},{"type":"INSERT","lineNumber":171,"content":"                .map { it.message }"},{"type":"DELETE","lineNumber":181,"oldContent":"                .filterIsInstance<GlobalPositionInt>()"},{"type":"DELETE","lineNumber":182,"oldContent":"                    val altAMSLm = gp.alt / 1000f"},{"type":"DELETE","lineNumber":183,"oldContent":"                    val lat = gp.lat.takeIf { it != Int.MIN_VALUE }?.let { it / 10_000_000.0 }"},{"type":"DELETE","lineNumber":184,"oldContent":"                    _state.update {"},{"type":"INSERT","lineNumber":182,"content":"                        Log.i(\"MavlinkRepo\", \"COMMAND_ACK received (unable to stringify fields)\")"},{"type":"INSERT","lineNumber":183,"content":"                    }"},{"type":"INSERT","lineNumber":184,"content":"                }"},{"type":"INSERT","lineNumber":185,"content":"        }"},{"type":"DELETE","lineNumber":195,"oldContent":"                        it.copy("},{"type":"INSERT","lineNumber":197,"content":"                        it.copy("},{"type":"DELETE","lineNumber":203,"oldContent":""},{"type":"INSERT","lineNumber":205,"content":""},{"type":"DELETE","lineNumber":231,"oldContent":"                        17u -> \"Brake\""},{"type":"DELETE","lineNumber":232,"oldContent":"                        18u -> \"Throw\""},{"type":"DELETE","lineNumber":233,"oldContent":"                        19u -> \"Avoid_ADSB\""},{"type":"INSERT","lineNumber":232,"content":"                .map { it.message }"},{"type":"INSERT","lineNumber":233,"content":"                .filterIsInstance<BatteryStatus>()"},{"type":"INSERT","lineNumber":234,"content":"                .collect { b ->"},{"type":"DELETE","lineNumber":246,"oldContent":"        }"},{"type":"MODIFY","lineNumber":247,"content":"                    val mode = when (hb.customMode) {","oldContent":"        // SYS_STATUS"},{"type":"INSERT","lineNumber":248,"content":"                        0u -> \"Stabilize\""},{"type":"DELETE","lineNumber":265,"oldContent":""},{"type":"DELETE","lineNumber":266,"oldContent":"        // GPS_RAW_INT"},{"type":"DELETE","lineNumber":267,"oldContent":"            mavFrameStream"},{"type":"DELETE","lineNumber":268,"oldContent":"                .map { it.message }"},{"type":"INSERT","lineNumber":266,"content":"                        21u -> \"Smart_RTL\""},{"type":"INSERT","lineNumber":267,"content":"                        22u -> \"FlowHold\""},{"type":"INSERT","lineNumber":268,"content":"                        23u -> \"Follow\""},{"type":"INSERT","lineNumber":269,"content":"                        24u -> \"ZigZag\""},{"type":"DELETE","lineNumber":291,"oldContent":"                                    targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":292,"content":"                    _state.update { it.copy(voltage = vBatt, batteryPercent = pct , armable = armable) }"},{"type":"DELETE","lineNumber":293,"oldContent":""},{"type":"INSERT","lineNumber":295,"content":""},{"type":"DELETE","lineNumber":306,"oldContent":"                                try {"},{"type":"DELETE","lineNumber":307,"oldContent":"                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"DELETE","lineNumber":308,"oldContent":"                                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":307,"content":"        }"},{"type":"INSERT","lineNumber":308,"content":"    }"},{"type":"INSERT","lineNumber":309,"content":""},{"type":"DELETE","lineNumber":320,"oldContent":"            param7 = param7"},{"type":"INSERT","lineNumber":322,"content":"            param7 = param7"},{"type":"MODIFY","lineNumber":327,"content":"                gcsComponentId, commandLong)","oldContent":"        val commandLong = CommandLong("},{"type":"DELETE","lineNumber":328,"oldContent":"            Log.e(\"MavlinkRepo\", \"Failed to send command\", e)"},{"type":"INSERT","lineNumber":330,"content":"            Log.e(\"MavlinkRepo\", \"Failed to send command\", e)"},{"type":"DELETE","lineNumber":331,"oldContent":"            param1 = param1,"},{"type":"MODIFY","lineNumber":332,"content":"        }","oldContent":""},{"type":"INSERT","lineNumber":334,"content":""},{"type":"DELETE","lineNumber":337,"oldContent":"            param7 = param7"},{"type":"INSERT","lineNumber":338,"content":"                MavCmd.COMPONENT_ARM_DISARM,"},{"type":"DELETE","lineNumber":340,"oldContent":"            connection.trySendUnsignedV2("},{"type":"INSERT","lineNumber":341,"content":"        } else {"},{"type":"DELETE","lineNumber":346,"oldContent":"        }"},{"type":"INSERT","lineNumber":347,"content":"        sendCommand("},{"type":"DELETE","lineNumber":353,"oldContent":"        // For MAV_CMD_DO_SET_MODE in ArduPilot:"},{"type":"DELETE","lineNumber":354,"oldContent":"        // param1: Base mode - should always be 1 (MAV_MODE_FLAG_CUSTOM_MODE_ENABLED)"},{"type":"DELETE","lineNumber":355,"oldContent":"        // param2: Custom mode (0=Stabilize, 3=Auto, 5=Loiter, etc.)"},{"type":"DELETE","lineNumber":356,"oldContent":"        // The armed status is handled automatically by ArduPilot, not via the base mode flags"},{"type":"INSERT","lineNumber":354,"content":"        // Use the recommended MAV_CMD to change flight mode (MAV_CMD_DO_CHANGE_MODE, id=176)"},{"type":"INSERT","lineNumber":355,"content":"        // and also send DO_SET_MODE for broader compatibility across firmwares."},{"type":"INSERT","lineNumber":356,"content":"        // DO_SET_MODE (older) expects param1 = base mode (1 = custom mode enabled), param2 = custom mode"},{"type":"INSERT","lineNumber":357,"content":"        // DO_CHANGE_MODE (176) commonly accepts param1 = custom mode index. We send both for compatibility."},{"type":"DELETE","lineNumber":358,"oldContent":"        sendCommand("},{"type":"DELETE","lineNumber":359,"oldContent":"            MavCmd.DO_SET_MODE,"},{"type":"DELETE","lineNumber":360,"oldContent":"            1f,                   // param1: MAV_MODE_FLAG_CUSTOM_MODE_ENABLED (always 1)"},{"type":"DELETE","lineNumber":361,"oldContent":"            0f,                   // param6: empty"},{"type":"DELETE","lineNumber":362,"oldContent":"            0f,                   // param3: custom sub mode (usually 0)"},{"type":"DELETE","lineNumber":363,"oldContent":"            0f,                   // param4: empty"},{"type":"DELETE","lineNumber":364,"oldContent":"            0f,                   // param5: empty"},{"type":"DELETE","lineNumber":365,"oldContent":"            0f,                   // param6: empty"},{"type":"DELETE","lineNumber":366,"oldContent":"        )"},{"type":"INSERT","lineNumber":359,"content":"        // First try DO_SET_MODE for backwards compatibility"},{"type":"INSERT","lineNumber":360,"content":"        try {"},{"type":"INSERT","lineNumber":361,"content":"            sendCommand("},{"type":"INSERT","lineNumber":362,"content":"                MavCmd.DO_SET_MODE,"},{"type":"INSERT","lineNumber":363,"content":"                1f,                   // param1: MAV_MODE_FLAG_CUSTOM_MODE_ENABLED"},{"type":"INSERT","lineNumber":364,"content":"                customMode.toFloat(), // param2: custom mode"},{"type":"INSERT","lineNumber":365,"content":"                0f,"},{"type":"INSERT","lineNumber":366,"content":"                0f,"},{"type":"INSERT","lineNumber":367,"content":"                0f,"},{"type":"INSERT","lineNumber":368,"content":"                0f"},{"type":"INSERT","lineNumber":369,"content":"            )"},{"type":"INSERT","lineNumber":370,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":371,"content":"            Log.w(\"MavlinkRepo\", \"DO_SET_MODE send failed\", e)"},{"type":"INSERT","lineNumber":372,"content":"        }"},{"type":"INSERT","lineNumber":373,"content":""},{"type":"INSERT","lineNumber":374,"content":"        // Also send MAV_CMD_DO_CHANGE_MODE (id=176) as a COMMAND_LONG using raw enum value"},{"type":"INSERT","lineNumber":375,"content":"        try {"},{"type":"INSERT","lineNumber":376,"content":"            val cmdChange = CommandLong("},{"type":"INSERT","lineNumber":377,"content":"                targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":378,"content":"                targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":379,"content":"                // use numeric enum wrapper for command id 176"},{"type":"INSERT","lineNumber":380,"content":"                command = MavEnumValue.of(176u),"},{"type":"INSERT","lineNumber":381,"content":"                confirmation = 0u,"},{"type":"INSERT","lineNumber":382,"content":"                param1 = customMode.toFloat(), // mode index"},{"type":"INSERT","lineNumber":383,"content":"                param2 = 0f,"},{"type":"INSERT","lineNumber":384,"content":"                param3 = 0f,"},{"type":"INSERT","lineNumber":385,"content":"                param4 = 0f,"},{"type":"INSERT","lineNumber":386,"content":"                param5 = 0f,"},{"type":"INSERT","lineNumber":387,"content":"                param6 = 0f,"},{"type":"INSERT","lineNumber":388,"content":"                param7 = 0f"},{"type":"INSERT","lineNumber":389,"content":"            )"},{"type":"INSERT","lineNumber":390,"content":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, cmdChange)"},{"type":"INSERT","lineNumber":391,"content":"            Log.i(\"MavlinkRepo\", \"Sent MAV_CMD_DO_CHANGE_MODE (176) param1=$customMode\")"},{"type":"INSERT","lineNumber":392,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":393,"content":"            Log.w(\"MavlinkRepo\", \"MAV_CMD_DO_CHANGE_MODE send failed\", e)"},{"type":"INSERT","lineNumber":394,"content":"            _lastFailure.value = e"},{"type":"INSERT","lineNumber":395,"content":"        }"},{"type":"DELETE","lineNumber":372,"oldContent":"            )"},{"type":"DELETE","lineNumber":382,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":391,"oldContent":"                                Log.d(\"MavlinkRepo\", \"Received MissionRequestInt from sys=$senderSys comp=$senderComp seq=${msg.seq}\")"},{"type":"DELETE","lineNumber":395,"oldContent":"                                }"},{"type":"INSERT","lineNumber":436,"content":"            )"},{"type":"DELETE","lineNumber":413,"oldContent":"                                // ignore other messages"},{"type":"DELETE","lineNumber":415,"oldContent":"                            }"},{"type":"DELETE","lineNumber":417,"oldContent":"                        }"},{"type":"DELETE","lineNumber":419,"oldContent":"                    }"},{"type":"DELETE","lineNumber":421,"oldContent":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"DELETE","lineNumber":423,"oldContent":"            val firstRequestTimeout = 5000L // increase wait to allow FC more time to request"},{"type":"DELETE","lineNumber":425,"oldContent":"             val startWait = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":427,"oldContent":"             while (!firstRequestReceived && !ackDeferred.isCompleted && System.currentTimeMillis() - startWait < firstRequestTimeout) {"},{"type":"DELETE","lineNumber":429,"oldContent":"                 delay(100)"},{"type":"DELETE","lineNumber":430,"oldContent":"             }"},{"type":"INSERT","lineNumber":447,"content":"                    try {"},{"type":"DELETE","lineNumber":432,"oldContent":""},{"type":"DELETE","lineNumber":434,"oldContent":"             if (!firstRequestReceived) {"},{"type":"DELETE","lineNumber":436,"oldContent":"                        targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":438,"oldContent":"                        seq = seq.toUShort()"},{"type":"DELETE","lineNumber":440,"oldContent":"                    )"},{"type":"DELETE","lineNumber":442,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":444,"oldContent":"                        // log full item contents for diagnostics"},{"type":"DELETE","lineNumber":446,"oldContent":"                        Log.d(\"MavlinkRepo\", \"Sending fallback item seq=$seq cmd=${missionItem.command} frame=${missionItem.frame} x=${missionItem.x} y=${missionItem.y} z=${missionItem.z}\")"},{"type":"DELETE","lineNumber":448,"oldContent":"                         connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"DELETE","lineNumber":450,"oldContent":"                         sentSeqs.add(seq)"},{"type":"DELETE","lineNumber":452,"oldContent":"                         Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_ITEM_INT seq=$seq\")"},{"type":"DELETE","lineNumber":454,"oldContent":"                         // give FC a bit more time to process unsolicited item and possibly request next"},{"type":"DELETE","lineNumber":456,"oldContent":"                         delay(300)"},{"type":"DELETE","lineNumber":458,"oldContent":"                     } catch (e: Exception) {"},{"type":"DELETE","lineNumber":460,"oldContent":"                         Log.e(\"MavlinkRepo\", \"Fallback: Failed to send mission item seq=$seq\", e)"},{"type":"DELETE","lineNumber":462,"oldContent":"                     }"},{"type":"DELETE","lineNumber":464,"oldContent":"                 }"},{"type":"MODIFY","lineNumber":466,"content":"                                Log.d(\"MavlinkRepo\", \"Received MissionRequestInt from sys=$senderSys comp=$senderComp seq=${msg.seq}\")","oldContent":"             }"},{"type":"DELETE","lineNumber":468,"oldContent":""},{"type":"DELETE","lineNumber":470,"oldContent":"            // Wait for ACK with timeout"},{"type":"DELETE","lineNumber":472,"oldContent":"            val ackReceived = withTimeoutOrNull(timeoutMs) {"},{"type":"DELETE","lineNumber":474,"oldContent":"                ackDeferred.await()"},{"type":"DELETE","lineNumber":476,"oldContent":"            } ?: false"},{"type":"DELETE","lineNumber":477,"oldContent":""},{"type":"INSERT","lineNumber":472,"content":"                                }"},{"type":"DELETE","lineNumber":479,"oldContent":"            // cancel collector and resend jobs"},{"type":"INSERT","lineNumber":519,"content":"                                // ignore other messages"},{"type":"INSERT","lineNumber":520,"content":"                            }"},{"type":"INSERT","lineNumber":521,"content":"                        }"},{"type":"INSERT","lineNumber":522,"content":"                    }"},{"type":"DELETE","lineNumber":527,"oldContent":"            job.cancel()"},{"type":"INSERT","lineNumber":525,"content":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"INSERT","lineNumber":526,"content":"            val firstRequestTimeout = 5000L // increase wait to allow FC more time to request"},{"type":"INSERT","lineNumber":527,"content":"             val startWait = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":528,"content":"             while (!firstRequestReceived && !ackDeferred.isCompleted && System.currentTimeMillis() - startWait < firstRequestTimeout) {"},{"type":"INSERT","lineNumber":529,"content":"                 delay(100)"},{"type":"INSERT","lineNumber":530,"content":"             }"},{"type":"INSERT","lineNumber":531,"content":""},{"type":"INSERT","lineNumber":532,"content":"             if (!firstRequestReceived) {"},{"type":"DELETE","lineNumber":529,"oldContent":"            resendJob.cancel()"},{"type":"DELETE","lineNumber":531,"oldContent":"            if (ackReceived) {"},{"type":"DELETE","lineNumber":533,"oldContent":"                Log.i(\"MavlinkRepo\", \"Mission upload acknowledged by FCU\")"},{"type":"DELETE","lineNumber":535,"oldContent":"                return true"},{"type":"DELETE","lineNumber":537,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":539,"oldContent":"                Log.e(\"MavlinkRepo\", \"Mission upload timed out waiting for ACK\")"},{"type":"INSERT","lineNumber":540,"content":"                        targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":541,"content":"                        seq = seq.toUShort()"},{"type":"INSERT","lineNumber":542,"content":"                    )"},{"type":"INSERT","lineNumber":543,"content":"                    try {"},{"type":"INSERT","lineNumber":544,"content":"                        // log full item contents for diagnostics"},{"type":"INSERT","lineNumber":545,"content":"                        Log.d(\"MavlinkRepo\", \"Sending fallback item seq=$seq cmd=${missionItem.command} frame=${missionItem.frame} x=${missionItem.x} y=${missionItem.y} z=${missionItem.z}\")"},{"type":"INSERT","lineNumber":546,"content":"                         connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"INSERT","lineNumber":547,"content":"                         sentSeqs.add(seq)"},{"type":"INSERT","lineNumber":548,"content":"                         Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_ITEM_INT seq=$seq\")"},{"type":"INSERT","lineNumber":549,"content":"                         // give FC a bit more time to process unsolicited item and possibly request next"},{"type":"INSERT","lineNumber":550,"content":"                         delay(300)"},{"type":"INSERT","lineNumber":551,"content":"                     } catch (e: Exception) {"},{"type":"INSERT","lineNumber":552,"content":"                         Log.e(\"MavlinkRepo\", \"Fallback: Failed to send mission item seq=$seq\", e)"},{"type":"INSERT","lineNumber":553,"content":"                     }"},{"type":"INSERT","lineNumber":554,"content":"                 }"},{"type":"INSERT","lineNumber":555,"content":"             }"},{"type":"INSERT","lineNumber":556,"content":""},{"type":"INSERT","lineNumber":557,"content":"            // Wait for ACK with timeout"},{"type":"INSERT","lineNumber":558,"content":"            val ackReceived = withTimeoutOrNull(timeoutMs) {"},{"type":"INSERT","lineNumber":559,"content":"                ackDeferred.await()"},{"type":"INSERT","lineNumber":560,"content":"            } ?: false"},{"type":"INSERT","lineNumber":561,"content":""},{"type":"INSERT","lineNumber":562,"content":"            // cancel collector and resend jobs"},{"type":"INSERT","lineNumber":563,"content":"            job.cancel()"},{"type":"INSERT","lineNumber":564,"content":"            resendJob.cancel()"},{"type":"INSERT","lineNumber":565,"content":""},{"type":"INSERT","lineNumber":566,"content":"            if (ackReceived) {"},{"type":"INSERT","lineNumber":567,"content":"                Log.i(\"MavlinkRepo\", \"Mission upload acknowledged by FCU\")"},{"type":"INSERT","lineNumber":568,"content":"                return true"},{"type":"INSERT","lineNumber":569,"content":"            } else {"},{"type":"INSERT","lineNumber":570,"content":"                Log.e(\"MavlinkRepo\", \"Mission upload timed out waiting for ACK\")"},{"type":"INSERT","lineNumber":578,"content":"    }"},{"type":"DELETE","lineNumber":555,"oldContent":""},{"type":"INSERT","lineNumber":587,"content":"        try {"},{"type":"INSERT","lineNumber":588,"content":"            val received = mutableListOf<Pair<Int, String>>()"},{"type":"DELETE","lineNumber":562,"oldContent":"    }"},{"type":"DELETE","lineNumber":567,"oldContent":"        try {"},{"type":"DELETE","lineNumber":568,"oldContent":"            val received = mutableListOf<Pair<Int, String>>()"},{"type":"DELETE","lineNumber":576,"oldContent":"                            received.add(msg.seq.toInt() to \"INT: lat=$lat lon=$lon alt=${msg.z}\")"},{"type":"INSERT","lineNumber":606,"content":"                            received.add(msg.seq.toInt() to \"INT: lat=$lat lon=$lon alt=${msg.z}\")"},{"type":"INSERT","lineNumber":607,"content":"                            perSeqMap[msg.seq.toInt()]?.let { d -> if (!d.isCompleted) d.complete(Unit) }"},{"type":"INSERT","lineNumber":608,"content":"                        }"},{"type":"INSERT","lineNumber":609,"content":"                        is MissionItem -> {"},{"type":"DELETE","lineNumber":582,"oldContent":"                            perSeqMap[msg.seq.toInt()]?.let { d -> if (!d.isCompleted) d.complete(Unit) }"},{"type":"DELETE","lineNumber":587,"oldContent":"    suspend fun startMission(first: Int, last: Int): Boolean {"},{"type":"DELETE","lineNumber":589,"oldContent":""},{"type":"DELETE","lineNumber":591,"oldContent":"}"},{"type":"INSERT","lineNumber":620,"content":"                }"},{"type":"DELETE","lineNumber":594,"oldContent":""},{"type":"DELETE","lineNumber":595,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":623,"content":"            // send request list"},{"type":"DELETE","lineNumber":598,"oldContent":""},{"type":"INSERT","lineNumber":626,"content":"                connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, req)"},{"type":"DELETE","lineNumber":603,"oldContent":"        Log.e(\"MavlinkRepo\", \"Fallback start failed: vehicle did not switch to AUTO mode\")"},{"type":"INSERT","lineNumber":632,"content":"            val expectedCount = withTimeoutOrNull(timeoutMs) { expectedCountDeferred.await() } ?: run {"},{"type":"INSERT","lineNumber":633,"content":"                Log.w(\"MavlinkRepo\", \"Did not receive MISSION_COUNT from FCU within timeout\")"},{"type":"INSERT","lineNumber":634,"content":"                job.cancel()"},{"type":"INSERT","lineNumber":635,"content":"                return"},{"type":"DELETE","lineNumber":606,"oldContent":"        while (System.currentTimeMillis() - startWaitMode < modeWaitMs) {"},{"type":"DELETE","lineNumber":607,"oldContent":"        }"},{"type":"DELETE","lineNumber":609,"oldContent":"            sendCommand(MavCmd.DO_SET_MODE, MavMode.AUTO.toFloat(), 0f)"},{"type":"DELETE","lineNumber":610,"oldContent":"            Log.i(\"MavlinkRepo\", \"Fallback: Requesting mode change to AUTO via DO_SET_MODE\")"},{"type":"DELETE","lineNumber":611,"oldContent":"        try {"},{"type":"DELETE","lineNumber":612,"oldContent":"                // try again after short delay"},{"type":"INSERT","lineNumber":638,"content":"            Log.i(\"MavlinkRepo\", \"Expecting $expectedCount mission items - requesting each item\")"},{"type":"INSERT","lineNumber":639,"content":""},{"type":"INSERT","lineNumber":640,"content":"            // For each seq, request the item and wait for it"},{"type":"INSERT","lineNumber":641,"content":"            for (seq in 0 until expectedCount) {"},{"type":"INSERT","lineNumber":642,"content":"                val seqDeferred = CompletableDeferred<Unit>()"},{"type":"INSERT","lineNumber":643,"content":"                perSeqMap[seq] = seqDeferred"},{"type":"INSERT","lineNumber":644,"content":"                try {"},{"type":"INSERT","lineNumber":645,"content":"                    val reqItem = MissionRequestInt(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = seq.toUShort())"},{"type":"INSERT","lineNumber":646,"content":"                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, reqItem)"},{"type":"INSERT","lineNumber":647,"content":"                    Log.d(\"MavlinkRepo\", \"Sent MISSION_REQUEST_INT for seq=$seq\")"},{"type":"INSERT","lineNumber":648,"content":"                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":614,"oldContent":"                Log.w(\"MavlinkRepo\", \"No COMMAND_ACK for MISSION_START on attempt $attempt (timeout)\")"},{"type":"DELETE","lineNumber":616,"oldContent":"            job.cancel()"},{"type":"DELETE","lineNumber":618,"oldContent":"                try {"},{"type":"DELETE","lineNumber":620,"oldContent":"                    val reqItem = MissionRequestInt(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = seq.toUShort())"},{"type":"DELETE","lineNumber":622,"oldContent":"                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, reqItem)"},{"type":"DELETE","lineNumber":624,"oldContent":"                    Log.d(\"MavlinkRepo\", \"Sent MISSION_REQUEST_INT for seq=$seq\")"},{"type":"DELETE","lineNumber":626,"oldContent":"                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":635,"oldContent":"                Log.w(\"MavlinkRepo\", \"No COMMAND_ACK for MISSION_START on attempt $attempt (timeout)\")"},{"type":"INSERT","lineNumber":664,"content":""},{"type":"DELETE","lineNumber":639,"oldContent":"            job.cancel()"},{"type":"DELETE","lineNumber":640,"oldContent":"            val result = withTimeoutOrNull(perAttemptTimeout) { ackDeferred.await() }"},{"type":"DELETE","lineNumber":642,"oldContent":"            }"},{"type":"DELETE","lineNumber":643,"oldContent":""},{"type":"INSERT","lineNumber":669,"content":"            Log.i(\"MavlinkRepo\", \"Mission readback complete: expected=$expectedCount items=${received.size}\")"},{"type":"INSERT","lineNumber":670,"content":"            received.sortedBy { it.first }.forEach { (seq, desc) -> Log.i(\"MavlinkRepo\", \"Item #$seq -> $desc\") }"},{"type":"DELETE","lineNumber":647,"oldContent":"                Log.i(\"MavlinkRepo\", \"Fallback: Vehicle switched to AUTO mode\")"},{"type":"DELETE","lineNumber":648,"oldContent":"            if (state.value.mode?.contains(\"Auto\", ignoreCase = true) == true) {"},{"type":"INSERT","lineNumber":674,"content":"    }"},{"type":"INSERT","lineNumber":675,"content":""},{"type":"DELETE","lineNumber":651,"oldContent":""},{"type":"INSERT","lineNumber":681,"content":"        }"},{"type":"DELETE","lineNumber":658,"oldContent":"        val maxAttempts = 3"},{"type":"DELETE","lineNumber":660,"oldContent":"        val perAttemptTimeout = 1500L"},{"type":"DELETE","lineNumber":662,"oldContent":"        for (attempt in 1..maxAttempts) {"},{"type":"DELETE","lineNumber":664,"oldContent":"            try {"},{"type":"DELETE","lineNumber":666,"oldContent":"                Log.i(\"MavlinkRepo\", \"Attempt $attempt: Sending MISSION_START first=$first last=$last to sys=$fcuSystemId comp=$fcuComponentId\")"},{"type":"INSERT","lineNumber":690,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":691,"content":"            Log.w(\"MavlinkRepo\", \"Failed to send MISSION_SET_CURRENT\", e)"},{"type":"INSERT","lineNumber":692,"content":"        }"},{"type":"INSERT","lineNumber":693,"content":""},{"type":"INSERT","lineNumber":694,"content":"        val maxAttempts = 3"},{"type":"INSERT","lineNumber":695,"content":"        val perAttemptTimeout = 1500L"},{"type":"INSERT","lineNumber":696,"content":""},{"type":"INSERT","lineNumber":697,"content":"        for (attempt in 1..maxAttempts) {"},{"type":"INSERT","lineNumber":698,"content":"            try {"},{"type":"INSERT","lineNumber":699,"content":"                Log.i(\"MavlinkRepo\", \"Attempt $attempt: Sending MISSION_START first=$first last=$last to sys=$fcuSystemId comp=$fcuComponentId\")"},{"type":"DELETE","lineNumber":670,"oldContent":"            Log.w(\"MavlinkRepo\", \"Failed to send MISSION_SET_CURRENT\", e)"},{"type":"DELETE","lineNumber":672,"oldContent":"        }"},{"type":"INSERT","lineNumber":703,"content":"            }"},{"type":"INSERT","lineNumber":704,"content":""},{"type":"DELETE","lineNumber":677,"oldContent":""},{"type":"DELETE","lineNumber":685,"oldContent":"            }"},{"type":"DELETE","lineNumber":687,"oldContent":""},{"type":"DELETE","lineNumber":688,"oldContent":""},{"type":"DELETE","lineNumber":689,"oldContent":"}"},{"type":"DELETE","lineNumber":690,"oldContent":"    }"},{"type":"DELETE","lineNumber":691,"oldContent":"        return false"},{"type":"DELETE","lineNumber":692,"oldContent":"        Log.e(\"MavlinkRepo\", \"Fallback start failed: vehicle did not switch to AUTO mode\")"},{"type":"DELETE","lineNumber":693,"oldContent":""},{"type":"DELETE","lineNumber":694,"oldContent":"        }"},{"type":"DELETE","lineNumber":695,"oldContent":"            delay(200)"},{"type":"DELETE","lineNumber":696,"oldContent":"            }"},{"type":"DELETE","lineNumber":697,"oldContent":"                return true"},{"type":"DELETE","lineNumber":698,"oldContent":"                delay(500)"},{"type":"DELETE","lineNumber":699,"oldContent":"                // Give FC a moment to start the mission"},{"type":"DELETE","lineNumber":700,"oldContent":"                Log.i(\"MavlinkRepo\", \"Fallback: Vehicle switched to AUTO mode\")"},{"type":"DELETE","lineNumber":701,"oldContent":"            if (state.value.mode?.contains(\"Auto\", ignoreCase = true) == true) {"},{"type":"DELETE","lineNumber":702,"oldContent":"        while (System.currentTimeMillis() - startWaitMode < modeWaitMs) {"},{"type":"DELETE","lineNumber":703,"oldContent":"        val startWaitMode = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":717,"content":"                        } catch (t: Throwable) {"},{"type":"INSERT","lineNumber":718,"content":"                            Log.w(\"MavlinkRepo\", \"Error while processing COMMAND_ACK\", t)"},{"type":"INSERT","lineNumber":719,"content":"                        }"},{"type":"DELETE","lineNumber":705,"oldContent":"        val modeWaitMs = 5000L"},{"type":"DELETE","lineNumber":707,"oldContent":"        // Wait for telemetry mode to reflect AUTO for a short period"},{"type":"DELETE","lineNumber":710,"oldContent":"        }"},{"type":"DELETE","lineNumber":712,"oldContent":"            Log.w(\"MavlinkRepo\", \"Fallback: Failed to send DO_SET_MODE\", e)"},{"type":"DELETE","lineNumber":714,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":716,"oldContent":"            changeMode(3u) // AUTO mode"},{"type":"DELETE","lineNumber":717,"oldContent":"            Log.i(\"MavlinkRepo\", \"Fallback: Requesting mode change to AUTO via DO_SET_MODE\")"},{"type":"DELETE","lineNumber":718,"oldContent":"        try {"},{"type":"DELETE","lineNumber":719,"oldContent":"        // Request mode change to AUTO using DO_SET_MODE"},{"type":"INSERT","lineNumber":727,"content":"            if (result != null) {"},{"type":"INSERT","lineNumber":728,"content":"                if (result == 0u) {"},{"type":"INSERT","lineNumber":729,"content":"                    Log.i(\"MavlinkRepo\", \"Mission start acknowledged by FCU on attempt $attempt\")"},{"type":"DELETE","lineNumber":721,"oldContent":""},{"type":"DELETE","lineNumber":723,"oldContent":"        }"},{"type":"DELETE","lineNumber":725,"oldContent":"            Log.w(\"MavlinkRepo\", \"Fallback: Failed to send MISSION_SET_CURRENT\", e)"},{"type":"DELETE","lineNumber":727,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":729,"oldContent":"            Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_SET_CURRENT seq=$first\")"},{"type":"DELETE","lineNumber":731,"oldContent":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, setCurrent)"},{"type":"DELETE","lineNumber":733,"oldContent":"            val setCurrent = MissionSetCurrent(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = first.toUShort())"},{"type":"DELETE","lineNumber":735,"oldContent":"        try {"},{"type":"DELETE","lineNumber":737,"oldContent":"        // Fallback approach: set mission current and change mode to AUTO (many FCs start mission when switched to AUTO)"},{"type":"DELETE","lineNumber":739,"oldContent":""},{"type":"INSERT","lineNumber":741,"content":"        }"},{"type":"INSERT","lineNumber":742,"content":""},{"type":"INSERT","lineNumber":744,"content":""},{"type":"INSERT","lineNumber":745,"content":"        // Fallback approach: set mission current and change mode to AUTO (many FCs start mission when switched to AUTO)"},{"type":"INSERT","lineNumber":746,"content":"        try {"},{"type":"INSERT","lineNumber":747,"content":"            val setCurrent = MissionSetCurrent(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = first.toUShort())"},{"type":"INSERT","lineNumber":748,"content":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, setCurrent)"},{"type":"INSERT","lineNumber":749,"content":"            Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_SET_CURRENT seq=$first\")"},{"type":"INSERT","lineNumber":750,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":751,"content":"            Log.w(\"MavlinkRepo\", \"Fallback: Failed to send MISSION_SET_CURRENT\", e)"},{"type":"INSERT","lineNumber":754,"content":"        // Request mode change to AUTO using DO_SET_MODE"},{"type":"INSERT","lineNumber":755,"content":"        try {"},{"type":"INSERT","lineNumber":756,"content":"            Log.i(\"MavlinkRepo\", \"Fallback: Requesting mode change to AUTO via DO_SET_MODE\")"},{"type":"INSERT","lineNumber":757,"content":"            changeMode(3u) // AUTO mode"},{"type":"INSERT","lineNumber":758,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":759,"content":"            Log.w(\"MavlinkRepo\", \"Fallback: Failed to send DO_SET_MODE\", e)"},{"type":"INSERT","lineNumber":760,"content":"        }"},{"type":"INSERT","lineNumber":761,"content":""},{"type":"INSERT","lineNumber":762,"content":"        // Wait for telemetry mode to reflect AUTO for a short period"},{"type":"INSERT","lineNumber":763,"content":"        val modeWaitMs = 5000L"},{"type":"INSERT","lineNumber":764,"content":"        val startWaitMode = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":765,"content":"        while (System.currentTimeMillis() - startWaitMode < modeWaitMs) {"},{"type":"INSERT","lineNumber":766,"content":"            if (state.value.mode?.contains(\"Auto\", ignoreCase = true) == true) {"},{"type":"INSERT","lineNumber":767,"content":"                Log.i(\"MavlinkRepo\", \"Fallback: Vehicle switched to AUTO mode\")"},{"type":"INSERT","lineNumber":768,"content":"                // Give FC a moment to start the mission"},{"type":"INSERT","lineNumber":769,"content":"                delay(500)"},{"type":"INSERT","lineNumber":770,"content":"                return true"},{"type":"INSERT","lineNumber":771,"content":"            }"},{"type":"INSERT","lineNumber":772,"content":"            delay(200)"},{"type":"INSERT","lineNumber":773,"content":"        }"},{"type":"INSERT","lineNumber":774,"content":""},{"type":"INSERT","lineNumber":775,"content":"        Log.e(\"MavlinkRepo\", \"Fallback start failed: vehicle did not switch to AUTO mode\")"},{"type":"INSERT","lineNumber":776,"content":"        return false"},{"type":"INSERT","lineNumber":777,"content":"    }"},{"type":"INSERT","lineNumber":778,"content":"}"},{"type":"INSERT","lineNumber":779,"content":""}]},{"timestamp":1758012592233,"changes":[{"type":"DELETE","lineNumber":12,"oldContent":"import com.divpundir.mavlink.api.MavEnumValue"},{"type":"DELETE","lineNumber":44,"oldContent":"                try {"},{"type":"INSERT","lineNumber":43,"content":"    val lastFailure: StateFlow<Throwable?> = _lastFailure.asStateFlow()"},{"type":"MODIFY","lineNumber":76,"content":"                    is StreamState.Inactive -> {","oldContent":"        }"},{"type":"DELETE","lineNumber":81,"oldContent":"                type = MavType.GCS.wrap(),"},{"type":"INSERT","lineNumber":80,"content":"                            reconnect(this)"},{"type":"DELETE","lineNumber":87,"oldContent":"            while (isActive) {"},{"type":"INSERT","lineNumber":86,"content":""},{"type":"DELETE","lineNumber":103,"oldContent":""},{"type":"DELETE","lineNumber":104,"oldContent":"        // Log raw messages"},{"type":"INSERT","lineNumber":102,"content":"                        _lastFailure.value = e"},{"type":"INSERT","lineNumber":103,"content":"                    }"},{"type":"DELETE","lineNumber":111,"oldContent":"        // Detect FCU"},{"type":"INSERT","lineNumber":110,"content":"        val mavFrameStream = connection.mavFrame"},{"type":"DELETE","lineNumber":114,"oldContent":"                .filter { it.message is Heartbeat && (it.message as Heartbeat).type != MavType.GCS.wrap() }"},{"type":"INSERT","lineNumber":113,"content":"        // Log raw messages"},{"type":"DELETE","lineNumber":117,"oldContent":"                        fcuSystemId = it.systemId"},{"type":"INSERT","lineNumber":116,"content":"                Log.d(\"MavlinkRepo\", \"Frame: ${it.message.javaClass.simpleName} (sysId=${it.systemId}, compId=${it.componentId})\")"},{"type":"MODIFY","lineNumber":128,"content":"                        Log.i(\"MavlinkRepo\", \"FCU detected sysId=$fcuSystemId compId=$fcuComponentId\")","oldContent":"                                    targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":148,"oldContent":"                            setMessageRate(24u, 1f)  // GPS_RAW_INT"},{"type":"INSERT","lineNumber":147,"content":"                                )"},{"type":"DELETE","lineNumber":152,"oldContent":"                        }"},{"type":"INSERT","lineNumber":151,"content":"                                    Log.e(\"MavlinkRepo\", \"Failed to send SET_MESSAGE_INTERVAL\", e)"},{"type":"DELETE","lineNumber":190,"oldContent":"                            altitudeMsl = altAMSLm,"},{"type":"DELETE","lineNumber":191,"oldContent":"                            altitudeRelative = relAltM,"},{"type":"INSERT","lineNumber":189,"content":"        scope.launch {"},{"type":"INSERT","lineNumber":190,"content":"            mavFrameStream"},{"type":"DELETE","lineNumber":201,"oldContent":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":200,"content":"                        )"},{"type":"DELETE","lineNumber":211,"oldContent":"            mavFrameStream"},{"type":"INSERT","lineNumber":210,"content":"                .filterIsInstance<GlobalPositionInt>()"},{"type":"DELETE","lineNumber":236,"oldContent":"                        21u -> \"Smart_RTL\""},{"type":"DELETE","lineNumber":237,"oldContent":"                        22u -> \"FlowHold\""},{"type":"INSERT","lineNumber":235,"content":"                    _state.update { it.copy(currentA = currentA) }"},{"type":"INSERT","lineNumber":236,"content":"                }"},{"type":"DELETE","lineNumber":245,"oldContent":"                    _state.update { it.copy(armed=armed , mode = mode)}"},{"type":"DELETE","lineNumber":246,"oldContent":"                }"},{"type":"INSERT","lineNumber":244,"content":"                .collect{ hb->"},{"type":"INSERT","lineNumber":245,"content":"                    val armed = (hb.baseMode.value and MavModeFlag.SAFETY_ARMED.value )!= 0u"},{"type":"DELETE","lineNumber":265,"oldContent":""},{"type":"INSERT","lineNumber":264,"content":"                        20u -> \"Guided_NoGPS\""},{"type":"DELETE","lineNumber":271,"oldContent":"                .map { it.message }"},{"type":"DELETE","lineNumber":272,"oldContent":"                .filterIsInstance<GpsRawInt>()"},{"type":"INSERT","lineNumber":270,"content":"                        26u -> \"AutoRotate\""},{"type":"INSERT","lineNumber":271,"content":"                        27u -> \"Auto_RTL\""},{"type":"DELETE","lineNumber":306,"oldContent":"                                )"},{"type":"INSERT","lineNumber":305,"content":"                }"},{"type":"DELETE","lineNumber":324,"oldContent":"    }"},{"type":"INSERT","lineNumber":323,"content":"        try {"},{"type":"MODIFY","lineNumber":327,"content":"            Log.d(\"MavlinkRepo\", \"Sent COMMAND_LONG: cmd=${command} p1=$param1 p2=$param2 p3=$param3 p4=$param4 p5=$param5 p6=$param6 p7=$param7\")","oldContent":"        val commandLong = CommandLong("},{"type":"DELETE","lineNumber":350,"oldContent":"    suspend fun arm() {"},{"type":"INSERT","lineNumber":349,"content":"        )"},{"type":"DELETE","lineNumber":354,"oldContent":"        // Use the recommended MAV_CMD to change flight mode (MAV_CMD_DO_CHANGE_MODE, id=176)"},{"type":"DELETE","lineNumber":355,"oldContent":"        // and also send DO_SET_MODE for broader compatibility across firmwares."},{"type":"DELETE","lineNumber":356,"oldContent":"        // DO_SET_MODE (older) expects param1 = base mode (1 = custom mode enabled), param2 = custom mode"},{"type":"DELETE","lineNumber":357,"oldContent":"        // DO_CHANGE_MODE (176) commonly accepts param1 = custom mode index. We send both for compatibility."},{"type":"INSERT","lineNumber":353,"content":"        // For MAV_CMD_DO_SET_MODE in ArduPilot:"},{"type":"INSERT","lineNumber":354,"content":"        // param1: Base mode - should always be 1 (MAV_MODE_FLAG_CUSTOM_MODE_ENABLED)"},{"type":"INSERT","lineNumber":355,"content":"        // param2: Custom mode (0=Stabilize, 3=Auto, 5=Loiter, etc.)"},{"type":"INSERT","lineNumber":356,"content":"        // The armed status is handled automatically by ArduPilot, not via the base mode flags"},{"type":"DELETE","lineNumber":359,"oldContent":"        // First try DO_SET_MODE for backwards compatibility"},{"type":"DELETE","lineNumber":360,"oldContent":"        try {"},{"type":"DELETE","lineNumber":361,"oldContent":"            sendCommand("},{"type":"DELETE","lineNumber":362,"oldContent":"                MavCmd.DO_SET_MODE,"},{"type":"DELETE","lineNumber":363,"oldContent":"                1f,                   // param1: MAV_MODE_FLAG_CUSTOM_MODE_ENABLED"},{"type":"DELETE","lineNumber":364,"oldContent":"                customMode.toFloat(), // param2: custom mode"},{"type":"DELETE","lineNumber":365,"oldContent":"                0f,"},{"type":"DELETE","lineNumber":366,"oldContent":"                0f,"},{"type":"DELETE","lineNumber":367,"oldContent":"                0f,"},{"type":"INSERT","lineNumber":358,"content":"        sendCommand("},{"type":"INSERT","lineNumber":359,"content":"            MavCmd.DO_SET_MODE,"},{"type":"INSERT","lineNumber":360,"content":"            1f,                   // param1: MAV_MODE_FLAG_CUSTOM_MODE_ENABLED (always 1)"},{"type":"INSERT","lineNumber":361,"content":"            customMode.toFloat(), // param2: custom mode (0=Stabilize, 3=Auto, 5=Loiter, etc.)"},{"type":"INSERT","lineNumber":362,"content":"            0f,                   // param3: custom sub mode (usually 0)"},{"type":"INSERT","lineNumber":363,"content":"            0f,                   // param4: empty"},{"type":"INSERT","lineNumber":364,"content":"            0f,                   // param5: empty"},{"type":"INSERT","lineNumber":365,"content":"            0f,                   // param6: empty"},{"type":"INSERT","lineNumber":366,"content":"        )"},{"type":"DELETE","lineNumber":369,"oldContent":"                0f"},{"type":"DELETE","lineNumber":371,"oldContent":"            )"},{"type":"DELETE","lineNumber":373,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":375,"oldContent":"            Log.w(\"MavlinkRepo\", \"DO_SET_MODE send failed\", e)"},{"type":"DELETE","lineNumber":377,"oldContent":"        }"},{"type":"DELETE","lineNumber":378,"oldContent":""},{"type":"DELETE","lineNumber":380,"oldContent":"        // Also send MAV_CMD_DO_CHANGE_MODE (id=176) as a COMMAND_LONG using raw enum value"},{"type":"DELETE","lineNumber":382,"oldContent":"        try {"},{"type":"DELETE","lineNumber":384,"oldContent":"            val cmdChange = CommandLong("},{"type":"DELETE","lineNumber":386,"oldContent":"                targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":388,"oldContent":"                targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":390,"oldContent":"                // use numeric enum wrapper for command id 176"},{"type":"DELETE","lineNumber":392,"oldContent":"                command = MavEnumValue.of(176u),"},{"type":"DELETE","lineNumber":393,"oldContent":"        )"},{"type":"DELETE","lineNumber":394,"oldContent":"                confirmation = 0u,"},{"type":"DELETE","lineNumber":395,"oldContent":"    }"},{"type":"DELETE","lineNumber":396,"oldContent":"                param1 = customMode.toFloat(), // mode index"},{"type":"DELETE","lineNumber":397,"oldContent":"                param2 = 0f,"},{"type":"INSERT","lineNumber":379,"content":"                // use the proper enum for DO_CHANGE_MODE (MAV_CMD 176)"},{"type":"INSERT","lineNumber":380,"content":"                command = MavCmd.DO_CHANGE_MODE.wrap(),"},{"type":"DELETE","lineNumber":399,"oldContent":"                param3 = 0f,"},{"type":"DELETE","lineNumber":401,"oldContent":"                param4 = 0f,"},{"type":"DELETE","lineNumber":403,"oldContent":"                param5 = 0f,"},{"type":"DELETE","lineNumber":405,"oldContent":"                param6 = 0f,"},{"type":"DELETE","lineNumber":407,"oldContent":"                param7 = 0f"},{"type":"DELETE","lineNumber":409,"oldContent":"            )"},{"type":"DELETE","lineNumber":411,"oldContent":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, cmdChange)"},{"type":"DELETE","lineNumber":413,"oldContent":"            Log.i(\"MavlinkRepo\", \"Sent MAV_CMD_DO_CHANGE_MODE (176) param1=$customMode\")"},{"type":"DELETE","lineNumber":414,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":416,"oldContent":"            Log.w(\"MavlinkRepo\", \"MAV_CMD_DO_CHANGE_MODE send failed\", e)"},{"type":"DELETE","lineNumber":418,"oldContent":"            _lastFailure.value = e"},{"type":"DELETE","lineNumber":420,"oldContent":"        }"},{"type":"INSERT","lineNumber":407,"content":"            )"},{"type":"INSERT","lineNumber":418,"content":"                    try {"},{"type":"DELETE","lineNumber":449,"oldContent":"            )"},{"type":"DELETE","lineNumber":455,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":470,"oldContent":"                                }"},{"type":"INSERT","lineNumber":443,"content":"                                }"},{"type":"DELETE","lineNumber":513,"oldContent":"                                // ignore other messages"},{"type":"DELETE","lineNumber":515,"oldContent":"                            }"},{"type":"DELETE","lineNumber":517,"oldContent":"                        }"},{"type":"DELETE","lineNumber":519,"oldContent":"                    }"},{"type":"DELETE","lineNumber":523,"oldContent":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"INSERT","lineNumber":490,"content":"                                // ignore other messages"},{"type":"INSERT","lineNumber":491,"content":"                            }"},{"type":"INSERT","lineNumber":492,"content":"                        }"},{"type":"INSERT","lineNumber":493,"content":"                    }"},{"type":"DELETE","lineNumber":525,"oldContent":"            val firstRequestTimeout = 5000L // increase wait to allow FC more time to request"},{"type":"INSERT","lineNumber":496,"content":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"INSERT","lineNumber":497,"content":"            val firstRequestTimeout = 5000L // increase wait to allow FC more time to request"},{"type":"DELETE","lineNumber":529,"oldContent":"                Log.w(\"MavlinkRepo\", \"No MissionRequest received within $firstRequestTimeout ms; falling back to send all items\")"},{"type":"DELETE","lineNumber":532,"oldContent":"                // Send all items sequentially"},{"type":"INSERT","lineNumber":504,"content":"                Log.w(\"MavlinkRepo\", \"No MissionRequest received within $firstRequestTimeout ms; falling back to send all items\")"},{"type":"INSERT","lineNumber":505,"content":"                // Send all items sequentially"},{"type":"DELETE","lineNumber":539,"oldContent":"                        targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":511,"content":"                        targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":542,"oldContent":"                return false"},{"type":"DELETE","lineNumber":544,"oldContent":"            }"},{"type":"DELETE","lineNumber":546,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":548,"oldContent":"            Log.e(\"MavlinkRepo\", \"Mission upload failed\", e)"},{"type":"DELETE","lineNumber":550,"oldContent":"            _lastFailure.value = e"},{"type":"DELETE","lineNumber":552,"oldContent":"            return false"},{"type":"DELETE","lineNumber":554,"oldContent":"        }"},{"type":"DELETE","lineNumber":556,"oldContent":""},{"type":"DELETE","lineNumber":558,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":560,"oldContent":"    @Suppress(\"DEPRECATION\")"},{"type":"DELETE","lineNumber":562,"oldContent":"    suspend fun requestMissionAndLog(timeoutMs: Long = 5000) {"},{"type":"DELETE","lineNumber":564,"oldContent":"        if (!state.value.fcuDetected) {"},{"type":"DELETE","lineNumber":566,"oldContent":"            Log.w(\"MavlinkRepo\", \"FCU not detected; cannot request mission\")"},{"type":"DELETE","lineNumber":568,"oldContent":"            return"},{"type":"DELETE","lineNumber":571,"oldContent":"        }"},{"type":"DELETE","lineNumber":573,"oldContent":"            val expectedCountDeferred = CompletableDeferred<Int?>()"},{"type":"DELETE","lineNumber":575,"oldContent":""},{"type":"DELETE","lineNumber":577,"oldContent":"            // map of per-seq deferreds"},{"type":"DELETE","lineNumber":579,"oldContent":"            val perSeqMap = mutableMapOf<Int, CompletableDeferred<Unit>>()"},{"type":"DELETE","lineNumber":581,"oldContent":""},{"type":"DELETE","lineNumber":584,"oldContent":"            // collector: listen for count and items and ack"},{"type":"DELETE","lineNumber":586,"oldContent":"            val job = AppScope.launch {"},{"type":"DELETE","lineNumber":588,"oldContent":"                connection.mavFrame.collect { frame ->"},{"type":"DELETE","lineNumber":590,"oldContent":"                    when (val msg = frame.message) {"},{"type":"DELETE","lineNumber":594,"oldContent":"                        is MissionCount -> {"},{"type":"INSERT","lineNumber":542,"content":"                return false"},{"type":"INSERT","lineNumber":543,"content":"            }"},{"type":"INSERT","lineNumber":544,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":545,"content":"            Log.e(\"MavlinkRepo\", \"Mission upload failed\", e)"},{"type":"INSERT","lineNumber":546,"content":"            _lastFailure.value = e"},{"type":"INSERT","lineNumber":547,"content":"            return false"},{"type":"INSERT","lineNumber":548,"content":"        }"},{"type":"INSERT","lineNumber":549,"content":"    }"},{"type":"INSERT","lineNumber":550,"content":""},{"type":"INSERT","lineNumber":551,"content":"    // New helper: request mission from FCU and log items for debugging"},{"type":"INSERT","lineNumber":552,"content":"    @Suppress(\"DEPRECATION\")"},{"type":"INSERT","lineNumber":553,"content":"    suspend fun requestMissionAndLog(timeoutMs: Long = 5000) {"},{"type":"INSERT","lineNumber":554,"content":"        if (!state.value.fcuDetected) {"},{"type":"INSERT","lineNumber":555,"content":"            Log.w(\"MavlinkRepo\", \"FCU not detected; cannot request mission\")"},{"type":"INSERT","lineNumber":556,"content":"            return"},{"type":"INSERT","lineNumber":557,"content":"        }"},{"type":"INSERT","lineNumber":558,"content":"        try {"},{"type":"INSERT","lineNumber":559,"content":"            val received = mutableListOf<Pair<Int, String>>()"},{"type":"INSERT","lineNumber":560,"content":"            val expectedCountDeferred = CompletableDeferred<Int?>()"},{"type":"INSERT","lineNumber":561,"content":""},{"type":"INSERT","lineNumber":562,"content":"            // map of per-seq deferreds"},{"type":"INSERT","lineNumber":563,"content":"            val perSeqMap = mutableMapOf<Int, CompletableDeferred<Unit>>()"},{"type":"INSERT","lineNumber":564,"content":""},{"type":"INSERT","lineNumber":565,"content":"            // collector: listen for count and items and ack"},{"type":"INSERT","lineNumber":566,"content":"            val job = AppScope.launch {"},{"type":"INSERT","lineNumber":567,"content":"                connection.mavFrame.collect { frame ->"},{"type":"INSERT","lineNumber":568,"content":"                    when (val msg = frame.message) {"},{"type":"INSERT","lineNumber":569,"content":"                        is MissionCount -> {"},{"type":"DELETE","lineNumber":601,"oldContent":"        Log.e(\"MavlinkRepo\", \"Fallback start failed: vehicle did not switch to AUTO mode\")"},{"type":"DELETE","lineNumber":602,"oldContent":"            }"},{"type":"DELETE","lineNumber":603,"oldContent":"    }"},{"type":"INSERT","lineNumber":575,"content":"                            val lon = msg.y / 1e7"},{"type":"INSERT","lineNumber":576,"content":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_ITEM_INT seq=${msg.seq} lat=$lat lon=$lon alt=${msg.z}\")"},{"type":"INSERT","lineNumber":577,"content":"                            received.add(msg.seq.toInt() to \"INT: lat=$lat lon=$lon alt=${msg.z}\")"},{"type":"INSERT","lineNumber":578,"content":"                            perSeqMap[msg.seq.toInt()]?.let { d -> if (!d.isCompleted) d.complete(Unit) }"},{"type":"INSERT","lineNumber":579,"content":"                        }"},{"type":"INSERT","lineNumber":580,"content":"                        is MissionItem -> {"},{"type":"DELETE","lineNumber":612,"oldContent":"        try {"},{"type":"DELETE","lineNumber":613,"oldContent":"            val received = mutableListOf<Pair<Int, String>>()"},{"type":"INSERT","lineNumber":591,"content":"                }"},{"type":"INSERT","lineNumber":594,"content":"            // send request list"},{"type":"DELETE","lineNumber":620,"oldContent":"                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, reqItem)"},{"type":"DELETE","lineNumber":621,"oldContent":"                    val reqItem = MissionRequestInt(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = seq.toUShort())"},{"type":"INSERT","lineNumber":597,"content":"                connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, req)"},{"type":"INSERT","lineNumber":598,"content":"                Log.i(\"MavlinkRepo\", \"Sent MISSION_REQUEST_LIST to FCU\")"},{"type":"INSERT","lineNumber":599,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":600,"content":"                Log.e(\"MavlinkRepo\", \"Failed to send MISSION_REQUEST_LIST\", e)"},{"type":"INSERT","lineNumber":601,"content":"            }"},{"type":"DELETE","lineNumber":623,"oldContent":"        }"},{"type":"DELETE","lineNumber":624,"oldContent":"            if (state.value.mode?.contains(\"Auto\", ignoreCase = true) == true) {"},{"type":"DELETE","lineNumber":625,"oldContent":"        while (System.currentTimeMillis() - startWaitMode < modeWaitMs) {"},{"type":"DELETE","lineNumber":626,"oldContent":"                            received.add(msg.seq.toInt() to \"INT: lat=$lat lon=$lon alt=${msg.z}\")"},{"type":"DELETE","lineNumber":627,"oldContent":"                            perSeqMap[msg.seq.toInt()]?.let { d -> if (!d.isCompleted) d.complete(Unit) }"},{"type":"DELETE","lineNumber":628,"oldContent":"                        }"},{"type":"INSERT","lineNumber":603,"content":"            val expectedCount = withTimeoutOrNull(timeoutMs) { expectedCountDeferred.await() } ?: run {"},{"type":"INSERT","lineNumber":604,"content":"                Log.w(\"MavlinkRepo\", \"Did not receive MISSION_COUNT from FCU within timeout\")"},{"type":"INSERT","lineNumber":605,"content":"                job.cancel()"},{"type":"INSERT","lineNumber":606,"content":"                return"},{"type":"INSERT","lineNumber":607,"content":"            }"},{"type":"DELETE","lineNumber":630,"oldContent":"                        is MissionItem -> {"},{"type":"INSERT","lineNumber":609,"content":"            Log.i(\"MavlinkRepo\", \"Expecting $expectedCount mission items - requesting each item\")"},{"type":"INSERT","lineNumber":610,"content":""},{"type":"INSERT","lineNumber":611,"content":"            // For each seq, request the item and wait for it"},{"type":"INSERT","lineNumber":612,"content":"            for (seq in 0 until expectedCount) {"},{"type":"INSERT","lineNumber":613,"content":"                val seqDeferred = CompletableDeferred<Unit>()"},{"type":"INSERT","lineNumber":614,"content":"                perSeqMap[seq] = seqDeferred"},{"type":"INSERT","lineNumber":615,"content":"                try {"},{"type":"INSERT","lineNumber":616,"content":"                    val reqItem = MissionRequestInt(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = seq.toUShort())"},{"type":"INSERT","lineNumber":617,"content":"                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, reqItem)"},{"type":"INSERT","lineNumber":618,"content":"                    Log.d(\"MavlinkRepo\", \"Sent MISSION_REQUEST_INT for seq=$seq\")"},{"type":"INSERT","lineNumber":619,"content":"                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":635,"oldContent":"                }"},{"type":"DELETE","lineNumber":637,"oldContent":"            // send request list"},{"type":"DELETE","lineNumber":640,"oldContent":"                connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, req)"},{"type":"DELETE","lineNumber":646,"oldContent":"            val expectedCount = withTimeoutOrNull(timeoutMs) { expectedCountDeferred.await() } ?: run {"},{"type":"DELETE","lineNumber":648,"oldContent":"                Log.w(\"MavlinkRepo\", \"Did not receive MISSION_COUNT from FCU within timeout\")"},{"type":"DELETE","lineNumber":650,"oldContent":"                job.cancel()"},{"type":"DELETE","lineNumber":652,"oldContent":"                return"},{"type":"INSERT","lineNumber":635,"content":""},{"type":"DELETE","lineNumber":655,"oldContent":"            Log.i(\"MavlinkRepo\", \"Expecting $expectedCount mission items - requesting each item\")"},{"type":"DELETE","lineNumber":656,"oldContent":"                }"},{"type":"INSERT","lineNumber":638,"content":"            job.cancel()"},{"type":"DELETE","lineNumber":658,"oldContent":"            // For each seq, request the item and wait for it"},{"type":"DELETE","lineNumber":659,"oldContent":"            for (seq in 0 until expectedCount) {"},{"type":"DELETE","lineNumber":660,"oldContent":""},{"type":"DELETE","lineNumber":661,"oldContent":"                val seqDeferred = CompletableDeferred<Unit>()"},{"type":"DELETE","lineNumber":662,"oldContent":"                perSeqMap[seq] = seqDeferred"},{"type":"DELETE","lineNumber":663,"oldContent":"                try {"},{"type":"INSERT","lineNumber":640,"content":"            Log.i(\"MavlinkRepo\", \"Mission readback complete: expected=$expectedCount items=${received.size}\")"},{"type":"INSERT","lineNumber":641,"content":"            received.sortedBy { it.first }.forEach { (seq, desc) -> Log.i(\"MavlinkRepo\", \"Item #$seq -> $desc\") }"},{"type":"DELETE","lineNumber":665,"oldContent":"                    val reqItem = MissionRequestInt(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = seq.toUShort())"},{"type":"DELETE","lineNumber":667,"oldContent":"                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, reqItem)"},{"type":"DELETE","lineNumber":669,"oldContent":"                    Log.d(\"MavlinkRepo\", \"Sent MISSION_REQUEST_INT for seq=$seq\")"},{"type":"DELETE","lineNumber":670,"oldContent":"                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":645,"content":"    }"},{"type":"INSERT","lineNumber":646,"content":""},{"type":"INSERT","lineNumber":652,"content":"        }"},{"type":"DELETE","lineNumber":682,"oldContent":""},{"type":"DELETE","lineNumber":685,"oldContent":"                sendCommand(MavCmd.MISSION_START, first.toFloat(), last.toFloat())"},{"type":"DELETE","lineNumber":686,"oldContent":"            Log.i(\"MavlinkRepo\", \"Mission readback complete: expected=$expectedCount items=${received.size}\")"},{"type":"DELETE","lineNumber":687,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":688,"oldContent":"            received.sortedBy { it.first }.forEach { (seq, desc) -> Log.i(\"MavlinkRepo\", \"Item #$seq -> $desc\") }"},{"type":"DELETE","lineNumber":689,"oldContent":""},{"type":"DELETE","lineNumber":690,"oldContent":"}"},{"type":"DELETE","lineNumber":691,"oldContent":"    }"},{"type":"DELETE","lineNumber":692,"oldContent":"    }"},{"type":"DELETE","lineNumber":693,"oldContent":""},{"type":"DELETE","lineNumber":694,"oldContent":"        return false"},{"type":"DELETE","lineNumber":695,"oldContent":"        Log.e(\"MavlinkRepo\", \"Fallback start failed: vehicle did not switch to AUTO mode\")"},{"type":"DELETE","lineNumber":696,"oldContent":""},{"type":"DELETE","lineNumber":697,"oldContent":"        }"},{"type":"DELETE","lineNumber":698,"oldContent":"            delay(200)"},{"type":"DELETE","lineNumber":699,"oldContent":"        }"},{"type":"DELETE","lineNumber":700,"oldContent":"            }"},{"type":"DELETE","lineNumber":701,"oldContent":"                return true"},{"type":"DELETE","lineNumber":702,"oldContent":"                delay(500)"},{"type":"DELETE","lineNumber":703,"oldContent":"                // Give FC a moment to start the mission"},{"type":"DELETE","lineNumber":704,"oldContent":"                Log.i(\"MavlinkRepo\", \"Fallback: Vehicle switched to AUTO mode\")"},{"type":"INSERT","lineNumber":671,"content":"                sendCommand(MavCmd.MISSION_START, first.toFloat(), last.toFloat())"},{"type":"INSERT","lineNumber":672,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":673,"content":"                Log.e(\"MavlinkRepo\", \"Failed to send MISSION_START on attempt $attempt\", e)"},{"type":"INSERT","lineNumber":676,"content":"            // wait for COMMAND_ACK for MISSION_START"},{"type":"INSERT","lineNumber":677,"content":"            val ackDeferred = CompletableDeferred<UInt?>()"},{"type":"INSERT","lineNumber":678,"content":"            val job = AppScope.launch {"},{"type":"INSERT","lineNumber":679,"content":"                connection.mavFrame.collect { frame ->"},{"type":"INSERT","lineNumber":680,"content":"                    val msg = frame.message"},{"type":"INSERT","lineNumber":681,"content":"                    if (msg is CommandAck) {"},{"type":"INSERT","lineNumber":682,"content":"                        try {"},{"type":"INSERT","lineNumber":683,"content":"                            if (msg.command == MavCmd.MISSION_START.wrap()) {"},{"type":"INSERT","lineNumber":684,"content":"                                val resultVal = msg.result.value"},{"type":"INSERT","lineNumber":685,"content":"                                Log.i(\"MavlinkRepo\", \"Observed COMMAND_ACK for MISSION_START result=$resultVal on attempt $attempt\")"},{"type":"INSERT","lineNumber":686,"content":"                                if (!ackDeferred.isCompleted) ackDeferred.complete(resultVal)"},{"type":"INSERT","lineNumber":687,"content":"                            }"},{"type":"INSERT","lineNumber":688,"content":"                        } catch (t: Throwable) {"},{"type":"INSERT","lineNumber":689,"content":"                            Log.w(\"MavlinkRepo\", \"Error while processing COMMAND_ACK\", t)"},{"type":"INSERT","lineNumber":690,"content":"                        }"},{"type":"DELETE","lineNumber":720,"oldContent":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, setCurrent)"},{"type":"INSERT","lineNumber":694,"content":""},{"type":"DELETE","lineNumber":724,"oldContent":"                        } catch (t: Throwable) {"},{"type":"DELETE","lineNumber":725,"oldContent":"                            Log.w(\"MavlinkRepo\", \"Error while processing COMMAND_ACK\", t)"},{"type":"DELETE","lineNumber":726,"oldContent":"                        }"},{"type":"INSERT","lineNumber":698,"content":"            if (result != null) {"},{"type":"INSERT","lineNumber":699,"content":"                if (result == 0u) {"},{"type":"INSERT","lineNumber":700,"content":"                    Log.i(\"MavlinkRepo\", \"Mission start acknowledged by FCU on attempt $attempt\")"},{"type":"DELETE","lineNumber":731,"oldContent":"            if (result != null) {"},{"type":"DELETE","lineNumber":732,"oldContent":"                if (result == 0u) {"},{"type":"DELETE","lineNumber":734,"oldContent":"                    Log.i(\"MavlinkRepo\", \"Mission start acknowledged by FCU on attempt $attempt\")"},{"type":"DELETE","lineNumber":736,"oldContent":"}"},{"type":"DELETE","lineNumber":737,"oldContent":"        return false"},{"type":"DELETE","lineNumber":738,"oldContent":""},{"type":"DELETE","lineNumber":739,"oldContent":"            delay(200)"},{"type":"DELETE","lineNumber":740,"oldContent":"                return true"},{"type":"INSERT","lineNumber":707,"content":"            } else {"},{"type":"INSERT","lineNumber":708,"content":"                Log.w(\"MavlinkRepo\", \"No COMMAND_ACK for MISSION_START on attempt $attempt (timeout)\")"},{"type":"INSERT","lineNumber":709,"content":"                // try again after short delay"},{"type":"INSERT","lineNumber":710,"content":"                delay(500L)"},{"type":"INSERT","lineNumber":711,"content":"            }"},{"type":"DELETE","lineNumber":742,"oldContent":"                delay(500)"},{"type":"DELETE","lineNumber":744,"oldContent":"                // Give FC a moment to start the mission"},{"type":"DELETE","lineNumber":745,"oldContent":"                Log.i(\"MavlinkRepo\", \"Fallback: Vehicle switched to AUTO mode\")"},{"type":"INSERT","lineNumber":714,"content":"        Log.e(\"MavlinkRepo\", \"MISSION_START not acknowledged after $maxAttempts attempts - trying fallback start (set current + change mode to AUTO)\")"},{"type":"DELETE","lineNumber":747,"oldContent":"            if (state.value.mode?.contains(\"Auto\", ignoreCase = true) == true) {"},{"type":"DELETE","lineNumber":749,"oldContent":"        while (System.currentTimeMillis() - startWaitMode < modeWaitMs) {"},{"type":"DELETE","lineNumber":751,"oldContent":"        val startWaitMode = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":753,"oldContent":"        val modeWaitMs = 5000L"},{"type":"DELETE","lineNumber":755,"oldContent":"        // Wait for telemetry mode to reflect AUTO for a short period"},{"type":"DELETE","lineNumber":757,"oldContent":""},{"type":"DELETE","lineNumber":759,"oldContent":"        }"},{"type":"DELETE","lineNumber":761,"oldContent":"            Log.w(\"MavlinkRepo\", \"Fallback: Failed to send DO_SET_MODE\", e)"},{"type":"DELETE","lineNumber":762,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":763,"oldContent":"            changeMode(3u) // AUTO mode"},{"type":"INSERT","lineNumber":723,"content":"        }"},{"type":"INSERT","lineNumber":724,"content":""},{"type":"DELETE","lineNumber":765,"oldContent":"            Log.i(\"MavlinkRepo\", \"Fallback: Requesting mode change to AUTO via DO_SET_MODE\")"},{"type":"INSERT","lineNumber":727,"content":"            Log.i(\"MavlinkRepo\", \"Fallback: Requesting mode change to AUTO via DO_SET_MODE\")"},{"type":"INSERT","lineNumber":728,"content":"            changeMode(3u) // AUTO mode"},{"type":"INSERT","lineNumber":729,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":730,"content":"            Log.w(\"MavlinkRepo\", \"Fallback: Failed to send DO_SET_MODE\", e)"},{"type":"INSERT","lineNumber":731,"content":"        }"},{"type":"INSERT","lineNumber":732,"content":""},{"type":"INSERT","lineNumber":733,"content":"        // Wait for telemetry mode to reflect AUTO for a short period"},{"type":"INSERT","lineNumber":734,"content":"        val modeWaitMs = 5000L"},{"type":"INSERT","lineNumber":735,"content":"        val startWaitMode = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":736,"content":"        while (System.currentTimeMillis() - startWaitMode < modeWaitMs) {"},{"type":"INSERT","lineNumber":737,"content":"            if (state.value.mode?.contains(\"Auto\", ignoreCase = true) == true) {"},{"type":"INSERT","lineNumber":738,"content":"                Log.i(\"MavlinkRepo\", \"Fallback: Vehicle switched to AUTO mode\")"},{"type":"INSERT","lineNumber":739,"content":"                // Give FC a moment to start the mission"},{"type":"INSERT","lineNumber":740,"content":"                delay(500)"},{"type":"INSERT","lineNumber":741,"content":"                return true"},{"type":"INSERT","lineNumber":742,"content":"            }"},{"type":"INSERT","lineNumber":743,"content":"            delay(200)"},{"type":"INSERT","lineNumber":744,"content":"        }"},{"type":"INSERT","lineNumber":745,"content":""},{"type":"INSERT","lineNumber":746,"content":"        Log.e(\"MavlinkRepo\", \"Fallback start failed: vehicle did not switch to AUTO mode\")"},{"type":"INSERT","lineNumber":747,"content":"        return false"},{"type":"INSERT","lineNumber":748,"content":"    }"},{"type":"INSERT","lineNumber":749,"content":"}"},{"type":"INSERT","lineNumber":750,"content":""}]},{"timestamp":1758012670013,"changes":[{"type":"MODIFY","lineNumber":43,"content":"    val lastFailure: StateFlow<Throwable?> = _lastFailure.asStateFlow()","oldContent":"    val lastFailure: StateFlow<Throwable?> = _lastFailure.asStateFlow()"},{"type":"MODIFY","lineNumber":46,"content":"    private val connection = TcpClientMavConnection(host, port, CommonDialect).asCoroutine()","oldContent":"                    }"},{"type":"MODIFY","lineNumber":76,"content":"                    is StreamState.Inactive -> {","oldContent":"                    is StreamState.Inactive -> {"},{"type":"MODIFY","lineNumber":80,"content":"                            reconnect(this)","oldContent":"                            reconnect(this)"},{"type":"MODIFY","lineNumber":86,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":90,"content":"                type = MavType.GCS.wrap(),","oldContent":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":101,"content":"                        Log.e(\"MavlinkRepo\", \"Failed to send heartbeat\", e)"},{"type":"DELETE","lineNumber":102,"oldContent":"            .shareIn(scope, SharingStarted.Eagerly, replay = 0)"},{"type":"MODIFY","lineNumber":110,"content":"        val mavFrameStream = connection.mavFrame","oldContent":"        val mavFrameStream = connection.mavFrame"},{"type":"INSERT","lineNumber":112,"content":""},{"type":"DELETE","lineNumber":113,"oldContent":"            mavFrameStream"},{"type":"DELETE","lineNumber":114,"oldContent":"                .collect {"},{"type":"DELETE","lineNumber":115,"oldContent":"                Log.d(\"MavlinkRepo\", \"Frame: ${it.message.javaClass.simpleName} (sysId=${it.systemId}, compId=${it.componentId})\")"},{"type":"INSERT","lineNumber":114,"content":"        scope.launch {"},{"type":"INSERT","lineNumber":116,"content":"                Log.d(\"MavlinkRepo\", \"Frame: ${it.message.javaClass.simpleName} (sysId=${it.systemId}, compId=${it.componentId})\")"},{"type":"MODIFY","lineNumber":128,"content":"                        Log.i(\"MavlinkRepo\", \"FCU detected sysId=$fcuSystemId compId=$fcuComponentId\")","oldContent":"                        Log.i(\"MavlinkRepo\", \"FCU detected sysId=$fcuSystemId compId=$fcuComponentId\")"},{"type":"MODIFY","lineNumber":147,"content":"                                )","oldContent":"                                )"},{"type":"MODIFY","lineNumber":151,"content":"                                    Log.e(\"MavlinkRepo\", \"Failed to send SET_MESSAGE_INTERVAL\", e)","oldContent":"                                    Log.e(\"MavlinkRepo\", \"Failed to send SET_MESSAGE_INTERVAL\", e)"},{"type":"MODIFY","lineNumber":180,"content":"                    } catch (t: Throwable) {","oldContent":"                .filterIsInstance<GlobalPositionInt>()"},{"type":"MODIFY","lineNumber":185,"content":"","oldContent":"                    _state.update {"},{"type":"INSERT","lineNumber":188,"content":"        // VFR_HUD"},{"type":"DELETE","lineNumber":189,"oldContent":"                            altitudeMsl = altAMSLm,"},{"type":"MODIFY","lineNumber":200,"content":"                        )","oldContent":"                        )"},{"type":"MODIFY","lineNumber":210,"content":"                .filterIsInstance<GlobalPositionInt>()","oldContent":"                .filterIsInstance<GlobalPositionInt>()"},{"type":"MODIFY","lineNumber":230,"content":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }","oldContent":"                        16u -> \"Pos Hold\""},{"type":"INSERT","lineNumber":234,"content":"                    val currentA = if (b.currentBattery.toInt() == -1) null else b.currentBattery / 100f"},{"type":"DELETE","lineNumber":235,"oldContent":"                        20u -> \"Guided_NoGPS\""},{"type":"MODIFY","lineNumber":244,"content":"                .collect{ hb->","oldContent":"                .collect{ hb->"},{"type":"MODIFY","lineNumber":264,"content":"                        20u -> \"Guided_NoGPS\"","oldContent":"                        20u -> \"Guided_NoGPS\""},{"type":"INSERT","lineNumber":269,"content":"                        25u -> \"SystemID\""},{"type":"DELETE","lineNumber":270,"oldContent":"                .map { it.message }"},{"type":"MODIFY","lineNumber":305,"content":"                }","oldContent":"                }"},{"type":"MODIFY","lineNumber":323,"content":"        try {","oldContent":"        try {"},{"type":"MODIFY","lineNumber":327,"content":"            Log.d(\"MavlinkRepo\", \"Sent COMMAND_LONG: cmd=${command} p1=$param1 p2=$param2 p3=$param3 p4=$param4 p5=$param5 p6=$param6 p7=$param7\")","oldContent":"            Log.d(\"MavlinkRepo\", \"Sent COMMAND_LONG: cmd=${command} p1=$param1 p2=$param2 p3=$param3 p4=$param4 p5=$param5 p6=$param6 p7=$param7\")"},{"type":"MODIFY","lineNumber":349,"content":"        )","oldContent":"        )"},{"type":"DELETE","lineNumber":352,"oldContent":"        // For MAV_CMD_DO_SET_MODE in ArduPilot:"},{"type":"DELETE","lineNumber":354,"oldContent":"        // param1: Base mode - should always be 1 (MAV_MODE_FLAG_CUSTOM_MODE_ENABLED)"},{"type":"DELETE","lineNumber":355,"oldContent":"        // param2: Custom mode (0=Stabilize, 3=Auto, 5=Loiter, etc.)"},{"type":"DELETE","lineNumber":356,"oldContent":"        // The armed status is handled automatically by ArduPilot, not via the base mode flags"},{"type":"DELETE","lineNumber":357,"oldContent":"        sendCommand("},{"type":"INSERT","lineNumber":353,"content":"        // Use the recommended MAV_CMD to change flight mode (MAV_CMD_DO_CHANGE_MODE, id=176)"},{"type":"INSERT","lineNumber":354,"content":"        // and also send DO_SET_MODE for broader compatibility across firmwares."},{"type":"INSERT","lineNumber":355,"content":"        // DO_SET_MODE (older) expects param1 = base mode (1 = custom mode enabled), param2 = custom mode"},{"type":"INSERT","lineNumber":356,"content":"        // DO_CHANGE_MODE (176) commonly accepts param1 = custom mode index. We send both for compatibility."},{"type":"DELETE","lineNumber":359,"oldContent":"            MavCmd.DO_SET_MODE,"},{"type":"DELETE","lineNumber":360,"oldContent":"            1f,                   // param1: MAV_MODE_FLAG_CUSTOM_MODE_ENABLED (always 1)"},{"type":"DELETE","lineNumber":361,"oldContent":"            customMode.toFloat(), // param2: custom mode (0=Stabilize, 3=Auto, 5=Loiter, etc.)"},{"type":"DELETE","lineNumber":362,"oldContent":"            0f,                   // param3: custom sub mode (usually 0)"},{"type":"DELETE","lineNumber":363,"oldContent":"            0f,                   // param4: empty"},{"type":"DELETE","lineNumber":364,"oldContent":"            0f,                   // param5: empty"},{"type":"DELETE","lineNumber":365,"oldContent":"            0f,                   // param6: empty"},{"type":"DELETE","lineNumber":366,"oldContent":"        )"},{"type":"INSERT","lineNumber":358,"content":"        // First try DO_SET_MODE for backwards compatibility"},{"type":"INSERT","lineNumber":359,"content":"        try {"},{"type":"INSERT","lineNumber":360,"content":"            sendCommand("},{"type":"INSERT","lineNumber":361,"content":"                MavCmd.DO_SET_MODE,"},{"type":"INSERT","lineNumber":362,"content":"                1f,                   // param1: MAV_MODE_FLAG_CUSTOM_MODE_ENABLED"},{"type":"INSERT","lineNumber":363,"content":"                customMode.toFloat(), // param2: custom mode"},{"type":"INSERT","lineNumber":364,"content":"                0f,"},{"type":"INSERT","lineNumber":365,"content":"                0f,"},{"type":"INSERT","lineNumber":366,"content":"                0f,"},{"type":"INSERT","lineNumber":367,"content":"                0f"},{"type":"INSERT","lineNumber":368,"content":"            )"},{"type":"INSERT","lineNumber":369,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":370,"content":"            Log.w(\"MavlinkRepo\", \"DO_SET_MODE send failed\", e)"},{"type":"INSERT","lineNumber":371,"content":"        }"},{"type":"INSERT","lineNumber":372,"content":""},{"type":"INSERT","lineNumber":373,"content":"        // Also send MAV_CMD_DO_CHANGE_MODE (id=176) as a COMMAND_LONG using MavCmd enum wrapper"},{"type":"INSERT","lineNumber":374,"content":"        try {"},{"type":"INSERT","lineNumber":375,"content":"            val cmdChange = CommandLong("},{"type":"INSERT","lineNumber":376,"content":"                targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":377,"content":"                targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":378,"content":"                command = MavCmd.DO_CHANGE_MODE.wrap(),"},{"type":"INSERT","lineNumber":379,"content":"                confirmation = 0u,"},{"type":"INSERT","lineNumber":380,"content":"                param1 = customMode.toFloat(), // mode index"},{"type":"INSERT","lineNumber":381,"content":"                param2 = 0f,"},{"type":"INSERT","lineNumber":382,"content":"                param3 = 0f,"},{"type":"INSERT","lineNumber":383,"content":"                param4 = 0f,"},{"type":"INSERT","lineNumber":384,"content":"                param5 = 0f,"},{"type":"INSERT","lineNumber":385,"content":"                param6 = 0f,"},{"type":"INSERT","lineNumber":386,"content":"                param7 = 0f"},{"type":"INSERT","lineNumber":387,"content":"            )"},{"type":"INSERT","lineNumber":388,"content":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, cmdChange)"},{"type":"INSERT","lineNumber":389,"content":"            Log.i(\"MavlinkRepo\", \"Sent MAV_CMD_DO_CHANGE_MODE (176) param1=$customMode\")"},{"type":"INSERT","lineNumber":390,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":391,"content":"            Log.w(\"MavlinkRepo\", \"MAV_CMD_DO_CHANGE_MODE send failed\", e)"},{"type":"INSERT","lineNumber":392,"content":"            _lastFailure.value = e"},{"type":"INSERT","lineNumber":393,"content":"        }"},{"type":"DELETE","lineNumber":372,"oldContent":"                // use the proper enum for DO_CHANGE_MODE (MAV_CMD 176)"},{"type":"DELETE","lineNumber":374,"oldContent":"                command = MavCmd.DO_CHANGE_MODE.wrap(),"},{"type":"INSERT","lineNumber":406,"content":"        )"},{"type":"INSERT","lineNumber":407,"content":"    }"},{"type":"DELETE","lineNumber":386,"oldContent":"            )"},{"type":"DELETE","lineNumber":392,"oldContent":"                    try {"},{"type":"INSERT","lineNumber":434,"content":"            )"},{"type":"DELETE","lineNumber":416,"oldContent":"                                }"},{"type":"INSERT","lineNumber":445,"content":"                    try {"},{"type":"INSERT","lineNumber":470,"content":"                                }"},{"type":"DELETE","lineNumber":461,"oldContent":"                                // ignore other messages"},{"type":"DELETE","lineNumber":463,"oldContent":"                            }"},{"type":"DELETE","lineNumber":465,"oldContent":"                        }"},{"type":"DELETE","lineNumber":467,"oldContent":"                    }"},{"type":"DELETE","lineNumber":471,"oldContent":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"DELETE","lineNumber":473,"oldContent":"            val firstRequestTimeout = 5000L // increase wait to allow FC more time to request"},{"type":"DELETE","lineNumber":481,"oldContent":"                Log.w(\"MavlinkRepo\", \"No MissionRequest received within $firstRequestTimeout ms; falling back to send all items\")"},{"type":"DELETE","lineNumber":483,"oldContent":"                // Send all items sequentially"},{"type":"DELETE","lineNumber":490,"oldContent":"                        targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":517,"content":"                                // ignore other messages"},{"type":"INSERT","lineNumber":518,"content":"                            }"},{"type":"INSERT","lineNumber":519,"content":"                        }"},{"type":"INSERT","lineNumber":520,"content":"                    }"},{"type":"INSERT","lineNumber":523,"content":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"INSERT","lineNumber":524,"content":"            val firstRequestTimeout = 5000L // increase wait to allow FC more time to request"},{"type":"INSERT","lineNumber":531,"content":"                Log.w(\"MavlinkRepo\", \"No MissionRequest received within $firstRequestTimeout ms; falling back to send all items\")"},{"type":"INSERT","lineNumber":532,"content":"                // Send all items sequentially"},{"type":"INSERT","lineNumber":538,"content":"                        targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":540,"content":"                    )"},{"type":"INSERT","lineNumber":541,"content":"                    try {"},{"type":"INSERT","lineNumber":542,"content":"                        // log full item contents for diagnostics"},{"type":"INSERT","lineNumber":543,"content":"                        Log.d(\"MavlinkRepo\", \"Sending fallback item seq=$seq cmd=${missionItem.command} frame=${missionItem.frame} x=${missionItem.x} y=${missionItem.y} z=${missionItem.z}\")"},{"type":"INSERT","lineNumber":544,"content":"                         connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"INSERT","lineNumber":545,"content":"                         sentSeqs.add(seq)"},{"type":"INSERT","lineNumber":546,"content":"                         Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_ITEM_INT seq=$seq\")"},{"type":"INSERT","lineNumber":547,"content":"                         // give FC a bit more time to process unsolicited item and possibly request next"},{"type":"INSERT","lineNumber":548,"content":"                         delay(300)"},{"type":"INSERT","lineNumber":549,"content":"                     } catch (e: Exception) {"},{"type":"INSERT","lineNumber":550,"content":"                         Log.e(\"MavlinkRepo\", \"Fallback: Failed to send mission item seq=$seq\", e)"},{"type":"INSERT","lineNumber":551,"content":"                     }"},{"type":"INSERT","lineNumber":552,"content":"                 }"},{"type":"INSERT","lineNumber":553,"content":"             }"},{"type":"INSERT","lineNumber":554,"content":""},{"type":"INSERT","lineNumber":555,"content":"            // Wait for ACK with timeout"},{"type":"INSERT","lineNumber":556,"content":"            val ackReceived = withTimeoutOrNull(timeoutMs) {"},{"type":"INSERT","lineNumber":557,"content":"                ackDeferred.await()"},{"type":"INSERT","lineNumber":558,"content":"            } ?: false"},{"type":"INSERT","lineNumber":559,"content":""},{"type":"INSERT","lineNumber":560,"content":"            // cancel collector and resend jobs"},{"type":"INSERT","lineNumber":561,"content":"            job.cancel()"},{"type":"INSERT","lineNumber":562,"content":"            resendJob.cancel()"},{"type":"INSERT","lineNumber":563,"content":""},{"type":"INSERT","lineNumber":564,"content":"            if (ackReceived) {"},{"type":"INSERT","lineNumber":565,"content":"                Log.i(\"MavlinkRepo\", \"Mission upload acknowledged by FCU\")"},{"type":"INSERT","lineNumber":566,"content":"                return true"},{"type":"INSERT","lineNumber":567,"content":"            } else {"},{"type":"INSERT","lineNumber":568,"content":"                Log.e(\"MavlinkRepo\", \"Mission upload timed out waiting for ACK\")"},{"type":"DELETE","lineNumber":515,"oldContent":"                    )"},{"type":"DELETE","lineNumber":518,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":521,"oldContent":"                        // log full item contents for diagnostics"},{"type":"DELETE","lineNumber":524,"oldContent":"                        Log.d(\"MavlinkRepo\", \"Sending fallback item seq=$seq cmd=${missionItem.command} frame=${missionItem.frame} x=${missionItem.x} y=${missionItem.y} z=${missionItem.z}\")"},{"type":"DELETE","lineNumber":527,"oldContent":"                         connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"DELETE","lineNumber":530,"oldContent":"                         sentSeqs.add(seq)"},{"type":"DELETE","lineNumber":533,"oldContent":"                         Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_ITEM_INT seq=$seq\")"},{"type":"DELETE","lineNumber":536,"oldContent":"                         // give FC a bit more time to process unsolicited item and possibly request next"},{"type":"DELETE","lineNumber":539,"oldContent":"                         delay(300)"},{"type":"DELETE","lineNumber":542,"oldContent":"                     } catch (e: Exception) {"},{"type":"DELETE","lineNumber":545,"oldContent":"                         Log.e(\"MavlinkRepo\", \"Fallback: Failed to send mission item seq=$seq\", e)"},{"type":"DELETE","lineNumber":548,"oldContent":"                     }"},{"type":"DELETE","lineNumber":551,"oldContent":"                 }"},{"type":"DELETE","lineNumber":554,"oldContent":"             }"},{"type":"DELETE","lineNumber":555,"oldContent":""},{"type":"DELETE","lineNumber":556,"oldContent":"            // Wait for ACK with timeout"},{"type":"DELETE","lineNumber":557,"oldContent":"            val ackReceived = withTimeoutOrNull(timeoutMs) {"},{"type":"INSERT","lineNumber":597,"content":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_COUNT=${msg.count} from sys=${frame.systemId}\")"},{"type":"INSERT","lineNumber":598,"content":"                            expectedCountDeferred.complete(msg.count.toInt())"},{"type":"INSERT","lineNumber":599,"content":"                        }"},{"type":"INSERT","lineNumber":600,"content":"                        is MissionItemInt -> {"},{"type":"INSERT","lineNumber":601,"content":"                            val lat = msg.x / 1e7"},{"type":"DELETE","lineNumber":560,"oldContent":"                ackDeferred.await()"},{"type":"DELETE","lineNumber":563,"oldContent":"            } ?: false"},{"type":"DELETE","lineNumber":566,"oldContent":""},{"type":"DELETE","lineNumber":567,"oldContent":"            // cancel collector and resend jobs"},{"type":"DELETE","lineNumber":568,"oldContent":"            job.cancel()"},{"type":"DELETE","lineNumber":569,"oldContent":"            resendJob.cancel()"},{"type":"DELETE","lineNumber":570,"oldContent":""},{"type":"DELETE","lineNumber":571,"oldContent":"            if (ackReceived) {"},{"type":"INSERT","lineNumber":608,"content":"                            // MissionItem is deprecated; log for diagnostics"},{"type":"INSERT","lineNumber":609,"content":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_ITEM seq=${msg.seq} x=${msg.x} y=${msg.y} z=${msg.z}\")"},{"type":"INSERT","lineNumber":610,"content":"                            received.add(msg.seq.toInt() to \"FLT: x=${msg.x} y=${msg.y} z=${msg.z}\")"},{"type":"INSERT","lineNumber":611,"content":"                            perSeqMap[msg.seq.toInt()]?.let { d -> if (!d.isCompleted) d.complete(Unit) }"},{"type":"INSERT","lineNumber":612,"content":"                        }"},{"type":"INSERT","lineNumber":613,"content":"                        is MissionAck -> {"},{"type":"INSERT","lineNumber":614,"content":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_ACK type=${msg.type}\")"},{"type":"INSERT","lineNumber":615,"content":"                        }"},{"type":"INSERT","lineNumber":616,"content":"                        else -> {}"},{"type":"INSERT","lineNumber":617,"content":"                    }"},{"type":"DELETE","lineNumber":573,"oldContent":"                Log.i(\"MavlinkRepo\", \"Mission upload acknowledged by FCU\")"},{"type":"DELETE","lineNumber":574,"oldContent":"                return true"},{"type":"DELETE","lineNumber":575,"oldContent":"            } else {"},{"type":"INSERT","lineNumber":619,"content":"            }"},{"type":"INSERT","lineNumber":620,"content":""},{"type":"DELETE","lineNumber":577,"oldContent":"                Log.e(\"MavlinkRepo\", \"Mission upload timed out waiting for ACK\")"},{"type":"DELETE","lineNumber":578,"oldContent":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_COUNT=${msg.count} from sys=${frame.systemId}\")"},{"type":"INSERT","lineNumber":622,"content":"            try {"},{"type":"INSERT","lineNumber":623,"content":"                val req = MissionRequestList(targetSystem = fcuSystemId, targetComponent = fcuComponentId)"},{"type":"DELETE","lineNumber":580,"oldContent":"                            expectedCountDeferred.complete(msg.count.toInt())"},{"type":"DELETE","lineNumber":582,"oldContent":"                        }"},{"type":"DELETE","lineNumber":584,"oldContent":"                        is MissionItemInt -> {"},{"type":"DELETE","lineNumber":586,"oldContent":"                            val lat = msg.x / 1e7"},{"type":"INSERT","lineNumber":629,"content":""},{"type":"DELETE","lineNumber":590,"oldContent":"                            // MissionItem is deprecated; log for diagnostics"},{"type":"DELETE","lineNumber":592,"oldContent":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_ITEM seq=${msg.seq} x=${msg.x} y=${msg.y} z=${msg.z}\")"},{"type":"DELETE","lineNumber":594,"oldContent":"                            received.add(msg.seq.toInt() to \"FLT: x=${msg.x} y=${msg.y} z=${msg.z}\")"},{"type":"DELETE","lineNumber":596,"oldContent":"                            perSeqMap[msg.seq.toInt()]?.let { d -> if (!d.isCompleted) d.complete(Unit) }"},{"type":"DELETE","lineNumber":597,"oldContent":"                        }"},{"type":"INSERT","lineNumber":635,"content":""},{"type":"DELETE","lineNumber":599,"oldContent":"                        is MissionAck -> {"},{"type":"DELETE","lineNumber":601,"oldContent":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_ACK type=${msg.type}\")"},{"type":"DELETE","lineNumber":603,"oldContent":"                        }"},{"type":"DELETE","lineNumber":607,"oldContent":"                        else -> {}"},{"type":"DELETE","lineNumber":609,"oldContent":"                    }"},{"type":"DELETE","lineNumber":611,"oldContent":"            }"},{"type":"DELETE","lineNumber":613,"oldContent":""},{"type":"DELETE","lineNumber":615,"oldContent":"            try {"},{"type":"DELETE","lineNumber":617,"oldContent":"                val req = MissionRequestList(targetSystem = fcuSystemId, targetComponent = fcuComponentId)"},{"type":"DELETE","lineNumber":618,"oldContent":"            val result = withTimeoutOrNull(perAttemptTimeout) { ackDeferred.await() }"},{"type":"DELETE","lineNumber":619,"oldContent":"            if (state.value.mode?.contains(\"Auto\", ignoreCase = true) == true) {"},{"type":"DELETE","lineNumber":624,"oldContent":""},{"type":"DELETE","lineNumber":626,"oldContent":"            job.cancel()"},{"type":"DELETE","lineNumber":629,"oldContent":"            Log.i(\"MavlinkRepo\", \"Mission readback complete: expected=$expectedCount items=${received.size}\")"},{"type":"DELETE","lineNumber":630,"oldContent":"            received.sortedBy { it.first }.forEach { (seq, desc) -> Log.i(\"MavlinkRepo\", \"Item #$seq -> $desc\") }"},{"type":"DELETE","lineNumber":634,"oldContent":"    }"},{"type":"DELETE","lineNumber":635,"oldContent":"    }"},{"type":"INSERT","lineNumber":657,"content":"                    Log.w(\"MavlinkRepo\", \"Did not receive item for seq=$seq within timeout\")"},{"type":"DELETE","lineNumber":638,"oldContent":""},{"type":"DELETE","lineNumber":639,"oldContent":"            Log.w(\"MavlinkRepo\", \"Fallback: Failed to send DO_SET_MODE\", e)"},{"type":"INSERT","lineNumber":660,"content":"                perSeqMap.remove(seq)"},{"type":"DELETE","lineNumber":641,"oldContent":"        }"},{"type":"INSERT","lineNumber":662,"content":""},{"type":"INSERT","lineNumber":665,"content":"            job.cancel()"},{"type":"INSERT","lineNumber":667,"content":"            Log.i(\"MavlinkRepo\", \"Mission readback complete: expected=$expectedCount items=${received.size}\")"},{"type":"INSERT","lineNumber":668,"content":"            received.sortedBy { it.first }.forEach { (seq, desc) -> Log.i(\"MavlinkRepo\", \"Item #$seq -> $desc\") }"},{"type":"DELETE","lineNumber":648,"oldContent":"                sendCommand(MavCmd.MISSION_START, first.toFloat(), last.toFloat())"},{"type":"INSERT","lineNumber":672,"content":"    }"},{"type":"INSERT","lineNumber":673,"content":""},{"type":"DELETE","lineNumber":650,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":652,"oldContent":"                Log.e(\"MavlinkRepo\", \"Failed to send MISSION_START on attempt $attempt\", e)"},{"type":"DELETE","lineNumber":656,"oldContent":"            // wait for COMMAND_ACK for MISSION_START"},{"type":"INSERT","lineNumber":679,"content":"        }"},{"type":"DELETE","lineNumber":658,"oldContent":"            val ackDeferred = CompletableDeferred<UInt?>()"},{"type":"DELETE","lineNumber":660,"oldContent":"            val job = AppScope.launch {"},{"type":"DELETE","lineNumber":662,"oldContent":"                connection.mavFrame.collect { frame ->"},{"type":"DELETE","lineNumber":664,"oldContent":"                    val msg = frame.message"},{"type":"DELETE","lineNumber":666,"oldContent":"                    if (msg is CommandAck) {"},{"type":"INSERT","lineNumber":686,"content":"            // small delay to allow FC to process"},{"type":"INSERT","lineNumber":687,"content":"            delay(200)"},{"type":"INSERT","lineNumber":688,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":689,"content":"            Log.w(\"MavlinkRepo\", \"Failed to send MISSION_SET_CURRENT\", e)"},{"type":"INSERT","lineNumber":690,"content":"        }"},{"type":"INSERT","lineNumber":691,"content":""},{"type":"INSERT","lineNumber":692,"content":"        val maxAttempts = 3"},{"type":"INSERT","lineNumber":693,"content":"        val perAttemptTimeout = 1500L"},{"type":"INSERT","lineNumber":694,"content":""},{"type":"INSERT","lineNumber":695,"content":"        for (attempt in 1..maxAttempts) {"},{"type":"INSERT","lineNumber":696,"content":"            try {"},{"type":"INSERT","lineNumber":697,"content":"                Log.i(\"MavlinkRepo\", \"Attempt $attempt: Sending MISSION_START first=$first last=$last to sys=$fcuSystemId comp=$fcuComponentId\")"},{"type":"INSERT","lineNumber":698,"content":"                sendCommand(MavCmd.MISSION_START, first.toFloat(), last.toFloat())"},{"type":"INSERT","lineNumber":699,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":700,"content":"                Log.e(\"MavlinkRepo\", \"Failed to send MISSION_START on attempt $attempt\", e)"},{"type":"INSERT","lineNumber":701,"content":"            }"},{"type":"INSERT","lineNumber":702,"content":""},{"type":"INSERT","lineNumber":703,"content":"            // wait for COMMAND_ACK for MISSION_START"},{"type":"INSERT","lineNumber":704,"content":"            val ackDeferred = CompletableDeferred<UInt?>()"},{"type":"INSERT","lineNumber":705,"content":"            val job = AppScope.launch {"},{"type":"INSERT","lineNumber":706,"content":"                connection.mavFrame.collect { frame ->"},{"type":"INSERT","lineNumber":707,"content":"                    val msg = frame.message"},{"type":"INSERT","lineNumber":708,"content":"                    if (msg is CommandAck) {"},{"type":"DELETE","lineNumber":670,"oldContent":"            // small delay to allow FC to process"},{"type":"DELETE","lineNumber":672,"oldContent":"            delay(200)"},{"type":"INSERT","lineNumber":718,"content":"                    }"},{"type":"INSERT","lineNumber":719,"content":"                }"},{"type":"INSERT","lineNumber":720,"content":"            }"},{"type":"INSERT","lineNumber":722,"content":"            val result = withTimeoutOrNull(perAttemptTimeout) { ackDeferred.await() }"},{"type":"INSERT","lineNumber":723,"content":"            job.cancel()"},{"type":"INSERT","lineNumber":724,"content":""},{"type":"DELETE","lineNumber":683,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":684,"oldContent":"            Log.w(\"MavlinkRepo\", \"Failed to send MISSION_SET_CURRENT\", e)"},{"type":"INSERT","lineNumber":728,"content":"                    return true"},{"type":"INSERT","lineNumber":729,"content":"                } else {"},{"type":"INSERT","lineNumber":730,"content":"                    Log.e(\"MavlinkRepo\", \"Mission start rejected by FCU on attempt $attempt with result=$result\")"},{"type":"INSERT","lineNumber":731,"content":"                    // Don't retry on a negative ACK; break and return failure"},{"type":"INSERT","lineNumber":732,"content":"                    return false"},{"type":"INSERT","lineNumber":733,"content":"                }"},{"type":"DELETE","lineNumber":686,"oldContent":"        }"},{"type":"DELETE","lineNumber":688,"oldContent":""},{"type":"DELETE","lineNumber":690,"oldContent":"        val maxAttempts = 3"},{"type":"DELETE","lineNumber":692,"oldContent":"        val perAttemptTimeout = 1500L"},{"type":"INSERT","lineNumber":739,"content":"        }"},{"type":"DELETE","lineNumber":695,"oldContent":"        for (attempt in 1..maxAttempts) {"},{"type":"DELETE","lineNumber":696,"oldContent":"            try {"},{"type":"DELETE","lineNumber":698,"oldContent":"                Log.i(\"MavlinkRepo\", \"Attempt $attempt: Sending MISSION_START first=$first last=$last to sys=$fcuSystemId comp=$fcuComponentId\")"},{"type":"DELETE","lineNumber":699,"oldContent":"            }"},{"type":"DELETE","lineNumber":701,"oldContent":"                    }"},{"type":"DELETE","lineNumber":702,"oldContent":"                }"},{"type":"DELETE","lineNumber":703,"oldContent":"            }"},{"type":"DELETE","lineNumber":704,"oldContent":"            val result = withTimeoutOrNull(perAttemptTimeout) { ackDeferred.await() }"},{"type":"DELETE","lineNumber":705,"oldContent":"            job.cancel()"},{"type":"INSERT","lineNumber":743,"content":"        // Fallback approach: set mission current and change mode to AUTO (many FCs start mission when switched to AUTO)"},{"type":"INSERT","lineNumber":744,"content":"        try {"},{"type":"INSERT","lineNumber":745,"content":"            val setCurrent = MissionSetCurrent(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = first.toUShort())"},{"type":"INSERT","lineNumber":746,"content":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, setCurrent)"},{"type":"INSERT","lineNumber":747,"content":"            Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_SET_CURRENT seq=$first\")"},{"type":"INSERT","lineNumber":748,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":749,"content":"            Log.w(\"MavlinkRepo\", \"Fallback: Failed to send MISSION_SET_CURRENT\", e)"},{"type":"DELETE","lineNumber":708,"oldContent":""},{"type":"INSERT","lineNumber":752,"content":"        // Request mode change to AUTO using DO_SET_MODE"},{"type":"INSERT","lineNumber":753,"content":"        try {"},{"type":"DELETE","lineNumber":710,"oldContent":"                    return true"},{"type":"DELETE","lineNumber":712,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":714,"oldContent":"                    Log.e(\"MavlinkRepo\", \"Mission start rejected by FCU on attempt $attempt with result=$result\")"},{"type":"DELETE","lineNumber":716,"oldContent":""},{"type":"DELETE","lineNumber":720,"oldContent":"    }"},{"type":"DELETE","lineNumber":723,"oldContent":"        Log.e(\"MavlinkRepo\", \"Fallback start failed: vehicle did not switch to AUTO mode\")"},{"type":"DELETE","lineNumber":730,"oldContent":"        }"},{"type":"DELETE","lineNumber":733,"oldContent":""},{"type":"DELETE","lineNumber":737,"oldContent":""},{"type":"DELETE","lineNumber":740,"oldContent":"        // Fallback approach: set mission current and change mode to AUTO (many FCs start mission when switched to AUTO)"},{"type":"DELETE","lineNumber":743,"oldContent":"        try {"},{"type":"DELETE","lineNumber":744,"oldContent":"            val setCurrent = MissionSetCurrent(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = first.toUShort())"},{"type":"DELETE","lineNumber":745,"oldContent":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, setCurrent)"},{"type":"DELETE","lineNumber":746,"oldContent":"            Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_SET_CURRENT seq=$first\")"},{"type":"DELETE","lineNumber":747,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":748,"oldContent":"            Log.w(\"MavlinkRepo\", \"Fallback: Failed to send MISSION_SET_CURRENT\", e)"}]},{"timestamp":1758012834106,"changes":[{"type":"MODIFY","lineNumber":3,"content":"import com.divpundir.mavlink.api.MavEnumValue","oldContent":"import android.R.attr.mode"},{"type":"INSERT","lineNumber":42,"content":"    private val _lastFailure = MutableStateFlow<Throwable?>(null)"},{"type":"DELETE","lineNumber":43,"oldContent":"    val lastFailure: StateFlow<Throwable?> = _lastFailure.asStateFlow()"},{"type":"INSERT","lineNumber":75,"content":"                    }"},{"type":"DELETE","lineNumber":76,"oldContent":"                    is StreamState.Inactive -> {"},{"type":"INSERT","lineNumber":79,"content":"                            _state.update { it.copy(connected = false, fcuDetected = false) }"},{"type":"DELETE","lineNumber":80,"oldContent":"                            reconnect(this)"},{"type":"INSERT","lineNumber":85,"content":"        }"},{"type":"DELETE","lineNumber":86,"oldContent":""},{"type":"INSERT","lineNumber":109,"content":"        // Shared message stream"},{"type":"DELETE","lineNumber":110,"oldContent":"        val mavFrameStream = connection.mavFrame"},{"type":"MODIFY","lineNumber":116,"content":"                Log.d(\"MavlinkRepo\", \"Frame: ${it.message.javaClass.simpleName} (sysId=${it.systemId}, compId=${it.componentId})\")","oldContent":"                Log.d(\"MavlinkRepo\", \"Frame: ${it.message.javaClass.simpleName} (sysId=${it.systemId}, compId=${it.componentId})\")"},{"type":"INSERT","lineNumber":127,"content":"                        fcuComponentId = it.componentId"},{"type":"DELETE","lineNumber":128,"oldContent":"                        Log.i(\"MavlinkRepo\", \"FCU detected sysId=$fcuSystemId compId=$fcuComponentId\")"},{"type":"INSERT","lineNumber":146,"content":"                                    param7 = 0f"},{"type":"DELETE","lineNumber":147,"oldContent":"                                )"},{"type":"INSERT","lineNumber":150,"content":"                                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":151,"oldContent":"                                    Log.e(\"MavlinkRepo\", \"Failed to send SET_MESSAGE_INTERVAL\", e)"},{"type":"MODIFY","lineNumber":187,"content":"","oldContent":"                    _state.update {"},{"type":"INSERT","lineNumber":199,"content":"                            groundspeed = hud.groundspeed.takeIf { v -> v > 0f }"},{"type":"DELETE","lineNumber":200,"oldContent":"                        )"},{"type":"INSERT","lineNumber":209,"content":"                .map { it.message }"},{"type":"DELETE","lineNumber":210,"oldContent":"                .filterIsInstance<GlobalPositionInt>()"},{"type":"INSERT","lineNumber":243,"content":"                .filterIsInstance<Heartbeat>()"},{"type":"DELETE","lineNumber":244,"oldContent":"                .collect{ hb->"},{"type":"INSERT","lineNumber":263,"content":"                        19u -> \"Avoid_ADSB\""},{"type":"DELETE","lineNumber":264,"oldContent":"                        20u -> \"Guided_NoGPS\""},{"type":"INSERT","lineNumber":304,"content":"                    _state.update { it.copy(sats = sats, hdop = hdop) }"},{"type":"DELETE","lineNumber":305,"oldContent":"                }"},{"type":"INSERT","lineNumber":322,"content":"        )"},{"type":"DELETE","lineNumber":323,"oldContent":"        try {"},{"type":"INSERT","lineNumber":326,"content":"                gcsComponentId, commandLong)"},{"type":"DELETE","lineNumber":327,"oldContent":"            Log.d(\"MavlinkRepo\", \"Sent COMMAND_LONG: cmd=${command} p1=$param1 p2=$param2 p3=$param3 p4=$param4 p5=$param5 p6=$param6 p7=$param7\")"},{"type":"INSERT","lineNumber":348,"content":"            0f"},{"type":"DELETE","lineNumber":349,"oldContent":"        )"},{"type":"DELETE","lineNumber":352,"oldContent":"        // Use the recommended MAV_CMD to change flight mode (MAV_CMD_DO_CHANGE_MODE, id=176)"},{"type":"DELETE","lineNumber":354,"oldContent":"        // and also send DO_SET_MODE for broader compatibility across firmwares."},{"type":"DELETE","lineNumber":355,"oldContent":"        // DO_SET_MODE (older) expects param1 = base mode (1 = custom mode enabled), param2 = custom mode"},{"type":"DELETE","lineNumber":356,"oldContent":"        // DO_CHANGE_MODE (176) commonly accepts param1 = custom mode index. We send both for compatibility."},{"type":"DELETE","lineNumber":357,"oldContent":"        // First try DO_SET_MODE for backwards compatibility"},{"type":"INSERT","lineNumber":353,"content":"        // For MAV_CMD_DO_SET_MODE in ArduPilot:"},{"type":"INSERT","lineNumber":354,"content":"        // param1: Base mode - should always be 1 (MAV_MODE_FLAG_CUSTOM_MODE_ENABLED)"},{"type":"INSERT","lineNumber":355,"content":"        // param2: Custom mode (0=Stabilize, 3=Auto, 5=Loiter, etc.)"},{"type":"INSERT","lineNumber":356,"content":"        // The armed status is handled automatically by ArduPilot, not via the base mode flags"},{"type":"DELETE","lineNumber":359,"oldContent":"        try {"},{"type":"DELETE","lineNumber":360,"oldContent":"            sendCommand("},{"type":"DELETE","lineNumber":361,"oldContent":"                MavCmd.DO_SET_MODE,"},{"type":"DELETE","lineNumber":362,"oldContent":"                1f,                   // param1: MAV_MODE_FLAG_CUSTOM_MODE_ENABLED"},{"type":"DELETE","lineNumber":363,"oldContent":"                customMode.toFloat(), // param2: custom mode"},{"type":"DELETE","lineNumber":364,"oldContent":"                0f,"},{"type":"DELETE","lineNumber":365,"oldContent":"                0f,"},{"type":"DELETE","lineNumber":366,"oldContent":"                0f,"},{"type":"DELETE","lineNumber":367,"oldContent":"                0f"},{"type":"INSERT","lineNumber":358,"content":"        sendCommand("},{"type":"INSERT","lineNumber":359,"content":"            MavCmd.DO_SET_MODE,"},{"type":"INSERT","lineNumber":360,"content":"            1f,                   // param1: MAV_MODE_FLAG_CUSTOM_MODE_ENABLED (always 1)"},{"type":"INSERT","lineNumber":361,"content":"            customMode.toFloat(), // param2: custom mode (0=Stabilize, 3=Auto, 5=Loiter, etc.)"},{"type":"INSERT","lineNumber":362,"content":"            0f,                   // param3: custom sub mode (usually 0)"},{"type":"INSERT","lineNumber":363,"content":"            0f,                   // param4: empty"},{"type":"INSERT","lineNumber":364,"content":"            0f,                   // param5: empty"},{"type":"INSERT","lineNumber":365,"content":"            0f,                   // param6: empty"},{"type":"INSERT","lineNumber":366,"content":"        )"},{"type":"DELETE","lineNumber":369,"oldContent":"            )"},{"type":"DELETE","lineNumber":371,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":373,"oldContent":"            Log.w(\"MavlinkRepo\", \"DO_SET_MODE send failed\", e)"},{"type":"DELETE","lineNumber":375,"oldContent":"        }"},{"type":"DELETE","lineNumber":377,"oldContent":""},{"type":"DELETE","lineNumber":378,"oldContent":"        // Also send MAV_CMD_DO_CHANGE_MODE (id=176) as a COMMAND_LONG using MavCmd enum wrapper"},{"type":"DELETE","lineNumber":380,"oldContent":"        try {"},{"type":"DELETE","lineNumber":381,"oldContent":"            val cmdChange = CommandLong("},{"type":"INSERT","lineNumber":373,"content":"        // Also attempt to send MAV_CMD_DO_CHANGE_MODE (id=176) as a COMMAND_LONG."},{"type":"INSERT","lineNumber":374,"content":"        // The library may not expose DO_CHANGE_MODE enum; construct an MavEnumValue from the raw id."},{"type":"DELETE","lineNumber":383,"oldContent":"                targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":385,"oldContent":"                targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":387,"oldContent":"                command = MavCmd.DO_CHANGE_MODE.wrap(),"},{"type":"DELETE","lineNumber":389,"oldContent":"                confirmation = 0u,"},{"type":"DELETE","lineNumber":390,"oldContent":"            0f,"},{"type":"DELETE","lineNumber":391,"oldContent":"                param1 = customMode.toFloat(), // mode index"},{"type":"DELETE","lineNumber":392,"oldContent":"            altitude"},{"type":"DELETE","lineNumber":393,"oldContent":"                param2 = 0f,"},{"type":"INSERT","lineNumber":379,"content":"                command = MavEnumValue.of(176u, MavCmd::class),"},{"type":"INSERT","lineNumber":380,"content":"        )"},{"type":"INSERT","lineNumber":381,"content":"    }"},{"type":"DELETE","lineNumber":395,"oldContent":"                param3 = 0f,"},{"type":"DELETE","lineNumber":397,"oldContent":"                param4 = 0f,"},{"type":"DELETE","lineNumber":399,"oldContent":"                param5 = 0f,"},{"type":"DELETE","lineNumber":401,"oldContent":"                param6 = 0f,"},{"type":"DELETE","lineNumber":403,"oldContent":"                param7 = 0f"},{"type":"DELETE","lineNumber":404,"oldContent":"            )"},{"type":"DELETE","lineNumber":406,"oldContent":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, cmdChange)"},{"type":"DELETE","lineNumber":408,"oldContent":"            Log.i(\"MavlinkRepo\", \"Sent MAV_CMD_DO_CHANGE_MODE (176) param1=$customMode\")"},{"type":"DELETE","lineNumber":410,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":412,"oldContent":"            Log.w(\"MavlinkRepo\", \"MAV_CMD_DO_CHANGE_MODE send failed\", e)"},{"type":"DELETE","lineNumber":414,"oldContent":"            _lastFailure.value = e"},{"type":"DELETE","lineNumber":415,"oldContent":"        }"},{"type":"DELETE","lineNumber":422,"oldContent":"            Log.w(\"MavlinkRepo\", \"No mission items to upload\")"},{"type":"DELETE","lineNumber":423,"oldContent":"            return false"},{"type":"DELETE","lineNumber":424,"oldContent":"        }"},{"type":"DELETE","lineNumber":425,"oldContent":""},{"type":"DELETE","lineNumber":426,"oldContent":"        try {"},{"type":"DELETE","lineNumber":427,"oldContent":"            // Send MissionCount"},{"type":"DELETE","lineNumber":428,"oldContent":"            val missionCount = MissionCount("},{"type":"DELETE","lineNumber":429,"oldContent":"        )"},{"type":"DELETE","lineNumber":430,"oldContent":"                targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":431,"oldContent":"    }"},{"type":"DELETE","lineNumber":432,"oldContent":"                targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":433,"oldContent":"                count = missionItems.size.toUShort()"},{"type":"INSERT","lineNumber":398,"content":"         sendCommand("},{"type":"INSERT","lineNumber":399,"content":"             MavCmd.NAV_TAKEOFF,"},{"type":"INSERT","lineNumber":400,"content":"             -1f,"},{"type":"INSERT","lineNumber":401,"content":"             0f,"},{"type":"INSERT","lineNumber":402,"content":"             0f,"},{"type":"INSERT","lineNumber":403,"content":"             0f,"},{"type":"INSERT","lineNumber":404,"content":"             0f,"},{"type":"INSERT","lineNumber":405,"content":"             0f,"},{"type":"INSERT","lineNumber":406,"content":"             altitude"},{"type":"INSERT","lineNumber":407,"content":"         )"},{"type":"INSERT","lineNumber":408,"content":"     }"},{"type":"INSERT","lineNumber":419,"content":"                    try {"},{"type":"DELETE","lineNumber":458,"oldContent":"            )"},{"type":"INSERT","lineNumber":444,"content":"                                }"},{"type":"DELETE","lineNumber":470,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":492,"oldContent":"                                }"},{"type":"INSERT","lineNumber":491,"content":"                                // ignore other messages"},{"type":"INSERT","lineNumber":492,"content":"                            }"},{"type":"INSERT","lineNumber":493,"content":"                        }"},{"type":"INSERT","lineNumber":494,"content":"                    }"},{"type":"INSERT","lineNumber":497,"content":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"INSERT","lineNumber":498,"content":"            val firstRequestTimeout = 5000L // increase wait to allow FC more time to request"},{"type":"INSERT","lineNumber":505,"content":"                Log.w(\"MavlinkRepo\", \"No MissionRequest received within $firstRequestTimeout ms; falling back to send all items\")"},{"type":"INSERT","lineNumber":506,"content":"                // Send all items sequentially"},{"type":"INSERT","lineNumber":512,"content":"                        targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":514,"content":"                    )"},{"type":"INSERT","lineNumber":515,"content":"                    try {"},{"type":"INSERT","lineNumber":516,"content":"                        // log full item contents for diagnostics"},{"type":"INSERT","lineNumber":517,"content":"                        Log.d(\"MavlinkRepo\", \"Sending fallback item seq=$seq cmd=${missionItem.command} frame=${missionItem.frame} x=${missionItem.x} y=${missionItem.y} z=${missionItem.z}\")"},{"type":"INSERT","lineNumber":518,"content":"                         connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"INSERT","lineNumber":519,"content":"                         sentSeqs.add(seq)"},{"type":"INSERT","lineNumber":520,"content":"                         Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_ITEM_INT seq=$seq\")"},{"type":"INSERT","lineNumber":521,"content":"                         // give FC a bit more time to process unsolicited item and possibly request next"},{"type":"INSERT","lineNumber":522,"content":"                         delay(300)"},{"type":"INSERT","lineNumber":523,"content":"                     } catch (e: Exception) {"},{"type":"INSERT","lineNumber":524,"content":"                         Log.e(\"MavlinkRepo\", \"Fallback: Failed to send mission item seq=$seq\", e)"},{"type":"INSERT","lineNumber":525,"content":"                     }"},{"type":"INSERT","lineNumber":526,"content":"                 }"},{"type":"INSERT","lineNumber":527,"content":"             }"},{"type":"INSERT","lineNumber":528,"content":""},{"type":"INSERT","lineNumber":529,"content":"            // Wait for ACK with timeout"},{"type":"INSERT","lineNumber":530,"content":"            val ackReceived = withTimeoutOrNull(timeoutMs) {"},{"type":"INSERT","lineNumber":531,"content":"                ackDeferred.await()"},{"type":"INSERT","lineNumber":532,"content":"            } ?: false"},{"type":"INSERT","lineNumber":533,"content":""},{"type":"INSERT","lineNumber":534,"content":"            // cancel collector and resend jobs"},{"type":"INSERT","lineNumber":535,"content":"            job.cancel()"},{"type":"INSERT","lineNumber":536,"content":"            resendJob.cancel()"},{"type":"INSERT","lineNumber":537,"content":""},{"type":"INSERT","lineNumber":538,"content":"            if (ackReceived) {"},{"type":"INSERT","lineNumber":539,"content":"                Log.i(\"MavlinkRepo\", \"Mission upload acknowledged by FCU\")"},{"type":"INSERT","lineNumber":540,"content":"                return true"},{"type":"INSERT","lineNumber":541,"content":"            } else {"},{"type":"INSERT","lineNumber":542,"content":"                Log.e(\"MavlinkRepo\", \"Mission upload timed out waiting for ACK\")"},{"type":"DELETE","lineNumber":534,"oldContent":"                                // ignore other messages"},{"type":"DELETE","lineNumber":536,"oldContent":"                            }"},{"type":"DELETE","lineNumber":537,"oldContent":"                        }"},{"type":"DELETE","lineNumber":539,"oldContent":"                    }"},{"type":"DELETE","lineNumber":542,"oldContent":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"DELETE","lineNumber":544,"oldContent":"            val firstRequestTimeout = 5000L // increase wait to allow FC more time to request"},{"type":"DELETE","lineNumber":549,"oldContent":"                Log.w(\"MavlinkRepo\", \"No MissionRequest received within $firstRequestTimeout ms; falling back to send all items\")"},{"type":"DELETE","lineNumber":551,"oldContent":"                // Send all items sequentially"},{"type":"DELETE","lineNumber":556,"oldContent":"                        targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":558,"oldContent":"                    )"},{"type":"DELETE","lineNumber":560,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":562,"oldContent":"                        // log full item contents for diagnostics"},{"type":"DELETE","lineNumber":563,"oldContent":"                        Log.d(\"MavlinkRepo\", \"Sending fallback item seq=$seq cmd=${missionItem.command} frame=${missionItem.frame} x=${missionItem.x} y=${missionItem.y} z=${missionItem.z}\")"},{"type":"DELETE","lineNumber":565,"oldContent":"                         connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"DELETE","lineNumber":567,"oldContent":"                         sentSeqs.add(seq)"},{"type":"DELETE","lineNumber":568,"oldContent":"                         Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_ITEM_INT seq=$seq\")"},{"type":"DELETE","lineNumber":570,"oldContent":"                         // give FC a bit more time to process unsolicited item and possibly request next"},{"type":"DELETE","lineNumber":572,"oldContent":"                         delay(300)"},{"type":"DELETE","lineNumber":573,"oldContent":"                     } catch (e: Exception) {"},{"type":"DELETE","lineNumber":575,"oldContent":"                         Log.e(\"MavlinkRepo\", \"Fallback: Failed to send mission item seq=$seq\", e)"},{"type":"DELETE","lineNumber":577,"oldContent":"                     }"},{"type":"DELETE","lineNumber":578,"oldContent":"                 }"},{"type":"DELETE","lineNumber":580,"oldContent":"             }"},{"type":"DELETE","lineNumber":582,"oldContent":""},{"type":"DELETE","lineNumber":583,"oldContent":"            // Wait for ACK with timeout"},{"type":"DELETE","lineNumber":584,"oldContent":"            val ackReceived = withTimeoutOrNull(timeoutMs) {"},{"type":"DELETE","lineNumber":585,"oldContent":"                ackDeferred.await()"},{"type":"DELETE","lineNumber":586,"oldContent":"            } ?: false"},{"type":"INSERT","lineNumber":571,"content":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_COUNT=${msg.count} from sys=${frame.systemId}\")"},{"type":"INSERT","lineNumber":572,"content":"                            expectedCountDeferred.complete(msg.count.toInt())"},{"type":"INSERT","lineNumber":573,"content":"                        }"},{"type":"INSERT","lineNumber":574,"content":"                        is MissionItemInt -> {"},{"type":"INSERT","lineNumber":575,"content":"                            val lat = msg.x / 1e7"},{"type":"DELETE","lineNumber":588,"oldContent":""},{"type":"DELETE","lineNumber":590,"oldContent":"            // cancel collector and resend jobs"},{"type":"DELETE","lineNumber":591,"oldContent":"            job.cancel()"},{"type":"DELETE","lineNumber":593,"oldContent":"            resendJob.cancel()"},{"type":"DELETE","lineNumber":595,"oldContent":""},{"type":"DELETE","lineNumber":596,"oldContent":"            if (ackReceived) {"},{"type":"DELETE","lineNumber":598,"oldContent":"                Log.i(\"MavlinkRepo\", \"Mission upload acknowledged by FCU\")"},{"type":"DELETE","lineNumber":600,"oldContent":"                return true"},{"type":"DELETE","lineNumber":601,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":602,"oldContent":"                Log.e(\"MavlinkRepo\", \"Mission upload timed out waiting for ACK\")"},{"type":"INSERT","lineNumber":582,"content":"                            // MissionItem is deprecated; log for diagnostics"},{"type":"INSERT","lineNumber":583,"content":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_ITEM seq=${msg.seq} x=${msg.x} y=${msg.y} z=${msg.z}\")"},{"type":"INSERT","lineNumber":584,"content":"                            received.add(msg.seq.toInt() to \"FLT: x=${msg.x} y=${msg.y} z=${msg.z}\")"},{"type":"INSERT","lineNumber":585,"content":"                            perSeqMap[msg.seq.toInt()]?.let { d -> if (!d.isCompleted) d.complete(Unit) }"},{"type":"INSERT","lineNumber":586,"content":"                        }"},{"type":"INSERT","lineNumber":587,"content":"                        is MissionAck -> {"},{"type":"INSERT","lineNumber":588,"content":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_ACK type=${msg.type}\")"},{"type":"INSERT","lineNumber":589,"content":"                        }"},{"type":"INSERT","lineNumber":590,"content":"                        else -> {}"},{"type":"INSERT","lineNumber":591,"content":"                    }"},{"type":"INSERT","lineNumber":593,"content":"            }"},{"type":"INSERT","lineNumber":594,"content":""},{"type":"INSERT","lineNumber":596,"content":"            try {"},{"type":"INSERT","lineNumber":597,"content":"                val req = MissionRequestList(targetSystem = fcuSystemId, targetComponent = fcuComponentId)"},{"type":"INSERT","lineNumber":603,"content":""},{"type":"DELETE","lineNumber":615,"oldContent":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_COUNT=${msg.count} from sys=${frame.systemId}\")"},{"type":"DELETE","lineNumber":616,"oldContent":"                            expectedCountDeferred.complete(msg.count.toInt())"},{"type":"INSERT","lineNumber":609,"content":""},{"type":"DELETE","lineNumber":618,"oldContent":"                        }"},{"type":"DELETE","lineNumber":619,"oldContent":"                        is MissionItemInt -> {"},{"type":"DELETE","lineNumber":621,"oldContent":"                            val lat = msg.x / 1e7"},{"type":"DELETE","lineNumber":626,"oldContent":"                            // MissionItem is deprecated; log for diagnostics"},{"type":"DELETE","lineNumber":628,"oldContent":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_ITEM seq=${msg.seq} x=${msg.x} y=${msg.y} z=${msg.z}\")"},{"type":"DELETE","lineNumber":629,"oldContent":"                            received.add(msg.seq.toInt() to \"FLT: x=${msg.x} y=${msg.y} z=${msg.z}\")"},{"type":"DELETE","lineNumber":631,"oldContent":"                            perSeqMap[msg.seq.toInt()]?.let { d -> if (!d.isCompleted) d.complete(Unit) }"},{"type":"DELETE","lineNumber":632,"oldContent":"                        }"},{"type":"DELETE","lineNumber":634,"oldContent":"                        is MissionAck -> {"},{"type":"DELETE","lineNumber":635,"oldContent":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_ACK type=${msg.type}\")"},{"type":"DELETE","lineNumber":637,"oldContent":"                        }"},{"type":"DELETE","lineNumber":638,"oldContent":"                        else -> {}"},{"type":"DELETE","lineNumber":640,"oldContent":"                    }"},{"type":"DELETE","lineNumber":641,"oldContent":"            }"},{"type":"DELETE","lineNumber":642,"oldContent":""},{"type":"DELETE","lineNumber":645,"oldContent":"            try {"},{"type":"DELETE","lineNumber":647,"oldContent":"                val req = MissionRequestList(targetSystem = fcuSystemId, targetComponent = fcuComponentId)"},{"type":"DELETE","lineNumber":652,"oldContent":""},{"type":"DELETE","lineNumber":656,"oldContent":""},{"type":"INSERT","lineNumber":631,"content":"                    Log.w(\"MavlinkRepo\", \"Did not receive item for seq=$seq within timeout\")"},{"type":"INSERT","lineNumber":634,"content":"                perSeqMap.remove(seq)"},{"type":"INSERT","lineNumber":636,"content":""},{"type":"INSERT","lineNumber":639,"content":"            job.cancel()"},{"type":"INSERT","lineNumber":641,"content":"            Log.i(\"MavlinkRepo\", \"Mission readback complete: expected=$expectedCount items=${received.size}\")"},{"type":"INSERT","lineNumber":642,"content":"            received.sortedBy { it.first }.forEach { (seq, desc) -> Log.i(\"MavlinkRepo\", \"Item #$seq -> $desc\") }"},{"type":"INSERT","lineNumber":646,"content":"    }"},{"type":"INSERT","lineNumber":647,"content":""},{"type":"DELETE","lineNumber":671,"oldContent":"                    Log.w(\"MavlinkRepo\", \"Did not receive item for seq=$seq within timeout\")"},{"type":"INSERT","lineNumber":653,"content":"        }"},{"type":"DELETE","lineNumber":674,"oldContent":"                perSeqMap.remove(seq)"},{"type":"DELETE","lineNumber":676,"oldContent":""},{"type":"DELETE","lineNumber":678,"oldContent":"            job.cancel()"},{"type":"DELETE","lineNumber":680,"oldContent":"            Log.i(\"MavlinkRepo\", \"Mission readback complete: expected=$expectedCount items=${received.size}\")"},{"type":"DELETE","lineNumber":682,"oldContent":"            received.sortedBy { it.first }.forEach { (seq, desc) -> Log.i(\"MavlinkRepo\", \"Item #$seq -> $desc\") }"},{"type":"DELETE","lineNumber":683,"oldContent":"                        try {"},{"type":"DELETE","lineNumber":684,"oldContent":"                            if (msg.command == MavCmd.MISSION_START.wrap()) {"},{"type":"DELETE","lineNumber":685,"oldContent":"                                val resultVal = msg.result.value"},{"type":"DELETE","lineNumber":686,"oldContent":"    }"},{"type":"DELETE","lineNumber":687,"oldContent":""},{"type":"DELETE","lineNumber":688,"oldContent":"                                Log.i(\"MavlinkRepo\", \"Observed COMMAND_ACK for MISSION_START result=$resultVal on attempt $attempt\")"},{"type":"DELETE","lineNumber":689,"oldContent":"                                if (!ackDeferred.isCompleted) ackDeferred.complete(resultVal)"},{"type":"DELETE","lineNumber":690,"oldContent":"                            }"},{"type":"DELETE","lineNumber":691,"oldContent":"                        } catch (t: Throwable) {"},{"type":"DELETE","lineNumber":692,"oldContent":"                            Log.w(\"MavlinkRepo\", \"Error while processing COMMAND_ACK\", t)"},{"type":"DELETE","lineNumber":693,"oldContent":"                        }"},{"type":"DELETE","lineNumber":694,"oldContent":"        }"},{"type":"DELETE","lineNumber":695,"oldContent":""},{"type":"DELETE","lineNumber":696,"oldContent":"            if (result != null) {"},{"type":"DELETE","lineNumber":697,"oldContent":"                if (result == 0u) {"},{"type":"DELETE","lineNumber":698,"oldContent":"                    Log.i(\"MavlinkRepo\", \"Mission start acknowledged by FCU on attempt $attempt\")"},{"type":"DELETE","lineNumber":699,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":702,"oldContent":"                Log.w(\"MavlinkRepo\", \"No COMMAND_ACK for MISSION_START on attempt $attempt (timeout)\")"},{"type":"DELETE","lineNumber":705,"oldContent":"                // try again after short delay"},{"type":"DELETE","lineNumber":708,"oldContent":"                delay(500L)"},{"type":"DELETE","lineNumber":711,"oldContent":"            }"},{"type":"DELETE","lineNumber":713,"oldContent":""},{"type":"DELETE","lineNumber":717,"oldContent":"        Log.e(\"MavlinkRepo\", \"MISSION_START not acknowledged after $maxAttempts attempts - trying fallback start (set current + change mode to AUTO)\")"},{"type":"DELETE","lineNumber":721,"oldContent":""},{"type":"DELETE","lineNumber":728,"oldContent":"        }"},{"type":"DELETE","lineNumber":730,"oldContent":""},{"type":"INSERT","lineNumber":683,"content":"                        try {"},{"type":"INSERT","lineNumber":684,"content":"                            if (msg.command == MavCmd.MISSION_START.wrap()) {"},{"type":"INSERT","lineNumber":685,"content":"                                val resultVal = msg.result.value"},{"type":"INSERT","lineNumber":686,"content":"                                Log.i(\"MavlinkRepo\", \"Observed COMMAND_ACK for MISSION_START result=$resultVal on attempt $attempt\")"},{"type":"INSERT","lineNumber":687,"content":"                                if (!ackDeferred.isCompleted) ackDeferred.complete(resultVal)"},{"type":"INSERT","lineNumber":688,"content":"                            }"},{"type":"INSERT","lineNumber":689,"content":"                        } catch (t: Throwable) {"},{"type":"INSERT","lineNumber":690,"content":"                            Log.w(\"MavlinkRepo\", \"Error while processing COMMAND_ACK\", t)"},{"type":"INSERT","lineNumber":691,"content":"                        }"},{"type":"INSERT","lineNumber":692,"content":"                    }"},{"type":"INSERT","lineNumber":693,"content":"                }"},{"type":"INSERT","lineNumber":694,"content":"            }"},{"type":"INSERT","lineNumber":695,"content":""},{"type":"INSERT","lineNumber":696,"content":"            val result = withTimeoutOrNull(perAttemptTimeout) { ackDeferred.await() }"},{"type":"INSERT","lineNumber":697,"content":"            job.cancel()"},{"type":"INSERT","lineNumber":698,"content":""},{"type":"INSERT","lineNumber":699,"content":"            if (result != null) {"},{"type":"INSERT","lineNumber":700,"content":"                if (result == 0u) {"},{"type":"INSERT","lineNumber":701,"content":"                    Log.i(\"MavlinkRepo\", \"Mission start acknowledged by FCU on attempt $attempt\")"},{"type":"INSERT","lineNumber":702,"content":"                    return true"},{"type":"INSERT","lineNumber":703,"content":"                } else {"},{"type":"INSERT","lineNumber":704,"content":"                    Log.e(\"MavlinkRepo\", \"Mission start rejected by FCU on attempt $attempt with result=$result\")"},{"type":"INSERT","lineNumber":705,"content":"                    // Don't retry on a negative ACK; break and return failure"},{"type":"INSERT","lineNumber":706,"content":"                    return false"},{"type":"INSERT","lineNumber":707,"content":"                }"},{"type":"INSERT","lineNumber":708,"content":"            } else {"},{"type":"INSERT","lineNumber":709,"content":"                Log.w(\"MavlinkRepo\", \"No COMMAND_ACK for MISSION_START on attempt $attempt (timeout)\")"},{"type":"INSERT","lineNumber":710,"content":"                // try again after short delay"},{"type":"INSERT","lineNumber":711,"content":"                delay(500L)"},{"type":"INSERT","lineNumber":712,"content":"            }"},{"type":"INSERT","lineNumber":713,"content":"        }"},{"type":"INSERT","lineNumber":714,"content":""},{"type":"INSERT","lineNumber":715,"content":"        Log.e(\"MavlinkRepo\", \"MISSION_START not acknowledged after $maxAttempts attempts - trying fallback start (set current + change mode to AUTO)\")"},{"type":"INSERT","lineNumber":716,"content":""},{"type":"INSERT","lineNumber":717,"content":"        // Fallback approach: set mission current and change mode to AUTO (many FCs start mission when switched to AUTO)"},{"type":"INSERT","lineNumber":718,"content":"        try {"},{"type":"INSERT","lineNumber":719,"content":"            val setCurrent = MissionSetCurrent(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = first.toUShort())"},{"type":"INSERT","lineNumber":720,"content":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, setCurrent)"},{"type":"INSERT","lineNumber":721,"content":"            Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_SET_CURRENT seq=$first\")"},{"type":"INSERT","lineNumber":722,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":723,"content":"            Log.w(\"MavlinkRepo\", \"Fallback: Failed to send MISSION_SET_CURRENT\", e)"},{"type":"INSERT","lineNumber":724,"content":"        }"},{"type":"INSERT","lineNumber":725,"content":""},{"type":"INSERT","lineNumber":726,"content":"        // Request mode change to AUTO using DO_SET_MODE"},{"type":"INSERT","lineNumber":727,"content":"        try {"},{"type":"DELETE","lineNumber":737,"oldContent":"                    }"},{"type":"DELETE","lineNumber":739,"oldContent":"                }"},{"type":"DELETE","lineNumber":741,"oldContent":"            }"},{"type":"DELETE","lineNumber":743,"oldContent":"            val result = withTimeoutOrNull(perAttemptTimeout) { ackDeferred.await() }"},{"type":"DELETE","lineNumber":745,"oldContent":"            job.cancel()"},{"type":"DELETE","lineNumber":746,"oldContent":""},{"type":"DELETE","lineNumber":751,"oldContent":"                    return true"},{"type":"DELETE","lineNumber":753,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":755,"oldContent":"                    Log.e(\"MavlinkRepo\", \"Mission start rejected by FCU on attempt $attempt with result=$result\")"},{"type":"DELETE","lineNumber":756,"oldContent":"                    // Don't retry on a negative ACK; break and return failure"},{"type":"DELETE","lineNumber":758,"oldContent":"                    return false"},{"type":"DELETE","lineNumber":760,"oldContent":"                }"},{"type":"DELETE","lineNumber":765,"oldContent":"        }"},{"type":"DELETE","lineNumber":769,"oldContent":"        // Fallback approach: set mission current and change mode to AUTO (many FCs start mission when switched to AUTO)"},{"type":"DELETE","lineNumber":770,"oldContent":"        try {"},{"type":"DELETE","lineNumber":771,"oldContent":"            val setCurrent = MissionSetCurrent(targetSystem = fcuSystemId, targetComponent = fcuComponentId, seq = first.toUShort())"},{"type":"DELETE","lineNumber":772,"oldContent":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, setCurrent)"},{"type":"DELETE","lineNumber":773,"oldContent":"            Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_SET_CURRENT seq=$first\")"},{"type":"DELETE","lineNumber":774,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":775,"oldContent":"            Log.w(\"MavlinkRepo\", \"Fallback: Failed to send MISSION_SET_CURRENT\", e)"},{"type":"DELETE","lineNumber":776,"oldContent":"        // Request mode change to AUTO using DO_SET_MODE"}]},{"timestamp":1758012900744,"changes":[{"type":"MODIFY","lineNumber":3,"content":"import android.util.Log","oldContent":"import com.divpundir.mavlink.api.MavEnumValue"},{"type":"INSERT","lineNumber":115,"content":"            mavFrameStream.collect {"},{"type":"DELETE","lineNumber":116,"oldContent":"                Log.d(\"MavlinkRepo\", \"Frame: ${it.message.javaClass.simpleName} (sysId=${it.systemId}, compId=${it.componentId})\")"},{"type":"MODIFY","lineNumber":353,"content":"        // For MAV_CMD_DO_SET_MODE in ArduPilot:","oldContent":"        // For MAV_CMD_DO_SET_MODE in ArduPilot:"},{"type":"MODIFY","lineNumber":358,"content":"        sendCommand(","oldContent":"        sendCommand("},{"type":"DELETE","lineNumber":370,"oldContent":"        // Also attempt to send MAV_CMD_DO_CHANGE_MODE (id=176) as a COMMAND_LONG."},{"type":"DELETE","lineNumber":371,"oldContent":"        // The library may not expose DO_CHANGE_MODE enum; construct an MavEnumValue from the raw id."},{"type":"DELETE","lineNumber":374,"oldContent":"                command = MavEnumValue.of(176u, MavCmd::class),"},{"type":"DELETE","lineNumber":376,"oldContent":"        )"},{"type":"MODIFY","lineNumber":377,"content":"            0f,","oldContent":"    }"},{"type":"INSERT","lineNumber":378,"content":"            altitude"},{"type":"INSERT","lineNumber":379,"content":"                command = MavEnumValue.of(176u, MavCmd::class.java),"},{"type":"INSERT","lineNumber":380,"content":"    }"},{"type":"DELETE","lineNumber":384,"oldContent":"         sendCommand("},{"type":"DELETE","lineNumber":386,"oldContent":"             MavCmd.NAV_TAKEOFF,"},{"type":"DELETE","lineNumber":387,"oldContent":"             -1f,"},{"type":"DELETE","lineNumber":389,"oldContent":"             0f,"},{"type":"DELETE","lineNumber":390,"oldContent":"             0f,"},{"type":"DELETE","lineNumber":392,"oldContent":"             0f,"},{"type":"DELETE","lineNumber":393,"oldContent":"             0f,"},{"type":"DELETE","lineNumber":394,"oldContent":"             0f,"},{"type":"DELETE","lineNumber":396,"oldContent":"             altitude"},{"type":"DELETE","lineNumber":397,"oldContent":"         )"},{"type":"DELETE","lineNumber":399,"oldContent":"     }"},{"type":"DELETE","lineNumber":406,"oldContent":"                    try {"},{"type":"INSERT","lineNumber":397,"content":"            Log.w(\"MavlinkRepo\", \"No mission items to upload\")"},{"type":"INSERT","lineNumber":398,"content":"            return false"},{"type":"INSERT","lineNumber":399,"content":"        }"},{"type":"INSERT","lineNumber":400,"content":""},{"type":"INSERT","lineNumber":401,"content":"        try {"},{"type":"INSERT","lineNumber":402,"content":"            // Send MissionCount"},{"type":"INSERT","lineNumber":403,"content":"            val missionCount = MissionCount("},{"type":"INSERT","lineNumber":404,"content":"                targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":405,"content":"                targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":406,"content":"                count = missionItems.size.toUShort()"},{"type":"INSERT","lineNumber":407,"content":"            )"},{"type":"DELETE","lineNumber":420,"oldContent":"                                }"},{"type":"INSERT","lineNumber":418,"content":"                    try {"},{"type":"INSERT","lineNumber":443,"content":"                                }"},{"type":"DELETE","lineNumber":466,"oldContent":"                                // ignore other messages"},{"type":"DELETE","lineNumber":468,"oldContent":"                            }"},{"type":"DELETE","lineNumber":469,"oldContent":"                        }"},{"type":"DELETE","lineNumber":471,"oldContent":"                    }"},{"type":"DELETE","lineNumber":475,"oldContent":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"DELETE","lineNumber":477,"oldContent":"            val firstRequestTimeout = 5000L // increase wait to allow FC more time to request"},{"type":"DELETE","lineNumber":485,"oldContent":"                Log.w(\"MavlinkRepo\", \"No MissionRequest received within $firstRequestTimeout ms; falling back to send all items\")"},{"type":"DELETE","lineNumber":487,"oldContent":"                // Send all items sequentially"},{"type":"DELETE","lineNumber":494,"oldContent":"                        targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":497,"oldContent":"                    )"},{"type":"DELETE","lineNumber":499,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":501,"oldContent":"                        // log full item contents for diagnostics"},{"type":"DELETE","lineNumber":503,"oldContent":"                        Log.d(\"MavlinkRepo\", \"Sending fallback item seq=$seq cmd=${missionItem.command} frame=${missionItem.frame} x=${missionItem.x} y=${missionItem.y} z=${missionItem.z}\")"},{"type":"INSERT","lineNumber":490,"content":"                                // ignore other messages"},{"type":"INSERT","lineNumber":491,"content":"                            }"},{"type":"INSERT","lineNumber":492,"content":"                        }"},{"type":"INSERT","lineNumber":493,"content":"                    }"},{"type":"DELETE","lineNumber":505,"oldContent":"                         connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"DELETE","lineNumber":507,"oldContent":"                         sentSeqs.add(seq)"},{"type":"INSERT","lineNumber":496,"content":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"INSERT","lineNumber":497,"content":"            val firstRequestTimeout = 5000L // increase wait to allow FC more time to request"},{"type":"DELETE","lineNumber":509,"oldContent":"                         Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_ITEM_INT seq=$seq\")"},{"type":"DELETE","lineNumber":511,"oldContent":"                         // give FC a bit more time to process unsolicited item and possibly request next"},{"type":"DELETE","lineNumber":513,"oldContent":"                         delay(300)"},{"type":"DELETE","lineNumber":515,"oldContent":"                     } catch (e: Exception) {"},{"type":"DELETE","lineNumber":517,"oldContent":"                         Log.e(\"MavlinkRepo\", \"Fallback: Failed to send mission item seq=$seq\", e)"},{"type":"DELETE","lineNumber":519,"oldContent":"                     }"},{"type":"INSERT","lineNumber":504,"content":"                Log.w(\"MavlinkRepo\", \"No MissionRequest received within $firstRequestTimeout ms; falling back to send all items\")"},{"type":"INSERT","lineNumber":505,"content":"                // Send all items sequentially"},{"type":"DELETE","lineNumber":521,"oldContent":"                 }"},{"type":"DELETE","lineNumber":523,"oldContent":"             }"},{"type":"DELETE","lineNumber":525,"oldContent":""},{"type":"DELETE","lineNumber":527,"oldContent":"            // Wait for ACK with timeout"},{"type":"DELETE","lineNumber":529,"oldContent":"            val ackReceived = withTimeoutOrNull(timeoutMs) {"},{"type":"INSERT","lineNumber":511,"content":"                        targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":513,"content":"                    )"},{"type":"INSERT","lineNumber":514,"content":"                    try {"},{"type":"INSERT","lineNumber":515,"content":"                        // log full item contents for diagnostics"},{"type":"INSERT","lineNumber":516,"content":"                        Log.d(\"MavlinkRepo\", \"Sending fallback item seq=$seq cmd=${missionItem.command} frame=${missionItem.frame} x=${missionItem.x} y=${missionItem.y} z=${missionItem.z}\")"},{"type":"INSERT","lineNumber":517,"content":"                         connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"INSERT","lineNumber":518,"content":"                         sentSeqs.add(seq)"},{"type":"INSERT","lineNumber":519,"content":"                         Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_ITEM_INT seq=$seq\")"},{"type":"INSERT","lineNumber":520,"content":"                         // give FC a bit more time to process unsolicited item and possibly request next"},{"type":"INSERT","lineNumber":521,"content":"                         delay(300)"},{"type":"INSERT","lineNumber":522,"content":"                     } catch (e: Exception) {"},{"type":"INSERT","lineNumber":523,"content":"                         Log.e(\"MavlinkRepo\", \"Fallback: Failed to send mission item seq=$seq\", e)"},{"type":"INSERT","lineNumber":524,"content":"                     }"},{"type":"INSERT","lineNumber":525,"content":"                 }"},{"type":"INSERT","lineNumber":526,"content":"             }"},{"type":"INSERT","lineNumber":527,"content":""},{"type":"INSERT","lineNumber":528,"content":"            // Wait for ACK with timeout"},{"type":"INSERT","lineNumber":529,"content":"            val ackReceived = withTimeoutOrNull(timeoutMs) {"},{"type":"DELETE","lineNumber":532,"oldContent":"                return false"},{"type":"DELETE","lineNumber":534,"oldContent":"            }"},{"type":"DELETE","lineNumber":536,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":539,"oldContent":"            Log.e(\"MavlinkRepo\", \"Mission upload failed\", e)"},{"type":"DELETE","lineNumber":543,"oldContent":"            _lastFailure.value = e"},{"type":"DELETE","lineNumber":546,"oldContent":"            return false"},{"type":"DELETE","lineNumber":548,"oldContent":"        }"},{"type":"INSERT","lineNumber":542,"content":"                return false"},{"type":"INSERT","lineNumber":543,"content":"            }"},{"type":"INSERT","lineNumber":544,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":545,"content":"            Log.e(\"MavlinkRepo\", \"Mission upload failed\", e)"},{"type":"INSERT","lineNumber":546,"content":"            _lastFailure.value = e"},{"type":"INSERT","lineNumber":547,"content":"            return false"},{"type":"INSERT","lineNumber":548,"content":"        }"},{"type":"DELETE","lineNumber":566,"oldContent":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_COUNT=${msg.count} from sys=${frame.systemId}\")"},{"type":"DELETE","lineNumber":568,"oldContent":"                            expectedCountDeferred.complete(msg.count.toInt())"},{"type":"DELETE","lineNumber":569,"oldContent":"                        }"},{"type":"DELETE","lineNumber":570,"oldContent":"                        is MissionItemInt -> {"},{"type":"DELETE","lineNumber":572,"oldContent":"                            val lat = msg.x / 1e7"},{"type":"INSERT","lineNumber":570,"content":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_COUNT=${msg.count} from sys=${frame.systemId}\")"},{"type":"INSERT","lineNumber":571,"content":"                            expectedCountDeferred.complete(msg.count.toInt())"},{"type":"INSERT","lineNumber":572,"content":"                        }"},{"type":"INSERT","lineNumber":573,"content":"                        is MissionItemInt -> {"},{"type":"INSERT","lineNumber":574,"content":"                            val lat = msg.x / 1e7"},{"type":"INSERT","lineNumber":575,"content":"                            val lon = msg.y / 1e7"},{"type":"INSERT","lineNumber":576,"content":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_ITEM_INT seq=${msg.seq} lat=$lat lon=$lon alt=${msg.z}\")"},{"type":"INSERT","lineNumber":577,"content":"                            received.add(msg.seq.toInt() to \"INT: lat=$lat lon=$lon alt=${msg.z}\")"},{"type":"INSERT","lineNumber":578,"content":"                            perSeqMap[msg.seq.toInt()]?.let { d -> if (!d.isCompleted) d.complete(Unit) }"},{"type":"INSERT","lineNumber":579,"content":"                        }"},{"type":"INSERT","lineNumber":580,"content":"                        is MissionItem -> {"},{"type":"DELETE","lineNumber":582,"oldContent":"                            val lon = msg.y / 1e7"},{"type":"DELETE","lineNumber":585,"oldContent":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_ITEM_INT seq=${msg.seq} lat=$lat lon=$lon alt=${msg.z}\")"},{"type":"DELETE","lineNumber":588,"oldContent":"                            received.add(msg.seq.toInt() to \"INT: lat=$lat lon=$lon alt=${msg.z}\")"},{"type":"INSERT","lineNumber":591,"content":"                }"},{"type":"DELETE","lineNumber":591,"oldContent":"                            perSeqMap[msg.seq.toInt()]?.let { d -> if (!d.isCompleted) d.complete(Unit) }"},{"type":"INSERT","lineNumber":594,"content":"            // send request list"},{"type":"DELETE","lineNumber":594,"oldContent":"                        }"},{"type":"DELETE","lineNumber":595,"oldContent":"                        is MissionItem -> {"},{"type":"DELETE","lineNumber":596,"oldContent":""},{"type":"DELETE","lineNumber":597,"oldContent":"                }"},{"type":"DELETE","lineNumber":598,"oldContent":"            // send request list"},{"type":"MODIFY","lineNumber":602,"content":"","oldContent":""},{"type":"INSERT","lineNumber":608,"content":""},{"type":"DELETE","lineNumber":618,"oldContent":"                    Log.w(\"MavlinkRepo\", \"Did not receive item for seq=$seq within timeout\")"},{"type":"DELETE","lineNumber":620,"oldContent":"                perSeqMap.remove(seq)"},{"type":"DELETE","lineNumber":621,"oldContent":""},{"type":"DELETE","lineNumber":623,"oldContent":"            job.cancel()"},{"type":"DELETE","lineNumber":625,"oldContent":"            Log.i(\"MavlinkRepo\", \"Mission readback complete: expected=$expectedCount items=${received.size}\")"},{"type":"DELETE","lineNumber":626,"oldContent":"            received.sortedBy { it.first }.forEach { (seq, desc) -> Log.i(\"MavlinkRepo\", \"Item #$seq -> $desc\") }"},{"type":"DELETE","lineNumber":629,"oldContent":"    }"},{"type":"DELETE","lineNumber":631,"oldContent":""},{"type":"DELETE","lineNumber":636,"oldContent":"        }"},{"type":"INSERT","lineNumber":630,"content":"                    Log.w(\"MavlinkRepo\", \"Did not receive item for seq=$seq within timeout\")"},{"type":"INSERT","lineNumber":633,"content":"                perSeqMap.remove(seq)"},{"type":"INSERT","lineNumber":635,"content":""},{"type":"INSERT","lineNumber":638,"content":"            job.cancel()"},{"type":"INSERT","lineNumber":640,"content":"            Log.i(\"MavlinkRepo\", \"Mission readback complete: expected=$expectedCount items=${received.size}\")"},{"type":"INSERT","lineNumber":641,"content":"            received.sortedBy { it.first }.forEach { (seq, desc) -> Log.i(\"MavlinkRepo\", \"Item #$seq -> $desc\") }"},{"type":"INSERT","lineNumber":645,"content":"    }"},{"type":"INSERT","lineNumber":646,"content":""},{"type":"INSERT","lineNumber":652,"content":"        }"},{"type":"INSERT","lineNumber":659,"content":"            // small delay to allow FC to process"},{"type":"INSERT","lineNumber":660,"content":"            delay(200)"},{"type":"INSERT","lineNumber":661,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":662,"content":"            Log.w(\"MavlinkRepo\", \"Failed to send MISSION_SET_CURRENT\", e)"},{"type":"INSERT","lineNumber":663,"content":"        }"},{"type":"INSERT","lineNumber":664,"content":""},{"type":"INSERT","lineNumber":665,"content":"        val maxAttempts = 3"},{"type":"INSERT","lineNumber":666,"content":"        val perAttemptTimeout = 1500L"},{"type":"INSERT","lineNumber":667,"content":""},{"type":"INSERT","lineNumber":668,"content":"        for (attempt in 1..maxAttempts) {"},{"type":"INSERT","lineNumber":669,"content":"            try {"},{"type":"INSERT","lineNumber":670,"content":"                Log.i(\"MavlinkRepo\", \"Attempt $attempt: Sending MISSION_START first=$first last=$last to sys=$fcuSystemId comp=$fcuComponentId\")"},{"type":"INSERT","lineNumber":671,"content":"                sendCommand(MavCmd.MISSION_START, first.toFloat(), last.toFloat())"},{"type":"INSERT","lineNumber":672,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":673,"content":"                Log.e(\"MavlinkRepo\", \"Failed to send MISSION_START on attempt $attempt\", e)"},{"type":"INSERT","lineNumber":674,"content":"            }"},{"type":"INSERT","lineNumber":675,"content":""},{"type":"INSERT","lineNumber":676,"content":"            // wait for COMMAND_ACK for MISSION_START"},{"type":"INSERT","lineNumber":677,"content":"            val ackDeferred = CompletableDeferred<UInt?>()"},{"type":"INSERT","lineNumber":678,"content":"            val job = AppScope.launch {"},{"type":"INSERT","lineNumber":679,"content":"                connection.mavFrame.collect { frame ->"},{"type":"INSERT","lineNumber":680,"content":"                    val msg = frame.message"},{"type":"INSERT","lineNumber":681,"content":"                    if (msg is CommandAck) {"},{"type":"DELETE","lineNumber":678,"oldContent":"            // small delay to allow FC to process"},{"type":"DELETE","lineNumber":680,"oldContent":"            delay(200)"},{"type":"DELETE","lineNumber":683,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":685,"oldContent":"            Log.w(\"MavlinkRepo\", \"Failed to send MISSION_SET_CURRENT\", e)"},{"type":"DELETE","lineNumber":688,"oldContent":"        }"},{"type":"DELETE","lineNumber":690,"oldContent":""},{"type":"DELETE","lineNumber":693,"oldContent":"        val maxAttempts = 3"},{"type":"DELETE","lineNumber":695,"oldContent":"        val perAttemptTimeout = 1500L"},{"type":"DELETE","lineNumber":698,"oldContent":""},{"type":"DELETE","lineNumber":701,"oldContent":"        for (attempt in 1..maxAttempts) {"},{"type":"DELETE","lineNumber":703,"oldContent":"            try {"},{"type":"DELETE","lineNumber":705,"oldContent":"                Log.i(\"MavlinkRepo\", \"Attempt $attempt: Sending MISSION_START first=$first last=$last to sys=$fcuSystemId comp=$fcuComponentId\")"},{"type":"DELETE","lineNumber":708,"oldContent":"                sendCommand(MavCmd.MISSION_START, first.toFloat(), last.toFloat())"},{"type":"DELETE","lineNumber":710,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":712,"oldContent":"                Log.e(\"MavlinkRepo\", \"Failed to send MISSION_START on attempt $attempt\", e)"},{"type":"DELETE","lineNumber":715,"oldContent":"            }"},{"type":"DELETE","lineNumber":717,"oldContent":""},{"type":"DELETE","lineNumber":719,"oldContent":"            // wait for COMMAND_ACK for MISSION_START"},{"type":"DELETE","lineNumber":721,"oldContent":"            val ackDeferred = CompletableDeferred<UInt?>()"},{"type":"DELETE","lineNumber":723,"oldContent":"            val job = AppScope.launch {"},{"type":"DELETE","lineNumber":725,"oldContent":"                connection.mavFrame.collect { frame ->"},{"type":"DELETE","lineNumber":726,"oldContent":"                    val msg = frame.message"},{"type":"DELETE","lineNumber":727,"oldContent":"                    if (msg is CommandAck) {"}]},{"timestamp":1758012907066,"changes":[{"type":"MODIFY","lineNumber":186,"content":"        // Collectors","oldContent":"                    _state.update {"},{"type":"INSERT","lineNumber":352,"content":"    suspend fun changeMode(customMode: UInt) {"},{"type":"DELETE","lineNumber":353,"oldContent":"        // For MAV_CMD_DO_SET_MODE in ArduPilot:"},{"type":"INSERT","lineNumber":357,"content":""},{"type":"DELETE","lineNumber":358,"oldContent":"        sendCommand("},{"type":"DELETE","lineNumber":374,"oldContent":"            altitude"},{"type":"DELETE","lineNumber":376,"oldContent":"                command = MavEnumValue.of(176u, MavCmd::class.java),"},{"type":"MODIFY","lineNumber":378,"content":"            altitude","oldContent":"    }"},{"type":"INSERT","lineNumber":379,"content":"        )"},{"type":"INSERT","lineNumber":380,"content":"    }"},{"type":"INSERT","lineNumber":387,"content":"     * Uploads a mission using the MAVLink mission protocol handshake."},{"type":"INSERT","lineNumber":388,"content":"     * Returns true if ACK received, false otherwise."},{"type":"INSERT","lineNumber":389,"content":"     */"},{"type":"INSERT","lineNumber":390,"content":"    @Suppress(\"DEPRECATION\")"},{"type":"INSERT","lineNumber":391,"content":"    suspend fun uploadMissionWithAck(missionItems: List<MissionItemInt>, timeoutMs: Long = 15000): Boolean {"},{"type":"INSERT","lineNumber":392,"content":"        if (!state.value.fcuDetected) {"},{"type":"INSERT","lineNumber":393,"content":"            Log.e(\"MavlinkRepo\", \"FCU not detected, cannot upload mission\")"},{"type":"INSERT","lineNumber":394,"content":"            throw IllegalStateException(\"FCU not detected\")"},{"type":"INSERT","lineNumber":395,"content":"        }"},{"type":"INSERT","lineNumber":396,"content":"        if (missionItems.isEmpty()) {"},{"type":"DELETE","lineNumber":389,"oldContent":"     * Uploads a mission using the MAVLink mission protocol handshake."},{"type":"DELETE","lineNumber":392,"oldContent":"     * Returns true if ACK received, false otherwise."},{"type":"DELETE","lineNumber":394,"oldContent":"     */"},{"type":"DELETE","lineNumber":396,"oldContent":"    @Suppress(\"DEPRECATION\")"},{"type":"DELETE","lineNumber":398,"oldContent":"    suspend fun uploadMissionWithAck(missionItems: List<MissionItemInt>, timeoutMs: Long = 15000): Boolean {"},{"type":"DELETE","lineNumber":400,"oldContent":"        if (!state.value.fcuDetected) {"},{"type":"DELETE","lineNumber":402,"oldContent":"            Log.e(\"MavlinkRepo\", \"FCU not detected, cannot upload mission\")"},{"type":"DELETE","lineNumber":405,"oldContent":"            throw IllegalStateException(\"FCU not detected\")"},{"type":"DELETE","lineNumber":406,"oldContent":"        }"},{"type":"DELETE","lineNumber":407,"oldContent":"        if (missionItems.isEmpty()) {"},{"type":"DELETE","lineNumber":416,"oldContent":"                    try {"},{"type":"INSERT","lineNumber":418,"content":"                    try {"},{"type":"DELETE","lineNumber":441,"oldContent":"                                }"},{"type":"INSERT","lineNumber":443,"content":"                                }"},{"type":"DELETE","lineNumber":481,"oldContent":"                                // ignore other messages"},{"type":"DELETE","lineNumber":483,"oldContent":"                            }"},{"type":"DELETE","lineNumber":485,"oldContent":"                        }"},{"type":"DELETE","lineNumber":487,"oldContent":"                    }"},{"type":"DELETE","lineNumber":490,"oldContent":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"DELETE","lineNumber":492,"oldContent":"            val firstRequestTimeout = 5000L // increase wait to allow FC more time to request"},{"type":"DELETE","lineNumber":496,"oldContent":"                Log.w(\"MavlinkRepo\", \"No MissionRequest received within $firstRequestTimeout ms; falling back to send all items\")"},{"type":"INSERT","lineNumber":490,"content":"                                // ignore other messages"},{"type":"INSERT","lineNumber":491,"content":"                            }"},{"type":"INSERT","lineNumber":492,"content":"                        }"},{"type":"INSERT","lineNumber":493,"content":"                    }"},{"type":"DELETE","lineNumber":498,"oldContent":"                // Send all items sequentially"},{"type":"INSERT","lineNumber":496,"content":"            // Wait a short period for first request; if none, fallback to sending all items"},{"type":"INSERT","lineNumber":497,"content":"            val firstRequestTimeout = 5000L // increase wait to allow FC more time to request"},{"type":"DELETE","lineNumber":502,"oldContent":"                        targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":501,"content":"             }"},{"type":"INSERT","lineNumber":502,"content":""},{"type":"INSERT","lineNumber":503,"content":"             if (!firstRequestReceived) {"},{"type":"INSERT","lineNumber":504,"content":"                Log.w(\"MavlinkRepo\", \"No MissionRequest received within $firstRequestTimeout ms; falling back to send all items\")"},{"type":"INSERT","lineNumber":505,"content":"                // Send all items sequentially"},{"type":"INSERT","lineNumber":506,"content":"                for (seq in 0 until missionItems.size) {"},{"type":"INSERT","lineNumber":507,"content":"                    if (sentSeqs.contains(seq)) continue"},{"type":"INSERT","lineNumber":508,"content":"                    val item = missionItems[seq]"},{"type":"INSERT","lineNumber":509,"content":"                    val missionItem = item.copy("},{"type":"INSERT","lineNumber":510,"content":"                        targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":511,"content":"                        targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":512,"content":"                        seq = seq.toUShort()"},{"type":"DELETE","lineNumber":506,"oldContent":"             }"},{"type":"DELETE","lineNumber":509,"oldContent":""},{"type":"DELETE","lineNumber":512,"oldContent":"             if (!firstRequestReceived) {"},{"type":"DELETE","lineNumber":515,"oldContent":"                for (seq in 0 until missionItems.size) {"},{"type":"DELETE","lineNumber":518,"oldContent":"                    if (sentSeqs.contains(seq)) continue"},{"type":"DELETE","lineNumber":521,"oldContent":"                    val item = missionItems[seq]"},{"type":"DELETE","lineNumber":524,"oldContent":"                    val missionItem = item.copy("},{"type":"DELETE","lineNumber":527,"oldContent":"                        targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":529,"oldContent":"                        seq = seq.toUShort()"},{"type":"DELETE","lineNumber":537,"oldContent":"                return false"},{"type":"INSERT","lineNumber":538,"content":"                Log.i(\"MavlinkRepo\", \"Mission upload acknowledged by FCU\")"},{"type":"INSERT","lineNumber":539,"content":"                return true"},{"type":"INSERT","lineNumber":540,"content":"            } else {"},{"type":"INSERT","lineNumber":541,"content":"                Log.e(\"MavlinkRepo\", \"Mission upload timed out waiting for ACK\")"},{"type":"INSERT","lineNumber":542,"content":"                return false"},{"type":"DELETE","lineNumber":541,"oldContent":"                Log.i(\"MavlinkRepo\", \"Mission upload acknowledged by FCU\")"},{"type":"DELETE","lineNumber":543,"oldContent":"                return true"},{"type":"DELETE","lineNumber":546,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":548,"oldContent":"                Log.e(\"MavlinkRepo\", \"Mission upload timed out waiting for ACK\")"},{"type":"INSERT","lineNumber":566,"content":"            val job = AppScope.launch {"},{"type":"INSERT","lineNumber":567,"content":"                connection.mavFrame.collect { frame ->"},{"type":"INSERT","lineNumber":568,"content":"                    when (val msg = frame.message) {"},{"type":"INSERT","lineNumber":569,"content":"                        is MissionCount -> {"},{"type":"DELETE","lineNumber":568,"oldContent":"            val job = AppScope.launch {"},{"type":"DELETE","lineNumber":571,"oldContent":"                connection.mavFrame.collect { frame ->"},{"type":"DELETE","lineNumber":573,"oldContent":"                    when (val msg = frame.message) {"},{"type":"DELETE","lineNumber":575,"oldContent":"                        is MissionCount -> {"},{"type":"DELETE","lineNumber":577,"oldContent":"                            // MissionItem is deprecated; log for diagnostics"},{"type":"DELETE","lineNumber":579,"oldContent":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_ITEM seq=${msg.seq} x=${msg.x} y=${msg.y} z=${msg.z}\")"},{"type":"DELETE","lineNumber":581,"oldContent":"                            received.add(msg.seq.toInt() to \"FLT: x=${msg.x} y=${msg.y} z=${msg.z}\")"},{"type":"DELETE","lineNumber":583,"oldContent":"                            perSeqMap[msg.seq.toInt()]?.let { d -> if (!d.isCompleted) d.complete(Unit) }"},{"type":"INSERT","lineNumber":581,"content":"                            // MissionItem is deprecated; log for diagnostics"},{"type":"INSERT","lineNumber":582,"content":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_ITEM seq=${msg.seq} x=${msg.x} y=${msg.y} z=${msg.z}\")"},{"type":"INSERT","lineNumber":583,"content":"                            received.add(msg.seq.toInt() to \"FLT: x=${msg.x} y=${msg.y} z=${msg.z}\")"},{"type":"INSERT","lineNumber":584,"content":"                            perSeqMap[msg.seq.toInt()]?.let { d -> if (!d.isCompleted) d.complete(Unit) }"},{"type":"INSERT","lineNumber":591,"content":"                }"},{"type":"DELETE","lineNumber":593,"oldContent":"                }"},{"type":"INSERT","lineNumber":594,"content":"            // send request list"},{"type":"DELETE","lineNumber":596,"oldContent":"            // send request list"},{"type":"DELETE","lineNumber":600,"oldContent":""},{"type":"DELETE","lineNumber":601,"oldContent":""},{"type":"INSERT","lineNumber":600,"content":"                Log.e(\"MavlinkRepo\", \"Failed to send MISSION_REQUEST_LIST\", e)"},{"type":"INSERT","lineNumber":602,"content":""},{"type":"DELETE","lineNumber":606,"oldContent":""},{"type":"INSERT","lineNumber":608,"content":""},{"type":"DELETE","lineNumber":622,"oldContent":"                    Log.w(\"MavlinkRepo\", \"Did not receive item for seq=$seq within timeout\")"},{"type":"DELETE","lineNumber":625,"oldContent":"                perSeqMap.remove(seq)"},{"type":"DELETE","lineNumber":628,"oldContent":""},{"type":"DELETE","lineNumber":631,"oldContent":"            job.cancel()"},{"type":"DELETE","lineNumber":634,"oldContent":"            Log.i(\"MavlinkRepo\", \"Mission readback complete: expected=$expectedCount items=${received.size}\")"},{"type":"INSERT","lineNumber":630,"content":"                    Log.w(\"MavlinkRepo\", \"Did not receive item for seq=$seq within timeout\")"},{"type":"DELETE","lineNumber":636,"oldContent":"            received.sortedBy { it.first }.forEach { (seq, desc) -> Log.i(\"MavlinkRepo\", \"Item #$seq -> $desc\") }"},{"type":"INSERT","lineNumber":633,"content":"                perSeqMap.remove(seq)"},{"type":"INSERT","lineNumber":635,"content":""},{"type":"DELETE","lineNumber":641,"oldContent":"    }"},{"type":"INSERT","lineNumber":638,"content":"            job.cancel()"},{"type":"DELETE","lineNumber":643,"oldContent":""},{"type":"INSERT","lineNumber":640,"content":"            Log.i(\"MavlinkRepo\", \"Mission readback complete: expected=$expectedCount items=${received.size}\")"},{"type":"INSERT","lineNumber":641,"content":"            received.sortedBy { it.first }.forEach { (seq, desc) -> Log.i(\"MavlinkRepo\", \"Item #$seq -> $desc\") }"},{"type":"INSERT","lineNumber":645,"content":"    }"},{"type":"INSERT","lineNumber":646,"content":""},{"type":"DELETE","lineNumber":650,"oldContent":"        }"},{"type":"INSERT","lineNumber":652,"content":"        }"},{"type":"MODIFY","lineNumber":659,"content":"            // small delay to allow FC to process","oldContent":"            // small delay to allow FC to process"},{"type":"DELETE","lineNumber":661,"oldContent":"                        try {"},{"type":"DELETE","lineNumber":663,"oldContent":"                            if (msg.command == MavCmd.MISSION_START.wrap()) {"},{"type":"DELETE","lineNumber":665,"oldContent":"                                val resultVal = msg.result.value"},{"type":"DELETE","lineNumber":667,"oldContent":"                                Log.i(\"MavlinkRepo\", \"Observed COMMAND_ACK for MISSION_START result=$resultVal on attempt $attempt\")"},{"type":"DELETE","lineNumber":669,"oldContent":"                                if (!ackDeferred.isCompleted) ackDeferred.complete(resultVal)"},{"type":"DELETE","lineNumber":671,"oldContent":"                            }"},{"type":"DELETE","lineNumber":673,"oldContent":"                        } catch (t: Throwable) {"},{"type":"DELETE","lineNumber":675,"oldContent":"                            Log.w(\"MavlinkRepo\", \"Error while processing COMMAND_ACK\", t)"},{"type":"DELETE","lineNumber":677,"oldContent":"                        }"},{"type":"DELETE","lineNumber":679,"oldContent":"                    }"},{"type":"DELETE","lineNumber":681,"oldContent":"                }"},{"type":"DELETE","lineNumber":683,"oldContent":"            }"},{"type":"DELETE","lineNumber":685,"oldContent":""},{"type":"DELETE","lineNumber":687,"oldContent":"            val result = withTimeoutOrNull(perAttemptTimeout) { ackDeferred.await() }"},{"type":"DELETE","lineNumber":689,"oldContent":"            job.cancel()"},{"type":"DELETE","lineNumber":691,"oldContent":""},{"type":"DELETE","lineNumber":693,"oldContent":"            if (result != null) {"},{"type":"DELETE","lineNumber":695,"oldContent":"                if (result == 0u) {"},{"type":"DELETE","lineNumber":698,"oldContent":"                    Log.i(\"MavlinkRepo\", \"Mission start acknowledged by FCU on attempt $attempt\")"},{"type":"INSERT","lineNumber":682,"content":"                        try {"},{"type":"INSERT","lineNumber":683,"content":"                            if (msg.command == MavCmd.MISSION_START.wrap()) {"},{"type":"INSERT","lineNumber":684,"content":"                                val resultVal = msg.result.value"},{"type":"INSERT","lineNumber":685,"content":"                                Log.i(\"MavlinkRepo\", \"Observed COMMAND_ACK for MISSION_START result=$resultVal on attempt $attempt\")"},{"type":"INSERT","lineNumber":686,"content":"                                if (!ackDeferred.isCompleted) ackDeferred.complete(resultVal)"},{"type":"INSERT","lineNumber":687,"content":"                            }"},{"type":"INSERT","lineNumber":688,"content":"                        } catch (t: Throwable) {"},{"type":"INSERT","lineNumber":689,"content":"                            Log.w(\"MavlinkRepo\", \"Error while processing COMMAND_ACK\", t)"},{"type":"INSERT","lineNumber":690,"content":"                        }"},{"type":"INSERT","lineNumber":691,"content":"                    }"},{"type":"INSERT","lineNumber":692,"content":"                }"},{"type":"INSERT","lineNumber":693,"content":"            }"},{"type":"INSERT","lineNumber":694,"content":""},{"type":"INSERT","lineNumber":695,"content":"            val result = withTimeoutOrNull(perAttemptTimeout) { ackDeferred.await() }"},{"type":"INSERT","lineNumber":696,"content":"            job.cancel()"},{"type":"INSERT","lineNumber":697,"content":""},{"type":"INSERT","lineNumber":698,"content":"            if (result != null) {"},{"type":"INSERT","lineNumber":699,"content":"                if (result == 0u) {"},{"type":"INSERT","lineNumber":700,"content":"                    Log.i(\"MavlinkRepo\", \"Mission start acknowledged by FCU on attempt $attempt\")"}]},{"timestamp":1758013225677,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import android.R.attr.mode"},{"type":"INSERT","lineNumber":11,"content":"import kotlinx.coroutines.CompletableDeferred"},{"type":"DELETE","lineNumber":13,"oldContent":"import kotlinx.coroutines.delay"},{"type":"DELETE","lineNumber":28,"oldContent":""},{"type":"DELETE","lineNumber":40,"oldContent":"    // Connection"},{"type":"INSERT","lineNumber":38,"content":""},{"type":"INSERT","lineNumber":104,"content":"            }"},{"type":"INSERT","lineNumber":105,"content":"        }"},{"type":"DELETE","lineNumber":107,"oldContent":"        // Log raw messages"},{"type":"DELETE","lineNumber":108,"oldContent":""},{"type":"DELETE","lineNumber":119,"oldContent":"                    if (!state.value.fcuDetected) {"},{"type":"INSERT","lineNumber":117,"content":""},{"type":"DELETE","lineNumber":174,"oldContent":""},{"type":"DELETE","lineNumber":175,"oldContent":"                   Log.i("},{"type":"DELETE","lineNumber":176,"oldContent":"                       \"MavlinkRepo\","},{"type":"DELETE","lineNumber":177,"oldContent":"                       \"COMMAND_ACK received: command=${ack.command} result=${ack.result} progress=${ack.progress}\""},{"type":"DELETE","lineNumber":178,"oldContent":"                   )"},{"type":"DELETE","lineNumber":179,"oldContent":""},{"type":"INSERT","lineNumber":172,"content":"                        Log.i("},{"type":"INSERT","lineNumber":173,"content":"                            \"MavlinkRepo\","},{"type":"INSERT","lineNumber":174,"content":"                            \"COMMAND_ACK received: command=${ack.command} result=${ack.result} progress=${ack.progress}\""},{"type":"INSERT","lineNumber":175,"content":"                        )"},{"type":"DELETE","lineNumber":186,"oldContent":"        // Collectors"},{"type":"DELETE","lineNumber":187,"oldContent":""},{"type":"DELETE","lineNumber":238,"oldContent":"        //HEARTBEAT for mode, armed, armable"},{"type":"INSERT","lineNumber":232,"content":"        // HEARTBEAT for mode, armed, armable"},{"type":"DELETE","lineNumber":241,"oldContent":"                .filter{ frame-> state.value.fcuDetected && frame.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":242,"oldContent":"                .map{frame -> frame.message}"},{"type":"INSERT","lineNumber":235,"content":"                .filter { frame -> state.value.fcuDetected && frame.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":236,"content":"                .map { frame -> frame.message }"},{"type":"DELETE","lineNumber":244,"oldContent":"                .collect{ hb->"},{"type":"DELETE","lineNumber":245,"oldContent":"                    val armed = (hb.baseMode.value and MavModeFlag.SAFETY_ARMED.value )!= 0u"},{"type":"INSERT","lineNumber":238,"content":"                .collect { hb ->"},{"type":"INSERT","lineNumber":239,"content":"                    val armed = (hb.baseMode.value and MavModeFlag.SAFETY_ARMED.value) != 0u"},{"type":"DELETE","lineNumber":274,"oldContent":"                    _state.update { it.copy(armed=armed , mode = mode)}"},{"type":"DELETE","lineNumber":275,"oldContent":"                .filterIsInstance<GpsRawInt>()"},{"type":"DELETE","lineNumber":276,"oldContent":"                .collect { gps ->"},{"type":"INSERT","lineNumber":268,"content":"                    _state.update { it.copy(armed = armed, mode = mode) }"},{"type":"INSERT","lineNumber":269,"content":"                }"},{"type":"INSERT","lineNumber":270,"content":"        }"},{"type":"DELETE","lineNumber":280,"oldContent":"        }"},{"type":"INSERT","lineNumber":274,"content":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":291,"oldContent":"                    _state.update { it.copy(voltage = vBatt, batteryPercent = pct , armable = armable) }"},{"type":"INSERT","lineNumber":285,"content":"                    _state.update { it.copy(voltage = vBatt, batteryPercent = pct, armable = armable) }"},{"type":"DELETE","lineNumber":325,"oldContent":"               gcsSystemId,"},{"type":"DELETE","lineNumber":326,"oldContent":"                gcsComponentId, commandLong)"},{"type":"INSERT","lineNumber":319,"content":"                gcsSystemId,"},{"type":"INSERT","lineNumber":320,"content":"                gcsComponentId, commandLong"},{"type":"INSERT","lineNumber":321,"content":"            )"},{"type":"DELETE","lineNumber":352,"oldContent":"    suspend fun changeMode(customMode: UInt) {"},{"type":"DELETE","lineNumber":353,"oldContent":"        // For MAV_CMD_DO_SET_MODE in ArduPilot:"},{"type":"DELETE","lineNumber":354,"oldContent":"        // param1: Base mode - should always be 1 (MAV_MODE_FLAG_CUSTOM_MODE_ENABLED)"},{"type":"DELETE","lineNumber":355,"oldContent":"        // param2: Custom mode (0=Stabilize, 3=Auto, 5=Loiter, etc.)"},{"type":"DELETE","lineNumber":356,"oldContent":"        // The armed status is handled automatically by ArduPilot, not via the base mode flags"},{"type":"DELETE","lineNumber":357,"oldContent":""},{"type":"INSERT","lineNumber":347,"content":"    /**"},{"type":"INSERT","lineNumber":348,"content":"     * Change vehicle mode (ArduPilot: param1=1, param2=customMode)"},{"type":"INSERT","lineNumber":349,"content":"     * Waits for Heartbeat confirmation."},{"type":"INSERT","lineNumber":350,"content":"     */"},{"type":"INSERT","lineNumber":351,"content":"    suspend fun changeMode(customMode: UInt): Boolean {"},{"type":"DELETE","lineNumber":360,"oldContent":"            1f,                   // param1: MAV_MODE_FLAG_CUSTOM_MODE_ENABLED (always 1)"},{"type":"DELETE","lineNumber":361,"oldContent":"            customMode.toFloat(), // param2: custom mode (0=Stabilize, 3=Auto, 5=Loiter, etc.)"},{"type":"DELETE","lineNumber":362,"oldContent":"            0f,                   // param3: custom sub mode (usually 0)"},{"type":"DELETE","lineNumber":363,"oldContent":"            0f,                   // param4: empty"},{"type":"DELETE","lineNumber":364,"oldContent":"            0f,                   // param5: empty"},{"type":"DELETE","lineNumber":365,"oldContent":"            0f,                   // param6: empty"},{"type":"INSERT","lineNumber":354,"content":"            1f,                   // param1: MAV_MODE_FLAG_CUSTOM_MODE_ENABLED (always 1 for ArduPilot)"},{"type":"INSERT","lineNumber":355,"content":"            customMode.toFloat(), // param2: custom mode (e.g., 3u for AUTO)"},{"type":"INSERT","lineNumber":356,"content":"            0f, 0f, 0f, 0f, 0f"},{"type":"INSERT","lineNumber":358,"content":"        // Wait for Heartbeat to confirm mode change"},{"type":"INSERT","lineNumber":359,"content":"        val timeoutMs = 5000L"},{"type":"INSERT","lineNumber":360,"content":"        val start = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":361,"content":"        val expectedMode = when (customMode) {"},{"type":"INSERT","lineNumber":362,"content":"            3u -> \"Auto\""},{"type":"INSERT","lineNumber":363,"content":"            0u -> \"Stabilize\""},{"type":"INSERT","lineNumber":364,"content":"            5u -> \"Loiter\""},{"type":"INSERT","lineNumber":365,"content":"            else -> \"Unknown\""},{"type":"INSERT","lineNumber":366,"content":"        }"},{"type":"INSERT","lineNumber":367,"content":"        while (System.currentTimeMillis() - start < timeoutMs) {"},{"type":"INSERT","lineNumber":368,"content":"            if (state.value.mode?.contains(expectedMode, ignoreCase = true) == true) {"},{"type":"INSERT","lineNumber":369,"content":"                Log.i(\"MavlinkRepo\", \"Mode changed to ${state.value.mode}\")"},{"type":"INSERT","lineNumber":370,"content":"                return true"},{"type":"INSERT","lineNumber":371,"content":"            }"},{"type":"INSERT","lineNumber":372,"content":"            delay(200)"},{"type":"INSERT","lineNumber":373,"content":"        }"},{"type":"INSERT","lineNumber":374,"content":"        Log.e(\"MavlinkRepo\", \"Mode change to ${customMode} not confirmed in Heartbeat\")"},{"type":"INSERT","lineNumber":375,"content":"        return false"},{"type":"INSERT","lineNumber":385,"content":"            0f,"},{"type":"INSERT","lineNumber":386,"content":"            0f,"},{"type":"DELETE","lineNumber":378,"oldContent":"            0f,"},{"type":"DELETE","lineNumber":380,"oldContent":"            0f,"},{"type":"DELETE","lineNumber":388,"oldContent":"            Log.w(\"MavlinkRepo\", \"No mission items to upload\")"},{"type":"DELETE","lineNumber":390,"oldContent":"            return false"},{"type":"DELETE","lineNumber":393,"oldContent":"        }"},{"type":"DELETE","lineNumber":395,"oldContent":""},{"type":"DELETE","lineNumber":398,"oldContent":"        try {"},{"type":"DELETE","lineNumber":401,"oldContent":"            // Send MissionCount"},{"type":"INSERT","lineNumber":406,"content":"            Log.w(\"MavlinkRepo\", \"No mission items to upload\")"},{"type":"INSERT","lineNumber":407,"content":"            return false"},{"type":"INSERT","lineNumber":408,"content":"        }"},{"type":"INSERT","lineNumber":409,"content":""},{"type":"INSERT","lineNumber":410,"content":"        try {"},{"type":"INSERT","lineNumber":411,"content":"            // Send MissionCount"},{"type":"DELETE","lineNumber":417,"oldContent":"                    try {"},{"type":"INSERT","lineNumber":427,"content":"                    try {"},{"type":"DELETE","lineNumber":431,"oldContent":"                    //.filter { it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":442,"oldContent":"                                }"},{"type":"INSERT","lineNumber":451,"content":"                                }"},{"type":"DELETE","lineNumber":451,"oldContent":"                                    // Always send the requested item (allow retransmits)"},{"type":"DELETE","lineNumber":460,"oldContent":"                                // Vehicle requested the float MissionRequest message (deprecated in some dialects)"},{"type":"DELETE","lineNumber":461,"oldContent":"                                // Respond with MISSION_ITEM_INT (not float) for compatibility with Mission Planner"},{"type":"DELETE","lineNumber":476,"oldContent":"                                    // Always resend when requested"},{"type":"DELETE","lineNumber":486,"oldContent":"                                // ignore other messages"},{"type":"DELETE","lineNumber":487,"oldContent":"                            }"},{"type":"DELETE","lineNumber":489,"oldContent":"                        }"},{"type":"DELETE","lineNumber":490,"oldContent":"                    }"},{"type":"INSERT","lineNumber":494,"content":"                                // ignore other messages"},{"type":"INSERT","lineNumber":495,"content":"                            }"},{"type":"INSERT","lineNumber":496,"content":"                        }"},{"type":"INSERT","lineNumber":497,"content":"                    }"},{"type":"INSERT","lineNumber":498,"content":"            }"},{"type":"INSERT","lineNumber":499,"content":""},{"type":"DELETE","lineNumber":495,"oldContent":"            val firstRequestTimeout = 5000L // increase wait to allow FC more time to request"},{"type":"INSERT","lineNumber":501,"content":"            val firstRequestTimeout = 5000L"},{"type":"INSERT","lineNumber":502,"content":"            val startWait = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":503,"content":"            while (!firstRequestReceived && !ackDeferred.isCompleted && System.currentTimeMillis() - startWait < firstRequestTimeout) {"},{"type":"INSERT","lineNumber":504,"content":"                delay(100)"},{"type":"DELETE","lineNumber":498,"oldContent":"             val startWait = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":499,"oldContent":"             }"},{"type":"DELETE","lineNumber":500,"oldContent":"             while (!firstRequestReceived && !ackDeferred.isCompleted && System.currentTimeMillis() - startWait < firstRequestTimeout) {"},{"type":"DELETE","lineNumber":501,"oldContent":""},{"type":"DELETE","lineNumber":502,"oldContent":"             if (!firstRequestReceived) {"},{"type":"DELETE","lineNumber":503,"oldContent":"                 delay(100)"},{"type":"INSERT","lineNumber":507,"content":"            if (!firstRequestReceived) {"},{"type":"DELETE","lineNumber":505,"oldContent":"                    )"},{"type":"DELETE","lineNumber":506,"oldContent":"                // Send all items sequentially"},{"type":"DELETE","lineNumber":507,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":510,"oldContent":"                        // log full item contents for diagnostics"},{"type":"DELETE","lineNumber":512,"oldContent":"                        Log.d(\"MavlinkRepo\", \"Sending fallback item seq=$seq cmd=${missionItem.command} frame=${missionItem.frame} x=${missionItem.x} y=${missionItem.y} z=${missionItem.z}\")"},{"type":"DELETE","lineNumber":515,"oldContent":"                         connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"DELETE","lineNumber":517,"oldContent":"                         sentSeqs.add(seq)"},{"type":"DELETE","lineNumber":519,"oldContent":"                         Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_ITEM_INT seq=$seq\")"},{"type":"DELETE","lineNumber":520,"oldContent":"                         // give FC a bit more time to process unsolicited item and possibly request next"},{"type":"DELETE","lineNumber":521,"oldContent":"                         delay(300)"},{"type":"DELETE","lineNumber":522,"oldContent":"                     } catch (e: Exception) {"},{"type":"DELETE","lineNumber":523,"oldContent":"                         Log.e(\"MavlinkRepo\", \"Fallback: Failed to send mission item seq=$seq\", e)"},{"type":"DELETE","lineNumber":524,"oldContent":"                     }"},{"type":"DELETE","lineNumber":525,"oldContent":"                 }"},{"type":"DELETE","lineNumber":526,"oldContent":"             }"},{"type":"INSERT","lineNumber":516,"content":"                    )"},{"type":"INSERT","lineNumber":517,"content":"                    try {"},{"type":"INSERT","lineNumber":518,"content":"                        Log.d(\"MavlinkRepo\", \"Sending fallback item seq=$seq cmd=${missionItem.command} frame=${missionItem.frame} x=${missionItem.x} y=${missionItem.y} z=${missionItem.z}\")"},{"type":"INSERT","lineNumber":519,"content":"                        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, missionItem)"},{"type":"INSERT","lineNumber":520,"content":"                        sentSeqs.add(seq)"},{"type":"INSERT","lineNumber":521,"content":"                        Log.i(\"MavlinkRepo\", \"Fallback: Sent MISSION_ITEM_INT seq=$seq\")"},{"type":"INSERT","lineNumber":522,"content":"                        delay(300)"},{"type":"INSERT","lineNumber":523,"content":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":524,"content":"                        Log.e(\"MavlinkRepo\", \"Fallback: Failed to send mission item seq=$seq\", e)"},{"type":"INSERT","lineNumber":525,"content":"                    }"},{"type":"INSERT","lineNumber":526,"content":"                }"},{"type":"INSERT","lineNumber":527,"content":"            }"},{"type":"DELETE","lineNumber":528,"oldContent":"            // Wait for ACK with timeout"},{"type":"DELETE","lineNumber":533,"oldContent":"            // cancel collector and resend jobs"},{"type":"MODIFY","lineNumber":537,"content":"                Log.i(\"MavlinkRepo\", \"Mission upload acknowledged by FCU\")","oldContent":"                Log.i(\"MavlinkRepo\", \"Mission upload acknowledged by FCU\")"},{"type":"DELETE","lineNumber":540,"oldContent":"            }"},{"type":"MODIFY","lineNumber":542,"content":"            }","oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":543,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":551,"oldContent":"    // New helper: request mission from FCU and log items for debugging"},{"type":"DELETE","lineNumber":552,"oldContent":"    @Suppress(\"DEPRECATION\")"},{"type":"DELETE","lineNumber":561,"oldContent":""},{"type":"DELETE","lineNumber":562,"oldContent":"            // map of per-seq deferreds"},{"type":"DELETE","lineNumber":565,"oldContent":"            // collector: listen for count and items and ack"},{"type":"DELETE","lineNumber":567,"oldContent":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_COUNT=${msg.count} from sys=${frame.systemId}\")"},{"type":"DELETE","lineNumber":569,"oldContent":"                            expectedCountDeferred.complete(msg.count.toInt())"},{"type":"INSERT","lineNumber":564,"content":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_COUNT=${msg.count} from sys=${frame.systemId}\")"},{"type":"INSERT","lineNumber":565,"content":"                            expectedCountDeferred.complete(msg.count.toInt())"},{"type":"DELETE","lineNumber":579,"oldContent":"                            // MissionItem is deprecated; log for diagnostics"},{"type":"DELETE","lineNumber":580,"oldContent":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_ITEM seq=${msg.seq} x=${msg.x} y=${msg.y} z=${msg.z}\")"},{"type":"INSERT","lineNumber":574,"content":"                        is MissionItem -> {"},{"type":"INSERT","lineNumber":575,"content":"                            Log.i(\"MavlinkRepo\", \"Readback: MISSION_ITEM seq=${msg.seq} x=${msg.x} y=${msg.y} z=${msg.z}\")"},{"type":"DELETE","lineNumber":584,"oldContent":"                        is MissionItem -> {"},{"type":"DELETE","lineNumber":594,"oldContent":"            // send request list"},{"type":"DELETE","lineNumber":601,"oldContent":""},{"type":"INSERT","lineNumber":594,"content":""},{"type":"DELETE","lineNumber":607,"oldContent":""},{"type":"INSERT","lineNumber":600,"content":""},{"type":"DELETE","lineNumber":611,"oldContent":"            // For each seq, request the item and wait for it"},{"type":"DELETE","lineNumber":623,"oldContent":"                // wait up to 1500ms for the item"},{"type":"DELETE","lineNumber":627,"oldContent":"                    Log.w(\"MavlinkRepo\", \"Did not receive item for seq=$seq within timeout\")"},{"type":"DELETE","lineNumber":630,"oldContent":"                perSeqMap.remove(seq)"},{"type":"DELETE","lineNumber":632,"oldContent":""},{"type":"INSERT","lineNumber":620,"content":"                    Log.w(\"MavlinkRepo\", \"Did not receive item for seq=$seq within timeout\")"},{"type":"DELETE","lineNumber":635,"oldContent":"            job.cancel()"},{"type":"INSERT","lineNumber":623,"content":"                perSeqMap.remove(seq)"},{"type":"DELETE","lineNumber":637,"oldContent":"            // give a moment for any remaining frames"},{"type":"DELETE","lineNumber":638,"oldContent":"            Log.i(\"MavlinkRepo\", \"Mission readback complete: expected=$expectedCount items=${received.size}\")"},{"type":"INSERT","lineNumber":625,"content":""},{"type":"DELETE","lineNumber":640,"oldContent":"            received.sortedBy { it.first }.forEach { (seq, desc) -> Log.i(\"MavlinkRepo\", \"Item #$seq -> $desc\") }"},{"type":"INSERT","lineNumber":627,"content":"            job.cancel()"},{"type":"INSERT","lineNumber":629,"content":"            Log.i(\"MavlinkRepo\", \"Mission readback complete: expected=$expectedCount items=${received.size}\")"},{"type":"INSERT","lineNumber":630,"content":"            received.sortedBy { it.first }.forEach { (seq, desc) -> Log.i(\"MavlinkRepo\", \"Item #$seq -> $desc\") }"},{"type":"DELETE","lineNumber":643,"oldContent":"    }"},{"type":"DELETE","lineNumber":645,"oldContent":""},{"type":"INSERT","lineNumber":634,"content":"    }"},{"type":"INSERT","lineNumber":635,"content":""},{"type":"INSERT","lineNumber":636,"content":"    /**"},{"type":"INSERT","lineNumber":637,"content":"     * Start the mission after uploading."},{"type":"INSERT","lineNumber":638,"content":"     * Sets the current waypoint, sends MISSION_START, and falls back to mode switch if needed."},{"type":"INSERT","lineNumber":639,"content":"     */"},{"type":"DELETE","lineNumber":648,"oldContent":"        // Try sending MISSION_START multiple times and wait for COMMAND_ACK each attempt."},{"type":"DELETE","lineNumber":651,"oldContent":"        }"},{"type":"INSERT","lineNumber":644,"content":"        }"},{"type":"DELETE","lineNumber":654,"oldContent":"        // First, tell FC which mission item to start from (some firmwares expect this)"},{"type":"INSERT","lineNumber":646,"content":"        // Set starting waypoint"},{"type":"DELETE","lineNumber":658,"oldContent":"            // small delay to allow FC to process"},{"type":"DELETE","lineNumber":659,"oldContent":"            // small delay to allow FC to process"},{"type":"INSERT","lineNumber":650,"content":"            Log.i(\"MavlinkRepo\", \"Sent MISSION_SET_CURRENT seq=$first\")"},{"type":"INSERT","lineNumber":656,"content":"        // Try MISSION_START up to 3 times"},{"type":"DELETE","lineNumber":667,"oldContent":""},{"type":"DELETE","lineNumber":670,"oldContent":"                Log.i(\"MavlinkRepo\", \"Attempt $attempt: Sending MISSION_START first=$first last=$last to sys=$fcuSystemId comp=$fcuComponentId\")"},{"type":"DELETE","lineNumber":671,"oldContent":"                        try {"},{"type":"INSERT","lineNumber":661,"content":"                Log.i(\"MavlinkRepo\", \"Attempt $attempt: Sending MISSION_START first=$first last=$last\")"},{"type":"DELETE","lineNumber":673,"oldContent":"                            if (msg.command == MavCmd.MISSION_START.wrap()) {"},{"type":"DELETE","lineNumber":674,"oldContent":"                                val resultVal = msg.result.value"},{"type":"DELETE","lineNumber":676,"oldContent":"                                Log.i(\"MavlinkRepo\", \"Observed COMMAND_ACK for MISSION_START result=$resultVal on attempt $attempt\")"},{"type":"DELETE","lineNumber":677,"oldContent":"                                if (!ackDeferred.isCompleted) ackDeferred.complete(resultVal)"},{"type":"DELETE","lineNumber":679,"oldContent":"                            }"},{"type":"DELETE","lineNumber":680,"oldContent":"                        } catch (t: Throwable) {"},{"type":"DELETE","lineNumber":682,"oldContent":"                            Log.w(\"MavlinkRepo\", \"Error while processing COMMAND_ACK\", t)"},{"type":"DELETE","lineNumber":683,"oldContent":"                        }"},{"type":"INSERT","lineNumber":667,"content":"            // Wait for COMMAND_ACK"},{"type":"INSERT","lineNumber":668,"content":"            val ackDeferred = CompletableDeferred<UInt?>()"},{"type":"INSERT","lineNumber":669,"content":"            val job = AppScope.launch {"},{"type":"INSERT","lineNumber":670,"content":"                connection.mavFrame.collect { frame ->"},{"type":"INSERT","lineNumber":671,"content":"                    val msg = frame.message"},{"type":"INSERT","lineNumber":672,"content":"                    if (msg is CommandAck && msg.command == MavCmd.MISSION_START.wrap()) {"},{"type":"INSERT","lineNumber":673,"content":"                        if (!ackDeferred.isCompleted) ackDeferred.complete(msg.result.value)"},{"type":"DELETE","lineNumber":687,"oldContent":"            // wait for COMMAND_ACK for MISSION_START"},{"type":"DELETE","lineNumber":689,"oldContent":""},{"type":"DELETE","lineNumber":690,"oldContent":"            val ackDeferred = CompletableDeferred<UInt?>()"},{"type":"DELETE","lineNumber":693,"oldContent":"            val job = AppScope.launch {"},{"type":"DELETE","lineNumber":695,"oldContent":"                connection.mavFrame.collect { frame ->"},{"type":"DELETE","lineNumber":696,"oldContent":"            if (result != null) {"},{"type":"DELETE","lineNumber":697,"oldContent":"                if (result == 0u) {"},{"type":"DELETE","lineNumber":698,"oldContent":"                    val msg = frame.message"},{"type":"DELETE","lineNumber":699,"oldContent":"                    Log.i(\"MavlinkRepo\", \"Mission start acknowledged by FCU on attempt $attempt\")"},{"type":"DELETE","lineNumber":700,"oldContent":"                    if (msg is CommandAck) {"},{"type":"DELETE","lineNumber":701,"oldContent":"                    return true"},{"type":"DELETE","lineNumber":702,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":703,"oldContent":"                    Log.e(\"MavlinkRepo\", \"Mission start rejected by FCU on attempt $attempt with result=$result\")"},{"type":"DELETE","lineNumber":704,"oldContent":"                    // Don't retry on a negative ACK; break and return failure"},{"type":"DELETE","lineNumber":705,"oldContent":"                    return false"},{"type":"DELETE","lineNumber":706,"oldContent":"                }"},{"type":"INSERT","lineNumber":680,"content":"            if (result == 0u) { // MAV_RESULT_ACCEPTED"},{"type":"INSERT","lineNumber":681,"content":"                Log.i(\"MavlinkRepo\", \"Mission start acknowledged by FCU\")"},{"type":"INSERT","lineNumber":682,"content":"                return true"},{"type":"INSERT","lineNumber":683,"content":"            } else if (result != null) {"},{"type":"INSERT","lineNumber":684,"content":"                Log.e(\"MavlinkRepo\", \"Mission start rejected by FCU with result=$result\")"},{"type":"INSERT","lineNumber":685,"content":"                return false"},{"type":"DELETE","lineNumber":708,"oldContent":"                Log.w(\"MavlinkRepo\", \"No COMMAND_ACK for MISSION_START on attempt $attempt (timeout)\")"},{"type":"DELETE","lineNumber":709,"oldContent":"                // try again after short delay"},{"type":"DELETE","lineNumber":710,"oldContent":"                delay(500L)"},{"type":"INSERT","lineNumber":687,"content":"                Log.w(\"MavlinkRepo\", \"No COMMAND_ACK for MISSION_START on attempt $attempt\")"},{"type":"INSERT","lineNumber":688,"content":"                delay(500)"},{"type":"DELETE","lineNumber":714,"oldContent":"        Log.e(\"MavlinkRepo\", \"MISSION_START not acknowledged after $maxAttempts attempts - trying fallback start (set current + change mode to AUTO)\")"},{"type":"DELETE","lineNumber":715,"oldContent":""},{"type":"DELETE","lineNumber":716,"oldContent":"        // Fallback approach: set mission current and change mode to AUTO (many FCs start mission when switched to AUTO)"},{"type":"INSERT","lineNumber":692,"content":"        // Fallback: set current + change mode to AUTO"},{"type":"INSERT","lineNumber":693,"content":"        Log.e(\"MavlinkRepo\", \"MISSION_START not acknowledged, attempting fallback: set current + mode AUTO\")"},{"type":"DELETE","lineNumber":724,"oldContent":""},{"type":"DELETE","lineNumber":725,"oldContent":"        // Request mode change to AUTO using DO_SET_MODE"},{"type":"DELETE","lineNumber":726,"oldContent":"        try {"},{"type":"DELETE","lineNumber":727,"oldContent":"            Log.i(\"MavlinkRepo\", \"Fallback: Requesting mode change to AUTO via DO_SET_MODE\")"},{"type":"DELETE","lineNumber":728,"oldContent":"            changeMode(3u) // AUTO mode"},{"type":"DELETE","lineNumber":729,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":730,"oldContent":"            Log.w(\"MavlinkRepo\", \"Fallback: Failed to send DO_SET_MODE\", e)"},{"type":"INSERT","lineNumber":701,"content":"        val modeChanged = changeMode(3u) // 3u = AUTO"},{"type":"INSERT","lineNumber":702,"content":"        if (modeChanged) {"},{"type":"INSERT","lineNumber":703,"content":"            Log.i(\"MavlinkRepo\", \"Fallback: Vehicle switched to AUTO mode\")"},{"type":"INSERT","lineNumber":704,"content":"            delay(500)"},{"type":"INSERT","lineNumber":705,"content":"            return true"},{"type":"DELETE","lineNumber":732,"oldContent":""},{"type":"DELETE","lineNumber":733,"oldContent":"        // Wait for telemetry mode to reflect AUTO for a short period"},{"type":"DELETE","lineNumber":734,"oldContent":"        val modeWaitMs = 5000L"},{"type":"DELETE","lineNumber":735,"oldContent":"        val startWaitMode = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":736,"oldContent":"        while (System.currentTimeMillis() - startWaitMode < modeWaitMs) {"},{"type":"DELETE","lineNumber":737,"oldContent":"            if (state.value.mode?.contains(\"Auto\", ignoreCase = true) == true) {"},{"type":"DELETE","lineNumber":738,"oldContent":"                Log.i(\"MavlinkRepo\", \"Fallback: Vehicle switched to AUTO mode\")"},{"type":"DELETE","lineNumber":739,"oldContent":"                // Give FC a moment to start the mission"},{"type":"DELETE","lineNumber":740,"oldContent":"                delay(500)"},{"type":"DELETE","lineNumber":741,"oldContent":"                return true"},{"type":"DELETE","lineNumber":742,"oldContent":"            }"},{"type":"DELETE","lineNumber":743,"oldContent":"            delay(200)"},{"type":"DELETE","lineNumber":744,"oldContent":"        }"},{"type":"DELETE","lineNumber":745,"oldContent":""},{"type":"DELETE","lineNumber":746,"oldContent":"        Log.e(\"MavlinkRepo\", \"Fallback start failed: vehicle did not switch to AUTO mode\")"},{"type":"INSERT","lineNumber":707,"content":"        Log.e(\"MavlinkRepo\", \"Fallback failed: vehicle did not switch to AUTO mode\")"},{"type":"DELETE","lineNumber":750,"oldContent":""}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uimain/TopNavBar.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uimain/TopNavBar.kt","baseContent":"package com.example.aerogcsclone.uimain\n\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.*\nimport androidx.compose.material3.DropdownMenu\nimport androidx.compose.material3.DropdownMenuItem\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.compose.ui.window.Popup\nimport androidx.navigation.NavHostController\nimport com.example.aerogcsclone.Telemetry.TelemetryState\nimport com.example.aerogcsclone.authentication.AuthViewModel\nimport com.example.aerogcsclone.navigation.Screen\n\n@Composable\nfun TopNavBar(\n    telemetryState: TelemetryState,\n    authViewModel: AuthViewModel,\n    navController: NavHostController\n) {\n    var menuExpanded by remember { mutableStateOf(false) }\n    var kebabMenuExpanded by remember { mutableStateOf(false) }\n    var selectedMode by remember { mutableStateOf<String?>(null) } // null by default\n\n    Box(\n        modifier = Modifier\n            .fillMaxWidth()\n            .height(70.dp)\n            .background(\n                brush = Brush.horizontalGradient(\n                    colors = listOf(Color(0xFF87CEEB), Color(0xFF4A90E2))\n                )\n            )\n            .padding(horizontal = 12.dp),\n        contentAlignment = Alignment.CenterStart\n    ) {\n        Row(\n            modifier = Modifier.fillMaxWidth(),\n            verticalAlignment = Alignment.CenterVertically\n        ) {\n            // Hamburger menu\n            Box {\n                Icon(\n                    Icons.Default.Menu,\n                    contentDescription = \"Menu\",\n                    tint = Color.White,\n                    modifier = Modifier.clickable { menuExpanded = true }\n                )\n                if (menuExpanded) {\n                    Popup(onDismissRequest = { menuExpanded = false }) {\n                        Column(\n                            modifier = Modifier\n                                .background(Color.Black.copy(alpha = 0.5f))\n                                .width(180.dp)\n                                .padding(vertical = 8.dp, horizontal = 16.dp)\n                        ) {\n                            Text(\n                                text = \"Automatic\",\n                                color = Color.White,\n                                fontSize = 22.sp,\n                                modifier = Modifier\n                                    .padding(16.dp)\n                                    .clickable {\n                                        selectedMode = \"Automatic\"\n                                        menuExpanded = false\n                                        navController.navigate(Screen.Plan.route)\n                                    }\n                            )\n                            Text(\n                                text = \"Manual\",\n                                color = Color.White,\n                                fontSize = 22.sp,\n                                modifier = Modifier\n                                    .padding(16.dp)\n                                    .clickable {\n                                        selectedMode = \"Manual\"\n                                        menuExpanded = false\n                                    }\n                            )\n                        }\n                    }\n                }\n            }\n\n            Spacer(modifier = Modifier.width(12.dp))\n\n            // Home icon\n            Icon(\n                Icons.Default.Home,\n                contentDescription = \"Home\",\n                tint = Color.White,\n                modifier = Modifier.clickable {\n                    navController.navigate(Screen.Connection.route)\n                }\n            )\n\n            Spacer(modifier = Modifier.width(16.dp))\n\n            // Title & Mode\n            Column(\n                verticalArrangement = Arrangement.Center,\n                horizontalAlignment = Alignment.Start\n            ) {\n                Spacer(modifier = Modifier.height(10.dp))\n                Text(\n                    text = \"Pavaman Aviation\",\n                    color = Color.White,\n                    fontWeight = FontWeight.Bold,\n                    fontSize = 25.sp\n                )\n                Spacer(modifier = Modifier.height(2.dp))\n                // Show selected mode only if not null\n                selectedMode?.let {\n                    Text(\n                        text = it,\n                        color = Color.White.copy(alpha = 0.7f),\n                        fontSize = 15.sp\n                    )\n                }\n            }\n\n            Spacer(modifier = Modifier.weight(1f))\n\n            // Status & telemetry\n            Row(verticalAlignment = Alignment.CenterVertically) {\n                ConnectionStatusWidget(isConnected = telemetryState.connected)\n                DividerBlock()\n                InfoBlock(Icons.Default.Flight, \"13%\")\n                DividerBlock()\n                InfoBlock(Icons.Default.BatteryFull, \"${telemetryState.batteryPercent ?: \"N/A\"}%\")\n                DividerBlock()\n                InfoBlock(Icons.Default.Gamepad, \"100%\")\n                DividerBlock()\n                InfoBlockGroup(\n                    Icons.Default.Bolt,\n                    listOf(\n                        \"${telemetryState.voltage ?: \"N/A\"} V\",\n                        \"${telemetryState.currentA ?: \"N/A\"} A\"\n                    )\n                )\n                DividerBlock()\n                InfoBlockGroup(\n                    Icons.Default.SatelliteAlt,\n                    listOf(\n                        \"${telemetryState.sats ?: \"N/A\"} sats\",\n                        \"${telemetryState.hdop ?: \"N/A\"} hdop\"\n                    )\n                )\n                DividerBlock()\n                InfoBlockGroup(\n                    Icons.Default.Sync,\n                    listOf(\"${telemetryState.mode}\", if (telemetryState.armed) \"Armed\" else \"Disarmed\")\n                )\n                DividerBlock()\n\n                // Kebab menu\n                Box {\n                    Icon(\n                        Icons.Default.MoreVert,\n                        contentDescription = \"More\",\n                        tint = Color.White,\n                        modifier = Modifier.clickable { kebabMenuExpanded = true }\n                    )\n                    DropdownMenu(\n                        expanded = kebabMenuExpanded,\n                        onDismissRequest = { kebabMenuExpanded = false }\n                    ) {\n                        DropdownMenuItem(\n                            text = { Text(\"Settings\") },\n                            onClick = { kebabMenuExpanded = false }\n                        )\n                        DropdownMenuItem(\n                            text = { Text(\"About App\") },\n                            onClick = { kebabMenuExpanded = false }\n                        )\n                        DropdownMenuItem(\n                            text = { Text(\"Logout\") },\n                            onClick = {\n                                kebabMenuExpanded = false\n                                authViewModel.signout()\n                                navController.navigate(Screen.Login.route) {\n                                    popUpTo(0)\n                                }\n                            }\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun ConnectionStatusWidget(isConnected: Boolean) {\n    val statusColor = if (isConnected) Color.Green else Color.Red\n    val statusText = if (isConnected) \"Connected\" else \"Disconnected\"\n\n    Row(verticalAlignment = Alignment.CenterVertically) {\n        Box(\n            modifier = Modifier\n                .size(10.dp)\n                .background(statusColor, shape = CircleShape)\n        )\n        Spacer(modifier = Modifier.width(4.dp))\n        Text(statusText, color = Color.White, fontSize = 12.sp)\n    }\n}\n\n@Composable\nfun DividerBlock() {\n    Box(\n        modifier = Modifier\n            .padding(horizontal = 8.dp)\n            .width(1.dp)\n            .height(30.dp)\n            .background(Color.White.copy(alpha = 0.7f))\n    )\n}\n\n@Composable\nfun InfoBlock(icon: ImageVector, value: String) {\n    Column(\n        modifier = Modifier.padding(horizontal = 6.dp),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        Icon(icon, contentDescription = null, tint = Color.White, modifier = Modifier.size(18.dp))\n        Spacer(modifier = Modifier.height(2.dp))\n        Text(value, color = Color.White, fontSize = 12.sp)\n    }\n}\n\n@Composable\nfun InfoBlockGroup(icon: ImageVector, values: List<String>) {\n    Column(\n        modifier = Modifier.padding(horizontal = 6.dp),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        Icon(icon, contentDescription = null, tint = Color.White, modifier = Modifier.size(18.dp))\n        Spacer(modifier = Modifier.height(2.dp))\n        values.forEach { value ->\n            Text(value, color = Color.White, fontSize = 12.sp)\n        }\n    }\n}\n","baseTimestamp":1757924404905},"/Dummy.lcf":{"filePath":"/Dummy.lcf","baseContent":"","baseTimestamp":1757915507465,"deltas":[{"timestamp":1757925623131,"changes":[{"type":"MODIFY","lineNumber":0,"content":"MavLinkRepo","oldContent":""}]},{"timestamp":1757998590434,"changes":[{"type":"MODIFY","lineNumber":0,"content":"MavLinkRepo mission","oldContent":"MavLinkRepo"}]},{"timestamp":1757998597507,"changes":[{"type":"MODIFY","lineNumber":0,"content":"mode","oldContent":"MavLinkRepo mission"}]},{"timestamp":1757998603243,"changes":[{"type":"MODIFY","lineNumber":0,"content":"MavLinkRepo","oldContent":"mode"}]},{"timestamp":1758011065783,"changes":[{"type":"MODIFY","lineNumber":0,"content":"map","oldContent":"MavLinkRepo"}]},{"timestamp":1758011422221,"changes":[{"type":"MODIFY","lineNumber":0,"content":"MavLinkRepo","oldContent":"map"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/Telemetry/MavMode.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/Telemetry/MavMode.kt","baseContent":"package com.example.aerogcsclone.Telemetry\n\ndata class MavMode {\n}","baseTimestamp":1758003545093,"deltas":[{"timestamp":1758003550062,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"data class MavMode {"},{"type":"DELETE","lineNumber":3,"oldContent":"}"},{"type":"INSERT","lineNumber":2,"content":"data class MavMode()"}]},{"timestamp":1758003552620,"changes":[{"type":"MODIFY","lineNumber":2,"content":"data class MavMode(val value: UInt)","oldContent":"data class MavMode()"}]}]}}}