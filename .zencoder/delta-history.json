{"snapshots":{"C:/Users/Hrushikesh/AndroidStudioProjects/aerogcsclone/app/src/main/AndroidManifest.xml":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/aerogcsclone/app/src/main/AndroidManifest.xml","baseContent":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\">\n\n    <application\n        android:allowBackup=\"true\"\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\n        android:fullBackupContent=\"@xml/backup_rules\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/Theme.Aerogcsclone\"\n        tools:targetApi=\"31\">\n        <activity\n            android:name=\".MainActivity\"\n            android:exported=\"true\"\n            android:label=\"@string/app_name\"\n            android:theme=\"@style/Theme.Aerogcsclone\"\n            android:screenOrientation=\"landscape\">\n\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n    </application>\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n\n</manifest>","baseTimestamp":1757064897211},"C:/Users/Hrushikesh/AndroidStudioProjects/aerogcsclone/app/build.gradle.kts":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/aerogcsclone/app/build.gradle.kts","baseContent":"plugins {\n    alias(libs.plugins.android.application)\n    alias(libs.plugins.kotlin.android)\n    alias(libs.plugins.kotlin.compose)\n}\n\nandroid {\n    namespace = \"com.example.aerogcsclone\"\n    compileSdk = 36\n\n    defaultConfig {\n        applicationId = \"com.example.aerogcsclone\"\n        minSdk = 26\n        targetSdk = 35\n        versionCode = 1\n        versionName = \"1.0\"\n\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\n    }\n\n    buildTypes {\n        release {\n            isMinifyEnabled = false\n            proguardFiles(\n                getDefaultProguardFile(\"proguard-android-optimize.txt\"),\n                \"proguard-rules.pro\"\n            )\n        }\n    }\n    compileOptions {\n        sourceCompatibility = JavaVersion.VERSION_11\n        targetCompatibility = JavaVersion.VERSION_11\n    }\n    kotlinOptions {\n        jvmTarget = \"11\"\n    }\n    buildFeatures {\n        compose = true\n    }\n}\ndependencies {\n    // Core + lifecycle\n    implementation(libs.androidx.core.ktx)\n    implementation(libs.androidx.lifecycle.runtime.ktx)\n    implementation(libs.androidx.activity.compose)\n\n    // Compose BOM (manages versions automatically)\n    implementation(platform(libs.androidx.compose.bom))\n\n    // Compose UI\n    implementation(libs.androidx.ui)\n    implementation(libs.androidx.ui.graphics)\n    implementation(libs.androidx.ui.tooling.preview)\n\n    // Material3 (only one source, from libs)\n    implementation(libs.androidx.material3)\n\n    // Navigation\n    implementation(\"androidx.navigation:navigation-compose:2.9.3\")\n\n    // Material Icons Extended (choose one approach â†’ using BOM-managed one)\n    implementation(\"androidx.compose.material:material-icons-extended\")\n\n    // Testing\n    testImplementation(libs.junit)\n    androidTestImplementation(libs.androidx.junit)\n    androidTestImplementation(libs.androidx.espresso.core)\n    androidTestImplementation(platform(libs.androidx.compose.bom))\n    androidTestImplementation(libs.androidx.ui.test.junit4)\n\n    debugImplementation(libs.androidx.ui.tooling)\n    debugImplementation(libs.androidx.ui.test.manifest)\n}\ndependencies {\n    // MAVLink message definitions (standard dialects like common.xml)\n    implementation(\"com.divpundir.mavlink:definitions:1.2.8\")\n\n\n    // TCP connection client\n    implementation(\"com.divpundir.mavlink:connection-tcp:1.2.8\")\n\n\n    // Coroutines adapter (recommended for Android)\n    implementation(\"com.divpundir.mavlink:adapter-coroutines:1.2.8\")\n}\n\n\n","baseTimestamp":1757064987165},"C:/Users/Hrushikesh/AndroidStudioProjects/aerogcsclone/app/src/main/java/com/example/aerogcsclone/Telemetry/TelemetryRepository.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/aerogcsclone/app/src/main/java/com/example/aerogcsclone/Telemetry/TelemetryRepository.kt","baseContent":"package com.example.aerogcsclone.Telemetry\n\nimport android.util.Log\nimport com.divpundir.mavlink.adapters.coroutines.asCoroutine\nimport com.divpundir.mavlink.adapters.coroutines.tryConnect\nimport com.divpundir.mavlink.adapters.coroutines.trySendUnsignedV2\nimport com.divpundir.mavlink.api.wrap\nimport com.divpundir.mavlink.connection.StreamState\nimport com.divpundir.mavlink.connection.tcp.TcpClientMavConnection\nimport com.divpundir.mavlink.definitions.common.*\nimport com.divpundir.mavlink.definitions.minimal.*\nimport com.example.kotlingcspractice.Telemetry.AppScope\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.flow.*\nimport kotlinx.coroutines.isActive\nimport kotlinx.coroutines.launch\n\nobject MavlinkTelemetryRepository {\n    private const val host: String = \"10.0.2.2\"\n    private const val port: Int = 5762\n    private val gcsSystemId: UByte = 200u\n    private val gcsComponentId: UByte = 1u\n    private val _state = MutableStateFlow(TelemetryState())\n    val state: StateFlow<TelemetryState> = _state.asStateFlow()\n\n    private var fcuSystemId: UByte = 0u\n    private var fcuComponentId: UByte = 0u\n\n    // Diagnostic info\n    private val _lastFailure = MutableStateFlow<Throwable?>(null)\n    val lastFailure: StateFlow<Throwable?> = _lastFailure.asStateFlow()\n\n    // Connection\n    private val connection = TcpClientMavConnection(host, port, CommonDialect).asCoroutine()\n\n    fun start() {\n        val scope = AppScope\n\n        suspend fun reconnect(scope: kotlinx.coroutines.CoroutineScope) {\n            while (scope.isActive) {\n                try {\n                    if (connection.tryConnect(scope)) {\n                        return // Exit on successful connection\n                    }\n                } catch (e: Exception) {\n                    Log.e(\"MavlinkRepo\", \"Connection attempt failed\", e)\n                    _lastFailure.value = e\n                }\n                delay(1000)\n            }\n        }\n\n        // Manage connection state + reconnects\n        scope.launch {\n            reconnect(this) // Initial connection attempt\n            connection.streamState.collect { st ->\n                when (st) {\n                    is StreamState.Active -> {\n                        if (!state.value.connected) {\n                            Log.i(\"MavlinkRepo\", \"Connection Active\")\n                            _state.update { it.copy(connected = true) }\n                        }\n                    }\n                    is StreamState.Inactive -> {\n                        if (state.value.connected) {\n                            Log.i(\"MavlinkRepo\", \"Connection Inactive, reconnecting...\")\n                            _state.update { it.copy(connected = false, fcuDetected = false) }\n                            reconnect(this)\n                        }\n                    }\n                }\n            }\n        }\n\n        // Send GCS heartbeat\n        scope.launch {\n            val heartbeat = Heartbeat(\n                type = MavType.GCS.wrap(),\n                autopilot = MavAutopilot.INVALID.wrap(),\n                baseMode = emptyList<MavModeFlag>().wrap(),\n                customMode = 0u,\n                mavlinkVersion = 3u\n            )\n            while (isActive) {\n                if (state.value.connected) {\n                    try {\n                        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, heartbeat)\n                    } catch (e: Exception) {\n                        Log.e(\"MavlinkRepo\", \"Failed to send heartbeat\", e)\n                        _lastFailure.value = e\n                    }\n                }\n                delay(1000)\n            }\n        }\n\n        // Shared message stream\n        val mavFrameStream = connection.mavFrame\n            .shareIn(scope, SharingStarted.Eagerly, replay = 0)\n\n        // Log raw messages\n        scope.launch {\n            mavFrameStream.collect {\n                Log.d(\"MavlinkRepo\", \"Frame: ${it.message.javaClass.simpleName} (sysId=${it.systemId}, compId=${it.componentId})\")\n            }\n        }\n\n        // Detect FCU\n        scope.launch {\n            mavFrameStream\n                .filter { it.message is Heartbeat && (it.message as Heartbeat).type != MavType.GCS.wrap() }\n                .collect {\n                    if (!state.value.fcuDetected) {\n                        fcuSystemId = it.systemId\n                        fcuComponentId = it.componentId\n                        Log.i(\"MavlinkRepo\", \"FCU detected sysId=$fcuSystemId compId=$fcuComponentId\")\n                        _state.update { it.copy(fcuDetected = true) }\n\n                        // Set message intervals\n                        launch {\n                            suspend fun setMessageRate(messageId: UInt, hz: Float) {\n                                val intervalUsec = if (hz <= 0f) 0f else (1_000_000f / hz)\n                                val cmd = CommandLong(\n                                    targetSystem = fcuSystemId,\n                                    targetComponent = fcuComponentId,\n                                    command = MavCmd.SET_MESSAGE_INTERVAL.wrap(),\n                                    confirmation = 0u,\n                                    param1 = messageId.toFloat(),\n                                    param2 = intervalUsec,\n                                    param3 = 0f,\n                                    param4 = 0f,\n                                    param5 = 0f,\n                                    param6 = 0f,\n                                    param7 = 0f\n                                )\n                                try {\n                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, cmd)\n                                } catch (e: Exception) {\n                                    Log.e(\"MavlinkRepo\", \"Failed to send SET_MESSAGE_INTERVAL\", e)\n                                    _lastFailure.value = e\n                                }\n                            }\n\n                            setMessageRate(1u, 1f)   // SYS_STATUS\n                            setMessageRate(24u, 1f)  // GPS_RAW_INT\n                            setMessageRate(33u, 5f)  // GLOBAL_POSITION_INT\n                            setMessageRate(74u, 5f)  // VFR_HUD\n                            setMessageRate(147u, 1f) // BATTERY_STATUS\n                        }\n                    }\n                }\n        }\n\n        // Collectors\n\n        // VFR_HUD\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .filterIsInstance<VfrHud>()\n                .collect { hud ->\n                    _state.update {\n                        it.copy(\n                            altitudeMsl = hud.alt,\n                            airspeed = hud.airspeed.takeIf { v -> v > 0f },\n                            groundspeed = hud.groundspeed.takeIf { v -> v > 0f }\n                        )\n                    }\n                }\n        }\n\n        // GLOBAL_POSITION_INT\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .filterIsInstance<GlobalPositionInt>()\n                .collect { gp ->\n                    val altAMSLm = gp.alt / 1000f\n                    val relAltM = gp.relativeAlt / 1000f\n                    val lat = gp.lat.takeIf { it != Int.MIN_VALUE }?.let { it / 10_000_000.0 }\n                    val lon = gp.lon.takeIf { it != Int.MIN_VALUE }?.let { it / 10_000_000.0 }\n                    _state.update {\n                        it.copy(\n                            altitudeMsl = altAMSLm,\n                            altitudeRelative = relAltM,\n                            latitude = lat,\n                            longitude = lon\n                        )\n                    }\n                }\n        }\n\n        // BATTERY_STATUS\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .filterIsInstance<BatteryStatus>()\n                .collect { b ->\n                    val currentA = if (b.currentBattery.toInt() == -1) null else b.currentBattery / 100f\n                    _state.update { it.copy(currentA = currentA) }\n                }\n        }\n\n        // SYS_STATUS\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .filterIsInstance<SysStatus>()\n                .collect { s ->\n                    val vBatt = if (s.voltageBattery.toUInt() == 0xFFFFu) null else s.voltageBattery.toFloat() / 1000f\n                    val pct = if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()\n                    _state.update { it.copy(voltage = vBatt, batteryPercent = pct) }\n                }\n        }\n\n        // GPS_RAW_INT\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .filterIsInstance<GpsRawInt>()\n                .collect { gps ->\n                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }\n                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f\n                    _state.update { it.copy(sats = sats, hdop = hdop) }\n                }\n        }\n    }\n}\n","baseTimestamp":1757065163389,"deltas":[{"timestamp":1757065182100,"changes":[{"type":"MODIFY","lineNumber":11,"content":"import com.example.aerogcsclone.Telemetry.AppScope","oldContent":"import com.example.kotlingcspractice.Telemetry.AppScope"}]},{"timestamp":1757065448203,"changes":[{"type":"MODIFY","lineNumber":53,"content":"        scope {","oldContent":"        scope.launch {"}]},{"timestamp":1757065460615,"changes":[{"type":"MODIFY","lineNumber":53,"content":"        scope.launch {","oldContent":"        scope {"}]},{"timestamp":1757065465809,"changes":[{"type":"DELETE","lineNumber":11,"oldContent":"import com.example.aerogcsclone.Telemetry.AppScope"}]},{"timestamp":1757065473687,"changes":[{"type":"INSERT","lineNumber":11,"content":"import com.example.aerogcsclone.Telemetry.AppScope"}]},{"timestamp":1757065479666,"changes":[{"type":"DELETE","lineNumber":11,"oldContent":"import com.example.aerogcsclone.Telemetry.AppScope"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/aerogcsclone/app/src/main/java/com/example/aerogcsclone/Telemetry/Data.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/aerogcsclone/app/src/main/java/com/example/aerogcsclone/Telemetry/Data.kt","baseContent":"package com.example.aerogcsclone.Telemetry\n\ndata class TelemetryState(\n\n    val connected : Boolean = false,\n    val fcuDetected : Boolean = false,\n    //Altitude\n    val altitudeMsl: Float? = null,\n    val altitudeRelative: Float? = null,\n    //Speeds\n    val airspeed: Float? = null,\n    val groundspeed: Float? = null,\n    //Battery\n    val voltage: Float? = null,\n    val batteryPercent: Int? = null,\n    val currentA : Float? = null,\n    //Sat count and HDOP\n    val sats : Int? = null,\n    val hdop : Float? = null,\n    //Latitude and Longitude\n    val latitude : Double? = null,\n    val longitude : Double? = null\n)","baseTimestamp":1757065204776},"C:/Users/Hrushikesh/AndroidStudioProjects/aerogcsclone/app/src/main/java/com/example/aerogcsclone/Telemetry/TelemetryViewModel.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/aerogcsclone/app/src/main/java/com/example/aerogcsclone/Telemetry/TelemetryViewModel.kt","baseContent":"package com.example.aerogcsclone.Telemetry\n\nimport androidx.lifecycle.ViewModel\nimport kotlinx.coroutines.flow.StateFlow\n\nclass TelemetryViewModel : ViewModel() {\n\n    private val repo = MavlinkTelemetryRepository\n\n    // Expose as a StateFlow for Compose to observe\n    val telemetry: StateFlow<TelemetryState> = repo.state\n\n\n    init {\n        // Start the MAVLink telemetry collection\n        repo.start()\n    }\n}\n","baseTimestamp":1757065283856},"C:/Users/Hrushikesh/AndroidStudioProjects/aerogcsclone/app/src/main/java/com/example/aerogcsclone/Telemetry/AppScope.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/aerogcsclone/app/src/main/java/com/example/aerogcsclone/Telemetry/AppScope.kt","baseContent":"package com.example.aerogcsclone.Telemetry\n\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.SupervisorJob\n\nobject AppScope : CoroutineScope by CoroutineScope(SupervisorJob() + Dispatchers.IO)\n","baseTimestamp":1757065582737},"C:/Users/Hrushikesh/AndroidStudioProjects/aerogcsclone/app/src/main/java/com/example/aerogcsclone/uimain/TopNavBar.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/aerogcsclone/app/src/main/java/com/example/aerogcsclone/uimain/TopNavBar.kt","baseContent":"package com.example.aerogcsclone.uimain\n\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.*\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.focus.focusModifier\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\n\n@Composable\nfun TopNavBar() {\n    Box(\n        modifier = Modifier\n            .fillMaxWidth()\n            .height(70.dp)\n            .background(\n                brush = Brush.horizontalGradient(\n                    colors = listOf(Color(0xFF87CEEB), Color(0xFF4A90E2))\n                )\n            )\n            .padding(horizontal = 12.dp),\n        contentAlignment = Alignment.CenterStart\n    ) {\n        Row(\n            modifier = Modifier.fillMaxWidth(),\n            verticalAlignment = Alignment.CenterVertically\n        ) {\n            // Left section\n            Icon(Icons.Default.Menu, contentDescription = \"Menu\", tint = Color.White)\n            Spacer(modifier = Modifier.width(12.dp))\n            Icon(Icons.Default.Home, contentDescription = \"Home\", tint = Color.White)\n            Spacer(modifier = Modifier.width(16.dp))\n\n            // Title block\n            Column(\n                verticalArrangement = Arrangement.Center,\n                horizontalAlignment = Alignment.Start\n            ) {\n                Spacer(modifier= Modifier.height(10.dp))\n                Text(\n                    text = \"Pavaman Aviation\",\n                    color = Color.White,\n                    fontWeight = FontWeight.Bold,\n                    fontSize = 25.sp\n                )\n                Spacer(modifier = Modifier.height(2.dp))\n                Text(\n                    text = \"Manual\",\n                    color = Color.White.copy(alpha = 0.7f),\n                    fontSize = 15.sp\n                )\n            }\n\n            Spacer(modifier = Modifier.weight(1f))\n\n            // Right section (info blocks)\n            Row(\n                verticalAlignment = Alignment.CenterVertically\n            ) {\n                InfoBlock(Icons.Default.Flight, )\n                DividerBlock()\n                InfoBlock(Icons.Default.BatteryFull, \"12.600 V\")\n                DividerBlock()\n                InfoBlock(Icons.Default.Gamepad, \"100%\")\n                DividerBlock()\n                InfoBlockGroup(Icons.Default.Bolt, listOf(\"561 mAh\", \"28.12 A\"))\n                DividerBlock()\n                InfoBlockGroup(Icons.Default.SatelliteAlt, listOf(\"10 sats\", \"1.2 hdop\"))\n                DividerBlock()\n                InfoBlockGroup(Icons.Default.Sync, listOf(\"Stabilize\", \"Arm\"))\n                DividerBlock()\n                Icon(Icons.Default.MoreVert, contentDescription = \"More\", tint = Color.White)\n            }\n        }\n    }\n}\n\n@Composable\nfun DividerBlock() {\n    Box(\n        modifier = Modifier\n            .padding(horizontal = 8.dp) // spacing between items\n            .width(1.dp)\n            .height(30.dp)\n            .background(Color.White.copy(alpha = 0.7f))\n    )\n}\n\n@Composable\nfun InfoBlock(icon: ImageVector, value: String) {\n    Column(\n        modifier = Modifier.padding(horizontal = 6.dp),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        Icon(icon, contentDescription = null, tint = Color.White, modifier = Modifier.size(18.dp))\n        Spacer(modifier = Modifier.height(2.dp))\n        Text(value, color = Color.White, fontSize = 12.sp)\n    }\n}\n\n@Composable\nfun InfoBlockGroup(icon: ImageVector, values: List<String>) {\n    Column(\n        modifier = Modifier.padding(horizontal = 6.dp),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        Icon(icon, contentDescription = null, tint = Color.White, modifier = Modifier.size(18.dp))\n        Spacer(modifier = Modifier.height(2.dp))\n        values.forEach { value ->\n            Text(value, color = Color.White, fontSize = 12.sp)\n        }\n    }\n}\n","baseTimestamp":1757065672139,"deltas":[{"timestamp":1757065703115,"changes":[{"type":"MODIFY","lineNumber":69,"content":"                InfoBlock(Icons.Default.Flight, state.altitudeMsl?.let { \"${fmt(it)} m\" } ?: \"â€”\")","oldContent":"                InfoBlock(Icons.Default.Flight, )"}]},{"timestamp":1757065707947,"changes":[{"type":"INSERT","lineNumber":18,"content":"import com.example.aerogcsclone.Telemetry.MavlinkTelemetryRepository.state"}]},{"timestamp":1757065747854,"changes":[{"type":"DELETE","lineNumber":18,"oldContent":"import com.example.aerogcsclone.Telemetry.MavlinkTelemetryRepository.state"},{"type":"MODIFY","lineNumber":69,"content":"                InfoBlock(Icons.Default.Flight, \"13%\")","oldContent":"                InfoBlock(Icons.Default.Flight, state.altitudeMsl?.let { \"${fmt(it)} m\" } ?: \"â€”\")"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/Telemetry/SharedViewModel.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/Telemetry/SharedViewModel.kt","baseContent":"package com.example.aerogcsclone.Telemetry\n\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.setValue\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.combine\nimport kotlinx.coroutines.launch\n\nclass SharedViewModel : ViewModel() {\n\n    var ipAddress by mutableStateOf(\"10.0.2.2\")\n    var port by mutableStateOf(\"5762\")\n\n    private var repo: MavlinkTelemetryRepository? = null\n\n    private val _telemetryState = mutableStateOf(TelemetryState())\n    val telemetryState: StateFlow<TelemetryState> = _telemetryState\n\n    val isConnected: Flow<ERROR> = telemetryState.combine(repo?.state) { state, repoState ->\n        state.connected || repoState?.connected == true\n    }\n\n\n    fun connect() {\n        viewModelScope.launch {\n            val portInt = port.toIntOrNull()\n            if (portInt != null) {\n                val newRepo = MavlinkTelemetryRepository(ipAddress, portInt)\n                repo = newRepo\n                newRepo.start()\n                newRepo.state.collect {\n                    _telemetryState.value = it\n                }\n            }\n        }\n    }\n}\n","baseTimestamp":1757400233339,"deltas":[{"timestamp":1757400239338,"changes":[{"type":"DELETE","lineNumber":7,"oldContent":"import kotlinx.coroutines.flow.Flow"},{"type":"MODIFY","lineNumber":21,"content":"    val isConnected: StateFlow<Boolean> = telemetryState.combine(repo?.state) { state, repoState ->","oldContent":"    val isConnected: Flow<ERROR> = telemetryState.combine(repo?.state) { state, repoState ->"}]},{"timestamp":1757400258744,"changes":[{"type":"INSERT","lineNumber":20,"content":""},{"type":"DELETE","lineNumber":21,"oldContent":"    val isConnected: Flow<ERROR> = telemetryState.combine(repo?.state) { state, repoState ->"},{"type":"MODIFY","lineNumber":23,"content":"    } as StateFlow<Boolean>","oldContent":"    }"}]},{"timestamp":1757400271889,"changes":[{"type":"MODIFY","lineNumber":19,"content":"    val telemetryState: StateFlow<TelemetryState> = _telemetryState as StateFlow<TelemetryState>","oldContent":"    val telemetryState: StateFlow<TelemetryState> = _telemetryState"}]},{"timestamp":1757400277822,"changes":[{"type":"INSERT","lineNumber":7,"content":"import kotlinx.coroutines.flow.Flow"},{"type":"MODIFY","lineNumber":22,"content":"    val isConnected: StateFlow<Boolean> = telemetryState.combine(repo?.state as Flow<T2>) { state, repoState ->","oldContent":"    val isConnected: StateFlow<Boolean> = telemetryState.combine(repo?.state) { state, repoState ->"}]},{"timestamp":1757400285451,"changes":[{"type":"DELETE","lineNumber":7,"oldContent":"import kotlinx.coroutines.flow.Flow"},{"type":"MODIFY","lineNumber":19,"content":"    val telemetryState: StateFlow<TelemetryState> = _telemetryState","oldContent":"    val telemetryState: StateFlow<TelemetryState> = _telemetryState as StateFlow<TelemetryState>"},{"type":"DELETE","lineNumber":23,"oldContent":"    val isConnected: StateFlow<Boolean> = telemetryState.combine(repo?.state as Flow<T2>) { state, repoState ->"},{"type":"INSERT","lineNumber":22,"content":"        state.connected || repoState?.connected == true"}]},{"timestamp":1757411797636,"changes":[{"type":"DELETE","lineNumber":7,"oldContent":"import kotlinx.coroutines.flow.StateFlow"},{"type":"MODIFY","lineNumber":7,"content":"import kotlinx.coroutines.flow.*","oldContent":"import kotlinx.coroutines.flow.combine"},{"type":"DELETE","lineNumber":18,"oldContent":"    val telemetryState: StateFlow<TelemetryState> = _telemetryState"},{"type":"DELETE","lineNumber":19,"oldContent":"    val telemetryState: StateFlow<TelemetryState> = _telemetryState as StateFlow<TelemetryState>"},{"type":"INSERT","lineNumber":17,"content":"    private val _telemetryState = MutableStateFlow(TelemetryState())"},{"type":"INSERT","lineNumber":18,"content":"    val telemetryState: StateFlow<TelemetryState> = _telemetryState.asStateFlow()"},{"type":"DELETE","lineNumber":21,"oldContent":"        state.connected || repoState?.connected == true"},{"type":"DELETE","lineNumber":22,"oldContent":"    val isConnected: StateFlow<Boolean> = telemetryState.combine(repo?.state) { state, repoState ->"},{"type":"DELETE","lineNumber":23,"oldContent":"    } as StateFlow<Boolean>"},{"type":"INSERT","lineNumber":20,"content":"    val isConnected: StateFlow<Boolean> = telemetryState"},{"type":"INSERT","lineNumber":21,"content":"        .map { it.connected }"},{"type":"INSERT","lineNumber":22,"content":"        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), false)"},{"type":"DELETE","lineNumber":25,"oldContent":""}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/MainActivity.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/MainActivity.kt","baseContent":"package com.example.aerogcsclone\n\nimport android.Manifest\nimport android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.activity.result.contract.ActivityResultContracts\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.ui.Modifier\nimport androidx.navigation.compose.rememberNavController\nimport com.example.aerogcsclone.navigation.AppNavGraph\nimport androidx.compose.ui.graphics.Color\nimport com.google.android.gms.maps.MapsInitializer\n\n// âœ… Dark theme setup\nprivate val DarkColorScheme = darkColorScheme(\n    primary = Color(0xFF1E88E5),\n    onPrimary = Color.White,\n    background = Color.Black,\n    surface = Color.Black,\n    onBackground = Color.White,\n    onSurface = Color.White\n)\n\nclass MainActivity : ComponentActivity() {\n\n    private val hasPermission = mutableStateOf(false)\n\n    private val requestLocation = registerForActivityResult(\n        ActivityResultContracts.RequestMultiplePermissions()\n    ) { grants ->\n        val fine = grants[Manifest.permission.ACCESS_FINE_LOCATION] == true\n        val coarse = grants[Manifest.permission.ACCESS_COARSE_LOCATION] == true\n        hasPermission.value = fine || coarse\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        // âœ… Initialize Maps SDK\n//        MapsInitializer.initialize(applicationContext)\n        // âœ… Initialize Maps SDK with new API\n        MapsInitializer.initialize(applicationContext, MapsInitializer.Renderer.LATEST) {\n            // You can log or handle the chosen renderer here\n        }\n\n        setContent {\n            val navController = rememberNavController()\n            MaterialTheme(colorScheme = DarkColorScheme) {\n                Surface(\n                    modifier = Modifier.fillMaxSize(),\n                    color = MaterialTheme.colorScheme.background\n                ) {\n                    if (hasPermission.value) {\n                        // âœ… Use your NavGraph (map can be one of the screens)\n                        AppNavGraph(navController = navController)\n                    }\n                }\n            }\n        }\n    }\n\n    override fun onResume() {\n        super.onResume()\n        askLocationPermissions()\n    }\n\n    private fun askLocationPermissions() {\n        requestLocation.launch(\n            arrayOf(\n                Manifest.permission.ACCESS_FINE_LOCATION,\n                Manifest.permission.ACCESS_COARSE_LOCATION\n            )\n        )\n    }\n}","baseTimestamp":1757483854104,"deltas":[{"timestamp":1757571725107,"changes":[{"type":"INSERT","lineNumber":3,"content":"import android.os.Build"},{"type":"DELETE","lineNumber":8,"oldContent":"import androidx.compose.material3.*"},{"type":"MODIFY","lineNumber":9,"content":"import androidx.compose.material3.MaterialTheme","oldContent":"import androidx.compose.runtime.mutableStateOf"},{"type":"INSERT","lineNumber":10,"content":"import androidx.compose.material3.Surface"},{"type":"INSERT","lineNumber":11,"content":"import androidx.compose.material3.darkColorScheme"},{"type":"INSERT","lineNumber":12,"content":"import androidx.compose.runtime.*"},{"type":"INSERT","lineNumber":14,"content":"import androidx.compose.ui.graphics.Color"},{"type":"INSERT","lineNumber":15,"content":"import androidx.core.splashscreen.SplashScreen.Companion.installSplashScreen"},{"type":"DELETE","lineNumber":13,"oldContent":"import androidx.compose.ui.graphics.Color"},{"type":"INSERT","lineNumber":43,"content":"        // Handle the splash screen transition."},{"type":"INSERT","lineNumber":44,"content":"        installSplashScreen()"},{"type":"INSERT","lineNumber":45,"content":""},{"type":"DELETE","lineNumber":41,"oldContent":"        // âœ… Initialize Maps SDK"},{"type":"DELETE","lineNumber":42,"oldContent":"//        MapsInitializer.initialize(applicationContext)"},{"type":"DELETE","lineNumber":43,"oldContent":"        // âœ… Initialize Maps SDK with new API"},{"type":"INSERT","lineNumber":48,"content":"        // Initialize Maps SDK with new API"},{"type":"DELETE","lineNumber":55,"oldContent":"                    if (hasPermission.value) {"},{"type":"DELETE","lineNumber":56,"oldContent":"                        // âœ… Use your NavGraph (map can be one of the screens)"},{"type":"DELETE","lineNumber":57,"oldContent":"                        AppNavGraph(navController = navController)"},{"type":"DELETE","lineNumber":58,"oldContent":"                    }"},{"type":"INSERT","lineNumber":60,"content":"                    AppNavGraph(navController = navController)"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/navigation/AppNavGraph.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/navigation/AppNavGraph.kt","baseContent":"package com.example.aerogcsclone.navigation\n\nimport androidx.compose.runtime.Composable\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport androidx.navigation.NavHostController\nimport androidx.navigation.compose.NavHost\nimport androidx.navigation.compose.composable\nimport com.example.aerogcsclone.Telemetry.SharedViewModel\nimport com.example.aerogcsclone.authentication.AuthViewModel\nimport com.example.aerogcsclone.authentication.LoginPage\nimport com.example.aerogcsclone.authentication.SignupPage\nimport com.example.aerogcsclone.uiconnection.ConnectionPage\nimport com.example.aerogcsclone.uimain.MainPage\n\nsealed class Screen(val route: String) {\n    object Connection : Screen(\"connection\")\n    object Main : Screen(\"main\")\n    object Login : Screen(\"login\")\n    object Signup : Screen(\"signup\")\n}\n\n@Composable\nfun AppNavGraph(navController: NavHostController) {\n    val sharedViewModel: SharedViewModel = viewModel()\n    val authViewModel: AuthViewModel = viewModel()\n\n\n    NavHost(navController = navController, startDestination = Screen.Login.route) {\n        composable(Screen.Login.route) {\n            LoginPage(\n                navController = navController,\n                authViewModel = authViewModel\n            )\n        }\n        composable(Screen.Signup.route) {\n            SignupPage(\n                navController = navController,\n                authViewModel = authViewModel\n            )\n        }\n        composable(Screen.Connection.route) {\n            ConnectionPage(\n                navController = navController,\n                viewModel = sharedViewModel\n            )\n        }\n        composable(Screen.Main.route) {\n            MainPage(telemetryViewModel = sharedViewModel, authViewModel = authViewModel, navController = navController)\n        }\n    }\n}\n","baseTimestamp":1757495554298},"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uimain/TopNavBar.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uimain/TopNavBar.kt","baseContent":"package com.example.aerogcsclone.uimain\n\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.*\nimport androidx.compose.foundation.clickable\nimport androidx.compose.material3.DropdownMenu\nimport androidx.compose.material3.DropdownMenuItem\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.Text\nimport androidx.compose.ui.window.Popup\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.navigation.NavHostController\nimport com.example.aerogcsclone.Telemetry.TelemetryState\nimport com.example.aerogcsclone.authentication.AuthViewModel\nimport com.example.aerogcsclone.navigation.Screen\n\n@Composable\nfun TopNavBar(telemetryState: TelemetryState, authViewModel: AuthViewModel, navController: NavHostController) {\n    var menuExpanded by remember { mutableStateOf(false) }\n    var kebabMenuExpanded by remember { mutableStateOf(false) }\n    var selectedMode by remember { mutableStateOf(\"Manual\") }\n    Box(\n        modifier = Modifier\n            .fillMaxWidth()\n            .height(70.dp)\n            .background(\n                brush = Brush.horizontalGradient(\n                    colors = listOf(Color(0xFF87CEEB), Color(0xFF4A90E2))\n                )\n            )\n            .padding(horizontal = 12.dp),\n        contentAlignment = Alignment.CenterStart\n    ) {\n        Row(\n            modifier = Modifier.fillMaxWidth(),\n            verticalAlignment = Alignment.CenterVertically\n        ) {\n            Box {\n                Icon(\n                    Icons.Default.Menu,\n                    contentDescription = \"Menu\",\n                    tint = Color.White,\n                    modifier = Modifier.clickable { menuExpanded = true }\n                )\n                if (menuExpanded) {\n                    Popup(\n                        onDismissRequest = { menuExpanded = false }\n                    ) {\n                        Column(\n                            modifier = Modifier\n                                .background(Color.Black.copy(alpha = 0.5f))\n                                .width(180.dp) // Increased width\n                                .padding(vertical = 8.dp, horizontal = 16.dp)\n                        ) {\n                            Text(\n                                text = \"Automatic\",\n                                color = Color.White,\n                                fontSize = 22.sp, // Increased font size\n                                modifier = Modifier\n                                    .padding(16.dp) // Increased padding\n                                    .clickable {\n                                        selectedMode = \"Automatic\"\n                                        menuExpanded = false\n                                        navController.navigate(Screen.Plan.route)\n                                    }\n                            )\n                            Text(\n                                text = \"Manual\",\n                                color = Color.White,\n                                fontSize = 22.sp, // Increased font size\n                                modifier = Modifier\n                                    .padding(16.dp) // Increased padding\n                                    .clickable {\n                                        selectedMode = \"Manual\"\n                                        menuExpanded = false\n                                    }\n                            )\n                        }\n                    }\n                }\n            }\n            Spacer(modifier = Modifier.width(12.dp))\n            Icon(Icons.Default.Home, contentDescription = \"Home\", tint = Color.White, modifier = Modifier.clickable {\n                navController.navigate(Screen.Connection.route)\n            })\n            Spacer(modifier = Modifier.width(16.dp))\n\n            Column(\n                verticalArrangement = Arrangement.Center,\n                horizontalAlignment = Alignment.Start\n            ) {\n                Spacer(modifier = Modifier.height(10.dp))\n                Text(\n                    text = \"Pavaman Aviation\",\n                    color = Color.White,\n                    fontWeight = FontWeight.Bold,\n                    fontSize = 25.sp\n                )\n                Spacer(modifier = Modifier.height(2.dp))\n                Text(\n                    text = selectedMode,\n                    color = Color.White.copy(alpha = 0.7f),\n                    fontSize = 15.sp\n                )\n            }\n\n            Spacer(modifier = Modifier.weight(1f))\n\n            Row(\n                verticalAlignment = Alignment.CenterVertically\n            ) {\n                ConnectionStatusWidget(isConnected = telemetryState.connected)\n                DividerBlock()\n                InfoBlock(Icons.Default.Flight, \"13%\")\n                DividerBlock()\n                InfoBlock(Icons.Default.BatteryFull, \"${telemetryState.batteryPercent ?: \"N/A\"}%\")\n                DividerBlock()\n                InfoBlock(Icons.Default.Gamepad, \"100%\")\n                DividerBlock()\n                InfoBlockGroup(\n                    Icons.Default.Bolt,\n                    listOf(\n                        \"${telemetryState.voltage ?: \"N/A\"} V\",\n                        \"${telemetryState.currentA ?: \"N/A\"} A\"\n                    )\n                )\n                DividerBlock()\n                InfoBlockGroup(\n                    Icons.Default.SatelliteAlt,\n                    listOf(\n                        \"${telemetryState.sats ?: \"N/A\"} sats\",\n                        \"${telemetryState.hdop ?: \"N/A\"} hdop\"\n                    )\n                )\n                DividerBlock()\n                InfoBlockGroup(Icons.Default.Sync, listOf(\"Stabilize\", \"Arm\"))\n                DividerBlock()\n                Box {\n                    Icon(\n                        Icons.Default.MoreVert,\n                        contentDescription = \"More\",\n                        tint = Color.White,\n                        modifier = Modifier.clickable { kebabMenuExpanded = true }\n                    )\n                    DropdownMenu(\n                        expanded = kebabMenuExpanded,\n                        onDismissRequest = { kebabMenuExpanded = false }\n                    ) {\n                        DropdownMenuItem(\n                            text = { Text(\"Settings\") },\n                            onClick = { kebabMenuExpanded = false }\n                        )\n                        DropdownMenuItem(\n                            text = { Text(\"About App\") },\n                            onClick = { kebabMenuExpanded = false }\n                        )\n                        DropdownMenuItem(\n                            text = { Text(\"Logout\") },\n                            onClick = {\n                                kebabMenuExpanded = false\n                                authViewModel.signout()\n                                navController.navigate(Screen.Login.route) {\n                                    popUpTo(0)\n                                }\n                            }\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun ConnectionStatusWidget(isConnected: Boolean) {\n    val statusColor = if (isConnected) Color.Green else Color.Red\n    val statusText = if (isConnected) \"Connected\" else \"Disconnected\"\n\n    Row(verticalAlignment = Alignment.CenterVertically) {\n        Box(\n            modifier = Modifier\n                .size(10.dp)\n                .background(statusColor, shape = androidx.compose.foundation.shape.CircleShape)\n        )\n        Spacer(modifier = Modifier.width(4.dp))\n        Text(statusText, color = Color.White, fontSize = 12.sp)\n    }\n}\n\n@Composable\nfun DividerBlock() {\n    Box(\n        modifier = Modifier\n            .padding(horizontal = 8.dp) // spacing between items\n            .width(1.dp)\n            .height(30.dp)\n            .background(Color.White.copy(alpha = 0.7f))\n    )\n}\n\n@Composable\nfun InfoBlock(icon: ImageVector, value: String) {\n    Column(\n        modifier = Modifier.padding(horizontal = 6.dp),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        Icon(icon, contentDescription = null, tint = Color.White, modifier = Modifier.size(18.dp))\n        Spacer(modifier = Modifier.height(2.dp))\n        Text(value, color = Color.White, fontSize = 12.sp)\n    }\n}\n\n@Composable\nfun InfoBlockGroup(icon: ImageVector, values: List<String>) {\n    Column(\n        modifier = Modifier.padding(horizontal = 6.dp),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        Icon(icon, contentDescription = null, tint = Color.White, modifier = Modifier.size(18.dp))\n        Spacer(modifier = Modifier.height(2.dp))\n        values.forEach { value ->\n            Text(value, color = Color.White, fontSize = 12.sp)\n        }\n    }\n}\n","baseTimestamp":1757567481747,"deltas":[{"timestamp":1757650088634,"changes":[{"type":"INSERT","lineNumber":3,"content":"import androidx.compose.foundation.clickable"},{"type":"INSERT","lineNumber":5,"content":"import androidx.compose.foundation.shape.CircleShape"},{"type":"DELETE","lineNumber":6,"oldContent":"import androidx.compose.foundation.clickable"},{"type":"DELETE","lineNumber":11,"oldContent":"import androidx.compose.ui.window.Popup"},{"type":"INSERT","lineNumber":21,"content":"import androidx.compose.ui.window.Popup"},{"type":"DELETE","lineNumber":27,"oldContent":"fun TopNavBar(telemetryState: TelemetryState, authViewModel: AuthViewModel, navController: NavHostController) {"},{"type":"INSERT","lineNumber":28,"content":"fun TopNavBar("},{"type":"INSERT","lineNumber":29,"content":"    telemetryState: TelemetryState,"},{"type":"INSERT","lineNumber":30,"content":"    authViewModel: AuthViewModel,"},{"type":"INSERT","lineNumber":31,"content":"    navController: NavHostController"},{"type":"INSERT","lineNumber":32,"content":") {"},{"type":"INSERT","lineNumber":36,"content":""},{"type":"INSERT","lineNumber":53,"content":"            // Hamburger menu"},{"type":"DELETE","lineNumber":55,"oldContent":"                    Popup("},{"type":"DELETE","lineNumber":56,"oldContent":"                        onDismissRequest = { menuExpanded = false }"},{"type":"DELETE","lineNumber":57,"oldContent":"                    ) {"},{"type":"INSERT","lineNumber":62,"content":"                    Popup(onDismissRequest = { menuExpanded = false }) {"},{"type":"DELETE","lineNumber":61,"oldContent":"                                .width(180.dp) // Increased width"},{"type":"INSERT","lineNumber":66,"content":"                                .width(180.dp)"},{"type":"DELETE","lineNumber":67,"oldContent":"                                fontSize = 22.sp, // Increased font size"},{"type":"INSERT","lineNumber":72,"content":"                                fontSize = 22.sp,"},{"type":"DELETE","lineNumber":69,"oldContent":"                                    .padding(16.dp) // Increased padding"},{"type":"INSERT","lineNumber":74,"content":"                                    .padding(16.dp)"},{"type":"DELETE","lineNumber":79,"oldContent":"                                fontSize = 22.sp, // Increased font size"},{"type":"INSERT","lineNumber":84,"content":"                                fontSize = 22.sp,"},{"type":"DELETE","lineNumber":81,"oldContent":"                                    .padding(16.dp) // Increased padding"},{"type":"INSERT","lineNumber":86,"content":"                                    .padding(16.dp)"},{"type":"INSERT","lineNumber":96,"content":""},{"type":"DELETE","lineNumber":92,"oldContent":"            Icon(Icons.Default.Home, contentDescription = \"Home\", tint = Color.White, modifier = Modifier.clickable {"},{"type":"DELETE","lineNumber":93,"oldContent":"                navController.navigate(Screen.Connection.route)"},{"type":"DELETE","lineNumber":94,"oldContent":"            })"},{"type":"INSERT","lineNumber":98,"content":""},{"type":"INSERT","lineNumber":99,"content":"            // Home icon"},{"type":"INSERT","lineNumber":100,"content":"            Icon("},{"type":"INSERT","lineNumber":101,"content":"                Icons.Default.Home,"},{"type":"INSERT","lineNumber":102,"content":"                contentDescription = \"Home\","},{"type":"INSERT","lineNumber":103,"content":"                tint = Color.White,"},{"type":"INSERT","lineNumber":104,"content":"                modifier = Modifier.clickable {"},{"type":"INSERT","lineNumber":105,"content":"                    navController.navigate(Screen.Connection.route)"},{"type":"INSERT","lineNumber":106,"content":"                }"},{"type":"INSERT","lineNumber":107,"content":"            )"},{"type":"INSERT","lineNumber":108,"content":""},{"type":"INSERT","lineNumber":111,"content":"            // Title & Mode"},{"type":"DELETE","lineNumber":118,"oldContent":"            Row("},{"type":"DELETE","lineNumber":119,"oldContent":"                verticalAlignment = Alignment.CenterVertically"},{"type":"DELETE","lineNumber":120,"oldContent":"            ) {"},{"type":"INSERT","lineNumber":133,"content":"            // Status & telemetry"},{"type":"INSERT","lineNumber":134,"content":"            Row(verticalAlignment = Alignment.CenterVertically) {"},{"type":"INSERT","lineNumber":161,"content":""},{"type":"INSERT","lineNumber":162,"content":"                // Kebab menu"},{"type":"DELETE","lineNumber":192,"oldContent":"                .background(statusColor, shape = androidx.compose.foundation.shape.CircleShape)"},{"type":"INSERT","lineNumber":208,"content":"                .background(statusColor, shape = CircleShape)"},{"type":"DELETE","lineNumber":203,"oldContent":"            .padding(horizontal = 8.dp) // spacing between items"},{"type":"INSERT","lineNumber":219,"content":"            .padding(horizontal = 8.dp)"}]},{"timestamp":1757651781652,"changes":[{"type":"MODIFY","lineNumber":6,"content":"import androidx.compose.material.icons.Icons","oldContent":"import androidx.compose.material.icons.Icons"},{"type":"DELETE","lineNumber":29,"oldContent":"    var menuExpanded by remember { mutableStateOf(false) }"},{"type":"DELETE","lineNumber":31,"oldContent":"    var kebabMenuExpanded by remember { mutableStateOf(false) }"},{"type":"DELETE","lineNumber":33,"oldContent":"    var selectedMode by remember { mutableStateOf(\"Manual\") }"},{"type":"DELETE","lineNumber":35,"oldContent":"    Box("},{"type":"INSERT","lineNumber":33,"content":"    var menuExpanded by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":34,"content":"    var kebabMenuExpanded by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":35,"content":"    var selectedMode by remember { mutableStateOf(\"Manual\") }"},{"type":"INSERT","lineNumber":36,"content":""},{"type":"INSERT","lineNumber":37,"content":"    Box("},{"type":"DELETE","lineNumber":41,"oldContent":""},{"type":"INSERT","lineNumber":53,"content":"            // Hamburger menu"},{"type":"DELETE","lineNumber":59,"oldContent":"            // Hamburger menu"},{"type":"INSERT","lineNumber":62,"content":"                    Popup(onDismissRequest = { menuExpanded = false }) {"},{"type":"DELETE","lineNumber":65,"oldContent":"                    Popup(onDismissRequest = { menuExpanded = false }) {"},{"type":"INSERT","lineNumber":66,"content":"                                .width(180.dp)"},{"type":"DELETE","lineNumber":70,"oldContent":"                                .width(180.dp)"},{"type":"INSERT","lineNumber":72,"content":"                                fontSize = 22.sp,"},{"type":"INSERT","lineNumber":74,"content":"                                    .padding(16.dp)"},{"type":"DELETE","lineNumber":75,"oldContent":"                                fontSize = 22.sp,"},{"type":"DELETE","lineNumber":78,"oldContent":"                                    .padding(16.dp)"},{"type":"INSERT","lineNumber":84,"content":"                                fontSize = 22.sp,"},{"type":"INSERT","lineNumber":86,"content":"                                    .padding(16.dp)"},{"type":"DELETE","lineNumber":87,"oldContent":"                                fontSize = 22.sp,"},{"type":"DELETE","lineNumber":90,"oldContent":"                                    .padding(16.dp)"},{"type":"INSERT","lineNumber":96,"content":""},{"type":"DELETE","lineNumber":97,"oldContent":"            Spacer(modifier = Modifier.width(16.dp))"},{"type":"INSERT","lineNumber":99,"content":"            // Home icon"},{"type":"INSERT","lineNumber":100,"content":"            Icon("},{"type":"INSERT","lineNumber":101,"content":"                Icons.Default.Home,"},{"type":"INSERT","lineNumber":102,"content":"                contentDescription = \"Home\","},{"type":"INSERT","lineNumber":103,"content":"                tint = Color.White,"},{"type":"INSERT","lineNumber":104,"content":"                modifier = Modifier.clickable {"},{"type":"INSERT","lineNumber":105,"content":"                    navController.navigate(Screen.Connection.route)"},{"type":"INSERT","lineNumber":106,"content":"                }"},{"type":"INSERT","lineNumber":107,"content":"            )"},{"type":"DELETE","lineNumber":100,"oldContent":"            Column("},{"type":"INSERT","lineNumber":109,"content":"            Spacer(modifier = Modifier.width(16.dp))"},{"type":"INSERT","lineNumber":111,"content":"            // Title & Mode"},{"type":"INSERT","lineNumber":112,"content":"            Column("},{"type":"DELETE","lineNumber":103,"oldContent":"            // Home icon"},{"type":"DELETE","lineNumber":105,"oldContent":"            Icon("},{"type":"DELETE","lineNumber":107,"oldContent":"                Icons.Default.Home,"},{"type":"DELETE","lineNumber":109,"oldContent":"                contentDescription = \"Home\","},{"type":"DELETE","lineNumber":111,"oldContent":"                tint = Color.White,"},{"type":"DELETE","lineNumber":113,"oldContent":"                modifier = Modifier.clickable {"},{"type":"DELETE","lineNumber":115,"oldContent":"                    navController.navigate(Screen.Connection.route)"},{"type":"DELETE","lineNumber":117,"oldContent":"                }"},{"type":"DELETE","lineNumber":119,"oldContent":"            )"},{"type":"DELETE","lineNumber":121,"oldContent":""},{"type":"DELETE","lineNumber":125,"oldContent":"            // Title & Mode"},{"type":"INSERT","lineNumber":133,"content":"            // Status & telemetry"},{"type":"INSERT","lineNumber":134,"content":"            Row(verticalAlignment = Alignment.CenterVertically) {"},{"type":"DELETE","lineNumber":145,"oldContent":"            // Status & telemetry"},{"type":"DELETE","lineNumber":147,"oldContent":"            Row(verticalAlignment = Alignment.CenterVertically) {"},{"type":"MODIFY","lineNumber":159,"content":"                InfoBlockGroup(Icons.Default.Sync, listOf(TelemetryState., \"Arm\"))","oldContent":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"Stabilize\", \"Arm\"))"},{"type":"INSERT","lineNumber":161,"content":""},{"type":"INSERT","lineNumber":162,"content":"                // Kebab menu"},{"type":"DELETE","lineNumber":175,"oldContent":""},{"type":"DELETE","lineNumber":177,"oldContent":"                // Kebab menu"},{"type":"INSERT","lineNumber":208,"content":"                .background(statusColor, shape = CircleShape)"},{"type":"INSERT","lineNumber":219,"content":"            .padding(horizontal = 8.dp)"},{"type":"DELETE","lineNumber":222,"oldContent":"                .background(statusColor, shape = CircleShape)"},{"type":"DELETE","lineNumber":234,"oldContent":"            .padding(horizontal = 8.dp)"}]},{"timestamp":1757651788447,"changes":[{"type":"INSERT","lineNumber":5,"content":"import androidx.compose.foundation.shape.CircleShape"},{"type":"DELETE","lineNumber":6,"oldContent":"import androidx.compose.material.icons.Icons"},{"type":"INSERT","lineNumber":31,"content":"    navController: NavHostController"},{"type":"INSERT","lineNumber":32,"content":") {"},{"type":"DELETE","lineNumber":33,"oldContent":"    navController: NavHostController"},{"type":"DELETE","lineNumber":36,"oldContent":") {"},{"type":"MODIFY","lineNumber":75,"content":"                                    .clickable {","oldContent":"                                    .clickable {"},{"type":"MODIFY","lineNumber":87,"content":"                                    .clickable {","oldContent":"                                    .clickable {"},{"type":"DELETE","lineNumber":100,"oldContent":""},{"type":"DELETE","lineNumber":103,"oldContent":""},{"type":"DELETE","lineNumber":105,"oldContent":"                verticalArrangement = Arrangement.Center,"},{"type":"DELETE","lineNumber":108,"oldContent":"                horizontalAlignment = Alignment.Start"},{"type":"DELETE","lineNumber":111,"oldContent":"            ) {"},{"type":"DELETE","lineNumber":113,"oldContent":"                Spacer(modifier = Modifier.height(10.dp))"},{"type":"INSERT","lineNumber":108,"content":""},{"type":"DELETE","lineNumber":115,"oldContent":"                Text("},{"type":"INSERT","lineNumber":110,"content":""},{"type":"INSERT","lineNumber":113,"content":"                verticalArrangement = Arrangement.Center,"},{"type":"INSERT","lineNumber":114,"content":"                horizontalAlignment = Alignment.Start"},{"type":"INSERT","lineNumber":115,"content":"            ) {"},{"type":"INSERT","lineNumber":116,"content":"                Spacer(modifier = Modifier.height(10.dp))"},{"type":"INSERT","lineNumber":117,"content":"                Text("},{"type":"MODIFY","lineNumber":135,"content":"                ConnectionStatusWidget(isConnected = telemetryState.connected)","oldContent":"                ConnectionStatusWidget(isConnected = telemetryState.connected)"},{"type":"MODIFY","lineNumber":159,"content":"                InfoBlockGroup(Icons.Default.Sync, listOf(TelemetryState.mode, \"Arm\"))","oldContent":"                InfoBlockGroup(Icons.Default.Sync, listOf(TelemetryState., \"Arm\"))"},{"type":"MODIFY","lineNumber":163,"content":"                Box {","oldContent":"                Box {"},{"type":"MODIFY","lineNumber":220,"content":"            .width(1.dp)","oldContent":"            .width(1.dp)"}]},{"timestamp":1757651800958,"changes":[{"type":"MODIFY","lineNumber":33,"content":"    var menuExpanded by remember { mutableStateOf(false) }","oldContent":"    var menuExpanded by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":74,"content":"                                    .padding(16.dp)"},{"type":"DELETE","lineNumber":75,"oldContent":"                                    .clickable {"},{"type":"INSERT","lineNumber":86,"content":"                                    .padding(16.dp)"},{"type":"DELETE","lineNumber":87,"oldContent":"                                    .clickable {"},{"type":"DELETE","lineNumber":105,"oldContent":""},{"type":"MODIFY","lineNumber":108,"content":"","oldContent":""},{"type":"INSERT","lineNumber":109,"content":"            Spacer(modifier = Modifier.width(16.dp))"},{"type":"INSERT","lineNumber":110,"content":""},{"type":"INSERT","lineNumber":111,"content":"            // Title & Mode"},{"type":"INSERT","lineNumber":112,"content":"            Column("},{"type":"DELETE","lineNumber":112,"oldContent":"            Spacer(modifier = Modifier.width(16.dp))"},{"type":"DELETE","lineNumber":115,"oldContent":"            // Title & Mode"},{"type":"DELETE","lineNumber":117,"oldContent":"            Column("},{"type":"INSERT","lineNumber":134,"content":"            Row(verticalAlignment = Alignment.CenterVertically) {"},{"type":"DELETE","lineNumber":135,"oldContent":"                ConnectionStatusWidget(isConnected = telemetryState.connected)"},{"type":"MODIFY","lineNumber":159,"content":"                InfoBlockGroup(Icons.Default.Sync, listOf(telemeteryState, \"Arm\"))","oldContent":"                InfoBlockGroup(Icons.Default.Sync, listOf(TelemetryState.mode, \"Arm\"))"},{"type":"INSERT","lineNumber":162,"content":"                // Kebab menu"},{"type":"DELETE","lineNumber":163,"oldContent":"                Box {"},{"type":"INSERT","lineNumber":219,"content":"            .padding(horizontal = 8.dp)"},{"type":"DELETE","lineNumber":220,"oldContent":"            .width(1.dp)"}]},{"timestamp":1757651805947,"changes":[{"type":"INSERT","lineNumber":32,"content":") {"},{"type":"DELETE","lineNumber":33,"oldContent":"    var menuExpanded by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":106,"content":"                }"},{"type":"INSERT","lineNumber":107,"content":"            )"},{"type":"DELETE","lineNumber":107,"oldContent":""},{"type":"DELETE","lineNumber":109,"oldContent":"            )"},{"type":"DELETE","lineNumber":111,"oldContent":"                verticalArrangement = Arrangement.Center,"},{"type":"MODIFY","lineNumber":113,"content":"                verticalArrangement = Arrangement.Center,","oldContent":"                horizontalAlignment = Alignment.Start"},{"type":"INSERT","lineNumber":114,"content":"                horizontalAlignment = Alignment.Start"},{"type":"MODIFY","lineNumber":159,"content":"                InfoBlockGroup(Icons.Default.Sync, listOf, \"Arm\"))","oldContent":"                InfoBlockGroup(Icons.Default.Sync, listOf(telemeteryState, \"Arm\"))"}]},{"timestamp":1757651811683,"changes":[{"type":"MODIFY","lineNumber":108,"content":"","oldContent":""},{"type":"INSERT","lineNumber":112,"content":"            Column("},{"type":"DELETE","lineNumber":114,"oldContent":"            Column("},{"type":"MODIFY","lineNumber":159,"content":"                InfoBlockGroup(Icons.Default.Sync, listOf(, \"Arm\"))","oldContent":"                InfoBlockGroup(Icons.Default.Sync, listOf, \"Arm\"))"}]},{"timestamp":1757651814540,"changes":[{"type":"INSERT","lineNumber":107,"content":"            )"},{"type":"DELETE","lineNumber":108,"oldContent":""},{"type":"MODIFY","lineNumber":159,"content":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"\", \"Arm\"))","oldContent":"                InfoBlockGroup(Icons.Default.Sync, listOf(, \"Arm\"))"}]},{"timestamp":1757651816778,"changes":[{"type":"MODIFY","lineNumber":159,"content":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"$\", \"Arm\"))","oldContent":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"\", \"Arm\"))"}]},{"timestamp":1757651826039,"changes":[{"type":"MODIFY","lineNumber":159,"content":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"${telemetryState.mode}\", \"Arm\"))","oldContent":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"$\", \"Arm\"))"}]},{"timestamp":1757651829878,"changes":[{"type":"MODIFY","lineNumber":159,"content":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"${telemetryState.mode}\", ))","oldContent":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"${telemetryState.mode}\", \"Arm\"))"}]},{"timestamp":1757651834686,"changes":[{"type":"MODIFY","lineNumber":159,"content":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"${telemetryState.mode}\", ${}))","oldContent":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"${telemetryState.mode}\", ))"}]},{"timestamp":1757651839795,"changes":[{"type":"MODIFY","lineNumber":159,"content":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"${telemetryState.mode}\", \"\"))","oldContent":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"${telemetryState.mode}\", ${}))"}]},{"timestamp":1757651843648,"changes":[{"type":"MODIFY","lineNumber":159,"content":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"${telemetryState.mode}\", \"${if (telemetryState.armed) \"Armed\" else \"Disarmed\"}\"))","oldContent":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"${telemetryState.mode}\", \"\"))"}]},{"timestamp":1757651849246,"changes":[{"type":"MODIFY","lineNumber":159,"content":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"${telemetryState.mode}\",","oldContent":"                InfoBlockGroup(Icons.Default.Sync, listOf(\"${telemetryState.mode}\", \"${if (telemetryState.armed) \"Armed\" else \"Disarmed\"}\"))"},{"type":"INSERT","lineNumber":160,"content":"                    if (telemetryState.armed) \"Armed\" else \"Disarmed\""},{"type":"INSERT","lineNumber":161,"content":"                ))"}]}]},"/Dummy.lcf":{"filePath":"/Dummy.lcf","baseContent":"package:mine  tag:FirebaseAuth","baseTimestamp":1757571962578},"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uimain/GcsMap.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uimain/GcsMap.kt","baseContent":"package com.example.aerogcsclone.uimain\n\n//package com.example.aerogcsclone.uimain\n\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Modifier\nimport com.google.android.gms.maps.model.CameraPosition\nimport com.google.android.gms.maps.model.LatLng\nimport com.google.maps.android.compose.*\n\n@Composable\nfun GcsMap() {\n    var points by remember { mutableStateOf(listOf<LatLng>()) }\n    var polygonClosed by remember { mutableStateOf(false) }\n\n    val cameraPositionState = rememberCameraPositionState {\n        position = CameraPosition.fromLatLngZoom(LatLng(, 78.486), 14f)\n    }\n\n    GoogleMap(\n        modifier = Modifier.fillMaxSize(),\n        cameraPositionState = cameraPositionState,\n        onMapClick = { latLng ->\n            if (!polygonClosed) {\n                points = points + latLng\n            }\n        }\n    ) {\n        // Markers\n        points.forEachIndexed { index, point ->\n            Marker(\n                state = MarkerState(position = point),\n                title = \"Marker ${index + 1}\",\n                onClick = {\n                    if (points.size > 1 && !polygonClosed) {\n                        val last = points.last()\n\n                        // If clicked marker = first point â†’ close polygon\n                        if (point == points.first() && points.size > 2) {\n                            points = points + point\n                            polygonClosed = true\n                        } else if (point != last) {\n                            // Otherwise connect to clicked marker\n                            points = points + point\n                        }\n                    }\n                    true\n                }\n            )\n        }\n\n        // Always draw polyline (whether open or closed)\n        if (points.size > 1) {\n            Polyline(\n                points = points,\n//                color = 0xFF000000.toInt(), // black outline\n                width = 4f\n            )\n        }\n    }\n}","baseTimestamp":1757572909540,"deltas":[{"timestamp":1757572915274,"changes":[{"type":"MODIFY","lineNumber":17,"content":"        position = CameraPosition.fromLatLngZoom(LatLng(17.385, 78.486), 14f)","oldContent":"        position = CameraPosition.fromLatLngZoom(LatLng(, 78.486), 14f)"}]},{"timestamp":1757572984113,"changes":[{"type":"MODIFY","lineNumber":17,"content":"        position = CameraPosition.fromLatLngZoom(LatLng(telemeteryState, 78.486), 14f)","oldContent":"        position = CameraPosition.fromLatLngZoom(LatLng(17.385, 78.486), 14f)"}]},{"timestamp":1757572989783,"changes":[{"type":"MODIFY","lineNumber":17,"content":"        position = CameraPosition.fromLatLngZoom(LatLng(17.385, 78.486), 14f)","oldContent":"        position = CameraPosition.fromLatLngZoom(LatLng(telemeteryState, 78.486), 14f)"}]},{"timestamp":1757650088616,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"//package com.example.aerogcsclone.uimain"},{"type":"DELETE","lineNumber":3,"oldContent":""},{"type":"DELETE","lineNumber":7,"oldContent":"import com.google.android.gms.maps.model.CameraPosition"},{"type":"INSERT","lineNumber":5,"content":"import com.example.aerogcsclone.Telemetry.TelemetryState"},{"type":"INSERT","lineNumber":6,"content":"import com.google.android.gms.maps.CameraUpdateFactory"},{"type":"MODIFY","lineNumber":11,"content":"fun GcsMap(telemetryState: TelemetryState) {","oldContent":"fun GcsMap() {"},{"type":"DELETE","lineNumber":16,"oldContent":"    val cameraPositionState = rememberCameraPositionState {"},{"type":"DELETE","lineNumber":17,"oldContent":"        position = CameraPosition.fromLatLngZoom(LatLng(17.385, 78.486), 14f)"},{"type":"INSERT","lineNumber":15,"content":"    val cameraPositionState = rememberCameraPositionState()"},{"type":"INSERT","lineNumber":16,"content":""},{"type":"INSERT","lineNumber":17,"content":"    // Update camera when telemetry changes (live location)"},{"type":"INSERT","lineNumber":18,"content":"    LaunchedEffect(telemetryState.latitude, telemetryState.longitude) {"},{"type":"INSERT","lineNumber":19,"content":"        val lat = telemetryState.latitude"},{"type":"INSERT","lineNumber":20,"content":"        val lon = telemetryState.longitude"},{"type":"INSERT","lineNumber":21,"content":"        if (lat != null && lon != null) {"},{"type":"INSERT","lineNumber":22,"content":"            val newPosition = LatLng(lat, lon)"},{"type":"INSERT","lineNumber":23,"content":"            cameraPositionState.animate("},{"type":"INSERT","lineNumber":24,"content":"                update = CameraUpdateFactory.newLatLngZoom(newPosition, 16f),"},{"type":"INSERT","lineNumber":25,"content":"                durationMs = 1000"},{"type":"INSERT","lineNumber":26,"content":"            )"},{"type":"INSERT","lineNumber":27,"content":"        }"},{"type":"DELETE","lineNumber":29,"oldContent":"        // Markers"},{"type":"INSERT","lineNumber":39,"content":"        // Live drone marker"},{"type":"INSERT","lineNumber":40,"content":"        val lat = telemetryState.latitude"},{"type":"INSERT","lineNumber":41,"content":"        val lon = telemetryState.longitude"},{"type":"INSERT","lineNumber":42,"content":"        if (lat != null && lon != null) {"},{"type":"INSERT","lineNumber":43,"content":"            Marker("},{"type":"INSERT","lineNumber":44,"content":"                state = MarkerState(position = LatLng(lat, lon)),"},{"type":"INSERT","lineNumber":45,"content":"                title = \"Drone Location\""},{"type":"INSERT","lineNumber":46,"content":"            )"},{"type":"INSERT","lineNumber":47,"content":"        }"},{"type":"INSERT","lineNumber":48,"content":""},{"type":"INSERT","lineNumber":49,"content":"        // User-drawn markers"},{"type":"DELETE","lineNumber":38,"oldContent":"                        // If clicked marker = first point â†’ close polygon"},{"type":"DELETE","lineNumber":43,"oldContent":"                            // Otherwise connect to clicked marker"},{"type":"DELETE","lineNumber":52,"oldContent":"        // Always draw polyline (whether open or closed)"},{"type":"INSERT","lineNumber":70,"content":"        // Draw polyline (open or closed)"},{"type":"DELETE","lineNumber":56,"oldContent":"//                color = 0xFF000000.toInt(), // black outline"},{"type":"INSERT","lineNumber":79,"content":""}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/Telemetry/Data.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/Telemetry/Data.kt","baseContent":"package com.example.aerogcsclone.Telemetry\n\ndata class TelemetryState(\n\n    val connected : Boolean = false,\n    val fcuDetected : Boolean = false,\n    //Altitude\n    val altitudeMsl: Float? = null,\n    val altitudeRelative: Float? = null,\n    //Speeds\n    val airspeed: Float? = null,\n    val groundspeed: Float? = null,\n    //Battery\n    val voltage: Float? = null,\n    val batteryPercent: Int? = null,\n    val currentA : Float? = null,\n    //Sat count and HDOP\n    val sats : Int? = null,\n    val hdop : Float? = null,\n    //Latitude and Longitude\n    val latitude : Double?= null,\n    val longitude : Double? = null\n)","baseTimestamp":1757650088603,"deltas":[{"timestamp":1757651110836,"changes":[{"type":"INSERT","lineNumber":22,"content":"    "},{"type":"INSERT","lineNumber":23,"content":"    val armed "}]},{"timestamp":1757651114524,"changes":[{"type":"INSERT","lineNumber":23,"content":"    val armed : Boolean = false,"},{"type":"INSERT","lineNumber":24,"content":"    val armable : Boolean = false,"},{"type":"DELETE","lineNumber":24,"oldContent":"    val armed "}]},{"timestamp":1757651120763,"changes":[{"type":"DELETE","lineNumber":24,"oldContent":")"},{"type":"INSERT","lineNumber":25,"content":"    val mode : String? = null"},{"type":"INSERT","lineNumber":26,"content":")"}]},{"timestamp":1757651721296,"changes":[{"type":"MODIFY","lineNumber":21,"content":"    val longitude : Double? = null,","oldContent":"    val longitude : Double? = null"},{"type":"MODIFY","lineNumber":25,"content":"    val mode : String? = null","oldContent":"    val mode : String? = null"}]},{"timestamp":1757651730424,"changes":[{"type":"MODIFY","lineNumber":22,"content":"","oldContent":"    "},{"type":"INSERT","lineNumber":24,"content":"    val armable : Boolean = false,"},{"type":"DELETE","lineNumber":25,"oldContent":"    val mode : String? = null"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uimain/MainPage.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uimain/MainPage.kt","baseContent":"package com.example.aerogcsclone.uimain\n\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.*\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.dp\nimport androidx.navigation.NavHostController\nimport com.example.aerogcsclone.Telemetry.SharedViewModel\nimport com.example.aerogcsclone.Telemetry.TelemetryState\nimport com.example.aerogcsclone.authentication.AuthViewModel\n\n@Composable\nfun MainPage(\n    telemetryViewModel: SharedViewModel,\n    authViewModel: AuthViewModel,\n    navController: NavHostController\n) {\n    val telemetryState by telemetryViewModel.telemetryState.collectAsState()\n\n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .background(MaterialTheme.colorScheme.background)\n    ) {\n        // âœ… Corrected TopNavBar call\n        TopNavBar(\n            telemetryState = telemetryState,\n            authViewModel = authViewModel,\n            navController = navController\n        )\n\n        Box(\n            modifier = Modifier\n                .weight(1f)\n                .fillMaxWidth()\n        ) {\n            // âœ… Pass telemetryState to GcsMap\n//\n            GcsMap(telemetryState = telemetryState)\n\n\n\n            StatusPanel(\n                modifier = Modifier\n                    .align(Alignment.BottomStart)\n                    .padding(12.dp),\n                telemetryState = telemetryState\n            )\n\n            FloatingButtons(\n                modifier = Modifier\n                    .align(Alignment.CenterEnd)\n                    .padding(12.dp)\n            )\n        }\n    }\n}\n\n@Composable\nfun StatusPanel(\n    modifier: Modifier = Modifier,\n    telemetryState: TelemetryState\n) {\n    Surface(\n        modifier = modifier\n            .width(500.dp)\n            .height(120.dp),\n        color = Color.Black.copy(alpha = 0.6f),\n        shape = RoundedCornerShape(8.dp)\n    ) {\n        Column(\n            modifier = Modifier.padding(10.dp),\n            verticalArrangement = Arrangement.spacedBy(8.dp)\n        ) {\n            Row(\n                horizontalArrangement = Arrangement.SpaceBetween,\n                modifier = Modifier.fillMaxWidth()\n            ) {\n                Text(\"Alt: ${telemetryState.altitudeRelative ?: \"N/A\"}\", color = Color.White)\n                Text(\"Speed: ${telemetryState.groundspeed ?: \"N/A\"}\", color = Color.White)\n                Text(\"Area: N/A\", color = Color.White)\n                Text(\"Flow: N/A\", color = Color.White)\n            }\n            Spacer(modifier = Modifier.height(8.dp))\n            Row(\n                horizontalArrangement = Arrangement.SpaceBetween,\n                modifier = Modifier.fillMaxWidth()\n            ) {\n                Text(\"Obs Alt: N/A\", color = Color.White)\n                Text(\"Time: N/A\", color = Color.White)\n                Text(\"Distance: N/A\", color = Color.White)\n                Text(\"Consumed: N/A\", color = Color.White)\n            }\n        }\n    }\n}\n\n@Composable\nfun FloatingButtons(modifier: Modifier = Modifier) {\n    Column(\n        modifier = modifier,\n        verticalArrangement = Arrangement.spacedBy(12.dp),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        FloatingActionButton(onClick = { }, containerColor = Color.Black.copy(alpha = 0.7f)) {\n            Icon(Icons.Default.PlayArrow, contentDescription = \"Start\", tint = Color.White)\n        }\n        FloatingActionButton(onClick = { }, containerColor = Color.Black.copy(alpha = 0.7f)) {\n            Icon(Icons.Default.Settings, contentDescription = \"Settings\", tint = Color.White)\n        }\n        FloatingActionButton(onClick = { }, containerColor = Color.Black.copy(alpha = 0.7f)) {\n            Icon(Icons.Default.Refresh, contentDescription = \"Refresh\", tint = Color.White)\n        }\n        FloatingActionButton(onClick = { }, containerColor = Color.Black.copy(alpha = 0.7f)) {\n            Icon(Icons.Default.Map, contentDescription = \"Map Options\", tint = Color.White)\n        }\n    }\n}","baseTimestamp":1757650088623},"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uimain/PlanScreen.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/uimain/PlanScreen.kt","baseContent":"package com.example.aerogcsclone.uimain\n\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.FloatingActionButton\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Modifier\nimport androidx.navigation.NavHostController\nimport com.example.aerogcsclone.Telemetry.SharedViewModel\nimport com.example.aerogcsclone.authentication.AuthViewModel\n\n@Composable\nfun PlanScreen(\n    telemetryViewModel: SharedViewModel,\n    authViewModel: AuthViewModel,\n    navController: NavHostController\n) {\n    val telemetryState by telemetryViewModel.telemetryState.collectAsState()\n\n    Scaffold(\n        floatingActionButton = {\n            FloatingActionButton(onClick = { /* TODO */ }) {\n                Text(\"Create Plan\")\n            }\n        }\n    ) { paddingValues ->\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(paddingValues)\n        ) {\n            TopNavBar(\n                telemetryState = telemetryState,\n                authViewModel = authViewModel,\n                navController = navController\n            )\n            GcsMap(telemetryState = telemetryState)\n        }\n    }\n}","baseTimestamp":1757650088623},"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/Telemetry/TelemetryRepository.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/SampleGCS/app/src/main/java/com/example/aerogcsclone/Telemetry/TelemetryRepository.kt","baseContent":"package com.example.aerogcsclone.Telemetry\n\nimport android.util.Log\nimport com.divpundir.mavlink.adapters.coroutines.asCoroutine\nimport com.divpundir.mavlink.adapters.coroutines.tryConnect\nimport com.divpundir.mavlink.adapters.coroutines.trySendUnsignedV2\nimport com.divpundir.mavlink.api.wrap\nimport com.divpundir.mavlink.connection.StreamState\nimport com.divpundir.mavlink.connection.tcp.TcpClientMavConnection\nimport com.divpundir.mavlink.definitions.common.*\nimport com.divpundir.mavlink.definitions.minimal.*\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.flow.*\nimport kotlinx.coroutines.isActive\nimport kotlinx.coroutines.launch\n\nclass MavlinkTelemetryRepository(\n    private val host: String,\n    private val port: Int\n) {\n    private val gcsSystemId: UByte = 200u\n    private val gcsComponentId: UByte = 1u\n    private val _state = MutableStateFlow(TelemetryState())\n    val state: StateFlow<TelemetryState> = _state.asStateFlow()\n\n    private var fcuSystemId: UByte = 0u\n    private var fcuComponentId: UByte = 0u\n\n    // Diagnostic info\n    private val _lastFailure = MutableStateFlow<Throwable?>(null)\n    val lastFailure: StateFlow<Throwable?> = _lastFailure.asStateFlow()\n\n    // Connection\n    private val connection = TcpClientMavConnection(host, port, CommonDialect).asCoroutine()\n\n    fun start() {\n        val scope = AppScope\n\n        suspend fun reconnect(scope: kotlinx.coroutines.CoroutineScope) {\n            while (scope.isActive) {\n                try {\n                    if (connection.tryConnect(scope)) {\n                        return // Exit on successful connection\n                    }\n                } catch (e: Exception) {\n                    Log.e(\"MavlinkRepo\", \"Connection attempt failed\", e)\n                    _lastFailure.value = e\n                }\n                delay(1000)\n            }\n        }\n\n        // Manage connection state + reconnects\n        scope.launch {\n            reconnect(this) // Initial connection attempt\n            connection.streamState.collect { st ->\n                when (st) {\n                    is StreamState.Active -> {\n                        if (!state.value.connected) {\n                            Log.i(\"MavlinkRepo\", \"Connection Active\")\n                            _state.update { it.copy(connected = true) }\n                        }\n                    }\n                    is StreamState.Inactive -> {\n                        if (state.value.connected) {\n                            Log.i(\"MavlinkRepo\", \"Connection Inactive, reconnecting...\")\n                            _state.update { it.copy(connected = false, fcuDetected = false) }\n                            reconnect(this)\n                        }\n                    }\n                }\n            }\n        }\n\n        // Send GCS heartbeat\n        scope.launch {\n            val heartbeat = Heartbeat(\n                type = MavType.GCS.wrap(),\n                autopilot = MavAutopilot.INVALID.wrap(),\n                baseMode = emptyList<MavModeFlag>().wrap(),\n                customMode = 0u,\n                mavlinkVersion = 3u\n            )\n            while (isActive) {\n                if (state.value.connected) {\n                    try {\n                        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, heartbeat)\n                    } catch (e: Exception) {\n                        Log.e(\"MavlinkRepo\", \"Failed to send heartbeat\", e)\n                        _lastFailure.value = e\n                    }\n                }\n                delay(1000)\n            }\n        }\n\n        // Shared message stream\n        val mavFrameStream = connection.mavFrame\n            .shareIn(scope, SharingStarted.Eagerly, replay = 0)\n\n        // Log raw messages\n        scope.launch {\n            mavFrameStream.collect {\n                Log.d(\"MavlinkRepo\", \"Frame: ${it.message.javaClass.simpleName} (sysId=${it.systemId}, compId=${it.componentId})\")\n            }\n        }\n\n        // Detect FCU\n        scope.launch {\n            mavFrameStream\n                .filter { it.message is Heartbeat && (it.message as Heartbeat).type != MavType.GCS.wrap() }\n                .collect {\n                    if (!state.value.fcuDetected) {\n                        fcuSystemId = it.systemId\n                        fcuComponentId = it.componentId\n                        Log.i(\"MavlinkRepo\", \"FCU detected sysId=$fcuSystemId compId=$fcuComponentId\")\n                        _state.update { it.copy(fcuDetected = true) }\n\n                        // Set message intervals\n                        launch {\n                            suspend fun setMessageRate(messageId: UInt, hz: Float) {\n                                val intervalUsec = if (hz <= 0f) 0f else (1_000_000f / hz)\n                                val cmd = CommandLong(\n                                    targetSystem = fcuSystemId,\n                                    targetComponent = fcuComponentId,\n                                    command = MavCmd.SET_MESSAGE_INTERVAL.wrap(),\n                                    confirmation = 0u,\n                                    param1 = messageId.toFloat(),\n                                    param2 = intervalUsec,\n                                    param3 = 0f,\n                                    param4 = 0f,\n                                    param5 = 0f,\n                                    param6 = 0f,\n                                    param7 = 0f\n                                )\n                                try {\n                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, cmd)\n                                } catch (e: Exception) {\n                                    Log.e(\"MavlinkRepo\", \"Failed to send SET_MESSAGE_INTERVAL\", e)\n                                    _lastFailure.value = e\n                                }\n                            }\n\n                            setMessageRate(1u, 1f)   // SYS_STATUS\n                            setMessageRate(24u, 1f)  // GPS_RAW_INT\n                            setMessageRate(33u, 5f)  // GLOBAL_POSITION_INT\n                            setMessageRate(74u, 5f)  // VFR_HUD\n                            setMessageRate(147u, 1f) // BATTERY_STATUS\n                        }\n                    }\n                }\n        }\n\n        // Collectors\n\n        // VFR_HUD\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .filterIsInstance<VfrHud>()\n                .collect { hud ->\n                    _state.update {\n                        it.copy(\n                            altitudeMsl = hud.alt,\n                            airspeed = hud.airspeed.takeIf { v -> v > 0f },\n                            groundspeed = hud.groundspeed.takeIf { v -> v > 0f }\n                        )\n                    }\n                }\n        }\n\n        // GLOBAL_POSITION_INT\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .filterIsInstance<GlobalPositionInt>()\n                .collect { gp ->\n                    val altAMSLm = gp.alt / 1000f\n                    val relAltM = gp.relativeAlt / 1000f\n                    val lat = gp.lat.takeIf { it != Int.MIN_VALUE }?.let { it / 10_000_000.0 }\n                    val lon = gp.lon.takeIf { it != Int.MIN_VALUE }?.let { it / 10_000_000.0 }\n                    _state.update {\n                        it.copy(\n                            altitudeMsl = altAMSLm,\n                            altitudeRelative = relAltM,\n                            latitude = lat,\n                            longitude = lon\n                        )\n                    }\n                }\n        }\n\n        // BATTERY_STATUS\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .filterIsInstance<BatteryStatus>()\n                .collect { b ->\n                    val currentA = if (b.currentBattery.toInt() == -1) null else b.currentBattery / 100f\n                    _state.update { it.copy(currentA = currentA) }\n                }\n        }\n        //HEARTBEAT \n        // SYS_STATUS\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .filterIsInstance<SysStatus>()\n                .collect { s ->\n                    val vBatt = if (s.voltageBattery.toUInt() == 0xFFFFu) null else s.voltageBattery.toFloat() / 1000f\n                    val pct = if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()\n                    _state.update { it.copy(voltage = vBatt, batteryPercent = pct) }\n                }\n        }\n\n        // GPS_RAW_INT\n        scope.launch {\n            mavFrameStream\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }\n                .map { it.message }\n                .filterIsInstance<GpsRawInt>()\n                .collect { gps ->\n                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }\n                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f\n                    _state.update { it.copy(sats = sats, hdop = hdop) }\n                }\n        }\n    }\n}\n","baseTimestamp":1757650970598,"deltas":[{"timestamp":1757651353406,"changes":[{"type":"MODIFY","lineNumber":210,"content":"                .filterIsInstance<Heartbeat>()","oldContent":"                .map { it.message }"},{"type":"INSERT","lineNumber":251,"content":"                    val vBatt = if (s.voltageBattery.toUInt() == 0xFFFFu) null else s.voltageBattery.toFloat() / 1000f"},{"type":"DELETE","lineNumber":252,"oldContent":"                    val pct = if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()"},{"type":"MODIFY","lineNumber":253,"content":"                    val SENSOR_3D_GYRO = 1u","oldContent":"                    val SENSOR_3D_GYRO = 0.toUInt()"},{"type":"MODIFY","lineNumber":262,"content":"        // GPS_RAW_INT","oldContent":"        // GPS_RAW_INT"},{"type":"DELETE","lineNumber":270,"oldContent":"                }"},{"type":"INSERT","lineNumber":271,"content":"                    _state.update { it.copy(sats = sats, hdop = hdop) }"},{"type":"INSERT","lineNumber":272,"content":"                }"}]},{"timestamp":1757651369919,"changes":[{"type":"MODIFY","lineNumber":211,"content":"                .collect{ hb->","oldContent":"                .filterIsInstance<SysStatus>()"},{"type":"MODIFY","lineNumber":258,"content":"                    _state.update { it.copy(voltage = vBatt, batteryPercent = pct , armable = armable) }","oldContent":"                    _state.update { it.copy(voltage = vBatt, batteryPercent = pct) }"},{"type":"INSERT","lineNumber":261,"content":""},{"type":"DELETE","lineNumber":262,"oldContent":"        // GPS_RAW_INT"},{"type":"MODIFY","lineNumber":271,"content":"                    _state.update { it.copy(sats = sats, hdop = hdop) }","oldContent":"                    _state.update { it.copy(sats = sats, hdop = hdop) }"},{"type":"INSERT","lineNumber":273,"content":"        }"}]},{"timestamp":1757651385021,"changes":[{"type":"INSERT","lineNumber":270,"content":"                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"DELETE","lineNumber":271,"oldContent":"                    _state.update { it.copy(sats = sats, hdop = hdop) }"}]},{"timestamp":1757651405094,"changes":[{"type":"INSERT","lineNumber":274,"content":"        "}]},{"timestamp":1757651409794,"changes":[{"type":"DELETE","lineNumber":274,"oldContent":"        "}]},{"timestamp":1757651414953,"changes":[{"type":"INSERT","lineNumber":275,"content":"    "},{"type":"INSERT","lineNumber":276,"content":"    "}]},{"timestamp":1757651423346,"changes":[{"type":"INSERT","lineNumber":276,"content":"    susp"},{"type":"DELETE","lineNumber":277,"oldContent":"    "}]},{"timestamp":1757651425609,"changes":[{"type":"MODIFY","lineNumber":276,"content":"    suspend fun ","oldContent":"    susp"}]},{"timestamp":1757651440846,"changes":[{"type":"MODIFY","lineNumber":276,"content":"    suspend fun sendCommand(command:)","oldContent":"    suspend fun "}]},{"timestamp":1757651449852,"changes":[{"type":"DELETE","lineNumber":205,"oldContent":"        //HEARTBEAT "},{"type":"DELETE","lineNumber":206,"oldContent":"        // SYS_STATUS"},{"type":"INSERT","lineNumber":205,"content":"        //HEARTBEAT for mode, armed, armable"},{"type":"INSERT","lineNumber":206,"content":"        scope.launch {"},{"type":"MODIFY","lineNumber":212,"content":"                    val armed = (hb.baseMode.value and MavModeFlag.SAFETY_ARMED.value )!= 0u","oldContent":"                .collect { s ->"},{"type":"MODIFY","lineNumber":274,"content":"    }","oldContent":"                .collect { s ->"},{"type":"DELETE","lineNumber":276,"oldContent":"    suspend fun sendCommand(command:)"},{"type":"DELETE","lineNumber":277,"oldContent":"    "},{"type":"INSERT","lineNumber":276,"content":"    suspend fun sendCommand(command: MavCmd,param1)"},{"type":"INSERT","lineNumber":277,"content":"}"},{"type":"INSERT","lineNumber":278,"content":""}]},{"timestamp":1757651453463,"changes":[{"type":"MODIFY","lineNumber":276,"content":"    suspend fun sendCommand(command: MavCmd,param1:Floa)","oldContent":"    suspend fun sendCommand(command: MavCmd,param1)"},{"type":"INSERT","lineNumber":278,"content":""}]},{"timestamp":1757651457980,"changes":[{"type":"MODIFY","lineNumber":207,"content":"            mavFrameStream","oldContent":"        scope.launch {"},{"type":"INSERT","lineNumber":272,"content":"                }"},{"type":"DELETE","lineNumber":273,"oldContent":"        "},{"type":"MODIFY","lineNumber":276,"content":"    ","oldContent":"    suspend fun sendCommand(command: MavCmd,param1:Floa)"}]},{"timestamp":1757651510132,"changes":[{"type":"INSERT","lineNumber":268,"content":"                .collect { gps ->"},{"type":"INSERT","lineNumber":269,"content":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"INSERT","lineNumber":271,"content":"                    _state.update { it.copy(sats = sats, hdop = hdop) }"},{"type":"DELETE","lineNumber":270,"oldContent":"                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"DELETE","lineNumber":272,"oldContent":"                }"},{"type":"DELETE","lineNumber":273,"oldContent":"        "},{"type":"MODIFY","lineNumber":275,"content":"","oldContent":"    susp"},{"type":"INSERT","lineNumber":276,"content":"    suspend fun sendCommand(command: MavCmd, param1: Float = 0f, param2: Float = 0f, param3: Float = 0f, param4: Float = 0f, param5: Float = 0f, param6: Float = 0f, param7: Float = 0f) {"},{"type":"INSERT","lineNumber":277,"content":"        val commandLong = CommandLong("},{"type":"INSERT","lineNumber":278,"content":"            targetSystem = com.example.kotlingcspractice.Telemetry.MavlinkTelemetryRepository.fcuSystemId,"},{"type":"INSERT","lineNumber":279,"content":"            targetComponent = com.example.kotlingcspractice.Telemetry.MavlinkTelemetryRepository.fcuComponentId,"},{"type":"INSERT","lineNumber":280,"content":"            command = command.wrap(),"},{"type":"INSERT","lineNumber":281,"content":"            confirmation = 0u,"},{"type":"INSERT","lineNumber":282,"content":"            param1 = param1,"},{"type":"INSERT","lineNumber":283,"content":"            param2 = param2,"},{"type":"INSERT","lineNumber":284,"content":"            param3 = param3,"},{"type":"INSERT","lineNumber":285,"content":"            param4 = param4,"},{"type":"INSERT","lineNumber":286,"content":"            param5 = param5,"},{"type":"INSERT","lineNumber":287,"content":"            param6 = param6,"},{"type":"INSERT","lineNumber":288,"content":"            param7 = param7"},{"type":"INSERT","lineNumber":289,"content":"        )"},{"type":"INSERT","lineNumber":290,"content":"        try {"},{"type":"INSERT","lineNumber":291,"content":"            com.example.kotlingcspractice.Telemetry.MavlinkTelemetryRepository.connection.trySendUnsignedV2("},{"type":"INSERT","lineNumber":292,"content":"                com.example.kotlingcspractice.Telemetry.MavlinkTelemetryRepository.gcsSystemId,"},{"type":"INSERT","lineNumber":293,"content":"                com.example.kotlingcspractice.Telemetry.MavlinkTelemetryRepository.gcsComponentId, commandLong)"},{"type":"INSERT","lineNumber":294,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":295,"content":"            Log.e(\"MavlinkRepo\", \"Failed to send command\", e)"},{"type":"INSERT","lineNumber":296,"content":"            com.example.kotlingcspractice.Telemetry.MavlinkTelemetryRepository._lastFailure.value = e"},{"type":"INSERT","lineNumber":297,"content":"        }"},{"type":"INSERT","lineNumber":298,"content":"    }"},{"type":"INSERT","lineNumber":299,"content":""},{"type":"INSERT","lineNumber":300,"content":"    suspend fun arm() {"},{"type":"INSERT","lineNumber":301,"content":"        if (com.example.kotlingcspractice.Telemetry.MavlinkTelemetryRepository.state.value.armable) {"},{"type":"INSERT","lineNumber":302,"content":"            com.example.kotlingcspractice.Telemetry.MavlinkTelemetryRepository.sendCommand("},{"type":"INSERT","lineNumber":303,"content":"                MavCmd.COMPONENT_ARM_DISARM,"},{"type":"INSERT","lineNumber":304,"content":"                1f"},{"type":"INSERT","lineNumber":305,"content":"            )"},{"type":"INSERT","lineNumber":306,"content":"        } else {"},{"type":"INSERT","lineNumber":307,"content":"            Log.w(\"MavlinkRepo\", \"Arm command rejected, vehicle not armable\")"},{"type":"INSERT","lineNumber":308,"content":"        }"},{"type":"INSERT","lineNumber":309,"content":"    }"},{"type":"INSERT","lineNumber":310,"content":""},{"type":"INSERT","lineNumber":311,"content":"    suspend fun disarm() {"},{"type":"INSERT","lineNumber":312,"content":"        com.example.kotlingcspractice.Telemetry.MavlinkTelemetryRepository.sendCommand("},{"type":"INSERT","lineNumber":313,"content":"            MavCmd.COMPONENT_ARM_DISARM,"},{"type":"INSERT","lineNumber":314,"content":"            0f"},{"type":"INSERT","lineNumber":315,"content":"        )"},{"type":"INSERT","lineNumber":316,"content":"    }"},{"type":"INSERT","lineNumber":317,"content":""},{"type":"INSERT","lineNumber":318,"content":"    suspend fun changeMode(mode: MavMode) {"},{"type":"INSERT","lineNumber":319,"content":"        com.example.kotlingcspractice.Telemetry.MavlinkTelemetryRepository.sendCommand("},{"type":"INSERT","lineNumber":320,"content":"            MavCmd.DO_SET_MODE,"},{"type":"INSERT","lineNumber":321,"content":"            mode.value.toFloat(),"},{"type":"INSERT","lineNumber":322,"content":"            0f"},{"type":"INSERT","lineNumber":323,"content":"        )"},{"type":"INSERT","lineNumber":324,"content":"    }"},{"type":"INSERT","lineNumber":325,"content":""},{"type":"INSERT","lineNumber":326,"content":"    suspend fun takeoff(altitude: Float) {"},{"type":"INSERT","lineNumber":327,"content":"        com.example.kotlingcspractice.Telemetry.MavlinkTelemetryRepository.sendCommand("},{"type":"INSERT","lineNumber":328,"content":"            MavCmd.NAV_TAKEOFF,"},{"type":"INSERT","lineNumber":329,"content":"            -1f,"},{"type":"INSERT","lineNumber":330,"content":"            0f,"},{"type":"INSERT","lineNumber":331,"content":"            0f,"},{"type":"INSERT","lineNumber":332,"content":"            0f,"},{"type":"INSERT","lineNumber":333,"content":"            0f,"},{"type":"INSERT","lineNumber":334,"content":"            0f,"},{"type":"INSERT","lineNumber":335,"content":"            altitude"},{"type":"INSERT","lineNumber":336,"content":"        )"},{"type":"INSERT","lineNumber":337,"content":"    }"},{"type":"INSERT","lineNumber":338,"content":""},{"type":"INSERT","lineNumber":339,"content":"    suspend fun land() {"},{"type":"INSERT","lineNumber":340,"content":"        com.example.kotlingcspractice.Telemetry.MavlinkTelemetryRepository.sendCommand(MavCmd.NAV_LAND)"},{"type":"INSERT","lineNumber":341,"content":"    }"},{"type":"INSERT","lineNumber":343,"content":"    "}]},{"timestamp":1757651531538,"changes":[{"type":"DELETE","lineNumber":270,"oldContent":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"DELETE","lineNumber":273,"oldContent":"                    _state.update { it.copy(sats = sats, hdop = hdop) }"},{"type":"INSERT","lineNumber":272,"content":"                }"},{"type":"INSERT","lineNumber":273,"content":"        }"},{"type":"DELETE","lineNumber":277,"oldContent":"    "},{"type":"DELETE","lineNumber":279,"oldContent":"}"},{"type":"DELETE","lineNumber":281,"oldContent":""},{"type":"DELETE","lineNumber":283,"oldContent":"    "},{"type":"DELETE","lineNumber":285,"oldContent":"    }"},{"type":"DELETE","lineNumber":287,"oldContent":"        com.example.kotlingcspractice.Telemetry.MavlinkTelemetryRepository.sendCommand(MavCmd.NAV_LAND)"},{"type":"DELETE","lineNumber":289,"oldContent":"    suspend fun land() {"},{"type":"DELETE","lineNumber":291,"oldContent":""},{"type":"DELETE","lineNumber":293,"oldContent":"    }"},{"type":"DELETE","lineNumber":295,"oldContent":"        )"},{"type":"DELETE","lineNumber":297,"oldContent":"            altitude"},{"type":"DELETE","lineNumber":299,"oldContent":"            0f,"},{"type":"DELETE","lineNumber":301,"oldContent":"            0f,"},{"type":"DELETE","lineNumber":303,"oldContent":"            0f,"},{"type":"DELETE","lineNumber":305,"oldContent":"            0f,"},{"type":"DELETE","lineNumber":307,"oldContent":"            0f,"},{"type":"DELETE","lineNumber":309,"oldContent":"            -1f,"},{"type":"DELETE","lineNumber":311,"oldContent":"            MavCmd.NAV_TAKEOFF,"},{"type":"DELETE","lineNumber":313,"oldContent":"        com.example.kotlingcspractice.Telemetry.MavlinkTelemetryRepository.sendCommand("},{"type":"DELETE","lineNumber":315,"oldContent":"    suspend fun takeoff(altitude: Float) {"},{"type":"DELETE","lineNumber":317,"oldContent":""},{"type":"DELETE","lineNumber":320,"oldContent":"    }"},{"type":"DELETE","lineNumber":321,"oldContent":"        )"},{"type":"DELETE","lineNumber":323,"oldContent":"            0f"},{"type":"DELETE","lineNumber":325,"oldContent":"            mode.value.toFloat(),"},{"type":"DELETE","lineNumber":327,"oldContent":"            MavCmd.DO_SET_MODE,"},{"type":"DELETE","lineNumber":329,"oldContent":"        com.example.kotlingcspractice.Telemetry.MavlinkTelemetryRepository.sendCommand("},{"type":"DELETE","lineNumber":331,"oldContent":"    suspend fun changeMode(mode: MavMode) {"},{"type":"DELETE","lineNumber":333,"oldContent":""},{"type":"DELETE","lineNumber":335,"oldContent":"    }"},{"type":"DELETE","lineNumber":337,"oldContent":"        )"},{"type":"DELETE","lineNumber":339,"oldContent":"            0f"},{"type":"INSERT","lineNumber":309,"content":"    }"},{"type":"INSERT","lineNumber":310,"content":""},{"type":"INSERT","lineNumber":311,"content":"    suspend fun disarm() {"},{"type":"INSERT","lineNumber":312,"content":"        com.example.kotlingcspractice.Telemetry.MavlinkTelemetryRepository.sendCommand("},{"type":"INSERT","lineNumber":314,"content":"            0f"},{"type":"INSERT","lineNumber":315,"content":"        )"},{"type":"INSERT","lineNumber":317,"content":""},{"type":"INSERT","lineNumber":318,"content":"    suspend fun changeMode(mode: MavMode) {"},{"type":"INSERT","lineNumber":320,"content":"            MavCmd.DO_SET_MODE,"},{"type":"INSERT","lineNumber":321,"content":"            mode.value.toFloat(),"},{"type":"INSERT","lineNumber":322,"content":"            0f"},{"type":"INSERT","lineNumber":323,"content":"        )"},{"type":"INSERT","lineNumber":324,"content":"    }"},{"type":"DELETE","lineNumber":345,"oldContent":"    suspend fun disarm() {"},{"type":"INSERT","lineNumber":326,"content":"    suspend fun takeoff(altitude: Float) {"},{"type":"INSERT","lineNumber":327,"content":"        sendCommand("},{"type":"INSERT","lineNumber":328,"content":"            MavCmd.NAV_TAKEOFF,"},{"type":"INSERT","lineNumber":329,"content":"            -1f,"},{"type":"INSERT","lineNumber":330,"content":"            0f,"},{"type":"INSERT","lineNumber":331,"content":"            0f,"},{"type":"INSERT","lineNumber":332,"content":"            0f,"},{"type":"INSERT","lineNumber":333,"content":"            0f,"},{"type":"INSERT","lineNumber":334,"content":"            0f,"},{"type":"INSERT","lineNumber":335,"content":"            altitude"},{"type":"INSERT","lineNumber":336,"content":"        )"},{"type":"INSERT","lineNumber":337,"content":"    }"},{"type":"INSERT","lineNumber":338,"content":""},{"type":"INSERT","lineNumber":339,"content":"    suspend fun land() {"},{"type":"INSERT","lineNumber":340,"content":"        com.example.kotlingcspractice.Telemetry.MavlinkTelemetryRepository.sendCommand(MavCmd.NAV_LAND)"},{"type":"INSERT","lineNumber":341,"content":"    }"},{"type":"INSERT","lineNumber":342,"content":"    "},{"type":"INSERT","lineNumber":343,"content":"    "},{"type":"INSERT","lineNumber":344,"content":"}"},{"type":"INSERT","lineNumber":345,"content":""}]},{"timestamp":1757651545387,"changes":[{"type":"DELETE","lineNumber":213,"oldContent":"                    val vBatt = if (s.voltageBattery.toUInt() == 0xFFFFu) null else s.voltageBattery.toFloat() / 1000f"},{"type":"DELETE","lineNumber":214,"oldContent":"                    val pct = if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()"},{"type":"DELETE","lineNumber":215,"oldContent":"                    _state.update { it.copy(voltage = vBatt, batteryPercent = pct) }"},{"type":"INSERT","lineNumber":213,"content":"                    val mode = when (hb.customMode) {"},{"type":"INSERT","lineNumber":214,"content":"                        0u -> \"Stabilize\""},{"type":"INSERT","lineNumber":215,"content":"                        1u -> \"Acro\""},{"type":"DELETE","lineNumber":217,"oldContent":"        // GPS_RAW_INT"},{"type":"DELETE","lineNumber":218,"oldContent":"            mavFrameStream"},{"type":"DELETE","lineNumber":219,"oldContent":"                .map { it.message }"},{"type":"DELETE","lineNumber":220,"oldContent":"                .collect { gps ->"},{"type":"INSERT","lineNumber":217,"content":"                        3u -> \"Auto\""},{"type":"INSERT","lineNumber":218,"content":"                        4u -> \"Guided\""},{"type":"INSERT","lineNumber":219,"content":"                        5u -> \"Loiter\""},{"type":"INSERT","lineNumber":220,"content":"                        6u -> \"RTL\""},{"type":"DELETE","lineNumber":244,"oldContent":"                .collect { gps ->"},{"type":"DELETE","lineNumber":245,"oldContent":"                .map { it.message }"},{"type":"DELETE","lineNumber":246,"oldContent":"            mavFrameStream"},{"type":"INSERT","lineNumber":244,"content":"        // SYS_STATUS"},{"type":"INSERT","lineNumber":246,"content":"            mavFrameStream"},{"type":"INSERT","lineNumber":247,"content":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":263,"content":"        scope.launch {"},{"type":"INSERT","lineNumber":264,"content":"            mavFrameStream"},{"type":"INSERT","lineNumber":265,"content":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":266,"content":"                .map { it.message }"},{"type":"INSERT","lineNumber":267,"content":"                .filterIsInstance<GpsRawInt>()"},{"type":"INSERT","lineNumber":268,"content":"                .collect { gps ->"},{"type":"INSERT","lineNumber":269,"content":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"DELETE","lineNumber":264,"oldContent":"                }"},{"type":"DELETE","lineNumber":266,"oldContent":"        }"},{"type":"DELETE","lineNumber":267,"oldContent":"                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"DELETE","lineNumber":268,"oldContent":"                .collect { gps ->"},{"type":"DELETE","lineNumber":269,"oldContent":"        "},{"type":"DELETE","lineNumber":270,"oldContent":"    "},{"type":"DELETE","lineNumber":272,"oldContent":"                    _state.update { it.copy(sats = sats, hdop = hdop) }"},{"type":"INSERT","lineNumber":293,"content":"                com.example.kotlingcspractice.Telemetry.MavlinkTelemetryRepository.gcsComponentId, commandLong)"},{"type":"INSERT","lineNumber":294,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":295,"content":"            Log.e(\"MavlinkRepo\", \"Failed to send command\", e)"},{"type":"INSERT","lineNumber":296,"content":"            com.example.kotlingcspractice.Telemetry.MavlinkTelemetryRepository._lastFailure.value = e"},{"type":"INSERT","lineNumber":297,"content":"        }"},{"type":"DELETE","lineNumber":295,"oldContent":"                com.example.kotlingcspractice.Telemetry.MavlinkTelemetryRepository.gcsComponentId, commandLong)"},{"type":"INSERT","lineNumber":300,"content":"    suspend fun arm() {"},{"type":"INSERT","lineNumber":301,"content":"        if (com.example.kotlingcspractice.Telemetry.MavlinkTelemetryRepository.state.value.armable) {"},{"type":"INSERT","lineNumber":302,"content":"            com.example.kotlingcspractice.Telemetry.MavlinkTelemetryRepository.sendCommand("},{"type":"INSERT","lineNumber":303,"content":"                MavCmd.COMPONENT_ARM_DISARM,"},{"type":"INSERT","lineNumber":304,"content":"                1f"},{"type":"INSERT","lineNumber":305,"content":"            )"},{"type":"INSERT","lineNumber":306,"content":"        } else {"},{"type":"INSERT","lineNumber":307,"content":"            Log.w(\"MavlinkRepo\", \"Arm command rejected, vehicle not armable\")"},{"type":"INSERT","lineNumber":308,"content":"        }"},{"type":"INSERT","lineNumber":309,"content":"    }"},{"type":"INSERT","lineNumber":310,"content":""},{"type":"DELETE","lineNumber":298,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":313,"content":"            MavCmd.COMPONENT_ARM_DISARM,"},{"type":"DELETE","lineNumber":300,"oldContent":"            Log.e(\"MavlinkRepo\", \"Failed to send command\", e)"},{"type":"DELETE","lineNumber":302,"oldContent":"            com.example.kotlingcspractice.Telemetry.MavlinkTelemetryRepository._lastFailure.value = e"},{"type":"INSERT","lineNumber":316,"content":"    }"},{"type":"DELETE","lineNumber":305,"oldContent":"        }"},{"type":"DELETE","lineNumber":306,"oldContent":"            mode.value.toFloat(),"},{"type":"INSERT","lineNumber":319,"content":"        sendCommand("},{"type":"DELETE","lineNumber":310,"oldContent":""},{"type":"DELETE","lineNumber":313,"oldContent":"    suspend fun arm() {"},{"type":"INSERT","lineNumber":325,"content":""},{"type":"DELETE","lineNumber":315,"oldContent":"        if (com.example.kotlingcspractice.Telemetry.MavlinkTelemetryRepository.state.value.armable) {"},{"type":"DELETE","lineNumber":318,"oldContent":"            com.example.kotlingcspractice.Telemetry.MavlinkTelemetryRepository.sendCommand("},{"type":"DELETE","lineNumber":321,"oldContent":"                MavCmd.COMPONENT_ARM_DISARM,"},{"type":"DELETE","lineNumber":324,"oldContent":"                1f"},{"type":"DELETE","lineNumber":327,"oldContent":"            )"},{"type":"DELETE","lineNumber":330,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":333,"oldContent":"            Log.w(\"MavlinkRepo\", \"Arm command rejected, vehicle not armable\")"},{"type":"DELETE","lineNumber":336,"oldContent":"        }"},{"type":"DELETE","lineNumber":338,"oldContent":""},{"type":"DELETE","lineNumber":340,"oldContent":"    }"},{"type":"DELETE","lineNumber":342,"oldContent":""},{"type":"INSERT","lineNumber":345,"content":""}]},{"timestamp":1757651552704,"changes":[{"type":"MODIFY","lineNumber":216,"content":"                        2u -> \"Alt Hold\"","oldContent":"                }"},{"type":"DELETE","lineNumber":228,"oldContent":"                .filterIsInstance<GpsRawInt>()"},{"type":"DELETE","lineNumber":229,"oldContent":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"DELETE","lineNumber":230,"oldContent":"                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"DELETE","lineNumber":231,"oldContent":"                }"},{"type":"DELETE","lineNumber":232,"oldContent":"        }"},{"type":"DELETE","lineNumber":233,"oldContent":"}"},{"type":"DELETE","lineNumber":234,"oldContent":""},{"type":"DELETE","lineNumber":235,"oldContent":"                .filterIsInstance<GpsRawInt>()"},{"type":"DELETE","lineNumber":236,"oldContent":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":237,"oldContent":"            mavFrameStream"},{"type":"DELETE","lineNumber":238,"oldContent":"        // GPS_RAW_INT"},{"type":"DELETE","lineNumber":239,"oldContent":""},{"type":"INSERT","lineNumber":228,"content":"                        17u -> \"Brake\""},{"type":"INSERT","lineNumber":229,"content":"                        18u -> \"Throw\""},{"type":"INSERT","lineNumber":230,"content":"                        19u -> \"Avoid_ADSB\""},{"type":"INSERT","lineNumber":231,"content":"                        20u -> \"Guided_NoGPS\""},{"type":"INSERT","lineNumber":232,"content":"                        21u -> \"Smart_RTL\""},{"type":"INSERT","lineNumber":233,"content":"                        22u -> \"FlowHold\""},{"type":"INSERT","lineNumber":234,"content":"                        23u -> \"Follow\""},{"type":"INSERT","lineNumber":235,"content":"                        24u -> \"ZigZag\""},{"type":"INSERT","lineNumber":236,"content":"                        25u -> \"SystemID\""},{"type":"INSERT","lineNumber":237,"content":"                        26u -> \"AutoRotate\""},{"type":"INSERT","lineNumber":238,"content":"                        27u -> \"Auto_RTL\""},{"type":"INSERT","lineNumber":239,"content":"                        else -> \"Unknown\""},{"type":"DELETE","lineNumber":242,"oldContent":"                    _state.update { it.copy(voltage = vBatt, batteryPercent = pct) }"},{"type":"DELETE","lineNumber":243,"oldContent":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"INSERT","lineNumber":242,"content":"                }"},{"type":"INSERT","lineNumber":243,"content":"        }"},{"type":"INSERT","lineNumber":245,"content":"        scope.launch {"},{"type":"DELETE","lineNumber":247,"oldContent":"                .filterIsInstance<SysStatus>()"},{"type":"DELETE","lineNumber":249,"oldContent":"                }"},{"type":"DELETE","lineNumber":250,"oldContent":"                    val armable = present && enabled && healthy"},{"type":"INSERT","lineNumber":249,"content":"                .filterIsInstance<SysStatus>()"},{"type":"INSERT","lineNumber":250,"content":"                .collect { s ->"},{"type":"DELETE","lineNumber":256,"oldContent":"        scope.launch {"},{"type":"DELETE","lineNumber":257,"oldContent":""},{"type":"INSERT","lineNumber":256,"content":"                    val healthy = (s.onboardControlSensorsHealth.value and SENSOR_3D_GYRO) != 0u"},{"type":"INSERT","lineNumber":257,"content":"                    val armable = present && enabled && healthy"},{"type":"MODIFY","lineNumber":260,"content":"        }","oldContent":"        }"},{"type":"MODIFY","lineNumber":262,"content":"        // GPS_RAW_INT","oldContent":"                    _state.update { it.copy(sats = sats, hdop = hdop) }"},{"type":"DELETE","lineNumber":264,"oldContent":"                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"DELETE","lineNumber":267,"oldContent":"    "},{"type":"INSERT","lineNumber":270,"content":"                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"INSERT","lineNumber":271,"content":"                    _state.update { it.copy(sats = sats, hdop = hdop) }"},{"type":"DELETE","lineNumber":294,"oldContent":"    }"},{"type":"DELETE","lineNumber":296,"oldContent":""},{"type":"DELETE","lineNumber":299,"oldContent":"    suspend fun disarm() {"},{"type":"DELETE","lineNumber":301,"oldContent":"        com.example.kotlingcspractice.Telemetry.MavlinkTelemetryRepository.sendCommand("},{"type":"DELETE","lineNumber":302,"oldContent":"            0f"},{"type":"INSERT","lineNumber":298,"content":"    }"},{"type":"INSERT","lineNumber":299,"content":""},{"type":"DELETE","lineNumber":305,"oldContent":"        )"},{"type":"DELETE","lineNumber":308,"oldContent":""},{"type":"DELETE","lineNumber":310,"oldContent":"    suspend fun changeMode(mode: MavMode) {"},{"type":"DELETE","lineNumber":314,"oldContent":"            MavCmd.DO_SET_MODE,"},{"type":"DELETE","lineNumber":316,"oldContent":"            mode.value.toFloat(),"},{"type":"INSERT","lineNumber":310,"content":""},{"type":"INSERT","lineNumber":311,"content":"    suspend fun disarm() {"},{"type":"INSERT","lineNumber":312,"content":"        sendCommand("},{"type":"INSERT","lineNumber":313,"content":"            MavCmd.COMPONENT_ARM_DISARM,"},{"type":"INSERT","lineNumber":315,"content":"        )"},{"type":"INSERT","lineNumber":316,"content":"    }"},{"type":"INSERT","lineNumber":318,"content":"    suspend fun changeMode(mode: MavMode) {"},{"type":"INSERT","lineNumber":319,"content":"        sendCommand("},{"type":"INSERT","lineNumber":320,"content":"            MavCmd.DO_SET_MODE,"},{"type":"INSERT","lineNumber":321,"content":"            mode.value.toFloat(),"},{"type":"INSERT","lineNumber":322,"content":"            0f"},{"type":"DELETE","lineNumber":322,"oldContent":"            MavCmd.COMPONENT_ARM_DISARM,"},{"type":"INSERT","lineNumber":325,"content":""},{"type":"DELETE","lineNumber":324,"oldContent":"    }"},{"type":"DELETE","lineNumber":327,"oldContent":"        sendCommand("},{"type":"DELETE","lineNumber":332,"oldContent":""},{"type":"INSERT","lineNumber":343,"content":"    "},{"type":"INSERT","lineNumber":344,"content":"}"}]},{"timestamp":1757651564909,"changes":[{"type":"MODIFY","lineNumber":208,"content":"                .filter{ frame-> state.value.fcuDetected && frame.systemId == fcuSystemId }","oldContent":"            mavFrameStream"},{"type":"DELETE","lineNumber":221,"oldContent":"            mavFrameStream"},{"type":"DELETE","lineNumber":222,"oldContent":"                .map { it.message }"},{"type":"DELETE","lineNumber":223,"oldContent":"                .collect { gps ->"},{"type":"INSERT","lineNumber":221,"content":"                        7u -> \"Circle\""},{"type":"INSERT","lineNumber":222,"content":"                        9u -> \"Land\""},{"type":"INSERT","lineNumber":223,"content":"                        11u -> \"Drift\""},{"type":"MODIFY","lineNumber":241,"content":"                    _state.update { it.copy(armed=armed , mode = mode)}","oldContent":"        }"},{"type":"MODIFY","lineNumber":248,"content":"                .map { it.message }","oldContent":"        // GPS_RAW_INT"},{"type":"MODIFY","lineNumber":252,"content":"                    val pct = if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()","oldContent":"                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"DELETE","lineNumber":254,"oldContent":"        }"},{"type":"DELETE","lineNumber":255,"oldContent":"                }"},{"type":"INSERT","lineNumber":254,"content":"                    val present = (s.onboardControlSensorsPresent.value and SENSOR_3D_GYRO) != 0u"},{"type":"INSERT","lineNumber":255,"content":"                    val enabled = (s.onboardControlSensorsEnabled.value and SENSOR_3D_GYRO) != 0u"},{"type":"MODIFY","lineNumber":259,"content":"                }","oldContent":"                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"MODIFY","lineNumber":261,"content":"","oldContent":"    "},{"type":"DELETE","lineNumber":268,"oldContent":"                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"MODIFY","lineNumber":270,"content":"                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f","oldContent":"                    _state.update { it.copy(sats = sats, hdop = hdop) }"},{"type":"INSERT","lineNumber":271,"content":"                    _state.update { it.copy(sats = sats, hdop = hdop) }"},{"type":"DELETE","lineNumber":296,"oldContent":"    }"},{"type":"MODIFY","lineNumber":298,"content":"    }","oldContent":""},{"type":"INSERT","lineNumber":299,"content":""},{"type":"MODIFY","lineNumber":301,"content":"        if (state.value.armable) {","oldContent":"        if (com.example.kotlingcspractice.Telemetry.MavlinkTelemetryRepository.state.value.armable) {"},{"type":"INSERT","lineNumber":305,"content":"            )"},{"type":"INSERT","lineNumber":306,"content":"        } else {"},{"type":"INSERT","lineNumber":307,"content":"            Log.w(\"MavlinkRepo\", \"Arm command rejected, vehicle not armable\")"},{"type":"INSERT","lineNumber":308,"content":"        }"},{"type":"INSERT","lineNumber":309,"content":"    }"},{"type":"DELETE","lineNumber":307,"oldContent":"            )"},{"type":"DELETE","lineNumber":309,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":311,"oldContent":"            Log.w(\"MavlinkRepo\", \"Arm command rejected, vehicle not armable\")"},{"type":"INSERT","lineNumber":314,"content":"            0f"},{"type":"DELETE","lineNumber":313,"oldContent":"        }"},{"type":"DELETE","lineNumber":315,"oldContent":"    }"},{"type":"INSERT","lineNumber":317,"content":""},{"type":"DELETE","lineNumber":317,"oldContent":"            0f"},{"type":"DELETE","lineNumber":319,"oldContent":""},{"type":"DELETE","lineNumber":321,"oldContent":"        )"},{"type":"DELETE","lineNumber":323,"oldContent":"    }"},{"type":"DELETE","lineNumber":325,"oldContent":"    suspend fun takeoff(altitude: Float) {"},{"type":"INSERT","lineNumber":323,"content":"        )"},{"type":"INSERT","lineNumber":324,"content":"    }"},{"type":"INSERT","lineNumber":326,"content":"    suspend fun takeoff(altitude: Float) {"},{"type":"DELETE","lineNumber":341,"oldContent":""},{"type":"MODIFY","lineNumber":341,"content":"    }","oldContent":"}"},{"type":"INSERT","lineNumber":343,"content":"    "},{"type":"INSERT","lineNumber":344,"content":"}"},{"type":"INSERT","lineNumber":345,"content":""}]},{"timestamp":1757651569754,"changes":[{"type":"DELETE","lineNumber":226,"oldContent":"                .filterIsInstance<GpsRawInt>()"},{"type":"DELETE","lineNumber":227,"oldContent":"                .collect { gps ->"},{"type":"INSERT","lineNumber":226,"content":"                        15u -> \"AutoTune\""},{"type":"INSERT","lineNumber":227,"content":"                        16u -> \"Pos Hold\""},{"type":"MODIFY","lineNumber":253,"content":"                    val SENSOR_3D_GYRO = 1u","oldContent":"        }"},{"type":"MODIFY","lineNumber":258,"content":"                    _state.update { it.copy(voltage = vBatt, batteryPercent = pct , armable = armable) }","oldContent":"    "},{"type":"INSERT","lineNumber":269,"content":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"DELETE","lineNumber":271,"oldContent":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"MODIFY","lineNumber":274,"content":"    }","oldContent":"            0f,"},{"type":"INSERT","lineNumber":297,"content":"        }"},{"type":"DELETE","lineNumber":299,"oldContent":"        }"},{"type":"MODIFY","lineNumber":302,"content":"            sendCommand(","oldContent":"            com.example.kotlingcspractice.Telemetry.MavlinkTelemetryRepository.sendCommand("},{"type":"DELETE","lineNumber":306,"oldContent":""},{"type":"DELETE","lineNumber":308,"oldContent":"    suspend fun disarm() {"},{"type":"DELETE","lineNumber":311,"oldContent":"        sendCommand("},{"type":"INSERT","lineNumber":310,"content":""},{"type":"INSERT","lineNumber":311,"content":"    suspend fun disarm() {"},{"type":"INSERT","lineNumber":312,"content":"        sendCommand("},{"type":"MODIFY","lineNumber":315,"content":"        )","oldContent":"        )"},{"type":"MODIFY","lineNumber":318,"content":"    suspend fun changeMode(mode: MavMode) {","oldContent":"    suspend fun changeMode(mode: MavMode) {"},{"type":"INSERT","lineNumber":322,"content":"            0f"},{"type":"DELETE","lineNumber":324,"oldContent":"            0f"},{"type":"MODIFY","lineNumber":326,"content":"    suspend fun takeoff(altitude: Float) {","oldContent":"    suspend fun takeoff(altitude: Float) {"},{"type":"DELETE","lineNumber":339,"oldContent":""},{"type":"DELETE","lineNumber":340,"oldContent":"}"},{"type":"INSERT","lineNumber":339,"content":"    suspend fun land() {"},{"type":"INSERT","lineNumber":340,"content":"        com.example.kotlingcspractice.Telemetry.MavlinkTelemetryRepository.sendCommand(MavCmd.NAV_LAND)"},{"type":"INSERT","lineNumber":343,"content":"    "},{"type":"INSERT","lineNumber":345,"content":""}]},{"timestamp":1757651576076,"changes":[{"type":"MODIFY","lineNumber":224,"content":"                        13u -> \"Sport\"","oldContent":"                .filterIsInstance<GpsRawInt>()"},{"type":"MODIFY","lineNumber":240,"content":"                    }","oldContent":"                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"MODIFY","lineNumber":251,"content":"                    val vBatt = if (s.voltageBattery.toUInt() == 0xFFFFu) null else s.voltageBattery.toFloat() / 1000f","oldContent":"    "},{"type":"MODIFY","lineNumber":291,"content":"            connection.trySendUnsignedV2(","oldContent":"            com.example.kotlingcspractice.Telemetry.MavlinkTelemetryRepository.connection.trySendUnsignedV2("},{"type":"DELETE","lineNumber":308,"oldContent":""},{"type":"INSERT","lineNumber":309,"content":"    }"},{"type":"INSERT","lineNumber":310,"content":""},{"type":"DELETE","lineNumber":312,"oldContent":"    }"},{"type":"INSERT","lineNumber":314,"content":"            0f"},{"type":"DELETE","lineNumber":315,"oldContent":"        )"},{"type":"INSERT","lineNumber":317,"content":""},{"type":"DELETE","lineNumber":318,"oldContent":"    suspend fun changeMode(mode: MavMode) {"},{"type":"INSERT","lineNumber":325,"content":""},{"type":"DELETE","lineNumber":326,"oldContent":"    suspend fun takeoff(altitude: Float) {"},{"type":"INSERT","lineNumber":336,"content":"        )"},{"type":"INSERT","lineNumber":337,"content":"    }"},{"type":"DELETE","lineNumber":337,"oldContent":"}"},{"type":"DELETE","lineNumber":338,"oldContent":"    "},{"type":"MODIFY","lineNumber":341,"content":"    }","oldContent":""},{"type":"INSERT","lineNumber":343,"content":"    "},{"type":"INSERT","lineNumber":344,"content":"}"},{"type":"INSERT","lineNumber":345,"content":""}]},{"timestamp":1757651579895,"changes":[{"type":"MODIFY","lineNumber":209,"content":"                .map{frame -> frame.message}","oldContent":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"MODIFY","lineNumber":292,"content":"               gcsSystemId,","oldContent":"                com.example.kotlingcspractice.Telemetry.MavlinkTelemetryRepository.gcsSystemId,"},{"type":"MODIFY","lineNumber":309,"content":"    }","oldContent":"    }"},{"type":"DELETE","lineNumber":333,"oldContent":""},{"type":"DELETE","lineNumber":334,"oldContent":"}"},{"type":"DELETE","lineNumber":335,"oldContent":"    "},{"type":"INSERT","lineNumber":333,"content":"            0f,"},{"type":"INSERT","lineNumber":334,"content":"            0f,"},{"type":"INSERT","lineNumber":335,"content":"            altitude"},{"type":"MODIFY","lineNumber":338,"content":"","oldContent":""},{"type":"DELETE","lineNumber":342,"oldContent":"}"},{"type":"INSERT","lineNumber":343,"content":"    "},{"type":"INSERT","lineNumber":344,"content":"}"},{"type":"INSERT","lineNumber":345,"content":""}]}]}}}